// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//--------------------------------------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     CSharp-Minifier-Master Version:1.0.30319.32559
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------------------------------------------------------
using System;using System.ComponentModel;using System.Collections.ObjectModel;using System.Runtime.InteropServices;using System.Security.Cryptography;
using System.Diagnostics;using Microsoft.Protocols.TestTools;using Microsoft.Win32.SafeHandles;using System.Collections;using System.Collections.
Generic;using System.Globalization;using System.Linq;using System.Text;using System.IO;using System.Net;using System.Collections.Concurrent;using
System.Security.Cryptography.X509Certificates;namespace Microsoft.Protocols.TestSuites.Identity.ADFSPIP{public static class HttpMethod{public const
string GET="GET";public const string POST="POST";public const string HEAD="HEAD";public const string PUT="PUT";public const string DELETE="DELETE";
public const string TRACE="TRACE";public const string CONNECT="CONNECT";public const string OPTIONS="OPTIONS";};public static class HttpStatusCode{
public const int Continue=100;public const int SwitchingProtocols=101;public const int Processing=102;public const int OK=200;public const int Created
=201;public const int Accepted=202;public const int Non_AuthoritativeInformation=203;public const int NoContent=204;public const int ResetContent=205;
public const int PartialContent=206;public const int Multi_Status=207;public const int AlreadyReported=208;public const int IMUsed=226;public const
int MultipleChoices=300;public const int MovedPermanently=301;public const int Found=302;public const int SeeOther=303;public const int NotModified=
304;public const int UseProxy=305;public const int SwitchProxy=306;public const int TemporaryRedirect=307;public const int PermanentRedirect=308;
public const int BadRequest=400;public const int Unauthorized=401;public const int PaymentRequired=402;public const int Forbidden=403;public const int
NotFound=404;public const int MethodNotAllowed=405;public const int NotAcceptable=406;public const int ProxyAuthenticationRequired=407;public const
int RequestTimeout=408;public const int Conflict=409;public const int Gone=410;public const int LengthRequired=411;public const int PreconditionFailed
=412;public const int RequestEntityTooLarge=413;public const int Request_URITooLong=414;public const int UnsupportedMediaType=415;public const int
RequestedRangeNotSatisfiable=416;public const int ExpectationFailed=417;public const int AuthenticationTimeout=419;public const int MethodFailure=420;
public const int EnhanceYourCalm=420;public const int UnprocessableEntity=422;public const int Locked=423;public const int FailedDependency=424;public
const int UnorderedCollection=425;public const int UpgradeRequired=426;public const int PreconditionRequired=428;public const int TooManyRequests=429;
public const int RequestHeaderFieldsTooLarge=431;public const int LoginTimeout=440;public const int NoResponse=444;public const int RetryWith=449;
public const int BlockedbyWindowsParentalControls=450;public const int UnavailableForLegalReasons=451;public const int Redirect=451;public const int
RequestHeaderTooLarge=494;public const int CertError=495;public const int NoCert=496;public const int HTTPtoHTTPS=497;public const int
ClientClosedRequest=499;public const int InternalServerError=500;public const int NotImplemented=501;public const int BadGateway=502;public const int
ServiceUnavailable=503;public const int GatewayTimeout=504;public const int HTTPVersionNotSupported=505;public const int VariantAlsoNegotiates=506;
public const int InsufficientStorage=507;public const int LoopDetected=508;public const int BandwidthLimitExceeded=509;public const int NotExtended=
510;public const int NetworkAuthenticationRequired=511;public const int OriginError=520;public const int Connectiontimedout=522;public const int
ProxyDeclinedRequest=523;public const int Atimeoutoccurred=524;public const int Networkreadtimeouterror=598;public const int
Networkconnecttimeouterror=599;}public static class HttpStatusDescription{public const string Continue="100 Continue";public const string
SwitchingProtocols="101 Switching Protocols";public const string Processing="102 Processing";public const string OK="200 OK";public const string
Created="201 Created";public const string Accepted="202 Accepted";public const string Non_AuthoritativeInformation="203 Non-Authoritative Information"
;public const string NoContent="204 No Content";public const string ResetContent="205 Reset Content";public const string PartialContent=
"206 Partial Content";public const string Multi_Status="207 Multi-Status";public const string AlreadyReported="208 Already Reported";public const
string IMUsed="226 IM Used";public const string MultipleChoices="300 Multiple Choices";public const string MovedPermanently="301 Moved Permanently";
public const string Found="302 Found";public const string SeeOther="303 See Other";public const string NotModified="304 Not Modified";public const
string UseProxy="305 Use Proxy";public const string SwitchProxy="306 Switch Proxy";public const string TemporaryRedirect="307 Temporary Redirect";
public const string PermanentRedirect="308 Permanent Redirect";public const string BadRequest="400 Bad Request";public const string Unauthorized=
"401 Unauthorized";public const string PaymentRequired="402 Payment Required";public const string Forbidden="403 Forbidden";public const string
NotFound="404 Not Found";public const string MethodNotAllowed="405 Method Not Allowed";public const string NotAcceptable="406 Not Acceptable";public
const string ProxyAuthenticationRequired="407 Proxy Authentication Required";public const string RequestTimeout="408 Request Timeout";public const
string Conflict="409 Conflict";public const string Gone="410 Gone";public const string LengthRequired="411 Length Required";public const string
PreconditionFailed="412 Precondition Failed";public const string RequestEntityTooLarge="413 Request Entity Too Large";public const string
Request_URITooLong="414 Request-URI Too Long";public const string UnsupportedMediaType="415 Unsupported Media Type";public const string
RequestedRangeNotSatisfiable="416 Requested Range Not Satisfiable";public const string ExpectationFailed="417 Expectation Failed";public const string
AuthenticationTimeout="419 Authentication Timeout";public const string MethodFailure="420 Method Failure";public const string EnhanceYourCalm=
"420 Enhance Your Calm";public const string UnprocessableEntity="422 Unprocessable Entity";public const string Locked="423 Locked";public const string
FailedDependency="424 Failed Dependency";public const string UnorderedCollection="425 Unordered Collection";public const string UpgradeRequired=
"426 Upgrade Required";public const string PreconditionRequired="428 Precondition Required";public const string TooManyRequests=
"429 Too Many Requests";public const string RequestHeaderFieldsTooLarge="431 Request Header Fields Too Large";public const string LoginTimeout=
"440 Login Timeout";public const string NoResponse="444 No Response";public const string RetryWith="449 Retry With";public const string
BlockedbyWindowsParentalControls="450 Blocked by Windows Parental Controls";public const string UnavailableForLegalReasons=
"451 Unavailable For Legal Reasons";public const string Redirect="451 Redirect";public const string RequestHeaderTooLarge=
"494 Request Header Too Large";public const string CertError="495 Cert Error";public const string NoCert="496 No Cert";public const string HTTPtoHTTPS
="497 HTTP to HTTPS";public const string ClientClosedRequest="499 Client Closed Request";public const string InternalServerError=
"500 Internal Server Error";public const string NotImplemented="501 Not Implemented";public const string BadGateway="502 Bad Gateway";public const
string ServiceUnavailable="503 Service Unavailable";public const string GatewayTimeout="504 Gateway Timeout";public const string
HTTPVersionNotSupported="505 HTTP Version Not Supported";public const string VariantAlsoNegotiates="506 Variant Also Negotiates";public const string
InsufficientStorage="507 Insufficient Storage";public const string LoopDetected="508 Loop Detected";public const string BandwidthLimitExceeded=
"509 Bandwidth Limit Exceeded";public const string NotExtended="510 Not Extended";public const string NetworkAuthenticationRequired=
"511 Network AuthenticationRequired";public const string OriginError="520 Origin Error";public const string Connectiontimedout=
"522 Connection timed out";public const string ProxyDeclinedRequest="523 Proxy Declined Request";public const string Atimeoutoccurred=
"524 A timeout occurred";public const string Networkreadtimeouterror="598 Network read timeout error";public const string Networkconnecttimeouterror=
"599 Network connect timeout error";public static string GetStatusDescription(int statusCode){return(from field in typeof(HttpStatusDescription).
GetFields()select field.GetRawConstantValue().ToString()into value let number=statusCode.ToString(CultureInfo.InvariantCulture)where value.Contains(
number)select value.Remove(0,number.Length).TrimStart()).FirstOrDefault();}public static string GetStatusDescription(System.Net.HttpStatusCode
statusCode){return GetStatusDescription((int)statusCode);}}public static class CertificateHelper{public static X509Certificate2
CreateSelfSignedCertificate(string subjectName){const int keySize=2048;const int durationInMinutes=365*24*60;const string cryptoAlgorithmOid=
NativeMethods.OID_RSA_SHA256RSA;return CreateSelfSignedCertificate(subjectName,keySize,durationInMinutes,cryptoAlgorithmOid,null);}public static
X509Certificate2 CreateSelfSignedServerAuthCertificate(string subjectName){const int keySize=2048;const int durationInMinutes=365*24*60;const string
cryptoAlgorithmOid=NativeMethods.OID_RSA_SHA1RSA;var extensions=new X509ExtensionCollection{new X509KeyUsageExtension(X509KeyUsageFlags.
DigitalSignature|X509KeyUsageFlags.KeyEncipherment|X509KeyUsageFlags.DataEncipherment,false),new X509EnhancedKeyUsageExtension(new OidCollection{new
Oid(NativeMethods.szOID_PKIX_KP_SERVER_AUTH)},false)};return CreateSelfSignedCertificate(subjectName,keySize,durationInMinutes,cryptoAlgorithmOid,
extensions);}public static X509Certificate2 CreateSelfSignedClientAuthCertificate(string subjectName){const int keySize=2048;const int
durationInMinutes=365*24*60;const string cryptoAlgorithmOid=NativeMethods.OID_RSA_SHA1RSA;var extensions=new X509ExtensionCollection{new
X509KeyUsageExtension(X509KeyUsageFlags.DigitalSignature|X509KeyUsageFlags.KeyEncipherment|X509KeyUsageFlags.DataEncipherment,false),new
X509EnhancedKeyUsageExtension(new OidCollection{new Oid(NativeMethods.szOID_PKIX_KP_CLIENT_AUTH)},false)};return CreateSelfSignedCertificate(
subjectName,keySize,durationInMinutes,cryptoAlgorithmOid,extensions);}public static X509Certificate2 CreateSelfSignedCertificate(string subjectName,
int keySize,int durationInMinutes,string cryptoAlgorithmOid,X509ExtensionCollection extensions){if(!subjectName.ToLower().Contains("cn="))subjectName=
"CN="+subjectName;string keyContainerName=Guid.NewGuid().ToString();NativeMethods.CERT_NAME_BLOB subjectBlob=new NativeMethods.CERT_NAME_BLOB(0,null);
SafeGlobalMemoryHandle extensionsHandle=null;Collection<SafeGlobalMemoryHandle>extensionHandles=new Collection<SafeGlobalMemoryHandle>();try{uint
cbName=0;byte[]encodedName=null;if(!NativeMethods.CertStrToName(NativeMethods.X509_ASN_ENCODING,subjectName,NativeMethods.CERT_X500_NAME_STR,IntPtr.
Zero,null,ref cbName,IntPtr.Zero)&&cbName==0){int lastErr=Marshal.GetLastWin32Error();throw new Win32Exception(lastErr);}encodedName=new byte[cbName];
if(!NativeMethods.CertStrToName(NativeMethods.X509_ASN_ENCODING,subjectName,NativeMethods.CERT_X500_NAME_STR,IntPtr.Zero,encodedName,ref cbName,IntPtr
.Zero)){int lastErr=Marshal.GetLastWin32Error();throw new Win32Exception(lastErr);}CspParameters cp=new CspParameters(NativeMethods.PROV_RSA_FULL);cp.
KeyContainerName=keyContainerName;cp.KeyNumber=(int)KeyNumber.Exchange;cp.Flags=CspProviderFlags.UseMachineKeyStore;NativeMethods.CRYPT_KEY_PROV_INFO
pInfo;using(RSACryptoServiceProvider provider=new RSACryptoServiceProvider(keySize,cp)){subjectBlob.CopyData(encodedName);pInfo=new NativeMethods.
CRYPT_KEY_PROV_INFO();pInfo.pwszContainerName=provider.CspKeyContainerInfo.KeyContainerName;pInfo.dwProvType=NativeMethods.PROV_RSA_FULL;pInfo.dwFlags
=NativeMethods.CRYPT_MACHINE_KEYSET;pInfo.dwKeySpec=NativeMethods.AT_KEYEXCHANGE;}NativeMethods.CRYPT_ALGORITHM_IDENTIFIER cryptoAlgorithmIdentifier=
new NativeMethods.CRYPT_ALGORITHM_IDENTIFIER();cryptoAlgorithmIdentifier.pszObjId=cryptoAlgorithmOid;cryptoAlgorithmIdentifier.parameters.cbData=0;
cryptoAlgorithmIdentifier.parameters.pbData=IntPtr.Zero;NativeMethods.SYSTEM_TIME notBefore=new NativeMethods.SYSTEM_TIME(DateTime.UtcNow);
NativeMethods.SYSTEM_TIME notAfter=new NativeMethods.SYSTEM_TIME(DateTime.UtcNow.AddMinutes(durationInMinutes));NativeMethods.CERT_EXTENSIONS
certExtensions=new NativeMethods.CERT_EXTENSIONS();if(extensions!=null&&extensions.Count>0){extensionsHandle=new SafeGlobalMemoryHandle(Marshal.SizeOf
(typeof(NativeMethods.CERT_EXTENSION))*extensions.Count);certExtensions.cExtension=(uint)extensions.Count;certExtensions.rgExtension=extensionsHandle.
DangerousGetHandle();for(int i=0;i<extensions.Count;i++){X509Extension extension=extensions[i];int rawDataLength=extension.RawData.Length;int
extensionSize=Marshal.SizeOf(typeof(NativeMethods.CERT_EXTENSION));extensionHandles.Add(new SafeGlobalMemoryHandle(rawDataLength));NativeMethods.
CERT_EXTENSION certExtension=new NativeMethods.CERT_EXTENSION();certExtension.fCritical=extension.Critical;certExtension.pszObjId=extension.Oid.Value;
certExtension.Value.cbData=(uint)rawDataLength;certExtension.Value.pbData=extensionHandles[i].DangerousGetHandle();Marshal.Copy(extension.RawData,0,
certExtension.Value.pbData,rawDataLength);if(IntPtr.Size==8){Marshal.StructureToPtr(certExtension,(IntPtr)((long)certExtensions.rgExtension+
extensionSize*i),false);}else{Marshal.StructureToPtr(certExtension,(IntPtr)((int)certExtensions.rgExtension+extensionSize*i),false);}}}IntPtr
hCertCntxt=NativeMethods.CertCreateSelfSignCertificate(IntPtr.Zero,ref subjectBlob,0,ref pInfo,ref cryptoAlgorithmIdentifier,ref notBefore,ref
notAfter,ref certExtensions);if(hCertCntxt==IntPtr.Zero){int lastErr=Marshal.GetLastWin32Error();throw new Win32Exception(lastErr);}return new
X509Certificate2(hCertCntxt);}finally{if(extensionsHandle!=null){extensionsHandle.Close();}foreach(SafeGlobalMemoryHandle handle in extensionHandles){
handle.Close();}subjectBlob.Dispose();}}}internal partial class NativeMethods{public const uint AT_KEYEXCHANGE=1;public const uint CERT_X500_NAME_STR=
3;public const int ERROR_ALREADY_EXISTS=183;public const uint CRYPT_MACHINE_KEYSET=0x00000020;public const int PROV_RSA_FULL=0x00000001;public const
uint X509_ASN_ENCODING=0x00000001;public const string szOID_ENHANCED_KEY_USAGE="2.5.29.37";public const string szOID_PKIX_KP_SERVER_AUTH=
"1.3.6.1.5.5.7.3.1";public const string szOID_PKIX_KP_CLIENT_AUTH="1.3.6.1.5.5.7.3.2";public const string OID_RSA_SHA256RSA="1.2.840.113549.1.1.11";
public const string OID_RSA_SHA1RSA="1.2.840.113549.1.1.5";[StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]public struct CRYPTOAPI_BLOB{
public uint cbData;public IntPtr pbData;}[StructLayout(LayoutKind.Sequential,CharSet=CharSet.Unicode)]public struct CERT_EXTENSION{[MarshalAs(
UnmanagedType.LPStr)]public string pszObjId;public bool fCritical;public CRYPTOAPI_BLOB Value;}[StructLayout(LayoutKind.Sequential)]public struct
CERT_EXTENSIONS{public uint cExtension;public IntPtr rgExtension;}[StructLayout(LayoutKind.Sequential)]public struct CERT_NAME_BLOB:IDisposable{public
int _cbData;public SafeGlobalMemoryHandle _pbData;public CERT_NAME_BLOB(int cb,SafeGlobalMemoryHandle handle){_cbData=cb;_pbData=handle;}public void
CopyData(byte[]encodedName){_pbData=new SafeGlobalMemoryHandle(encodedName);_cbData=encodedName.Length;}public void Dispose(){if(_pbData!=null){
_pbData.Dispose();_pbData=null;}}}[StructLayout(LayoutKind.Sequential)]public struct CRYPT_OBJID_BLOB{public uint cbData;public IntPtr pbData;}[
StructLayout(LayoutKind.Sequential)]public struct CRYPT_ALGORITHM_IDENTIFIER{[MarshalAs(UnmanagedType.LPStr)]public String pszObjId;public
CRYPT_OBJID_BLOB parameters;}[StructLayout(LayoutKind.Sequential)]public struct CRYPT_KEY_PROV_INFO{[MarshalAs(UnmanagedType.LPWStr)]public String
pwszContainerName;[MarshalAs(UnmanagedType.LPWStr)]public String pwszProvName;public uint dwProvType;public uint dwFlags;public uint cProvParam;public
IntPtr rgProvParam;public uint dwKeySpec;}[StructLayout(LayoutKind.Sequential)]public struct SYSTEM_TIME{public UInt16 wYear;public UInt16 wMonth;
public UInt16 wDayOfWeek;public UInt16 wDay;public UInt16 wHour;public UInt16 wMinute;public UInt16 wSecond;public UInt16 wMilliseconds;public
SYSTEM_TIME(DateTime dt){this.wYear=(UInt16)dt.Year;this.wMonth=(UInt16)dt.Month;this.wDay=(UInt16)dt.Day;this.wDayOfWeek=(UInt16)dt.DayOfWeek;this.
wHour=(UInt16)dt.Hour;this.wMinute=(UInt16)dt.Minute;this.wSecond=(UInt16)dt.Second;this.wMilliseconds=(UInt16)dt.Millisecond;}}[DllImport(
"crypt32.dll",SetLastError=true)]public static extern IntPtr CertCreateSelfSignCertificate(IntPtr hProv,ref CERT_NAME_BLOB pSubjectIssuerBlob,uint
dwFlagsm,ref CRYPT_KEY_PROV_INFO pKeyProvInfo,ref CRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,ref SYSTEM_TIME pStartTime,ref SYSTEM_TIME pEndTime,
ref CERT_EXTENSIONS pExtensions);[DllImport("crypt32.dll",SetLastError=true,CharSet=CharSet.Unicode)]public static extern bool CertStrToName(uint
dwCertEncodingType,String pszX500,uint dwStrType,IntPtr pvReserved,[In, Out]byte[]pbEncoded,ref uint pcbEncoded,IntPtr other);}internal partial class
NativeMethods{internal static int ExecuteCommand(string command,out string output){var cmd=new Process{StartInfo={FileName="cmd.exe",Arguments=command
,UseShellExecute=false,RedirectStandardOutput=true}};cmd.Start();output=cmd.StandardOutput.ReadToEnd();return cmd.ExitCode;}internal static int
NetshHttpAddSslCert(string ip,uint port,string certHash,Guid appId,string certStoreName,bool clientCertNegotiation,out string output){var
bindCertificateCommand=string.Format(System.Globalization.CultureInfo.InvariantCulture,
"/C netsh http add sslcert ipport={0}:{1} certhash={2} appid={{{3}}} certstorename={4}",ip,port,certHash,appId,certStoreName);if(clientCertNegotiation
)bindCertificateCommand+=" clientcertnegotiation=enable";return ExecuteCommand(bindCertificateCommand,out output);}internal static int
NetshHttpDeleteSslCert(string ip,uint port,out string output){var unbindCertificateCommand=string.Format("/C netsh http delete sslcert ipport={0}:{1}"
,ip,port);return ExecuteCommand(unbindCertificateCommand,out output);}internal static int NetshHttpShowSslCert(out string output){return
ExecuteCommand("/C netsh http show sslcert",out output);}}internal class SafeGlobalMemoryHandle:SafeHandleZeroOrMinusOneIsInvalid{public
SafeGlobalMemoryHandle(byte[]data):base(true){handle=Marshal.AllocHGlobal(data.Length);Marshal.Copy(data,0,handle,data.Length);}public
SafeGlobalMemoryHandle(int length):base(true){handle=Marshal.AllocHGlobal(length);}protected override bool ReleaseHandle(){Marshal.FreeHGlobal(handle)
;return true;}}internal class Logging{public static void SetLoggingPath(string logPath){Trace.Listeners.Add(new TextWriterTraceListener(logPath));
Trace.WriteLine(Environment.NewLine);}public static void TraceError(string message){Trace.WriteLine(string.Format("HttpServer Error       : {0} ({1})"
,message,DateTime.Now));Trace.Flush();}public static void TraceInformation(string message){Trace.WriteLine(string.Format(
"HttpServer Information : {0} ({1})",message,DateTime.Now));Trace.Flush();}public static void TraceException(string message){Trace.WriteLine(string.
Format("HttpServer Exception  : {0} ({1})",message,DateTime.Now));Trace.Flush();}public static void TraceWarning(string message){Trace.WriteLine(
string.Format("HttpServer Warning    : {0} ({1})",message,DateTime.Now));Trace.Flush();}public static void WriteLine(string message){Trace.WriteLine(
message);Trace.Flush();}public static void WriteHttpMessage(string message){message.Split(new[]{Environment.NewLine},StringSplitOptions.
RemoveEmptyEntries).ToList().ForEach(line=>WriteLine(line.Trim()));}}public static class SSLHelper{public static void BindCertificateToSslTraffic(
string thumbprint,uint port,bool clientCertificateRequired){int exitcode;string output;UnbindCertificateFromSslPort(port);exitcode=NativeMethods.
NetshHttpAddSslCert(DefaultIp,port,thumbprint,AppId,DefaultStore,clientCertificateRequired,out output);if(exitcode!=0){throw new
InvalidOperationException(string.Format("Unable to bind the certificate to port {0}. {1}",port,output));}}public static void
BindCertificateToSslTraffic(X509Certificate2 certificate,uint port,bool clientCertificateRequired){var thumbprint=ImportCertificate(certificate);
BindCertificateToSslTraffic(thumbprint,port,clientCertificateRequired);}public static void UnbindCertificateFromSslPort(uint port){string output;int
exitcode;exitcode=NativeMethods.NetshHttpShowSslCert(out output);if(exitcode!=0){throw new InvalidOperationException(
"Unable to retrieve SSL certificate bindings. "+output);}if(output.Split(Environment.NewLine.ToCharArray(),StringSplitOptions.RemoveEmptyEntries).
Where(x=>x.Contains("IP:port")).Select(x=>x.Split(':').Last().Trim()).All(_=>port!=uint.Parse(_)))return;exitcode=NativeMethods.NetshHttpDeleteSslCert
(DefaultIp,port,out output);if(exitcode!=0){throw new InvalidOperationException(string.Format("Unable to unbind certificate from port {0}. {1}",port,
output));}}public static string ImportCertificate(X509Certificate2 certificate,StoreLocation storeLocation=StoreLocation.LocalMachine,StoreName
storeName=StoreName.My){var store=new X509Store(storeName,storeLocation);store.Open(OpenFlags.ReadWrite);if(!store.Certificates.Contains(certificate))
{store.Add(certificate);}store.Close();return certificate.Thumbprint;}internal static readonly Guid AppId=new Guid(
"5d89a20c-beab-4389-9447-324788eb944a");internal const string DefaultStore="MY";internal const string DefaultIp="0.0.0.0";}public interface
IHttpServerListener:System.IDisposable{void Start();void Stop();}public interface INotifyContextReceived{event ContextReceivedEventHandler
ContextReceived;}public class ContextReceivedEventArgs:System.EventArgs{public HttpServerListenerContext Context{get;private set;}public
ContextReceivedEventArgs(HttpServerListenerContext context){this.Context=context;}}public delegate void ContextReceivedEventHandler(object sender,
ContextReceivedEventArgs e);public interface IServerSendReceive{HttpRequestMessage ExpectRequest(System.TimeSpan timeout);void SendResponse(System.
Guid requestId,HttpResponseMessage response);}public interface ISSLSupportable{void BindCertificate(System.Security.Cryptography.X509Certificates.
X509Certificate2 serverCertificate);}public abstract class HttpMessageBase{protected Version _version;protected HttpHeaders _headers;protected
HttpContent _content;public Version Version{get{return _version??(_version=new Version(major:1,minor:1));}set{_version=value;}}public HttpHeaders
Headers{get{return _headers??(_headers=new HttpHeaders());}}public HttpContent Content{get{return _content??(_content=new HttpContent(Headers));}}
public sealed class HttpHeaders:IEnumerable<KeyValuePair<string,string>>{private readonly List<KeyValuePair<string,string>>_headers;internal
HttpHeaders(){_headers=new List<KeyValuePair<string,string>>();}public string this[string name]{get{return GetValue(name);}set{SetValue(name,value);}}
public void SetValue(string name,string value){if(string.IsNullOrEmpty(name))throw new ArgumentNullException();if(GetValues(name).Any())Remove(name);
if(value==null)value=string.Empty;AddValue(name,value);}public void AddValue(string name,string value){if(string.IsNullOrEmpty(name))throw new
ArgumentNullException();if(value==null)value=string.Empty;_headers.Add(new KeyValuePair<string,string>(name,value));}public string GetValue(string
name){if(string.IsNullOrEmpty(name))throw new ArgumentNullException();var value=_headers.Where(x=>x.Key.Equals(name,StringComparison.
InvariantCultureIgnoreCase)).Select(x=>x.Value).FirstOrDefault();return value??string.Empty;}public string[]GetValues(string name){if(string.
IsNullOrEmpty(name))throw new ArgumentNullException();return _headers.Where(x=>x.Key.Equals(name,StringComparison.InvariantCultureIgnoreCase)).Select(
x=>x.Value).ToArray();}public void Remove(string name){if(string.IsNullOrEmpty(name))throw new ArgumentNullException();_headers.Where(x=>x.Key.Equals(
name,StringComparison.InvariantCultureIgnoreCase)).ToList().ForEach(x=>_headers.Remove(x));}public IEnumerator<KeyValuePair<string,string>>
GetEnumerator(){return _headers.Select(entry=>new KeyValuePair<string,string>(entry.Key,entry.Value)).GetEnumerator();}IEnumerator IEnumerable.
GetEnumerator(){return GetEnumerator();}public override string ToString(){if(_headers.Count==0)return string.Empty;var sb=new StringBuilder();foreach(
var entry in _headers){sb.Append(entry.Key);sb.Append(":");sb.Append(entry.Value);sb.Append("\r\n");}return sb.ToString();}}public sealed class
HttpContent{private readonly HttpHeaders _headers;private readonly List<byte>_content;private Encoding _encoding;internal HttpContent(HttpHeaders
headers){_headers=headers;_content=new List<byte>();}public Encoding Encoding{get{return _encoding??(_encoding=new UTF8Encoding());}set{_encoding=
value;}}public long Length{get{return _content.Count;}}public bool HasContent{get{return Length>0;}}public void SetString(string content){if(string.
IsNullOrEmpty(content))_content.Clear();SetBytes(Encoding.GetBytes(content));}public void SetBytes(byte[]content){_content.Clear();if(content!=null)
_content.AddRange(content);UpdateHeaderContentLength();}public void AppendString(string content){if(string.IsNullOrEmpty(content))return;AppendBytes(
Encoding.GetBytes(content));}public void AppendBytes(byte[]content){if(content==null)return;_content.AddRange(content);UpdateHeaderContentLength();}
public void Clear(){_content.Clear();}public string GetString(){return Encoding.GetString(_content.ToArray());}public byte[]GetBytes(){return _content
.ToArray();}public override string ToString(){return GetString();}private void UpdateHeaderContentLength(){_headers.SetValue("Content-Length",Length.
ToString(CultureInfo.InvariantCulture));}}}public class HttpRequestMessage:HttpMessageBase{public Guid RequestId{get;set;}public string Method{get;set
;}public Uri RequestUri{get;set;}public virtual string AcceptEncoding{get{return Headers["Accept-Encoding"];}set{Headers["Accept-Encoding"]=value;}}
public virtual string AcceptLanguage{get{return Headers["Accept-Language"];}set{Headers["Accept-Language"]=value;}}public virtual string AcceptTypes{
get{return Headers["Accept"];}set{Headers["Accept"]=value;}}public virtual string Host{get{return Headers["Host"];}set{Headers["Host"]=value;}}public
virtual string UserAgent{get{return Headers["User-Agent"];}set{Headers["User-Agent"]=value;}}public string Authorization{get{return Headers[
"Authorization"];}set{Headers["Authorization"]=value;}}public CookieCollection Cookies{get;set;}public X509Certificate2 ClientCertificate{get;set;}
public override string ToString(){var builder=new StringBuilder();using(var writer=new StringWriter(builder)){writer.NewLine="\r\n";if(Method!=null&&
RequestUri!=null){writer.WriteLine("{0} {1} HTTP/{2}",Method,RequestUri.PathAndQuery,Version);}foreach(var entry in Headers){writer.WriteLine(
"{0}:{1}",entry.Key,entry.Value);}if(Content.Length>0){writer.WriteLine();writer.Write(Content.ToString());}}return builder.ToString();}}public class
HttpResponseMessage:HttpMessageBase{private int _statusCode;public int StatusCode{get{return _statusCode;}set{if(!(value>=100&&value<1000))throw new
ArgumentException("Invalid status code");_statusCode=value;ReasonPhrase=HttpStatusDescription.GetStatusDescription(value);}}public string ReasonPhrase
{get;set;}public virtual string ContentType{get{return Headers.GetValue("Content-Type");}set{Headers.SetValue("Content-Type",value);}}public virtual
string Server{get{return Headers.GetValue("Server");}set{Headers.SetValue("Server",value);}}public virtual string Location{get{return Headers.GetValue
("Location");}set{Headers.SetValue("Location",value);}}public virtual string CacheControl{get{return Headers.GetValue("Cache-Control");}set{Headers.
SetValue("Cache-Control",value);}}public virtual string Date{get{return Headers.GetValue("Date");}set{Headers.SetValue("Date",value);}}public string
WwwAuthenticate{get{return Headers.GetValue("WWW-Authenticate");}set{Headers.SetValue("WWW-Authenticate",value);}}public CookieCollection Cookies{get;
set;}public HttpResponseMessage(){}public HttpResponseMessage(int statusCode){StatusCode=statusCode;}public HttpResponseMessage(System.Net.
HttpStatusCode statusCode){StatusCode=(int)statusCode;}public override string ToString(){var builder=new StringBuilder();using(var writer=new
StringWriter(builder)){writer.NewLine="\r\n";if(StatusCode!=default(uint)&&ReasonPhrase!=null){writer.WriteLine("HTTP/{0} {1} {2}",Version,StatusCode,
ReasonPhrase);}foreach(var entry in Headers){writer.WriteLine("{0}:{1}",entry.Key,entry.Value);}if(Content.Length>0){writer.WriteLine();writer.Write(
Content.GetString());}}return builder.ToString();}}public class HttpServerListener:HttpServerListenerBase,IHttpServerListener,IServerSendReceive,
ISSLSupportable{private HttpServerListenerConfig _config;private ConcurrentQueue<HttpServerListenerContext>_contextQueue;private List<
HttpServerListenerContext>_pendingContext;private X509Certificate2 _serverCertificate;public HttpServerListener(HttpServerListenerConfig config):base(
new[]{config.ToUriPrefix()}){_config=config;if(!string.IsNullOrEmpty(_config.LogPath)){Logging.SetLoggingPath(_config.LogPath);}_contextQueue=new
ConcurrentQueue<HttpServerListenerContext>();_pendingContext=new List<HttpServerListenerContext>();}public override void Start(){if(IsListening)return
;base.Start();Logging.TraceInformation("Server started. ");Logging.TraceInformation("Server is listening on "+_config.ToUriPrefix());}public override
void Stop(){if(!IsListening)return;base.Stop();Logging.TraceInformation("Server stopped.");}public HttpRequestMessage ExpectRequest(TimeSpan timeout){
if(!IsListening)throw new InvalidOperationException("Server not started.");HttpRequestMessage request=null;var startTime=DateTime.Now;while(DateTime.
Now-startTime<timeout){if(_contextQueue.IsEmpty)continue;HttpServerListenerContext context;if(_contextQueue.TryDequeue(out context)){request=context.
GetRequest();_pendingContext.Add(context);Logging.TraceInformation("Received request from RemotEndPoint: "+context.RemotEndPoint);Logging.
WriteHttpMessage(request.ToString());break;}}return request;}public void SendResponse(Guid requestId,HttpResponseMessage response){if(!IsListening)
throw new InvalidOperationException("Server not started.");if(_pendingContext.Count==0)throw new InvalidOperationException(
"No received request to response to.");var index=_pendingContext.Where(context=>context.RequestId.Equals(requestId)).Select(context=>_pendingContext.
IndexOf(context)).Single();var target=_pendingContext[index];target.SetResponse(response);_pendingContext.RemoveAt(index);Logging.TraceInformation(
"Sent response to Request ID: "+requestId);Logging.WriteHttpMessage(response.ToString());}public void BindCertificate(X509Certificate2
serverCertificate){try{SSLHelper.BindCertificateToSslTraffic(serverCertificate,_config.Port,true);_serverCertificate=serverCertificate;Logging.
TraceInformation("Certificate "+_serverCertificate.SubjectName.Name+" has been binded to port "+_config.Port);}catch(Exception exception){Logging.
TraceException(exception.ToString());throw new InvalidOperationException(exception.Message);}}protected override void OnGetContext(HttpListenerContext
context){var wrappedContext=new HttpServerListenerContext(context);_contextQueue.Enqueue(wrappedContext);Logging.TraceInformation(
"New incoming context. Request ID: "+wrappedContext.RequestId);Logging.TraceInformation("Current queued request count: "+_contextQueue.Count);}
protected override void OnException(Exception exception){if(exception is HttpListenerException&&((HttpListenerException)exception).ErrorCode==6)return
;Logging.TraceException("Internal: "+exception.ToString());}}public abstract class HttpServerListenerBase:IDisposable{private AsyncCallback _callback;
private readonly HttpListener _listener;private const int DefaultContextPoolSize=50;protected HttpServerListenerBase(IEnumerable<string>prefixes){
_listener=new HttpListener();foreach(var prefix in prefixes){_listener.Prefixes.Add(prefix);}}protected abstract void OnGetContext(HttpListenerContext
context);protected abstract void OnException(Exception exception);public AuthenticationSchemes AuthenticateSchemas{get{return _listener.
AuthenticationSchemes;}set{_listener.AuthenticationSchemes=value;}}public string Realm{get{return _listener.Realm;}set{_listener.Realm=value;}}public
bool IsListening{get{return _listener.IsListening;}}public virtual void Start(){Start(DefaultContextPoolSize);}protected void Start(int
contextPoolSize){_listener.Start();_callback=new AsyncCallback(this.GetContextCallback);try{for(uint i=0;i<contextPoolSize;i++){_listener.
BeginGetContext(_callback,null);}}catch(Exception exception){OnException(exception);}}private void GetContextCallback(IAsyncResult result){
HttpListenerContext context;if(!IsListening)return;try{_listener.BeginGetContext(_callback,null);context=_listener.EndGetContext(result);OnGetContext(
context);}catch(Exception exception){OnException(exception);}}public virtual void Stop(){_listener.Stop();}public void Dispose(){Dispose(true);GC.
SuppressFinalize(this);}protected virtual void Dispose(bool disposing){if(disposing){Stop();_listener.Close();}}}public class HttpServerListenerConfig
{private bool _ssl;private uint _port;private string _path;private string _logPath;private string _hostname="+";public bool SSL{get{return _ssl;}set{
_ssl=value;}}public string Hostname{get{return _hostname;}set{_hostname=value;}}public uint Port{get{if(_port==default(uint)){_port=(uint)(SSL?443:80)
;}return _port;}set{_port=value;}}public string Path{get{return _path;}set{_path=value;}}public string LogPath{get{return _logPath;}set{_logPath=
System.IO.Path.GetFullPath(value);}}internal string ToUriPrefix(){var prefix=string.Empty;prefix+=SSL?"https://":"http://";prefix+=string.Format(
Hostname+":"+Port+"/");if(Path!=null)prefix+=_path+"/";return prefix;}}public class HttpServerListenerContext{private HttpListenerContext _context;
public Guid RequestId{get;private set;}public IPEndPoint RemotEndPoint{get;private set;}public IPEndPoint LocalEndPoint{get;private set;}internal
HttpServerListenerContext(HttpListenerContext context){_context=context;RequestId=context.Request.RequestTraceIdentifier;RemotEndPoint=context.Request
.RemoteEndPoint;LocalEndPoint=context.Request.LocalEndPoint;}public HttpRequestMessage GetRequest(){var request=_context.Request;var requestMessage=
new HttpRequestMessage();requestMessage.Method=request.HttpMethod;requestMessage.RequestUri=request.Url;requestMessage.RequestId=request.
RequestTraceIdentifier;requestMessage.Cookies=request.Cookies;requestMessage.ClientCertificate=request.GetClientCertificate();foreach(var key in
request.Headers.AllKeys){requestMessage.Headers.SetValue(key,request.Headers[key]);}if(request.HasEntityBody){string body;using(var input=new
StreamReader(request.InputStream,request.ContentEncoding)){body=input.ReadToEnd();}requestMessage.Content.Encoding=request.ContentEncoding;
requestMessage.Content.SetString(body);}return requestMessage;}public void SetResponse(HttpResponseMessage responseMessage){var response=_context.
Response;response.ProtocolVersion=responseMessage.Version;response.StatusCode=responseMessage.StatusCode;response.StatusDescription=responseMessage.
ReasonPhrase;response.Cookies=responseMessage.Cookies;foreach(var entry in responseMessage.Headers){if(entry.Key.Equals("Location",StringComparison.
InvariantCultureIgnoreCase)){response.RedirectLocation=entry.Value;continue;}if(entry.Key.Equals("Content-Type",StringComparison.
InvariantCultureIgnoreCase)){response.ContentType=entry.Value;continue;}if(entry.Key.Equals("Content-Length",StringComparison.
InvariantCultureIgnoreCase)){response.ContentLength64=Convert.ToInt64(entry.Value.ToLower());continue;}if(entry.Key.Equals("Connection",
StringComparison.InvariantCultureIgnoreCase)){response.KeepAlive=entry.Value.Equals("Keep-Alive",StringComparison.InvariantCultureIgnoreCase);continue
;}response.AddHeader(entry.Key,entry.Value);}if(responseMessage.Content.Length>0){response.ContentEncoding=responseMessage.Content.Encoding;byte[]
buffer=responseMessage.Content.GetBytes();using(var output=response.OutputStream){output.Write(buffer,0,buffer.Length);}}response.Close();}}public
class MSADFSPIPClientAdapter:ManagedAdapterBase,IMSADFSPIPClientAdapter{private HttpServerListener _server;private Queue<Guid>_requestIds;public
override void Initialize(ITestSite testSite){base.Initialize(testSite);_server=new HttpServerListener(new HttpServerListenerConfig{SSL=true,Port=443,
LogPath="ServerTrace.log"});_requestIds=new Queue<Guid>();_server.Start();}protected override void Dispose(bool disposing){base.Dispose(disposing);if(
disposing){_server.Dispose();}}public void BindCertificate(X509Certificate2 certificate){_server.BindCertificate(certificate);}public
HttpRequestMessage ExpectRequest(){const int serverTimeoutSeconds=30;return ExpectRequest(TimeSpan.FromSeconds(serverTimeoutSeconds));}public
HttpRequestMessage ExpectRequest(TimeSpan timeout){var request=_server.ExpectRequest(timeout);if(request==null)return null;_requestIds.Enqueue(request
.RequestId);return request;}public void SendResponse(HttpResponseMessage response){if(_requestIds.Count==0)throw new InvalidOperationException(
"No request to response to");_server.SendResponse(_requestIds.Dequeue(),response);}public Queue<Guid> PendingRequests{get{return _requestIds;}}}}