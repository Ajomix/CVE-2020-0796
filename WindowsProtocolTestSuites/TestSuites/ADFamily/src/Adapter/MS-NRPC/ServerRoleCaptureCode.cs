// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Text;

    using Microsoft.Protocols.TestTools;
    using Microsoft.Protocols.TestTools.StackSdk.Dtyp;
    using Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn;
    using Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc;
    using Microsoft.Protocols.TestTools.StackSdk;
    using System.Security.Principal;

    /// <summary>
    ///  Capture code for NRPC secure provider adapter.
    /// </summary>
    [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
    public partial class NrpcServerAdapter
    {
        /// <summary>
        ///  Verify NlAuthMessageToken Requirement.
        /// </summary>
        /// <param name="context"> NrpcCustomClientSecurityContext structure.</param>
        private void VerifyNlAuthMessageTokenRequirement(NrpcCustomClientSecurityContext context)
        {
            this.VerifyMessageTypeInNlAuthMessage(context.NlAuthMsgToken);
            this.VerifyNlAuthMessageToken(context.NlAuthMsgToken);
        }

        /// <summary>
        ///  Verify Signature Related Requirement.
        /// </summary>
        /// <param name="context"> NrpcCustomClientSecurityContext structure.</param>
        private void VerifySignatureRelatedRequirement(NrpcCustomClientSecurityContext context)
        {
            // Verify MS-NRPC requirement: MS-NRPC_R18.
            // This requirement is covered when a response message has been successfully
            // parsed out, this requirement can be covered directly.
            Site.CaptureRequirement(
                18,
                @"The server MUST use the RPC security provider extensions ([MS-RPCE] section 2.2.1.1.7).");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R748");

            // Verify MS-NRPC requirement: MS-NRPC_R748.
            Site.CaptureRequirementIfIsTrue(
                context.IsSignatureCorrect,
                748,
                @"[In Netlogon as a Security Support Provider] Netlogon registers with the RPC runtime as a security
                provider with the auth_type value (as specified in [MS-RPCE] section 2.2.2.11) of 0x44.");

            // Verify MS-NRPC requirement: MS-NRPC_R803.
            // The response message type has been parsed out by Stack clearly. According to the specified field of the
            // message, the current message type is Netlogon Signature Token,
            // so this requirement can be verified directly.
            Site.CaptureRequirementIfIsTrue(
                context.IsSignatureCorrect,
                803,
                @"[In The Netlogon Signature Token] The Netlogon Signature token contains information that MUST
                be part of each protected message.");

            // Verify MS-NRPC requirement: MS-NRPC_R804.
            // All the fields (signature algorithm identifier, encryption algorithm identifier, confounder, flags, 
            // sequence number, and checksum) have been parsed out by Stack. If anyone of them is not included in the
            // response message, Test case will throw exception in the Stack Parse method and make the case failed.
            // So this requirement can be verified directly.
            Site.CaptureRequirementIfIsTrue(
                context.IsSignatureCorrect,
                804,
                @"[In The Netlogon Signature Token] It [The Netlogon Signature token ] contains a signature 
                algorithm identifier, encryption algorithm identifier, confounder, flags, sequence number,
                and checksum (see section 2.2.1.3.2 for the exact format).");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R104871");

            // Verify MS-NRPC requirement: MS-NRPC_R104871.
            // The structure is generated by SDK when it parses this token.
            // SDK has checked this rule and set a property which is
            // named IsSignatureCorrect.
            Site.CaptureRequirementIfIsTrue(
                 context.IsSignatureCorrect,
                 104871,
                 @"[In Receiving an Initial Netlogon Signature Token, the following steps are performed to verify
                                the data  and to decrypt with AES if negotiated, otherwise RC4 if required:step 5]
                                An initialization vector constructed by concatenating twice the sequence number 
                                (thus getting 16 bytes of data) is used decrypt the SequenceNumber parameter, 
                                which is encrypted by using the following algorithm: 
                                Assume byte(n, l) returns byte n of the 32-bit number l.  
                                The n parameter is limited to 0..3. The least significant 
                                byte is 0, the most significant byte is 3.
                                SET CopySeqNumber[0] to byte(3, ClientSequenceNumber.LowPart)
                                SET CopySeqNumber[1] to byte(2, ClientSequenceNumber.LowPart)
                                SET CopySeqNumber[2] to byte(1, ClientSequenceNumber.LowPart)
                                SET CopySeqNumber[3] to byte(0, ClientSequenceNumber.LowPart)
                                SET CopySeqNumber[4] to byte(3, ClientSequenceNumber.HighPart)
                                SET CopySeqNumber[5] to byte(2, ClientSequenceNumber.HighPart)
                                SET CopySeqNumber[6] to byte(1, ClientSequenceNumber.HighPart)
                                SET CopySeqNumber[7] to byte(0, ClientSequenceNumber.HighPart)
                                Set CopySeqNumber[4] to CopySeqNumber[4] OR 0x80");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R851");

            // Verify MS-NRPC requirement: MS-NRPC_R851.
            // The structure is generated by SDK when it parses this token.
            // SDK has checked this rule and set a property which is
            // named IsSignatureCorrect.
            Site.CaptureRequirementIfIsTrue(
                context.IsSignatureCorrect,
                851,
                @"[In Receiving an Initial Netlogon Signature Token, The following steps are performed to verify 
                                the data  and to decrypt with AES if negotiated, otherwise RC4 if required:  step 6: ] 
                                A local copy of SequenceNumber MUST be computed using the following algorithm:
                                Assume byte(n, l) returns byte n of the 32-bit number l. The n 
                                parameter is limited to 0..3. The least significant byte is 0,
                                the most significant byte is 3.
                                SET CopySeqNumber[0] to byte(3, ServerSequenceNumber.LowPart)
                                SET CopySeqNumber[1] to byte(2, ServerSequenceNumber.LowPart)
                                SET CopySeqNumber[2] to byte(1, ServerSequenceNumber.LowPart)
                                SET CopySeqNumber[3] to byte(0, ServerSequenceNumber.LowPart)
                                SET CopySeqNumber[4] to byte(3, ServerSequenceNumber.HighPart)
                                SET CopySeqNumber[5] to byte(2, ServerSequenceNumber.HighPart)
                                SET CopySeqNumber[6] to byte(1, ServerSequenceNumber.HighPart)
                                SET CopySeqNumber[7] to byte(0, ServerSequenceNumber.HighPart)
                                Set CopySeqNumber[4] to CopySeqNumber[4] OR 0x80");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R300868");

            // Verify MS-NRPC requirement: MS-NRPC_R300868.
            // The structure is generated by SDK when it parses this token.
            // SDK has checked this rule and set a property which is
            // named IsSignatureCorrect.
            Site.CaptureRequirementIfIsTrue(
                context.IsSignatureCorrect,
                300868,
                @"[In Generating a Return Netlogon Signature Token,Except for steps 5 and 6, the same steps as 
                described in section 3.3.4.2.1 are performed to generate these Netlogon Signature tokens and to 
                encrypt the data if requested: in step 5]The SequenceNumber MUST be computed using the following 
                algorithm:
                Assume byte(n, l) returns byte n of the 32-bit number l.
                The n parameter is limited to 0..3. The least significant
                byte is 0, the most significant byte is 3.
                SET CopySeqNumber[0] to byte(3, ServerSequenceNumber.LowPart)
                SET CopySeqNumber[1] to byte(2, ServerSequenceNumber.LowPart)
                SET CopySeqNumber[2] to byte(1, ServerSequenceNumber.LowPart)
                SET CopySeqNumber[3] to byte(0, ServerSequenceNumber.LowPart)
                SET CopySeqNumber[4] to byte(3, ServerSequenceNumber.HighPart)
                SET CopySeqNumber[5] to byte(2, ServerSequenceNumber.HighPart)
                SET CopySeqNumber[6] to byte(1, ServerSequenceNumber.HighPart)
                SET CopySeqNumber[7] to byte(0, ServerSequenceNumber.HighPart)");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R300869");

            // Verify MS-NRPC requirement: MS-NRPC_R300869.
            // The structure is generated by SDK when it parses this token.
            // SDK has checked ServerSequenceNumber and set a property which is
            // named IsSignatureCorrect.
            Site.CaptureRequirementIfIsTrue(
                context.IsSignatureCorrect,
                300869,
                @"[In Generating a Return Netlogon Signature Token,Except for steps 5 and 6, the same steps as 
                described in section 3.3.4.2.1 are performed to generate these Netlogon Signature tokens and 
                to encrypt the data if requested: in step 6]The ServerSequenceNumber MUST be incremented by one.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R300870");

            // Verify MS-NRPC requirement: MS-NRPC_R300870.
            Site.CaptureRequirementIfIsTrue(
                context.IsSignatureCorrect,
                300870,
                @"[In Generating a Return Netlogon Signature Token,Except for steps 5 and 6, the same steps as 
                described in section 3.3.4.2.1 are performed to generate these Netlogon Signature tokens and 
                to encrypt the data if requested: in step 6]The Netlogon Signature token MUST then be sent 
                to the client along with the data.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R854");

            // Verify MS-NRPC requirement: MS-NRPC_R854.
            // The structure is generated by SDK when it parses this token.
            // SDK has checked this rule and set a property which is
            // named IsSignatureCorrect.
            Site.CaptureRequirementIfIsTrue(
                context.IsSignatureCorrect,
                854,
                @"[In Receiving an Initial Netlogon Signature Token, The following steps are performed to verify
                            the data and to decrypt with AES if negotiated, otherwise RC4 if required: step 8: ] 
                            ServerSequenceNumber MUST be incremented.");

            // 0x01000000: Supports AES encryption and SHA2 hashing.
            // If: AES support is negotiated between the client and the server
            // Else: AES support is not negotiated, using RC4 algorithm.
            if ((context.Context.NegotiateFlags & NrpcNegotiateFlags.SupportsAESAndSHA2) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104873");

                // Verify MS-NRPC requirement: MS-NRPC_R104873.
                // The structure is generated by SDK when it parses this token.
                // SDK has checked this rule and set a property which is
                // named IsSignatureCorrect.
                Site.CaptureRequirementIfIsTrue(
                    context.IsSignatureCorrect,
                    104873,
                    @"[In Receiving an Initial Netlogon Signature Token, The following steps are performed to verify 
                                the data and to decrypt with AES if negotiated, otherwise RC4 if required: in step 9: ]
                                If AES is negotiated,an initialization vector constructed by concatenating twice the 
                                sequence number (thus getting 16 bytes of data) is used to decrypt the Confounder and 
                                the data, which is encrypted by using use the AES128 algorithm using an initialization 
                                vectorconstructed by concatenating twice the sequence number 
                                (thus getting 16 bytes of data).");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R300863");

                // Verify MS-NRPC requirement: MS-NRPC_R300863.
                // The structure is generated by SDK when it parses this token.
                // When AES is negotiated, SDK has checked the HMAC-MD5 checksum, sequence number, Confounder and
                // set a property which is named IsSignatureCorrect.
                Site.CaptureRequirementIfIsTrue(
                    context.IsSignatureCorrect,
                    300863,
                    @"[In Generating a Return Netlogon Signature Token]If AES is negotiated, a server generates an 
                    NL_AUTH_SHA2_SIGNATURE token that contains an HMAC-SHA256 checksum [RFC4634], a sequence number, 
                    and a Confounder (if confidentiality has been requested) to send data protected on the wire.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R300864");

                // Verify MS-NRPC requirement: MS-NRPC_R300864.
                // The structure is generated by SDK when it parses this token.
                // When AES is negotiated, SDK has checked the HMAC-MD5 checksum, sequence number, Confounder and
                // set a property which is named IsSignatureCorrect.
                Site.CaptureRequirementIfIsTrue(
                    context.IsSignatureCorrect,
                    300864,
                    @"[In Generating a Return Netlogon Signature Token, if AES is negotiated, a server generates 
                    an NL_AUTH_SHA2_SIGNATURE token that contains an HMAC-SHA256 checksum [RFC4634], a sequence number, 
                    and a Confounder (if confidentiality has been requested) to send data protected on the wire.]The 
                    data is encrypted using the AES algorithm.");
            }
            else
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R858");

                // Verify MS-NRPC requirement: MS-NRPC_R858.
                // The structure is generated by SDK when it parses this token.
                // SDK has checked this rule and set a property which is
                // named IsSignatureCorrect.
                Site.CaptureRequirementIfIsTrue(
                    context.IsSignatureCorrect,
                    858,
                    @"[In Receiving an Initial Netlogon Signature Token, The following steps are performed to verify 
                                the data and to decrypt with AES if negotiated, otherwise RC4 if required: in step 9:]
                                The RC4 key used MUST be derived using the following algorithm:
                                SET zeroes to 4 bytes of 0
                                FOR (I=0; I < Key Length; I++)
                                     XorKey [I] = SessionKey[I] XOR 0xf0
                                CALL hmac_md5(zeroes, [4 bytes], XorKey, size of XorKey, TmpData)
                                CALL hmac_md5(CopySeqNumber, size of CopySeqNumber, TmpData, 
                                              size of TmpData, EncryptionKey)");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R300866");

                // Verify MS-NRPC requirement: MS-NRPC_R300866.
                // The structure is generated by SDK when it parses this token.
                // When AES is not negotiated, SDK has checked the HMAC-MD5 checksum, sequence number, Confounder and
                // set a property which is named IsSignatureCorrect.
                Site.CaptureRequirementIfIsTrue(
                    context.IsSignatureCorrect,
                    300866,
                    @"[In Generating a Return Netlogon Signature Token]If AES is not negotiated, a client 
                    generates a Netlogon Signature token that contains an HMAC-MD5 checksum ([RFC2104]), a 
                    sequence number, and a Confounder (if confidentiality has been requested) to send data 
                    protected on the wire.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R300867");

                // Verify MS-NRPC requirement: MS-NRPC_R300867.
                // The structure is generated by stack when it parses this token.
                // When AES is negotiated, SDK has checked the Confounder field by using negotiated encryption algorithm
                // and set a property which is named IsSignatureCorrect.
                Site.CaptureRequirementIfIsTrue(
                    context.IsSignatureCorrect,
                    300867,
                    @"[In Generating a Return Netlogon Signature Token, if AES is not negotiated, a client generates a 
                    Netlogon Signature token that contains an HMAC-MD5 checksum ([RFC2104]), a sequence number, and a
                    Confounder (if confidentiality has been requested) to send data protected on the wire.]The data is 
                    encrypted using the negotiated encryption algorithm.");
            }

            // 0x01000000: Supports AES encryption and SHA2 hashing.
            // If: AES support is negotiated between the client and the server.
            // Else: AES support is not negotiated, using MD5 algorithm.
            if ((context.Context.NegotiateFlags & NrpcNegotiateFlags.SupportsAESAndSHA2) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R860");

                // Verify MS-NRPC requirement: MS-NRPC_R860.
                // The structure is generated by SDK when it parses this token.
                // SDK has checked this rule and set a property which is
                // named IsSignatureCorrect.
                Site.CaptureRequirementIfIsTrue(
                    context.IsSignatureCorrect,
                    860,
                    @"[In Receiving an Initial Netlogon Signature Token, The following steps are performed to
                                verify the data and to decrypt with AES if negotiated, 
                                otherwise RC4 if required: in step 10:]
                                If AES is negotiated, then a signature MUST be computed using the following algorithm:
                                CALL SHA256Reset(&HashContext, Sk, sizeof(Sk));
                                CALL SHA256Input(HashContext, NL_AUTH_SHA2_SIGNATURE, [8 bytes]);
                                IF Confidentiality requested
                                CALL SHA256Input(HashContext, Confounder, [8 bytes]);
                                CALL SHA256FinalBits(HashContext, Message, size of Message;
                                CALL SHA256Result(HashContext, output);
                                SET Signature to output
                                Note: In the first call to SHA256Input only the first 8-bytes 
                                of the NL_AUTH_SHA2_SIGNATURE structure are used.");
            }
            else
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R861");

                // Verify MS-NRPC requirement: MS-NRPC_R861.
                // The structure is generated by SDK when it parses this token.
                // SDK has checked this rule and set a property which is
                // named IsSignatureCorrect.
                Site.CaptureRequirementIfIsTrue(
                    context.IsSignatureCorrect,
                    861,
                    @"[In Receiving an Initial Netlogon Signature Token, The following steps are performed to 
                    verify the data and to decrypt with AES if negotiated, otherwise RC4 if required: in step 10:]
                    Else [If AES is not negotiated, ] a signature MUST be computed using the following algorithm:
                                        SET zeroes to 4 bytes of 0
                                        CALL MD5Init(md5context)
                                        CALL MD5Update(md5context, zeroes, [4 bytes])
                                        CALL MD5Update(md5context, NL_AUTH_SIGNATURE, [8 bytes])
                                        IF Confidentiality requested
                                        CALL MD5Update(md5context, Confounder, [8 bytes])
                                        CALL MD5Update(md5context, Message, size of Message)
                                        CALL MD5Final(md5context)
                                        CALL HMAC_MD5(md5context.digest, md5context.digest length, 
                                                     Session Key, size of Session Key, output)
                                        SET Signature to output
                                        Note: In the second call to MD5Update only the first 8-bytes 
                                        of the NL_AUTH_SIGNATURE structure are used.");
            }

            if (0 != (context.Context.NegotiateFlags & NrpcNegotiateFlags.SupportsAESAndSHA2))
            {
                this.VerifyNlAuthSha2Signature(context.NlAuthSha2Sign);
            }
            else if (0 != (context.Context.NegotiateFlags & NrpcNegotiateFlags.SupportsRC4))
            {
                this.VerifyNlAuthSignature(context.NlAuthSign, context.Confidentiality);
            }
        }

        #region NL_AUTH_MESSAGE (Section 2.2.1.3.1)

        /// <summary>
        ///  Verify MessageType member in NL_AUTH_MESSAGE structure.
        /// </summary>
        /// <param name="netlogonAuthMessage"> NL_AUTH_SIGNATURE structure.</param>
        private void VerifyMessageTypeInNlAuthMessage(NL_AUTH_MESSAGE netlogonAuthMessage)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R142,
                MessageType: {0}",
                netlogonAuthMessage.MessageType);

            bool isVerifyR142 = (netlogonAuthMessage.MessageType == MessageType_Values.NegotiateRequest)
                || (netlogonAuthMessage.MessageType == MessageType_Values.NegotiateResponse);

            // Verify MS-NRPC requirement: MS-NRPC_R142.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR142,
                142,
                @"[In NL_AUTH_MESSAGE structure]MessageType MUST be one, and only one, of the following
                [0x00000000,0x00000001].");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R154,
                Flags: {0}",
                netlogonAuthMessage.Flags);

            // Verify MS-NRPC requirement: MS-NRPC_R154
            // 0xFFE0 is the value when A-E bits all not set.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)netlogonAuthMessage.Flags & 0xFFE0,
                154,
                @"[In NL_AUTH_MESSAGE structure]Flags (4 bytes):All other bits[except A-E bits] MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R148,
                Flags: {0}",
                netlogonAuthMessage.Flags);

            // Verify MS-NRPC requirement: MS-NRPC_R148
            // The value is constructed with one or more bit flags from A-E, means the other bits are unuse,
            // so it can be verified as same as R154.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)netlogonAuthMessage.Flags & 0xFFE0,
                148,
                @"[In NL_AUTH_MESSAGE structure]Flags (4 bytes):The value is constructed from one or more bit flags
                from the following table[the set of A-E bit].");
        }

        #endregion

        #region The NL_AUTH_MESSAGE Token (Section 3.3.4.1)

        /// <summary>
        ///  Verify requirements related to the NL_AUTH_MESSAGE Token.
        /// </summary>
        /// <param name="returnedToken"> The NL_AUTH_MESSAGE Token returned by the server.</param>
        private void VerifyNlAuthMessageToken(NL_AUTH_MESSAGE returnedToken)
        {
            // Verify MS-NRPC requirement: MS-NRPC_R776
            // The structure pointed by 'returnedToken' is generated based on the IDL from the the TD.
            // And if the method using this field as parameter returns success, it indicates that
            // this field of the type defined in the the TD.
            Site.CaptureRequirement(
                776,
                @"[In The NL_AUTH_MESSAGE Token] It contains a message type, flags, and naming information.");

            // Verify MS-NRPC requirement: MS-NRPC_R778
            // Stack parses this token from RPC PDU AUTH trailer, if it's parsed
            // successfully, R778 is verified.
            Site.CaptureRequirement(
                778,
                @"[In The NL_AUTH_MESSAGE Token] The NL_AUTH_MESSAGE token is part of the RPC PDU AUTH trailer
                structure as specified in section 2.2.2.11 of [MS-RPCE].");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R780");

            // Verify MS-NRPC requirement: MS-NRPC_R780
            // The MessageType equals 1(NegotiateResponse) means the returned token has been filled
            // with valid values by the server.
            // According to the TD, the MessageType field in returned token is 1 indicate that
            // this is a Negotiate response message type.
            Site.CaptureRequirementIfAreEqual<MessageType_Values>(
                MessageType_Values.NegotiateResponse,
                returnedToken.MessageType,
                780,
                @"[In The NL_AUTH_MESSAGE Token] The server receives the token, processes it, and passes back
                a return token to the client.");

            // Verify MS-NRPC requirement: MS-NRPC_R798
            // Verify R798 by checking the received NL_AUTH_MESSAGE token,
            // if it's received successfully, R798 is verified.
            Site.CaptureRequirement(
                798,
                @"[In Generating a Return NL_AUTH_MESSAGE Token] The server generates a return NL_AUTH_MESSAGE token.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R898");

            // Verify MS-NRPC requirement: MS-NRPC_R898.
            Site.CaptureRequirementIfAreEqual<MessageType_Values>(
                MessageType_Values.NegotiateResponse,
                returnedToken.MessageType,
                898,
                @"[In Generating a Return NL_AUTH_MESSAGE Token] The MessageType MUST be set to 1 to indicate 
                that this is a Negotiate response message type.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R899");

            // Verify MS-NRPC requirement: MS-NRPC_R899.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)returnedToken.Flags,
                899,
                @"[In Generating a Return NL_AUTH_MESSAGE Token] the Flags field MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R10901");

            // Verify MS-NRPC requirement: MS-NRPC_R10901
            // Since SDK has parsed the NL_AUTH_MESSAGE correctly,  
            // NL_AUTH_MESSAGE token is satisfied the condition(12 bytes in length).
            Site.CaptureRequirement(
                10901,
                @"[In Generating a Return NL_AUTH_MESSAGE Token] the NL_AUTH_MESSAGE token MUST be padded 
                to 12 bytes in length.");

            if (returnedToken.MessageType == MessageType_Values.NegotiateResponse)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R162");

                // Verify MS-NRPC requirement: MS-NRPC_R162
                // 0x0 is the value of null characher.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0x0,
                    (uint)returnedToken.Buffer[0],
                    162,
                    @"[In NL_AUTH_MESSAGE structure]Buffer (variable):For negotiate response messages, the buffer 
                contains a NULL character.");

                // Verify MS-NRPC_R156
                // NL_AUTH_MESSAGE structure consists of three fields: MessageType, Flags and Buffer.
                // In response message, MessageType must be MessageType_Values.NegotiateResponse,
                // Flags must be 0, and Buffer must be NULL.
                // Hence the response NL_AUTH_MESSAGE structure is always the same 
                // even if the Flags values in two requests are different.
                // This requirement can be captured directly.
                Site.CaptureRequirement(
                    156,
                    @"[In NL_AUTH_MESSAGE structure]Reply is the same whatever the value in all other bits in 
                    Flags field is set.");

                // Verify requirement : MS-NRPC_R900, MS-NRPC_R10900.
                string isR900Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R900Implementation"];
                if (PDCIsWindows)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R10900");

                    // Verify MS-NRPC requirement:  MS-NRPC_R10900
                    // 0x0 is the value of null characher.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        0x0,
                        (uint)returnedToken.Buffer[0],
                        10900,
                        @"[In Generating a Return NL_AUTH_MESSAGE Token] In Windows, the Buffer field contains a 
                        NULL character.");

                    if (null == isR900Implemented)
                    {
                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R900Implementation", bool.TrueString);
                        isR900Implemented = bool.TrueString;
                    }
                }

                if (null != isR900Implemented)
                {
                    bool implement = bool.Parse(isR900Implemented);
                    bool isSatisfied = returnedToken.Buffer[0].Equals(0x0);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R900, returnedToken.Buffer: {0}",
                        returnedToken.Buffer[0]);

                    // Verify MS-NRPC requirement:  MS-NRPC_R900.
                    Site.CaptureRequirementIfAreEqual<bool>(
                        implement,
                        isSatisfied,
                        900,
                        string.Format(CultureInfo.InvariantCulture, 
                        @"[In Generating a Return NL_AUTH_MESSAGE Token] 
                        the Buffer field SHOULD contain a NULL character.
                        This requirement is {0} implemented.",
                        implement ? string.Empty : "not"));
                }
            }
        }

        #endregion

        #region NL_AUTH_SIGNATURE (Section 2.2.1.3.2)

        /// <summary>
        ///  Verify members in NL_AUTH_SIGNATURE structure.
        /// </summary>
        /// <param name="authSignature"> The NL_AUTH_SIGNATURE structure value.</param>
        /// <param name="isConfidentialityRequested"> Indicate whether the structure is for signing or not.</param>
        private void VerifyNlAuthSignature(
            NL_AUTH_SIGNATURE authSignature,
            bool isConfidentialityRequested)
        {
            // Verify MS-NRPC requirement: MS-NRPC_R164
            // The NL_AUTH_SIGNATURE structure is generated following the security trailer in stack,
            // so this requirement can be verified directly.
            Site.CaptureRequirement(
                164,
                @"[In NL_AUTH_SIGNATURE structure]It[this structure] follows the security trailer that a security
                provider MUST associate with a signed or encrypted message.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R175");

            // Verify MS-NRPC requirement: MS-NRPC_R175.
            Site.CaptureRequirementIfAreEqual<SignatureAlgorithm_Values>(
                SignatureAlgorithm_Values.HMACMD5,
                authSignature.SignatureAlgorithm,
                175,
                @"[In NL_AUTH_SIGNATURE structure]The SignatureAlgorithm field MUST contain the following
                value[0x0077].");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R179,
                SealAlgorithm: {0}",
                authSignature.SealAlgorithm);

            bool isVerifyR179 = (authSignature.SealAlgorithm == SealAlgorithm_Values.RC4)
                || (authSignature.SealAlgorithm == SealAlgorithm_Values.NotEncrypted);

            // Verify MS-NRPC requirement: MS-NRPC_R179.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR179,
                179,
                @"[In NL_AUTH_SIGNATURE structure]The SealAlgorithm field MUST contain one of the following values
                [0xFFFF,0x007A].");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R183,
                Pad: {0}",
                authSignature.Pad);

            // Verify MS-NRPC requirement: MS-NRPC_R183.
            Site.CaptureRequirementIfAreEqual<Pad_Values>(
                Pad_Values.V1,
                authSignature.Pad,
                183,
                @"[In NL_AUTH_SIGNATURE structure]Pad (2 bytes): Both bytes MUST be set to 0xFF.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R186,
                Flags: {0}{1}",
                authSignature.Flags[0],
                authSignature.Flags[1]);

            // Verify MS-NRPC requirement: MS-NRPC_R186.
            Site.CaptureRequirementIfIsTrue(
                (authSignature.Flags[0] == 0) && (authSignature.Flags[1] == 0),
                186,
                @"[In NL_AUTH_SIGNATURE structure]Flags (2 bytes): Both bytes MUST be set to zero.");

            if (!isConfidentialityRequested)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R193");

                // Verify MS-NRPC requirement: MS-NRPC_R193
                // "The confounder is not included" means its value is null.
                Site.CaptureRequirementIfIsNull(
                    authSignature.Confounder,
                    193,
                    @"[In NL_AUTH_SIGNATURE structure]Confounder (8 bytes):If the structure is used only for signing,
                    the confounder is not included.");
            }
        }

        #endregion

        #region NL_AUTH_SHA2_SIGNATURE (Section 2.2.1.3.3)

        /// <summary>
        ///  Verify NlAuthSha2Signature structure.
        /// </summary>
        /// <param name="authSha2Signature"> The NL_AUTH_SHA2_SIGNATURE structure value.</param>
        private void VerifyNlAuthSha2Signature(NL_AUTH_SHA2_SIGNATURE authSha2Signature)
        {
            // Verify MS-NRPC requirement: MS-NRPC_R196
            // The NL_AUTH_SIGNATURE structure is generated following the security trailer in stack,
            // so this requirement can be verified directly.
            Site.CaptureRequirement(
                196,
                @"[In NL_AUTH_SHA2_SIGNATURE structure]It[this structure] follows the security trailer that a security
                provider MUST associate with a signed or encrypted message.");

            // Add debug information.
            Site.Log.Add(LogEntryKind.Debug, "Verify MS-NRPC_R104870");

            // When a NL_AUTH_SIGNATURE token is received, 
            // it indicates that the server has decrypted the SequenceNumber correctly. 
            Site.CaptureRequirement(
                104870,
                @"[In Receiving an Initial Netlogon Signature Token,the following steps are performed to verify the 
                data  and to decrypt with AES if negotiated, otherwise RC4 if required:step 5]Server MUST return 
                success signal, when decrypting SequenceNumber parameter using an initialization vector constructed 
                by concatenating twice the sequence number (thus getting 16 bytes of data) correctly.");

            // Add debug information.
            Site.Log.Add(LogEntryKind.Debug, "Verify MS-NRPC_R104872");

            // Only AES is negotiated, a NL_AUTH_SHA2_SIGNATURE token can be received from server.
            // When a NL_AUTH_SHA2_SIGNATURE token is received, 
            // it indicates that the server has decrypted the SequenceNumber correctly. 
            Site.CaptureRequirement(
                104872,
                @"[In Receiving an Initial Netlogon Signature Token,  The following steps are performed to verify 
                the data  and to decrypt with AES if negotiated, otherwise RC4 if required:  in step 9: ]  If AES is 
                negotiated, server MUST return success signal, when decrypting Confounder and the data using an 
                initialization vector constructed by concatenating twice the sequence number (thus getting 16 bytes 
                of data) correctly.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R202");

            // Verify MS-NRPC requirement: MS-NRPC_R202.
            Site.CaptureRequirementIfAreEqual<NL_AUTH_SHA2_SIGNATURE_SignatureAlgorithm_Values>(
                NL_AUTH_SHA2_SIGNATURE_SignatureAlgorithm_Values.HMACSHA256,
                authSha2Signature.SignatureAlgorithm,
                202,
                @"[In NL_AUTH_SHA2_SIGNATURE structure]The SignatureAlgorithm field MUST contain the following
                value[0x0013].");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R206,
                SealAlgorithm: {0}",
                authSha2Signature.SealAlgorithm);

            bool isVerifyR206 = (authSha2Signature.SealAlgorithm == NL_AUTH_SHA2_SIGNATURE_SealAlgorithm_Values.AES128)
                || (authSha2Signature.SealAlgorithm == NL_AUTH_SHA2_SIGNATURE_SealAlgorithm_Values.NotEncrypted);

            // Verify MS-NRPC requirement: MS-NRPC_R206.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR206,
                206,
                @"[In NL_AUTH_SHA2_SIGNATURE structure]The SealAlgorithm field MUST contain one of the following values
                [0xFFFF,0x001A].");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R210");

            // Verify MS-NRPC requirement: MS-NRPC_R210.
            Site.CaptureRequirementIfAreEqual<NL_AUTH_SHA2_SIGNATURE_Pad_Values>(
                NL_AUTH_SHA2_SIGNATURE_Pad_Values.V1,
                authSha2Signature.Pad,
                210,
                @"[In NL_AUTH_SHA2_SIGNATURE structure]Pad (2 bytes): Both bytes MUST be set to 0xFF.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R213");

            // Verify MS-NRPC requirement: MS-NRPC_R213.
            Site.CaptureRequirementIfAreEqual<Flags_Values>(
                Flags_Values.V1,
                authSha2Signature.Flags,
                213,
                @"[In NL_AUTH_SHA2_SIGNATURE structure]Flags (2 bytes): Both bytes MUST be set to zero.");
        }

        #endregion

        #region Verify transport requirements

        /// <summary>
        ///  Verify transport requirements
        ///  This method verifies the requirements based on the lower-layer-protocol or stack,
        ///  so there's no parameter for this method.
        /// </summary>
        /// <param name="interfaceId">Interface Id.</param>
        private void VerifyTransportRelatedRequirements(string interfaceId)
        {
            // Verify MS-NRPC requirement: MS-NRPC_R8
            // A TCP connection has been established when this test case begins, so that the requirement
            // can be verified directly.
            Site.CaptureRequirement(
                8,
                @"The Netlogon Remote Protocol uses the following RPC protocol sequences as specified in [MS-RPCE]
                section 2.1: RPC over TCP/IP.");

            // Verify MS-NRPC requirement: MS-NRPC_R9
            // The idl generated NRPCStub has implemented the RPC over named pipes.
            // named pipe for RPC is SMB:\PIPE\NETLOGON,so this requirement can be verified directly.
            Site.CaptureRequirement(
                9,
                @"[The Netlogon Remote Protocol uses the following RPC protocol sequences as specified in [MS-RPCE] 
                section 2.1:]RPC over named pipes.");

            // Verify MS-NRPC requirement: MS-NRPC_R11
            // The idl generated NRPCStub has implemented the named pipe for RPC over SMB:\PIPE\NETLOGON.
            // So this requirement can be verified directly.
            Site.CaptureRequirement(
                11,
                @"This protocol[MS-NRPC] uses the following well-known endpoint. This endpoint is a named pipe for RPC
                over SMB: \PIPE\NETLOGON.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R15");

            // 12345678-1234-ABCD-EF00-01234567CFFB is the uuid defined in MS-NRPC TD.
            bool isVerifyR15 = interfaceId.Equals(
                                                   "12345678-1234-ABCD-EF00-01234567CFFB",
                                                   StringComparison.OrdinalIgnoreCase);

            // Verify MS-NRPC requirement: MS-NRPC_R15.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR15,
                15,
                @"This protocol[MS-NRPC] MUST use the universally unique identifier (UUID)
                12345678-1234-ABCD-EF00-01234567CFFB.");

            // Verify MS-NRPC requirement: MS-NRPC_R18
            // The idl Generated NRPCStub has implemented the RPC security provider extensions.
            Site.CaptureRequirement(
                18,
                @"The server MUST use the RPC security provider extensions ([MS-RPCE] section 2.2.1.1.7).");
        }

        #endregion

        #region Verify NT_OWF_PASSWORD (Section 2.2.1.1.4)

        /// <summary>
        ///  Verify encrypted NT_OWF_PASSWORD structure.
        /// </summary>
        /// <param name="encryptedNtOwfPassword"> The _NT_OWF_PASSWORD structure.</param>
        /// <param name="plainPassword"> Plain password string.</param>
        /// <param name="sessionKey"> Session key.</param>
        private void VerifyNtOwfPasswordEncryption(
            _NT_OWF_PASSWORD encryptedNtOwfPassword,
            string plainPassword,
            byte[] sessionKey)
        {
            _NT_OWF_PASSWORD expectedOwfPassword = GetEncryptedNtOwfPasswordStructure(plainPassword, sessionKey);

            bool isOwfValid = VerifyOwfStructureEqual(
                new _NT_OWF_PASSWORD?(expectedOwfPassword),
                new _NT_OWF_PASSWORD?(encryptedNtOwfPassword));

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R104854,
                encryptedNtOwfPassword: {0} {1}",
                ArrayToString(encryptedNtOwfPassword.data[0].data),
                ArrayToString(encryptedNtOwfPassword.data[1].data));

            // Verify MS-NRPC requirement:  MS-NRPC_R104854.
            Site.CaptureRequirementIfIsTrue(
                isOwfValid,
                104854,
                @"[In NT_OWF_PASSWORD structure]When this structure is encrypted, Netlogon methods typically use the
                DES encryption algorithm in ECB mode, as specified in [MS-SAMR] section 2.2.11.1.1 Encrypting an NT 
                Hash or LM Hash Value with a Specified Key. The session key is the specified 16-byte key used to 
                derive its keys using the 16-byte value process, as specified in [MS-SAMR] section 2.2.11.1.4. For 
                specific encryption information, see the individual methods");
        }


        /// <summary>
        ///  Verify NT_OWF_PASSWORD structure.
        /// </summary>
        /// <param name="cipherOwfPassword"> The _NT_OWF_PASSWORD structure.</param>
        /// <param name="sessionKey">The session key used to encrypt the password.</param>
        private void VerifyNtOwfPassword(_NT_OWF_PASSWORD cipherOwfPassword, byte[] sessionKey)
        {
            // To get the md4 hash from plain password.
            byte[] expectedPlianOwfPassword =
                Microsoft.Protocols.TestTools.StackSdk.Security.Nlmp.NlmpUtility.GetResponseKeyNt(
                TestTools.StackSdk.Security.Nlmp.NlmpVersion.v1,
                PrimaryDomainDnsName,
                ENDPOINTNetbiosName,
                ENDPOINTPassword);

            // To get the md4 hash from encryptedOWF password.
            byte[] actualPlainOwfPassword = GetPlainNtHashFromEncryptedOwfPassword(
                cipherOwfPassword, sessionKey);

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R41");

            // Verify MS-NRPC requirement: MS-NRPC_R41
            Site.CaptureRequirementIfAreEqual<string>(
                BitConverter.ToString(expectedPlianOwfPassword),
                BitConverter.ToString(actualPlainOwfPassword),
                41,
                @"[In NT_OWF_PASSWORD structure]data: An array of CYPHER_BLOCK (section 2.2.1.1.1) structures that
                contains the NTOWFv1 of a password.");
        }

        #endregion

        #region Verify NETLOGON_AUTHENTICATOR (Section 2.2.1.1.5)

        /// <summary>
        ///  Verify NETLOGON_AUTHENTICATOR structure.
        /// </summary>
        /// <param name="hresult"> Return value of a method that using Credential as an input parameter.</param>
        /// <param name="returnAuthenticator"> The output parameter ReturnAuthenticator.</param>
        private void VerifyNetlogonAuthenticator(
            HRESULT hresult,
            _NETLOGON_AUTHENTICATOR? returnAuthenticator)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R44
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type defined in the TD
                Site.CaptureRequirement(
                    44,
                    @"[In NETLOGON_AUTHENTICATOR structure]Credential: A NETLOGON_CREDENTIAL (section 2.2.1.3.4)
                    structure that contains the encrypted portion of the authenticator.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R681");

                // Verify MS-NRPC requirement: MS-NRPC_R681
                // This test environment always uses Netlogon authenticators, so the condition
                // of this requirement is met.
                // The authenticator is constructed and returned by the server, this requirement doesn't
                // specify how the data field is filled, so if the data field is not null, this
                // requirement is verified.
                Site.CaptureRequirementIfIsNotNull(
                    returnAuthenticator.Value.Credential.data,
                    681,
                    @"[In Netlogon Authenticator Computation and Verification,If the Netlogon RPC call is
                    using Netlogon authenticators, the following steps are used to calculate the authenticator:
                    in  step 2:] The server returns a Netlogon authenticator that contains the new Netlogon
                    credential to the client.");
            }
        }

        #endregion

        #region NL_SITE_NAME_ARRAY (Section 2.2.1.2.2)

        /// <summary>
        ///  Verify NL_SITE_NAME_ARRAY structure.
        /// </summary>
        /// <param name="siteNameArray"> The _NL_SITE_NAME_ARRAY structure.</param>
        /// <param name="hresult">
        ///  Returned value of the method which using NL_SITE_NAME_ARRAY structure as an input parameter.
        /// </param>
        private void VerifyMembersInNLSiteNameArray(
            _NL_SITE_NAME_ARRAY siteNameArray,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R105");

                // Verify MS-NRPC requirement:  MS-NRPC_R105.
                Site.CaptureRequirementIfAreEqual<uint>(
                    (uint)siteNameArray.SiteNames.Length,
                    siteNameArray.EntryCount,
                    105,
                    @"[In NL_SITE_NAME_ARRAY structure]EntryCount:  The number of entries in SiteNames.");

                // Verify MS-NRPC requirement: MS-NRPC_R106
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type RPC_UNICODE_STRING defined in the TD
                Site.CaptureRequirement(
                    106,
                    @"[In NL_SITE_NAME_ARRAY structure]SiteNames:  A pointer to an array of null-terminated
                    RPC_UNICODE_STRING strings that contain site names.");
            }
        }

        #endregion

        #region NL_SITE_NAME_EX_ARRAY (Section 2.2.1.2.3)

        /// <summary>
        ///  Verify NL_SITE_NAME_EX_ARRAY structure.
        /// </summary>
        /// <param name="hresult">
        ///  Returned value of method DsrAddressToSiteNamesExW which using NL_SITE_NAME_EX_ARRAY as output parameter.
        /// </param>
        /// <param name="siteNameArray"> The _NL_SITE_NAME_EX_ARRAY structure.</param>
        private void VerifyNLSiteNameExArray(
            HRESULT hresult,
            _NL_SITE_NAME_EX_ARRAY siteNameArray)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R109");

                // Verify MS-NRPC requirement:  MS-NRPC_R109.
                Site.CaptureRequirementIfAreEqual<uint>(
                    (uint)siteNameArray.SiteNames.Length,
                    siteNameArray.EntryCount,
                    109,
                    @"[In NL_SITE_NAME_EX_ARRAY structure]EntryCount:  The number of entries in SiteNames 
                    and SubnetNames.");

                // Verify MS-NRPC requirement: MS-NRPC_R113
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD
                Site.CaptureRequirement(
                    112,
                    @"[In NL_SITE_NAME_EX_ARRAY structure]SubnetNames:  A pointer to an array of null-terminated
                    Unicode strings that contain subnet names.");

                // Verify MS-NRPC requirement: MS-NRPC_R113
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD
                Site.CaptureRequirement(
                    113,
                    @"[In NL_SITE_NAME_EX_ARRAY structure]SiteNames:  A pointer to an array of null-terminated Unicode
                    strings that contain site names.");
            }
        }

        #endregion

        #region NELOGON_ONE_DOMAIN_INFO (Section 2.2.1.3.10)

        /// <summary>
        ///  Verify NELOGON_ONE_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="hresult"> HRESULT returned by the server.</param>
        /// <param name="oneDomainInfo"> The NELOGON_ONE_DOMAIN_INFO structure.</param>
        /// <param name="expectedDomainName"> Expected Domain Name.</param>
        private void VerifyOneDomainInfo(
            HRESULT hresult,
            _NETLOGON_ONE_DOMAIN_INFO oneDomainInfo,
            string expectedDomainName)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                string actualDomainName = GetRpcUnicodeString(oneDomainInfo.DomainName);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R325");

                // Verify MS-NRPC requirement:  MS-NRPC_R325.
                Site.CaptureRequirementIfAreEqual<string>(
                    expectedDomainName.ToLower(CultureInfo.InvariantCulture),
                    actualDomainName.ToLower(CultureInfo.InvariantCulture),
                    325,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DomainName: A null-terminated Unicode string that
                    contains the NetBIOS name of the domain being described.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R326");

                // Verify MS-NRPC requirement:  MS-NRPC_R326.
                Site.CaptureRequirementIfAreNotEqual<string>(
                    string.Empty,
                    actualDomainName,
                    326,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DomainName: This field MUST NOT be an empty string.");

                string actualDnsDomainName = GetRpcUnicodeString(oneDomainInfo.DnsDomainName);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R328");

                // Verify MS-NRPC requirement:  MS-NRPC_R328.
                Site.CaptureRequirementIfAreNotEqual<string>(
                    string.Empty,
                    actualDnsDomainName,
                    328,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DnsDomainName: This field MUST NOT be an empty string.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R335");

                // Verify MS-NRPC requirement:  MS-NRPC_R335.
                Site.CaptureRequirementIfAreEqual<ushort>(
                    0,
                    oneDomainInfo.DummyString2.Length,
                    335,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString2: MUST contain 0 for the Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R336");

                // Verify MS-NRPC requirement:  MS-NRPC_R336.
                Site.CaptureRequirementIfAreEqual<ushort>(
                    0,
                    oneDomainInfo.DummyString2.MaximumLength,
                    336,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString2: [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R337");

                // Verify MS-NRPC requirement: MS-NRPC_R337.
                Site.CaptureRequirementIfIsNull(
                    oneDomainInfo.DummyString2.Buffer,
                    337,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString2: MUST contain NULL for the Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R340");

                // Verify MS-NRPC requirement:  MS-NRPC_R340.
                Site.CaptureRequirementIfAreEqual<ushort>(
                    0,
                    oneDomainInfo.DummyString3.Length,
                    340,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString3: MUST contain 0 for the Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R341");

                // Verify MS-NRPC requirement:  MS-NRPC_R341.
                Site.CaptureRequirementIfAreEqual<ushort>(
                    0,
                    oneDomainInfo.DummyString3.MaximumLength,
                    341,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString3:[MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R342");

                // Verify MS-NRPC requirement: MS-NRPC_R342.
                Site.CaptureRequirementIfIsNull(
                    oneDomainInfo.DummyString3.Buffer,
                    342,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString3: MUST contain NULL for the Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R345");

                // Verify MS-NRPC requirement:  MS-NRPC_R345.
                Site.CaptureRequirementIfAreEqual<ushort>(
                    0,
                    oneDomainInfo.DummyString4.Length,
                    345,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString4: MUST contain 0 for the Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R346");

                // Verify MS-NRPC requirement:  MS-NRPC_R346.
                Site.CaptureRequirementIfAreEqual<ushort>(
                    0,
                    oneDomainInfo.DummyString4.MaximumLength,
                    346,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString4:[MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R347");

                // Verify MS-NRPC requirement: MS-NRPC_R347.
                Site.CaptureRequirementIfIsNull(
                    oneDomainInfo.DummyString4.Buffer,
                    347,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyString4: MUST contain NULL for the Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R350");

                // Verify MS-NRPC requirement:  MS-NRPC_R350.
                Site.CaptureRequirementIfAreEqual<DummyLong1_Values>(
                    DummyLong1_Values.V1,
                    oneDomainInfo.DummyLong1,
                    350,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyLong1: MUST be set to zero.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R353");

                // Verify MS-NRPC requirement:  MS-NRPC_R353.
                Site.CaptureRequirementIfAreEqual<_NETLOGON_ONE_DOMAIN_INFO_DummyLong2_Values>(
                    _NETLOGON_ONE_DOMAIN_INFO_DummyLong2_Values.V1,
                    oneDomainInfo.DummyLong2,
                    353,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyLong2: MUST be set to zero.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R356");

                // Verify MS-NRPC requirement:  MS-NRPC_R356.
                Site.CaptureRequirementIfAreEqual<_NETLOGON_ONE_DOMAIN_INFO_DummyLong3_Values>(
                    _NETLOGON_ONE_DOMAIN_INFO_DummyLong3_Values.V1,
                    oneDomainInfo.DummyLong3,
                    356,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyLong3: MUST be set to zero.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R359");

                // Verify MS-NRPC requirement:  MS-NRPC_R359.
                Site.CaptureRequirementIfAreEqual<_NETLOGON_ONE_DOMAIN_INFO_DummyLong4_Values>(
                    _NETLOGON_ONE_DOMAIN_INFO_DummyLong4_Values.V1,
                    oneDomainInfo.DummyLong4,
                    359,
                    @"[In NETLOGON_ONE_DOMAIN_INFO structure]DummyLong4: MUST be set to zero.");
            }
        }

        #endregion

        #region NETLOGON_DOMAIN_INFO (Section 2.2.1.3.11)

        /// <summary>
        ///  Verify members in NELOGON_DOMAIN_INFO structure,
        ///  such as LsaPolicy, DnsHostNameInDs, Dummy elements, SupportedEncTypes and so on.
        /// </summary>
        /// <param name="hresult">
        ///  Returned value of NetrLogonGetDomainInfo method which using NETLOGON_DOMAIN_INFO as output parameter.
        /// </param>
        /// <param name="domBuffer"> The returned _NETLOGON_DOMAIN_INFORMATION structure.</param>
        private void VerifyNetlogonDomainInfo(
            HRESULT hresult,
            _NETLOGON_DOMAIN_INFORMATION? domBuffer)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                _NETLOGON_DOMAIN_INFO domainInfo = domBuffer.Value.DomainInfo[0];

                // Verify TrustedDomainCount and TrustedDomains members in NELOGON_DOMAIN_INFO structure.
                this.VerifyTrustedDomainCountAndTrustedDomainsInNetlogonDomainInfo(
                    domainInfo.TrustedDomainCount, domainInfo.TrustedDomains, hresult);

                // Verify LsaPolicy member in NELOGON_DOMAIN_INFO structure.
                this.VerifyLsaPolicyInNetlogonDomainInfo(domainInfo.LsaPolicy);

                // Verify DnsHostNameInDs member in NELOGON_DOMAIN_INFO structure.
                this.VerifyDnsHostNameInDsInNetlogonDomainInfo(GetRpcUnicodeString(domainInfo.DnsHostNameInDs));

                // Verify DummyString2 member in NELOGON_DOMAIN_INFO structure.
                this.VerifyDummyString2InNetlogonDomainInfo(domainInfo.DummyString2);

                // Verify DummyString3 member in NELOGON_DOMAIN_INFO structure.
                this.VerifyDummyString3InNetlogonDomainInfo(domainInfo.DummyString3);

                // Verify DummyString4 member in NELOGON_DOMAIN_INFO structure.
                this.VerifyDummyString4InNetlogonDomainInfo(domainInfo.DummyString4);

                // Verify WorkstationFlags member in NELOGON_DOMAIN_INFO structure.
                this.VerifyWorkstationFlagsInNetlogonDomainInfo(domainInfo.WorkstationFlags);

                // Verify DummyLong3 member in NELOGON_DOMAIN_INFO structure.
                this.VerifyDummyLong3InNetlogonDomainInfo((uint)domainInfo.DummyLong3);

                // Verify DummyLong4 member in NELOGON_DOMAIN_INFO structure.
                this.VerifyDummyLong4InNetlogonDomainInfo((uint)domainInfo.DummyLong4);

                // Verify SupportedEncTypes member in NELOGON_DOMAIN_INFO structure.
                this.VerifySupportedEncTypesInNetlogonDomainInfo(domainInfo.SupportedEncTypes);
            }
        }


        /// <summary>
        ///  Verify TrustedDomainCount and TrustedDomains members in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="trustDomainCount"> TrustDomainCount member in NELOGON_DOMAIN_INFO.</param>
        /// <param name="trustedDomains"> TrustedDomains member in NELOGON_DOMAIN_INFO.</param>
        /// <param name="hresult">
        ///  Returned value of NetrLogonGetDomainInfo method which using NETLOGON_DOMAIN_INFO as output parameter.
        /// </param>
        private void VerifyTrustedDomainCountAndTrustedDomainsInNetlogonDomainInfo(
            uint trustDomainCount,
            _NETLOGON_ONE_DOMAIN_INFO[] trustedDomains,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R366");

                // Verify MS-NRPC requirement: MS-NRPC_R366.
                Site.CaptureRequirementIfAreEqual<uint>(
                    (uint)trustedDomains.Length,
                    trustDomainCount,
                    366,
                    @"[In NETLOGON_DOMAIN_INFO structure]TrustedDomainCount: The number of trusted domains
                    listed in TrustedDomains.");
            }
        }


        /// <summary>
        ///  Verify LsaPolicy member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="lsaPolicy"> The LsaPolicy member of NELOGON_DOMAIN_INFO structure.</param>
        private void VerifyLsaPolicyInNetlogonDomainInfo(_NETLOGON_LSA_POLICY_INFO lsaPolicy)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R370");

            // Verify MS-NRPC requirement:  MS-NRPC_R370.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                lsaPolicy.LsaPolicySize,
                370,
                @"[In NETLOGON_DOMAIN_INFO structure]LsaPolicy:The LsaPolicySize field is set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R371");

            // Verify MS-NRPC requirement:  MS-NRPC_R371.
            Site.CaptureRequirementIfIsNull(
                lsaPolicy.LsaPolicy,
                371,
                @"[In NETLOGON_DOMAIN_INFO structure]LsaPolicy:the LsaPolicy field is set to NULL.");
        }


        /// <summary>
        ///  Verify DnsHostNameInDs member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="dnsHostNameInDs"> The DnsHostNameInDs member of _NETLOGON_DOMAIN_INFO structure.</param>
        private void VerifyDnsHostNameInDsInNetlogonDomainInfo(string dnsHostNameInDs)
        {
            if (!string.IsNullOrEmpty(dnsHostNameInDs))
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R372");

                // Verify MS-NRPC requirement:  MS-NRPC_R372.
                string clientDnsHostName = Site.Properties["Common.ENDPOINT.NetbiosName"] + "." + Site.Properties["Common.PrimaryDomain.DNSName"];
                Site.CaptureRequirementIfAreEqual<string>(
                    clientDnsHostName.ToLower(CultureInfo.InvariantCulture),
                    dnsHostNameInDs.ToLower(CultureInfo.InvariantCulture),
                    372,
                    @"[In NETLOGON_DOMAIN_INFO structure]DnsHostNameInDs:  A null-terminated Unicode string that
                    contains the Active Directory DNS host name for the client.");
            }
        }

        #region unused string-type dummy field

        /// <summary>
        ///  Verify DummyString2 member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="dummyString2"> the DummyString2 member of _NETLOGON_DOMAIN_INFO structure.</param>
        private void VerifyDummyString2InNetlogonDomainInfo(_RPC_UNICODE_STRING dummyString2)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R373");

            // Verify MS-NRPC requirement:  MS-NRPC_R373.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)dummyString2.Length,
                373,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString2:  MUST contain 0 for the Length field.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R374");

            // Verify MS-NRPC requirement:  MS-NRPC_R374.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)dummyString2.MaximumLength,
                374,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString2: MUST contain 0 for the MaximumLength field.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R375");

            // Verify MS-NRPC requirement:  MS-NRPC_R375.
            Site.CaptureRequirementIfIsNull(
                dummyString2.Buffer,
                375,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString2: MUST contain NULL for the Buffer field.");
        }


        /// <summary>
        ///  Verify DummyString3 member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="dummyString3"> the DummyString3 member of _NETLOGON_DOMAIN_INFO structure.</param>
        private void VerifyDummyString3InNetlogonDomainInfo(_RPC_UNICODE_STRING dummyString3)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R378");

            // Verify MS-NRPC requirement:  MS-NRPC_R378.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)dummyString3.Length,
                378,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString3:  MUST contain 0 for the Length field.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R379");

            // Verify MS-NRPC requirement:  MS-NRPC_R379.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)dummyString3.MaximumLength,
                379,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString3: MUST contain 0 for the MaximumLength field.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R380");

            // Verify MS-NRPC requirement:  MS-NRPC_R380.
            Site.CaptureRequirementIfIsNull(
                dummyString3.Buffer,
                380,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString3: MUST contain NULL for the Buffer field.");
        }


        /// <summary>
        ///  Verify DummyString4 member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="dummyString4"> the DummyString4 member of _NETLOGON_DOMAIN_INFO structure.</param>
        private void VerifyDummyString4InNetlogonDomainInfo(_RPC_UNICODE_STRING dummyString4)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R383");

            // Verify MS-NRPC requirement:  MS-NRPC_R383.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)dummyString4.Length,
                383,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString4:  MUST contain 0 for the Length field.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R384");

            // Verify MS-NRPC requirement:  MS-NRPC_R384.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)dummyString4.MaximumLength,
                384,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString4: MUST contain 0 for the MaximumLength field.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R385");

            // Verify MS-NRPC requirement:  MS-NRPC_R385.
            Site.CaptureRequirementIfIsNull(
                dummyString4.Buffer,
                385,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyString4: MUST contain NULL for the Buffer field.");
        }

        #endregion

        /// <summary>
        ///  Verify WorkstationFlags member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="workstationFlags"> The WorkstationFlags member of _NETLOGON_DOMAIN_INFO structure.</param>
        private void VerifyWorkstationFlagsInNetlogonDomainInfo(uint workstationFlags)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R393,
                WorkstationFlags: {0}",
                workstationFlags);

            // This is the value when all unused bits are set, and all used bits are clear.
            uint allUnusedBits = ~(uint)(NrpcWorkstationFlags.ClientHandlesUpdateOfSpn
                | NrpcWorkstationFlags.ClientReceivesInboundTrusts);

            // Verify MS-NRPC requirement:  MS-NRPC_R393.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                workstationFlags & allUnusedBits,
                393,
                @"[In NETLOGON_DOMAIN_INFO structure]WorkstationFlags:All other bits[except A,B bits] 
                MUST be set to zero.");
        }


        /// <summary>
        ///  Verify SupportedEncTypes member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="supportedEncTypes"> The SupportedEncTypes member of _NETLOGON_DOMAIN_INFO structure.</param>
        private void VerifySupportedEncTypesInNetlogonDomainInfo(uint supportedEncTypes)
        {
            // SupportedEncTypes: A set of bit flags that specify the encryption types supported,
            // as specified in [MS-LSAD].
            // In [MS-LSAD]SupportedEncryptionTypes: The flags can be set in any combination.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 S A R M C
            // C: 0x00000001
            // M: 0x00000002
            // R: 0x00000004
            // A: 0x00000008
            // S: 0x00000010
            uint otherFlagsExceptSpecifiedFlags = 0x00000001
                | 0x00000002
                | 0x00000004
                | 0x00000008
                | 0x00000010;
            uint allOtherFlagValue = 1;

            // If SupportedEncTypes is not set in PDC, NELOGON_DOMAIN_INFO.SupportedEncTypes will be 0xFFFFFFFF
            if ((supportedEncTypes ^ 0xFFFFFFFF) == 0x00000000)
            {
                allOtherFlagValue = 0;
            }
            else
            {
                allOtherFlagValue = supportedEncTypes & (~otherFlagsExceptSpecifiedFlags);
            }

            // Verify requirement : MS-NRPC_R104260, MS-NRPC_R104261.
            string isR104260Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104260Implementation"];
            if (PDCIsWindows)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104261,
                    SupportedEncTypes : {0}",
                    supportedEncTypes);

                // Verify MS-NRPC requirement:  MS-NRPC_R104261.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    allOtherFlagValue,
                    "MS-LSAD",
                    104261,
                    @"[In NETLOGON_DOMAIN_INFO structure]SupportedEncTypes:In Windows,all other bits
                    [except C,M,R,A,S] is 0.");

                if (null == isR104260Implemented)
                {
                    Site.Properties.Add("MS_NRPC.SHOULDMAY.R104260Implementation", bool.TrueString);
                    isR104260Implemented = bool.TrueString;
                }
            }

            if (null != isR104260Implemented)
            {
                bool implement = bool.Parse(isR104260Implemented);
                bool isSatisfied = allOtherFlagValue.Equals(0);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104260,
                    SupportedEncTypes: {0}",
                    supportedEncTypes);

                // Verify MS-NRPC requirement:  MS-NRPC_R104260.
                Site.CaptureRequirementIfAreEqual<bool>(
                    implement,
                    isSatisfied,
                    "MS-LSAD",
                    104260,
                    string.Format(CultureInfo.InvariantCulture,
                        @"[In NETLOGON_DOMAIN_INFO structure]SupportedEncTypes:
                        All other bits [except C,M,R,A,S] SHOULD be 0.
                        This requirement is {0} implemented.",
                        implement ? string.Empty : "not"));
            }
        }

        #region unused long-type dummy field

        /// <summary>
        ///  Verify DummyLong3 member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="dummyLong3"> The DummyLong3 member of _NETLOGON_DOMAIN_INFO structure.</param>
        private void VerifyDummyLong3InNetlogonDomainInfo(uint dummyLong3)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R399");

            // Verify MS-NRPC requirement:  MS-NRPC_R399.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                dummyLong3,
                399,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyLong3:  MUST be set to zero.");
        }


        /// <summary>
        ///  Verify DummyLong4 member in NELOGON_DOMAIN_INFO structure.
        /// </summary>
        /// <param name="dummyLong4"> The DummyLong4 member of _NETLOGON_DOMAIN_INFO structure.</param>
        private void VerifyDummyLong4InNetlogonDomainInfo(uint dummyLong4)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R402");

            // Verify MS-NRPC requirement:  MS-NRPC_R402.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                dummyLong4,
                402,
                @"[In NETLOGON_DOMAIN_INFO structure]DummyLong4:  MUST be set to zero.");
        }

        #endregion

        #endregion

        #region NETLOGON_SID_AND_ATTRIBUTES (Section 2.2.1.4.7)

        /// <summary>
        ///  Verify Attributes member in NETLOGON_SID_AND_ATTRIBUTES structure.
        /// </summary>
        /// <param name="attributes"> Attributes member in _NETLOGON_SID_AND_ATTRIBUTES structure.</param>
        /// <param name="hresult"> Return value of a method that use attributes as a parameter.</param>
        private void VerifyAttributesInNetlogonSidAndAttributes(
            uint attributes,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R1609
                // This structure is generated based on the IDL from the TD, 
                // if the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD 
                Site.CaptureRequirement(
                    1609,
                    @"[In NETLOGON_SID_AND_ATTRIBUTES structure]Attributes:  An integer value that contains the set
                    of security attributes assigned to this SID.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1611,
                    Attributes: {0}",
                    attributes);

                // Attributes: An integer value that contains the set of security attributes assigned to this SID.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // 0 0 D 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 C B A
                // This is the value when all unused bits are set, and all used bits are clear.
                uint allUnusedBits = ~(uint)(0x00000001
                    | 0x00000002
                    | 0x00000004
                    | 0x20000000);

                // Verify MS-NRPC requirement: MS-NRPC_R1611.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    attributes & allUnusedBits,
                    1611,
                    @"[In NETLOGON_SID_AND_ATTRIBUTES structure]Attributes:The value is constructed from one or more
                    bit flags [A,B,C,D bits]from the following table.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1622");

                // Verify MS-NRPC requirement: MS-NRPC_R1622.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    attributes & allUnusedBits,
                    1622,
                    @"[In NETLOGON_SID_AND_ATTRIBUTES structure]Attributes:All other bits[except A,B,C,D bits] MUST
                    be set to zero.");
            }
        }

        #endregion

        #region GROUP_MEMBERSHIP (Section 2.2.1.4.10)

        /// <summary>
        ///  Verify GROUP_MEMBERSHIP structure.
        /// </summary>
        /// <param name="groupMembership"> The GROUP_MEMBERSHIP structure.</param>
        private void VerifyGroupMembership(_GROUP_MEMBERSHIP groupMembership)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1635,
                RelativeId: {0}",
                groupMembership.RelativeId);

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1637,
                Attributes: {0}",
                groupMembership.Attributes);

            // Attributes: A set of values that describe the group membership attributes set for
            // the RID specified in RelateveId
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 C B A
            // This is the value when all unused bits are set, and all used bits are clear.
            uint allUnusedBits = ~(uint)(0x00000001
                | 0x00000002
                | 0x00000004);

            // Verify MS-NRPC requirement: MS-NRPC_R1637.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                groupMembership.Attributes & allUnusedBits,
                1637,
                @"[In GROUP_MEMBERSHIP structure]Attributes:The value is constructed from one or more bit flags
                [A,B,C bits] from the following table.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1648,
                Attributes: {0}",
                groupMembership.Attributes);

            // Verify MS-NRPC requirement: MS-NRPC_R1648.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                groupMembership.Attributes & allUnusedBits,
                1648,
                @"[In GROUP_MEMBERSHIP structure]Attributes:All other bits[except A,B,C bits] MUST be zero.");
        }

        #endregion

        #region NETLOGON_VALIDATION_SAM_INFO (Section 2.2.1.4.13)

        /// <summary>
        ///  Verify all members in NETLOGON_VALIDATION_SAM_INFO structure, such as LogonTime, LogoffTime, LogonScript,
        ///  PasswordLastSet, PasswordCanChange, PasswordMustChange, EffectiveName, FullName and so on.
        /// </summary>
        /// <param name="hresult">
        ///  Return value of the method which using NETLOGON_VALIDATION_SAM_INFO structure as parameter.
        /// </param>
        /// <param name="validationSamInfo"> The NETLOGON_VALIDATION_SAM_INFO4 structure.</param>
        /// <param name="logonLevel">
        ///  The NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information
        ///  passed in the LogonInformation parameter.
        /// </param>
        /// <param name="expectedPasswordLastSet"> Expected PasswordLastSet string.</param>
        /// <param name="expectedEffectiveName"> Expected EffectiveName string.</param>
        /// <param name="expectedLogonScript"> Expected LogonScript string.</param>
        /// <param name="expectedProfilePath"> Expected ProfilePath string.</param>
        /// <param name="expectedHomeDirectory"> Expected HomeDirectory string.</param>
        /// <param name="expectedHomeDirectoryDrive"> Expected HomeDirectoryDrive string.</param>
        /// <param name="expectedBadPasswordCount">
        ///  Expected BadPasswordCount, a 16-bit unsigned integer that contains the user account's badPwdCount
        ///  attribute ([MS-ADA1] section 2.83) value for interactive logon.
        /// </param>
        /// <param name="expectedLogonCount">
        ///  Expected LogonCount, a 16-bit unsigned integer that contains the user account's LogonCount attribute 
        ///  ([MS-ADA1] section 2.375) value.
        /// </param>
        private void VerifyNetlogonValidationSamInfo(
            HRESULT hresult,
            _NETLOGON_VALIDATION_SAM_INFO validationSamInfo,
            _NETLOGON_LOGON_INFO_CLASS logonLevel,
            long expectedPasswordLastSet,
            string expectedEffectiveName,
            string expectedLogonScript,
            string expectedProfilePath,
            string expectedHomeDirectory,
            string expectedHomeDirectoryDrive,
            ushort expectedBadPasswordCount,
            ushort expectedLogonCount)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify LogonScript member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyLogonScriptInNetlogonValidationSamInfo(
                    validationSamInfo.LogonScript, expectedLogonScript, logonLevel);

                // Verify PasswordLastSet member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyPasswordLastSetInNetlogonValidationSamInfo(
                    validationSamInfo.PasswordLastSet, expectedPasswordLastSet, logonLevel);

                // Verify PasswordCanChange member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyPasswordCanChangeInNetlogonValidationSamInfo(
                    validationSamInfo.PasswordCanChange, logonLevel);

                // Verify PasswordMustChange member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyPasswordMustChangeInNetlogonValidationSamInfo(
                    validationSamInfo.PasswordMustChange, logonLevel);

                // Verify EffectiveName member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyEffectiveNameInNetlogonValidationSamInfo(
                    validationSamInfo.EffectiveName, expectedEffectiveName, logonLevel);

                // Verify FullName member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyFullNameInNetlogonValidationSamInfo(
                    validationSamInfo.FullName, logonLevel);

                // Verify ProfilePath member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyProfilePathInNetlogonValidationSamInfo(
                    validationSamInfo.ProfilePath, expectedProfilePath, logonLevel);

                // Verify HomeDirectoryDrive member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyHomeDirectoryDriveInNetlogonValidationSamInfo(
                    validationSamInfo.HomeDirectoryDrive, expectedHomeDirectoryDrive, logonLevel);

                // Verify HomeDirectory member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyHomeDirectoryInNetlogonValidationSamInfo(
                    validationSamInfo.HomeDirectory, expectedHomeDirectory, logonLevel);

                // Verify BadPasswordCount member in NETLOGON_VALIDATION_SAM_INFO structure.
                this.VerifyBadPasswordCountInNetlogonValidationSamInfo(
                    validationSamInfo.BadPasswordCount, expectedBadPasswordCount, logonLevel);

                for (int i = 0; i < validationSamInfo.GroupIds.Length; ++i)
                {
                    // Verify GROUP_MEMBERSHIP structure.
                    this.VerifyGroupMembership(validationSamInfo.GroupIds[i]);
                }

                // Verify MS-NRPC requirement: MS-NRPC_R1633
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD.
                Site.CaptureRequirement(
                    1633,
                    @"[In USER_SESSION_KEY structure]data:  A two-element CYPHER_BLOCK structure, 
                    as specified in section 2.2.1.1.1, that contains the 16-byte encrypted user session key.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104278");

                // Verify MS-NRPC requirement:  MS-NRPC_R104278.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                // It's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.LogonTime.GetType(),
                    "MS-PAC",
                    104278,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure ]LogonTime: A FILETIME structure that contains 
                    the user account's lastLogon attribute ([MS-ADA1] section 2.351) value.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104281");

                // Verify MS-NRPC requirement:  MS-NRPC_R104281.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                // It's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.LogoffTime.GetType(),
                    "MS-PAC",
                    104281,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]LogoffTime:  A FILETIME structure that contains
                    the time the client's logon session should expire.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104288");

                // Verify MS-NRPC requirement:  MS-NRPC_R104288.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                // It's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.KickOffTime.GetType(),
                    "MS-PAC",
                    104288,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]KickOffTime:  A FILETIME structure that contains
                    LogoffTime minus the user account's forceLogoff attribute ([MS-ADA1] section 2.233) value.");

                bool isLogonCountValid = (validationSamInfo.LogonCount.GetType() == typeof(ushort))
                    && (validationSamInfo.LogonCount == expectedLogonCount);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104335,
                    actual LogonCount: {0},
                    expected LogonCount: {1}",
                    validationSamInfo.LogonCount,
                    expectedLogonCount);

                // Verify MS-NRPC requirement:  MS-NRPC_R104335.
                // The expectedLogonCount is the LogonCount attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isLogonCountValid,
                    "MS-PAC",
                    104335,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]LogonCount: A 16-bit unsigned integer that contains
                    the user account's LogonCount attribute ([MS-ADA1] section 2.375) value.");

                bool isUserIdValid = (validationSamInfo.UserId.GetType() == typeof(uint))
                    && (validationSamInfo.UserId == DomainAdminRid);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104339,
                    actual UserId: {0},
                    expected Account Rid: {1}",
                    validationSamInfo.UserId,
                    DomainAdminRid);

                // Verify MS-NRPC requirement:  MS-NRPC_R104339.
                Site.CaptureRequirementIfIsTrue(
                    isUserIdValid,
                    "MS-PAC",
                    104339,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure ]UserId:  A 32-bit unsigned integer that contains the
                    RID of the account.");

                bool isPrimaryGroupRidValid = (validationSamInfo.PrimaryGroupId.GetType() == typeof(uint))
                    && (validationSamInfo.PrimaryGroupId == PrimaryGroupRid);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104341,
                    Actual primary Group Id: {0},
                    expected Primary Group Rid:{1}",
                    validationSamInfo.PrimaryGroupId,
                    PrimaryGroupRid);

                // Verify MS-NRPC requirement:  MS-NRPC_R104341.
                Site.CaptureRequirementIfIsTrue(
                    isPrimaryGroupRidValid,
                    "MS-PAC",
                    104341,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure ]PrimaryGroupId:  A 32-bit unsigned integer that
                    contains the RID for the primary group to which this account belongs.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104342");

                // Verify MS-NRPC requirement:  MS-NRPC_R104342.
                Site.CaptureRequirementIfAreEqual<uint>(
                    validationSamInfo.GroupCount,
                    (uint)validationSamInfo.GroupIds.Length,
                    "MS-PAC",
                    104342,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure ]GroupCount: The number of groups in this list[
                    the list of GROUP_MEMBERSHIP (section 2.2.2) structures] MUST be equal to GroupCount.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104343");

                // Verify MS-NRPC requirement:  MS-NRPC_R104343.
                Site.CaptureRequirementIfAreEqual<uint>(
                    validationSamInfo.GroupCount,
                    (uint)validationSamInfo.GroupIds.Length,
                    "MS-PAC",
                    104343,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure ]GroupIds:The number of groups in this list MUST
                    be equal to GroupCount.");

                // The value of set A to L bits.
                uint specifiedFlags = (uint)(0x00000001
                    | 0x00000002
                    | 0x00000008
                    | 0x00000020
                    | 0x00000040
                    | 0x00000080
                    | 0x00000100
                    | 0x00000200
                    | 0x00000400
                    | 0x00000800
                    | 0x00001000
                    | 0x00002000);

                uint allOtherFlagValue = validationSamInfo.UserFlags & (~specifiedFlags);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104345");

                // Verify MS-NRPC requirement:  MS-NRPC_R104345.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    allOtherFlagValue,
                    "MS-PAC",
                    104345,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]UserFlags:All other bits[except the set of A to L bits]
                    MUST be set to zero");

                // Convert LogonDomainName value to string.
                string actualLogonDomainName = GetRpcUnicodeString(validationSamInfo.LogonDomainName);
                bool isLogonDomainNameValid =
                    (validationSamInfo.LogonDomainName.GetType() == typeof(_RPC_UNICODE_STRING))
                    && actualLogonDomainName.Equals(primaryDomainNetBiosName, StringComparison.OrdinalIgnoreCase);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104348,
                    actual LogonDomainName: {0},
                    expected LogonDomainName: {1}",
                    actualLogonDomainName,
                    primaryDomainNetBiosName);

                // Verify MS-NRPC requirement:  MS-NRPC_R104348.
                Site.CaptureRequirementIfIsTrue(
                    isLogonDomainNameValid,
                    "MS-PAC",
                    104348,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure ]LogonDomainName:  A RPC_UNICODE_STRING structure that
                    contains the NetBIOS name of the domain to which this account belongs.");

                string actualSid = GetStringFromRpcSid(validationSamInfo.LogonDomainId[0]);

                // LogonDomainId array has only one element.
                bool isLogonDomainIdValid = (validationSamInfo.LogonDomainId.GetType() == typeof(_RPC_SID[]))
                    && actualSid.Equals(PrimaryDomainSID);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104349,
                    actual LogonDomainId: {0},
                    expected LogonDomainId: {1}",
                    actualSid,
                    PrimaryDomainSID);

                // Verify MS-NRPC requirement:  MS-NRPC_R104349.
                Site.CaptureRequirementIfIsTrue(
                    isLogonDomainIdValid,
                    "MS-PAC",
                    104349,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure ]LogonDomainId:  A SID structure that contains the
                    SID for the domain specified in LogonDomainName.");

                // Get the actual logon server name value.
                string actualLogonServerValue = GetRpcUnicodeString(validationSamInfo.LogonServer);
                bool isLogonServerValid = validationSamInfo.LogonServer.GetType() == typeof(_RPC_UNICODE_STRING)
                    && actualLogonServerValue.Equals(
                                                      Site.Properties["Common.WritableDC1.NetbiosName"],
                                                      StringComparison.OrdinalIgnoreCase);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104347,
                    actual LogonServer: {0},
                    expected LogonServer: {1}",
                    actualLogonServerValue,
                    Site.Properties["Common.WritableDC1.NetbiosName"]);

                // Verify MS-NRPC requirement:  MS-NRPC_R104347.
                // KDC is PDC in our test environment.
                Site.CaptureRequirementIfIsTrue(
                    isLogonServerValid,
                    "MS-PAC",
                    104347,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure ]LogonServer:  A RPC_UNICODE_STRING structure that
                    contains the NetBIOS name of the Kerberos KDC that performed the authentication server (AS)
                    ticket request.");
            }
        }


        /// <summary>
        ///  Verify all members in NETLOGON_VALIDATION_SAM_INFO2 structure,
        ///  such as LogonTime, LogoffTime, LogonScript, PasswordLastSet,
        ///  PasswordCanChange, PasswordMustChange, EffectiveName, FullName and so on.
        /// </summary>
        /// <param name="hresult"> Return value of a method </param>
        /// <param name="validationSamInfo"> The NETLOGON_VALIDATION_SAM_INFO4 structure.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        /// <param name="expectedPasswordLastSet"> Expected PasswordLastSet string.</param>
        /// <param name="expectedEffectiveName"> Expected EffectiveName string.</param>
        /// <param name="expectedLogonScript"> Expected LogonScript string.</param>
        /// <param name="expectedProfilePath"> Expected ProfilePath string.</param>
        /// <param name="expectedHomeDirectory"> Expected HomeDirectory string.</param>
        /// <param name="expectedHomeDirectoryDrive"> Expected HomeDirectoryDrive string.</param>
        /// <param name="expectedBadPasswordCount">
        ///  Expected BadPasswordCount, A 16-bit unsigned integer that contains the user account's badPwdCount attribute 
        ///  ([MS-ADA1] section 2.83) value for interactive logon.
        /// </param>
        /// <param name="expectedLogonCount">
        ///  Expected LogonCount, A 16-bit unsigned integer that contains the user account's LogonCount attribute 
        ///  ([MS-ADA1] section 2.375) value.
        /// </param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Maintainability",
            "CA1502:AvoidExcessiveComplexity"),
        SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
        private void VerifyNetlogonValidationSamInfo2(
            HRESULT hresult,
            _NETLOGON_VALIDATION_SAM_INFO2 validationSamInfo,
            _NETLOGON_LOGON_INFO_CLASS logonLevel,
            long expectedPasswordLastSet,
            string expectedEffectiveName,
            string expectedLogonScript,
            string expectedProfilePath,
            string expectedHomeDirectory,
            string expectedHomeDirectoryDrive,
            ushort expectedBadPasswordCount,
            ushort expectedLogonCount)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                _RPC_UNICODE_STRING logonScript = validationSamInfo.LogonScript;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualLogonScript = GetRpcUnicodeString(logonScript);
                    bool isLogonScriptValid;
                    if (null == expectedLogonScript)
                    {
                        isLogonScriptValid = null == actualLogonScript;
                    }
                    else
                    {
                        isLogonScriptValid = logonScript.GetType() == typeof(_RPC_UNICODE_STRING)
                        && actualLogonScript.Equals(expectedLogonScript, StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104418,
                        actual LogonScript: {0},
                        expected LogonScript: {1}",
                        actualLogonScript,
                        expectedLogonScript);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104418.
                    Site.CaptureRequirementIfIsTrue(
                        isLogonScriptValid,
                        "MS-PAC",
                        104418,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]LogonScript:  A RPC_UNICODE_STRING structure
                        that contains the user account's scriptPath attribute ([MS-ADA3] section 2.231) value for
                        interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104419, MS-NRPC_R104420.
                    string isR104419Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104419Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104420,
                            LogonScript.Length: {0}",
                            logonScript.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104420.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            logonScript.Length,
                            "MS-PAC",
                            104420,
                            @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]LogonScript: in Windows,[it]is zero for
                            network logon.");

                        if (null == isR104419Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104419Implementation", bool.TrueString);
                            isR104419Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104419Implemented)
                    {
                        bool implement = bool.Parse(isR104419Implemented);
                        bool isSatisfied = logonScript.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104419,
                            LogonScript.Length: {0}",
                            logonScript.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104419.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104419,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]LogonScript:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                _OLD_LARGE_INTEGER passwordLastSet = validationSamInfo.PasswordLastSet;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert _OLD_LARGE_INTEGER structure to Int64.
                    long actualPasswordLastSetInt = GetInt64ValueFromOldLargeInteger(passwordLastSet);

                    // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                    bool isPasswordLastSetValid = (passwordLastSet.GetType() == typeof(_OLD_LARGE_INTEGER))
                        && actualPasswordLastSetInt.Equals(expectedPasswordLastSet);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104397,
                        actual PasswordLastSet: {0},
                        expected PasswordLastSet: {1}",
                        actualPasswordLastSetInt,
                        expectedPasswordLastSet);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104397.
                    Site.CaptureRequirementIfIsTrue(
                        isPasswordLastSetValid,
                        "MS-PAC",
                        104397,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]PasswordLastSet:  A FILETIME structure
                        that contains the user account's pwdLastSet attribute ([MS-ADA3] section 2.174) value
                        for interactive logon");
                }

                _OLD_LARGE_INTEGER passwordCanChange = validationSamInfo.PasswordCanChange;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104402");

                    // Verify MS-NRPC requirement:  MS-NRPC_R104402.
                    // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                    // It.s only used to verify the type not the content because other
                    // protocol is used to get the content.
                    Site.CaptureRequirementIfAreEqual<Type>(
                        typeof(_OLD_LARGE_INTEGER),
                        passwordCanChange.GetType(),
                        "MS-PAC",
                        104402,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]PasswordCanChange: A FILETIME
                        structure that contains the time at which the client's password is allowed to
                        change for interactive logon");
                }

                _OLD_LARGE_INTEGER passwordMustChange = validationSamInfo.PasswordMustChange;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104406");

                    // Verify MS-NRPC requirement:  MS-NRPC_R104406.
                    // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                    // It is only used to verify the type not the content because other
                    // protocol is used to get the content.
                    Site.CaptureRequirementIfAreEqual<Type>(
                        typeof(_OLD_LARGE_INTEGER),
                        passwordMustChange.GetType(),
                        "MS-PAC",
                        104406,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]PasswordMustChange: A FILETIME structure that
                        contains the time at which the client's password expires for interactive logon.");
                }

                _RPC_UNICODE_STRING effectiveName = validationSamInfo.EffectiveName;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualEffectiveName = GetRpcUnicodeString(effectiveName);
                    bool isEffectiveNameValid = (effectiveName.GetType() == typeof(_RPC_UNICODE_STRING))
                        && actualEffectiveName.Equals(expectedEffectiveName, StringComparison.OrdinalIgnoreCase);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104411,
                        actual EffectiveName: {0},
                        expected EffectiveName: {1}",
                        actualEffectiveName,
                        expectedEffectiveName);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104411.
                    Site.CaptureRequirementIfIsTrue(
                        isEffectiveNameValid,
                        "MS-PAC",
                        104411,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]EffectiveName:  A RPC_UNICODE_STRING structure
                        that contains the user account's samAccountName attribute ([MS-ADA3] section 2.221) value for
                        interactive logon");
                }

                _RPC_UNICODE_STRING fullName = validationSamInfo.FullName;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104414");

                    // Verify MS-NRPC requirement:  MS-NRPC_R104414.
                    // It is only used to verify the type not the content because other
                    // protocol is used to get the content.
                    Site.CaptureRequirementIfAreEqual<Type>(
                        typeof(_RPC_UNICODE_STRING),
                        fullName.GetType(),
                        "MS-PAC",
                        104414,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]FullName:  A RPC_UNICODE_STRING structure that
                        contains the user account's full name for interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104415, MS-NRPC_R104416.
                    string isR104415Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104415Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104416,
                            FullName.Length: {0}",
                            fullName.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104416.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            fullName.Length,
                            "MS-PAC",
                            104416,
                            @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]FullName: in Windows,[it]is zero for
                            network logon.");

                        if (null == isR104415Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104415Implementation", bool.TrueString);
                            isR104415Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104415Implemented)
                    {
                        bool implement = bool.Parse(isR104415Implemented);
                        bool isSatisfied = fullName.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104415,
                            FullName.Length: {0}",
                            fullName.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104415.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104415,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]FullName:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                _RPC_UNICODE_STRING profilePath = validationSamInfo.ProfilePath;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // convert the _RPC_UNICODE_STRING structure to string.
                    string actualProfilePath = GetRpcUnicodeString(profilePath);
                    bool isProfilePathValid;
                    if (null == expectedProfilePath)
                    {
                        isProfilePathValid = null == actualProfilePath;
                    }
                    else
                    {
                        isProfilePathValid = (profilePath.GetType() == typeof(_RPC_UNICODE_STRING))
                            && actualProfilePath.Equals(expectedProfilePath, StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104421,
                        actual ProfilePath: {0},
                        expected ProfilePath: {1}",
                        actualProfilePath,
                        expectedProfilePath);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104421.
                    Site.CaptureRequirementIfIsTrue(
                        isProfilePathValid,
                        "MS-PAC",
                        104421,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]ProfilePath: A RPC_UNICODE_STRING structure
                        that contains the user account's profilePath attribute ([MS-ADA3] section 2.166) value for
                        interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104423, MS-NRPC_R104424.
                    string isR104423Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104423Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104424,
                            ProfilePath.Length: {0}",
                            profilePath.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104424.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            profilePath.Length,
                            "MS-PAC",
                            104424,
                            @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]ProfilePath: in Windows,[it]is zero
                            for network logon.");

                        if (null == isR104423Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104423Implementation", bool.TrueString);
                            isR104423Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104423Implemented)
                    {
                        bool implement = bool.Parse(isR104423Implemented);
                        bool isSatisfied = profilePath.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104423,
                            ProfilePath.Length: {0}",
                            profilePath.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104423.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104423,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]ProfilePath:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                _RPC_UNICODE_STRING homeDirectoryDrive = validationSamInfo.HomeDirectoryDrive;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualHomeDirectoryDrive = GetRpcUnicodeString(homeDirectoryDrive);
                    bool isHomeDirectoryDriveValid;
                    if (null == expectedHomeDirectoryDrive)
                    {
                        isHomeDirectoryDriveValid = null == actualHomeDirectoryDrive;
                    }
                    else
                    {
                        isHomeDirectoryDriveValid = (homeDirectoryDrive.GetType() == typeof(_RPC_UNICODE_STRING))
                            && actualHomeDirectoryDrive.Equals(
                                                               expectedHomeDirectoryDrive,
                                                               StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104430,
                        actual HomeDirectoryDrive: {0},
                        expected HomeDirectoryDrive: {1}",
                        actualHomeDirectoryDrive,
                        expectedHomeDirectoryDrive);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104430.
                    Site.CaptureRequirementIfIsTrue(
                        isHomeDirectoryDriveValid,
                        "MS-PAC",
                        104430,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]HomeDirectoryDrive: A RPC_UNICODE_STRING
                        structure that contains the user account's HomeDrive attribute ([MS-ADA1] section 2.296)
                        value for interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104431, MS-NRPC_R104432.
                    string isR104431Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104431Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104430,
                            HomeDirectoryDrive.Length: {0}",
                            homeDirectoryDrive.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104432.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            homeDirectoryDrive.Length,
                            "MS-PAC",
                            104432,
                            @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]HomeDirectoryDrive: in Windows,[it]is zero
                            for network logon.");

                        if (null == isR104431Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104431Implementation", bool.TrueString);
                            isR104431Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104431Implemented)
                    {
                        bool implement = bool.Parse(isR104431Implemented);
                        bool isSatisfied = homeDirectoryDrive.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104431,
                            HomeDirectoryDrive.Length: {0}",
                            homeDirectoryDrive.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104431.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104431,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]HomeDirectoryDrive:
                                SHOULD be zero for network logon .
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                _RPC_UNICODE_STRING homeDirectory = validationSamInfo.HomeDirectory;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualHomeDirectory = GetRpcUnicodeString(homeDirectory);
                    bool isHomeDirectoryValid;
                    if (null == expectedHomeDirectory)
                    {
                        isHomeDirectoryValid = null == actualHomeDirectory;
                    }
                    else
                    {
                        isHomeDirectoryValid = (homeDirectory.GetType() == typeof(_RPC_UNICODE_STRING))
                            && actualHomeDirectory.Equals(expectedHomeDirectory, StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104426,
                        actual HomeDirectory: {0},
                        expected HomeDirectory: {1}",
                        actualHomeDirectory,
                        expectedHomeDirectory);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104426.
                    Site.CaptureRequirementIfIsTrue(
                        isHomeDirectoryValid,
                        "MS-PAC",
                        104426,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]HomeDirectory: A RPC_UNICODE_STRING structure
                        that contains the user account's HomeDirectory attribute ([MS-ADA1] section 2.295) value for
                        interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104427, MS-NRPC_R104428.
                    string isR104427Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104427Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104428,
                            HomeDirectory.Length: {0}",
                            homeDirectory.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104428.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            homeDirectory.Length,
                            "MS-PAC",
                            104428,
                            @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]HomeDirectory: in Windows,[it]is zero for
                            network logon.");

                        if (null == isR104427Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104427Implementation", bool.TrueString);
                            isR104427Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104427Implemented)
                    {
                        bool implement = bool.Parse(isR104427Implemented);
                        bool isSatisfied = homeDirectory.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104427,
                            HomeDirectory.Length: {0}",
                            homeDirectory.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104427.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104427,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]HomeDirectory:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                ushort badPasswordCount = validationSamInfo.BadPasswordCount;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    bool isBadPasswordCountValid = (badPasswordCount.GetType() == typeof(ushort))
                        && badPasswordCount.Equals(expectedBadPasswordCount);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104436,
                        actual BadPasswordCount: {0},
                        expected BadPasswordCount: {1}",
                        badPasswordCount,
                        expectedBadPasswordCount);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104436.
                    Site.CaptureRequirementIfIsTrue(
                        isBadPasswordCountValid,
                        "MS-PAC",
                        104436,
                        @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]BadPasswordCount: A 16-bit unsigned integer
                        that contains the user account's badPwdCount attribute ([MS-ADA1] section 2.83) value for
                        interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104437, MS-NRPC_R104438.
                    string isR104437Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104437Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104438,
                            BadPasswordCount: {0}",
                            badPasswordCount);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104438.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            badPasswordCount,
                            "MS-PAC",
                            104438,
                            @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]BadPasswordCount:In Windows,[it] is zero for
                            network logon.");

                        if (null == isR104437Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104437Implementation", bool.TrueString);
                            isR104437Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104437Implemented)
                    {
                        bool implement = bool.Parse(isR104437Implemented);
                        bool isSatisfied = badPasswordCount == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104437,
                            BadPasswordCount: {0}",
                            badPasswordCount);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104437.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104437,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]BadPasswordCount:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104359");

                // Verify MS-NRPC requirement:  MS-NRPC_R104359.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.LogonTime.GetType(),
                    "MS-PAC",
                    104359,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]LogonTime: A FILETIME structure that contains the user 
                    account's lastLogon attribute ([MS-ADA1] section 2.351) value.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104381");

                // Verify MS-NRPC requirement:  MS-NRPC_R104381.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                // I's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.LogoffTime.GetType(),
                    "MS-PAC",
                    104381,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]LogoffTime:  A FILETIME structure that contains
                    the time the client's logon session should expire.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104388");

                // Verify MS-NRPC requirement:  MS-NRPC_R104388.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                // It's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.KickOffTime.GetType(),
                    "MS-PAC",
                    104388,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]KickOffTime:  A FILETIME structure that contains
                    LogoffTime minus the user account's forceLogoff attribute ([MS-ADA1] section 2.233) value.");

                bool isLogonCountValid = (validationSamInfo.LogonCount.GetType() == typeof(ushort))
                    && (validationSamInfo.LogonCount == expectedLogonCount);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104435,
                    actual LogonCount: {0},
                    expected LogonCount: {1}",
                    validationSamInfo.LogonCount,
                    expectedLogonCount);

                // Verify MS-NRPC requirement:  MS-NRPC_R104435.
                // The expectedLogonCount is the LogonCount attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isLogonCountValid,
                    "MS-PAC",
                    104435,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]LogonCount: A 16-bit unsigned integer that contains
                    the user account's LogonCount attribute ([MS-ADA1] section 2.375) value.");

                bool isUserIdValid = (validationSamInfo.UserId.GetType() == typeof(uint))
                    && (validationSamInfo.UserId == DomainAdminRid);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104439,
                    actual UserId: {0},
                    expected AccountRid: {1}",
                    validationSamInfo.UserId,
                    DomainAdminRid);

                // Verify MS-NRPC requirement:  MS-NRPC_R104439.
                Site.CaptureRequirementIfIsTrue(
                    isUserIdValid,
                    "MS-PAC",
                    104439,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure ]UserId:  A 32-bit unsigned integer that contains
                    the RID of the account.");

                bool isPrimaryGroupRidValid = (validationSamInfo.PrimaryGroupId.GetType() == typeof(uint))
                    && (validationSamInfo.PrimaryGroupId == PrimaryGroupRid);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104441,
                    actual PrimaryGroupId: {0},
                    expected PrimaryGroupRid: {1}",
                    validationSamInfo.PrimaryGroupId,
                    PrimaryGroupRid);

                // Verify MS-NRPC requirement:  MS-NRPC_R104441.
                Site.CaptureRequirementIfIsTrue(
                    isPrimaryGroupRidValid,
                    "MS-PAC",
                    104441,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure ]PrimaryGroupId:  A 32-bit unsigned integer that
                    contains the RID for the primary group to which this account belongs.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104442");

                // Verify MS-NRPC requirement:  MS-NRPC_R104442.
                Site.CaptureRequirementIfAreEqual<uint>(
                    validationSamInfo.GroupCount,
                    (uint)validationSamInfo.GroupIds.Length,
                    "MS-PAC",
                    104442,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure ]GroupCount: The number of groups in this list[
                    the list of GROUP_MEMBERSHIP (section 2.2.2) structures] MUST be equal to GroupCount.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104443");

                // Verify MS-NRPC requirement:  MS-NRPC_R104443.
                Site.CaptureRequirementIfAreEqual<uint>(
                    validationSamInfo.GroupCount,
                    (uint)validationSamInfo.GroupIds.Length,
                    "MS-PAC",
                    104443,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure ]GroupIds:The number of groups in this list MUST
                    be equal to GroupCount.");

                // The value of set A to L bits.
                uint specifiedFlags = (uint)(0x00000001
                    | 0x00000002
                    | 0x00000008
                    | 0x00000020
                    | 0x00000040
                    | 0x00000080
                    | 0x00000100
                    | 0x00000200
                    | 0x00000400
                    | 0x00000800
                    | 0x00001000
                    | 0x00002000);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104445,
                    UserFlags: {0}",
                    validationSamInfo.UserFlags);

                uint allOtherFlagValue = validationSamInfo.UserFlags & (~specifiedFlags);

                // Verify MS-NRPC requirement:  MS-NRPC_R104445.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    allOtherFlagValue,
                    "MS-PAC",
                    104445,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure ]UserFlags:All other bits[except the set of A to L
                    bits] MUST be set to zero");

                // Convert LogonDomainName value to string.
                string actualLogonDomainName = GetRpcUnicodeString(validationSamInfo.LogonDomainName);
                bool isLogonDomainNameValid = (validationSamInfo.LogonDomainName.GetType()
                                               == typeof(_RPC_UNICODE_STRING))
                    && actualLogonDomainName.Equals(primaryDomainNetBiosName, StringComparison.OrdinalIgnoreCase);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104448,
                    actual LogonDomainName: {0},
                    expected LogonDomainName: {1}",
                    actualLogonDomainName,
                    primaryDomainNetBiosName);

                // Verify MS-NRPC requirement:  MS-NRPC_R104448.
                Site.CaptureRequirementIfIsTrue(
                    isLogonDomainNameValid,
                    "MS-PAC",
                    104448,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure ]LogonDomainName:  A RPC_UNICODE_STRING structure
                    that contains the NetBIOS name of the domain to which this account belongs.");

                string actualSid = GetStringFromRpcSid(validationSamInfo.LogonDomainId[0]);

                // LogonDomainId array has only one element.
                bool isLogonDomainIdValid = (validationSamInfo.LogonDomainId.GetType() == typeof(_RPC_SID[]))
                    && actualSid.Equals(PrimaryDomainSID, StringComparison.OrdinalIgnoreCase);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104449,
                    actual LogonDomainId: {0},
                    expected LogonDomainId: {1}",
                    actualSid,
                    PrimaryDomainSID);

                // Verify MS-NRPC requirement:  MS-NRPC_R104449.
                Site.CaptureRequirementIfIsTrue(
                    isLogonDomainIdValid,
                    "MS-PAC",
                    104449,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure ]LogonDomainId:  A SID structure that contains the SID
                    for the domain specified in LogonDomainName.");

                // Initial the allSidCountInExtraSids to 0.
                int allSidCountInExtraSids = 0;

                // Get all sid count present in ExtraSids.
                for (int i = 0; i < validationSamInfo.ExtraSids.Length; i++)
                {
                    allSidCountInExtraSids += validationSamInfo.ExtraSids[i].Sid.Length;

                    // Verify Attributes member in NETLOGON_SID_AND_ATTRIBUTES structure.
                    this.VerifyAttributesInNetlogonSidAndAttributes(validationSamInfo.ExtraSids[i].Attributes, hresult);
                }

                bool isSidCountValid = (validationSamInfo.SidCount.GetType() == typeof(uint))
                    && (validationSamInfo.SidCount == (uint)allSidCountInExtraSids);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104450,
                    SidCount: {0},
                    allSidCount: {1}",
                    validationSamInfo.SidCount,
                    allSidCountInExtraSids);

                // Verify MS-NRPC requirement:  MS-NRPC_R104450.
                Site.CaptureRequirementIfIsTrue(
                    isSidCountValid,
                    "MS-PAC",
                    104450,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]SidCount:  A 32-bit unsigned integer that contains
                    the total number of SIDs present in the ExtraSids member.");

                // Get the actual logon server name value.
                string actualLogonServerValue = GetRpcUnicodeString(validationSamInfo.LogonServer);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104447,
                    actual LogonServer: {0},
                    expected LogonServer: {1}",
                    actualLogonServerValue,
                    Site.Properties["Common.WritableDC1.NetbiosName"]);

                bool isVerifyR104447 = (validationSamInfo.LogonServer.GetType() == typeof(_RPC_UNICODE_STRING))
                    && actualLogonServerValue.Equals(
                                                      Site.Properties["Common.WritableDC1.NetbiosName"],
                                                      StringComparison.OrdinalIgnoreCase);

                // Verify MS-NRPC requirement:  MS-NRPC_R104447.
                // KDC is PDC in our test environment.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR104447,
                    "MS-PAC",
                    104447,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure ]LogonServer:  A RPC_UNICODE_STRING structure that
                    contains the NetBIOS name of the Kerberos KDC that performed the authentication server (AS) ticket
                    request.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104452");

                // Verify MS-NRPC requirement:  MS-NRPC_R104452.
                // _NETLOGON_SID_AND_ATTRIBUTES is corresponding to KERB_SID_AND_ATTRIBUTES,
                // It is only used to verify the type not the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_NETLOGON_SID_AND_ATTRIBUTES[]),
                    validationSamInfo.ExtraSids.GetType(),
                    "MS-PAC",
                    104452,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]ExtraSids:  A pointer to a list of
                    KERB_SID_AND_ATTRIBUTES (section 2.2.1) structures that contain a list of SIDs corresponding to
                    groups in domains other than the account domain to which the principal belongs.");
            }
        }


        /// <summary>
        ///  Verify all members in NETLOGON_VALIDATION_SAM_INFO4 structure,
        ///  such as LogonTime, LogoffTime, LogonScript, PasswordLastSet, 
        ///  PasswordCanChange, PasswordMustChange, EffectiveName, FullName and so on.
        /// </summary>
        /// <param name="hresult"> Return value of a method.</param>
        /// <param name="validationSamInfo"> The NETLOGON_VALIDATION_SAM_INFO4 structure.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        /// <param name="expectedPasswordLastSet"> Expected PasswordLastSet string.</param>
        /// <param name="expectedEffectiveName"> Expected EffectiveName string.</param>
        /// <param name="expectedLogonScript"> Expected LogonScript string.</param>
        /// <param name="expectedProfilePath"> Expected ProfilePath string.</param>
        /// <param name="expectedHomeDirectory"> Expected HomeDirectory string.</param>
        /// <param name="expectedHomeDirectoryDrive"> Expected HomeDirectoryDrive string.</param>
        /// <param name="expectedBadPasswordCount">
        ///  Expected BadPasswordCount, A 16-bit unsigned integer that contains the user account's badPwdCount attribute 
        ///  ([MS-ADA1] section 2.83) value for interactive logon.
        /// </param>
        /// <param name="expectedLogonCount">
        ///  Expected LogonCount, A 16-bit unsigned integer that contains the user account's LogonCount attribute 
        ///  ([MS-ADA1] section 2.375) value.
        /// </param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Performance",
            "CA1804:RemoveUnusedLocals",
            MessageId = "logonTime"),
        System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Maintainability",
            "CA1502:AvoidExcessiveComplexity"),
        SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode")]
        private void VerifyNetlogonValidationSamInfo4(
            HRESULT hresult,
            _NETLOGON_VALIDATION_SAM_INFO4 validationSamInfo,
            _NETLOGON_LOGON_INFO_CLASS logonLevel,
            long expectedPasswordLastSet,
            string expectedEffectiveName,
            string expectedLogonScript,
            string expectedProfilePath,
            string expectedHomeDirectory,
            string expectedHomeDirectoryDrive,
            ushort expectedBadPasswordCount,
            ushort expectedLogonCount)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1665");

                // Verify MS-NRPC requirement: MS-NRPC_R1665.
                Site.CaptureRequirementIfAreEqual<string>(
                    PrimaryDomainDnsName,
                    GetRpcUnicodeString(validationSamInfo.DnsLogonDomainName),
                    1665,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]DnsLogonDomainName:  Contains the fully qualified
                    domain name (FQDN) of the domain of the user account.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1666");

                // Verify MS-NRPC requirement: MS-NRPC_R1666.
                Site.CaptureRequirementIfAreEqual<string>(
                    DomainAdminUPN.ToLower(CultureInfo.InvariantCulture),
                    GetRpcUnicodeString(validationSamInfo.Upn).ToLower(CultureInfo.InvariantCulture),
                    1666,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]Upn:  Contains the user principal name (UPN).");

                _OLD_LARGE_INTEGER logonTime = validationSamInfo.LogonTime;
                _RPC_UNICODE_STRING logonScript = validationSamInfo.LogonScript;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualLogonScript = GetRpcUnicodeString(logonScript);
                    bool isLogonScriptValid;
                    if (null == expectedLogonScript)
                    {
                        isLogonScriptValid = null == actualLogonScript;
                    }
                    else
                    {
                        isLogonScriptValid = (logonScript.GetType() == typeof(_RPC_UNICODE_STRING))
                           && actualLogonScript.Equals(expectedLogonScript, StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104495,
                        actual LogonScript: {0},
                        expected LogonScript: {1}",
                        actualLogonScript,
                        expectedLogonScript);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104495.
                    Site.CaptureRequirementIfIsTrue(
                        isLogonScriptValid,
                        "MS-PAC",
                        104495,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]LogonScript:  A RPC_UNICODE_STRING structure
                        that contains the user account's scriptPath attribute ([MS-ADA3] section 2.231) value for
                        interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104496, MS-NRPC_R104497.
                    string isR104496Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104496Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104497,
                            LogonScript.Length: {0}",
                            logonScript.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104497.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            logonScript.Length,
                            "MS-PAC",
                            104497,
                            @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]LogonScript: in Windows,[it]is zero for
                            network logon.");

                        if (null == isR104496Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104496Implementation", bool.TrueString);
                            isR104496Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104496Implemented)
                    {
                        bool implement = bool.Parse(isR104496Implemented);
                        bool isSatisfied = logonScript.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104496,
                            LogonScript.Length: {0}",
                            logonScript.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104496.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104496,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]LogonScript:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                _OLD_LARGE_INTEGER passwordLastSet = validationSamInfo.PasswordLastSet;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert _OLD_LARGE_INTEGER structure to Int64.
                    long actualPasswordLastSetInt = GetInt64ValueFromOldLargeInteger(passwordLastSet);

                    // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                    bool isPasswordLastSetValid = (passwordLastSet.GetType() == typeof(_OLD_LARGE_INTEGER))
                        && actualPasswordLastSetInt.Equals(expectedPasswordLastSet);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104474,
                        actual PasswordLastSet: {0},
                        expected PasswordLastSet: {1}",
                        actualPasswordLastSetInt,
                        expectedPasswordLastSet);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104474.
                    Site.CaptureRequirementIfIsTrue(
                        isPasswordLastSetValid,
                        "MS-PAC",
                        104474,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]PasswordLastSet:  A FILETIME structure
                        that contains the user account's pwdLastSet attribute ([MS-ADA3] section 2.174) value
                        for interactive logon");
                }

                _OLD_LARGE_INTEGER passwordCanChange = validationSamInfo.PasswordCanChange;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104479");

                    // Verify MS-NRPC requirement:  MS-NRPC_R104479.
                    // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                    // It's only used to verify the type not the content because other
                    // protocol is used to get the content.
                    Site.CaptureRequirementIfAreEqual<Type>(
                        typeof(_OLD_LARGE_INTEGER),
                        passwordCanChange.GetType(),
                        "MS-PAC",
                        104479,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]PasswordCanChange: A FILETIME structure that
                        contains the time at which the client's password is allowed to change for interactive logon");
                }

                _OLD_LARGE_INTEGER passwordMustChange = validationSamInfo.PasswordMustChange;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104483");

                    // Verify MS-NRPC requirement:  MS-NRPC_R104483.
                    // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                    // It's only used to verify the type not the content because other
                    // protocol is used to get the content.
                    Site.CaptureRequirementIfAreEqual<Type>(
                        typeof(_OLD_LARGE_INTEGER),
                        passwordMustChange.GetType(),
                        "MS-PAC",
                        104483,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]PasswordMustChange: A FILETIME structure that
                        contains the time at which the client's password expires for interactive logon.");
                }

                _RPC_UNICODE_STRING effectiveName = validationSamInfo.EffectiveName;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualEffectiveName = GetRpcUnicodeString(effectiveName);
                    bool isEffectiveNameValid;
                    if (null == expectedEffectiveName)
                    {
                        isEffectiveNameValid = null == actualEffectiveName;
                    }
                    else
                    {
                        isEffectiveNameValid = (effectiveName.GetType() == typeof(_RPC_UNICODE_STRING))
                            && actualEffectiveName.Equals(expectedEffectiveName, StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104488,
                        actual EffectiveName: {0},
                        expected EffectiveName: {1}",
                        actualEffectiveName,
                        expectedEffectiveName);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104488.
                    Site.CaptureRequirementIfIsTrue(
                        isEffectiveNameValid,
                        "MS-PAC",
                        104488,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]EffectiveName:  A RPC_UNICODE_STRING structure
                        that contains the user account's samAccountName attribute ([MS-ADA3] section 2.221) value for
                        interactive logon");
                }

                _RPC_UNICODE_STRING fullName = validationSamInfo.FullName;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104491");

                    // Verify MS-NRPC requirement:  MS-NRPC_R104491.
                    // It's only used to verify the type not the content because other
                    // protocol is used to get the content.
                    Site.CaptureRequirementIfAreEqual<Type>(
                        typeof(_RPC_UNICODE_STRING),
                        fullName.GetType(),
                        "MS-PAC",
                        104491,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]FullName:  A RPC_UNICODE_STRING structure
                        that contains the user account's full name for interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104492, MS-NRPC_R104493.
                    string isR104492Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104492Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104493,
                            FullName.Length: {0}",
                            fullName.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104493.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            fullName.Length,
                            "MS-PAC",
                            104493,
                            @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]FullName: in Windows,[it] is zero
                            for network logon.");

                        if (null == isR104492Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104492Implementation", bool.TrueString);
                            isR104492Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104492Implemented)
                    {
                        bool implement = bool.Parse(isR104492Implemented);
                        bool isSatisfied = fullName.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104492,
                            FullName.Length: {0}",
                            fullName.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104492.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104492,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]FullName:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                _RPC_UNICODE_STRING profilePath = validationSamInfo.ProfilePath;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualProfilePath = GetRpcUnicodeString(profilePath);
                    bool isProfilePathValid;
                    if (null == expectedProfilePath)
                    {
                        isProfilePathValid = null == actualProfilePath;
                    }
                    else
                    {
                        isProfilePathValid = (profilePath.GetType() == typeof(_RPC_UNICODE_STRING))
                           && actualProfilePath.Equals(expectedProfilePath, StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104498,
                        actual ProfilePath: {0},
                        expected ProfilePath: {1}",
                        actualProfilePath,
                        expectedProfilePath);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104498.
                    Site.CaptureRequirementIfIsTrue(
                        isProfilePathValid,
                        "MS-PAC",
                        104498,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ProfilePath: A RPC_UNICODE_STRING structure
                        that contains the user account's profilePath attribute ([MS-ADA3] section 2.166) value for
                        interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104500, MS-NRPC_R104501.
                    string isR104500Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104500Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104501,
                            ProfilePath.Length: {0}",
                            profilePath.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104501.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            profilePath.Length,
                            "MS-PAC",
                            104501,
                            @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ProfilePath: in Windows,[it] is zero
                            for network logon.");

                        if (null == isR104500Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104500Implementation", bool.TrueString);
                            isR104500Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104500Implemented)
                    {
                        bool implement = bool.Parse(isR104500Implemented);
                        bool isSatisfied = profilePath.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104500,
                            ProfilePath.Length: {0}",
                            profilePath.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104500.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104500,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ProfilePath:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                _RPC_UNICODE_STRING homeDirectoryDrive = validationSamInfo.HomeDirectoryDrive;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualHomeDirectoryDrive = GetRpcUnicodeString(homeDirectoryDrive);
                    bool isHomeDirectoryDriveValid;
                    if (null == expectedHomeDirectoryDrive)
                    {
                        isHomeDirectoryDriveValid = null == actualHomeDirectoryDrive;
                    }
                    else
                    {
                        isHomeDirectoryDriveValid = (homeDirectoryDrive.GetType() == typeof(_RPC_UNICODE_STRING))
                            && actualHomeDirectoryDrive.Equals(
                                                                expectedHomeDirectoryDrive,
                                                                StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104507,
                        actual HomeDirectoryDrive: {0},
                        expected HomeDirectoryDrive: {1}",
                        actualHomeDirectoryDrive,
                        expectedHomeDirectoryDrive);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104507.
                    Site.CaptureRequirementIfIsTrue(
                        isHomeDirectoryDriveValid,
                        "MS-PAC",
                        104507,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]HomeDirectoryDrive: A RPC_UNICODE_STRING
                        structure that contains the user account's HomeDrive attribute ([MS-ADA1] section 2.296)
                        value for interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : NRPC_R104508, MS-NRPC_R104509.
                    string isR104508Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104508Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104509,
                            HomeDirectoryDrive.Length: {0}",
                            homeDirectoryDrive.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104509.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            homeDirectoryDrive.Length,
                            "MS-PAC",
                            104509,
                            @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]HomeDirectoryDrive: in Windows,[it] is zero
                            for network logon.");

                        if (null == isR104508Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104508Implementation", bool.TrueString);
                            isR104508Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104508Implemented)
                    {
                        bool implement = bool.Parse(isR104508Implemented);
                        bool isSatisfied = homeDirectoryDrive.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104508,
                            HomeDirectoryDrive.Length: {0}",
                            homeDirectoryDrive.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104508.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104508,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]HomeDirectoryDrive:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                _RPC_UNICODE_STRING homeDirectory = validationSamInfo.HomeDirectory;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    // Convert the _RPC_UNICODE_STRING structure to string.
                    string actualHomeDirectory = GetRpcUnicodeString(homeDirectory);
                    bool isHomeDirectoryValid;
                    if (null == expectedHomeDirectory)
                    {
                        isHomeDirectoryValid = null == actualHomeDirectory;
                    }
                    else
                    {
                        isHomeDirectoryValid = (homeDirectory.GetType() == typeof(_RPC_UNICODE_STRING))
                           && actualHomeDirectory.Equals(expectedHomeDirectory, StringComparison.OrdinalIgnoreCase);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104503");

                    // Verify MS-NRPC requirement:  MS-NRPC_R104503.
                    Site.CaptureRequirementIfIsTrue(
                        isHomeDirectoryValid,
                        "MS-PAC",
                        104503,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]HomeDirectory: A RPC_UNICODE_STRING structure
                        that contains the user account's HomeDirectory attribute ([MS-ADA1] section  2.295) value for
                        interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104504, MS-NRPC_R104505.
                    string isR104504Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104504Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104505,
                            HomeDirectory.Length: {0}",
                            homeDirectory.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104505.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            homeDirectory.Length,
                            "MS-PAC",
                            104505,
                            @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]HomeDirectory: in Windows,[it]is zero for
                            network logon.");

                        if (null == isR104504Implemented)
                        {
                            Site.Properties.Add("SHOULDMAY.", bool.TrueString);
                            isR104504Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104504Implemented)
                    {
                        bool implement = bool.Parse(isR104504Implemented);
                        bool isSatisfied = homeDirectory.Length == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104504,
                            HomeDirectory.Length: {0}",
                            homeDirectory.Length);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104504.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104504,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]HomeDirectory:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                ushort badPasswordCount = validationSamInfo.BadPasswordCount;

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
                {
                    bool isBadPasswordCountValid = (badPasswordCount.GetType() == typeof(ushort))
                        && badPasswordCount.Equals(expectedBadPasswordCount);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104513,
                        actual BadPasswordCount: {0},
                        expected BadPasswordCount: {1}",
                        badPasswordCount,
                        expectedBadPasswordCount);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104513.
                    Site.CaptureRequirementIfIsTrue(
                        isBadPasswordCountValid,
                        "MS-PAC",
                        104513,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]BadPasswordCount: A 16-bit unsigned integer
                        that contains the user account's badPwdCount attribute ([MS-ADA1] section 2.83) value for
                        interactive logon");
                }

                if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
                {
                    // Verify requirement : MS-NRPC_R104514, MS-NRPC_R104515.
                    string isR104514Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104514Implementation"];
                    if (PDCIsWindows)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104515,
                            BadPasswordCount: {0}",
                            badPasswordCount);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104515.
                        Site.CaptureRequirementIfAreEqual<ushort>(
                            0,
                            badPasswordCount,
                            "MS-PAC",
                            104515,
                            @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]BadPasswordCount:In Windows,[it] is zero
                            for network logon.");

                        if (null == isR104514Implemented)
                        {
                            Site.Properties.Add("MS_NRPC.SHOULDMAY.R104514Implementation", bool.TrueString);
                            isR104514Implemented = bool.TrueString;
                        }
                    }

                    if (null != isR104514Implemented)
                    {
                        bool implement = bool.Parse(isR104514Implemented);
                        bool isSatisfied = badPasswordCount == 0;

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104514,
                            BadPasswordCount: {0}",
                            badPasswordCount);

                        // Verify MS-NRPC requirement:  MS-NRPC_R104514.
                        Site.CaptureRequirementIfAreEqual<bool>(
                            implement,
                            isSatisfied,
                            "MS-PAC",
                            104514,
                            string.Format(CultureInfo.InvariantCulture, 
                                @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]BadPasswordCount:
                                SHOULD be zero for network logon.
                                This requirement is {0} implemented.",
                                implement ? string.Empty : "not"));
                    }
                }

                if (validationSamInfo.ExtraSids != null)
                {
                    for (int i = 0; i < validationSamInfo.ExtraSids.Length; ++i)
                    {
                        if (hresult == HRESULT.ERROR_SUCCESS)
                        {
                            // Verify MS-NRPC requirement: MS-NRPC_R1608.
                            // Stack has changed pointer to corresponding structure.
                            // This structure is generated based on the IDL from the TD.
                            // If the method using this field as parameter executes successfully,
                            // it indicates that this field is the type defined in the TD.
                            Site.CaptureRequirement(
                                1608,
                                @"[In NETLOGON_SID_AND_ATTRIBUTES structure]Sid: 
                                A pointer to a security identifier (SID).");
                        }
                    }
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104455");

                // Verify MS-NRPC requirement:  MS-NRPC_R104455.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.LogonTime.GetType(),
                    "MS-PAC",
                    104455,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]LogonTime:  
                    A FILETIME structure that contains the user account's 
                    lastLogon attribute ([MS-ADA1] section 2.351) value.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104458");

                // Verify MS-NRPC requirement:  MS-NRPC_R104458.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.LogoffTime.GetType(),
                    "MS-PAC",
                    104458,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]LogoffTime:  A FILETIME structure that contains the
                    time the client's logon session should expire.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104465");

                // Verify MS-NRPC requirement:  MS-NRPC_R104465.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                // It's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    validationSamInfo.LogoffTime.GetType(),
                    "MS-PAC",
                    104465,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]KickOffTime:  A FILETIME structure that contains
                    LogoffTime minus the user account's forceLogoff attribute ([MS-ADA1] section 2.233) value.");

                bool isLogonCountValid = (validationSamInfo.LogonCount.GetType() == typeof(ushort))
                    && (validationSamInfo.LogonCount == expectedLogonCount);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104512,
                    actual LogonCount: {0},
                    expected LogonCount: {1}",
                    validationSamInfo.LogonCount,
                    expectedLogonCount);

                // Verify MS-NRPC requirement:  MS-NRPC_R104512.
                // The expectedLogonCount is the LogonCount attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isLogonCountValid,
                    "MS-PAC",
                    104512,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]LogonCount: A 16-bit unsigned integer that contains
                    the user account's LogonCount attribute ([MS-ADA1] section 2.375) value.");

                bool isUserIdValid = (validationSamInfo.UserId.GetType() == typeof(uint))
                    && (validationSamInfo.UserId == DomainAdminRid);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104516,
                    UserId: {0},
                    accountRid: {1}",
                    validationSamInfo.UserId,
                    DomainAdminRid);

                // Verify MS-NRPC requirement:  MS-NRPC_R104516.
                Site.CaptureRequirementIfIsTrue(
                    isUserIdValid,
                    "MS-PAC",
                    104516,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure ]UserId:  A 32-bit unsigned integer that contains
                    the RID of the account.");

                bool isPrimaryGroupRidValid = (validationSamInfo.PrimaryGroupId.GetType() == typeof(uint))
                    && (validationSamInfo.PrimaryGroupId == PrimaryGroupRid);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104518,
                    PrimaryGroupId.: {0},
                    primaryGroupRid: {1}",
                    validationSamInfo.PrimaryGroupId,
                    PrimaryGroupRid);

                // Verify MS-NRPC requirement:  MS-NRPC_R104518.
                Site.CaptureRequirementIfIsTrue(
                    isPrimaryGroupRidValid,
                    "MS-PAC",
                    104518,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure ]PrimaryGroupId:  A 32-bit unsigned integer that
                    contains the RID for the primary group to which this account belongs.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104519");

                // Verify MS-NRPC requirement:  MS-NRPC_R104519.
                Site.CaptureRequirementIfAreEqual<uint>(
                    validationSamInfo.GroupCount,
                    (uint)validationSamInfo.GroupIds.Length,
                    "MS-PAC",
                    104519,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure ]GroupCount: The number of groups in this list
                    [the list of GROUP_MEMBERSHIP (section 2.2.2) structures] MUST be equal to GroupCount.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104520");

                // Verify MS-NRPC requirement:  MS-NRPC_R104520.
                Site.CaptureRequirementIfAreEqual<uint>(
                    validationSamInfo.GroupCount,
                    (uint)validationSamInfo.GroupIds.Length,
                    "MS-PAC",
                    104520,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure ]GroupIds:The number of groups in this list MUST be
                    equal to GroupCount.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104521");

                // Verify MS-NRPC requirement:  MS-NRPC_R104521.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(uint),
                    validationSamInfo.UserFlags.GetType(),
                    "MS-PAC",
                    104521,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]UserFlags:  A 32-bit unsigned integer that contains
                    a set of bit flags that describe the user's logon information.");

                // The value of set A to L bits.
                uint specifiedFlags = (uint)(0x00000001
                    | 0x00000002
                    | 0x00000008
                    | 0x00000020
                    | 0x00000040
                    | 0x00000080
                    | 0x00000100
                    | 0x00000200
                    | 0x00000400
                    | 0x00000800
                    | 0x00001000
                    | 0x00002000);

                uint allOtherFlagValue = validationSamInfo.UserFlags & (~specifiedFlags);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104522,
                    UserFlags: {0}",
                    validationSamInfo.UserFlags);

                // Verify MS-NRPC requirement:  MS-NRPC_R104522.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    allOtherFlagValue,
                    "MS-PAC",
                    104522,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure ] UserFlags: All other bits[except the set of
                    A to L bits] MUST be set to zero");

                // Convert LogonDomainName value to string.
                string actualLogonDomainName = GetRpcUnicodeString(validationSamInfo.LogonDomainName);
                bool isLogonDomainNameValid =
                    (validationSamInfo.LogonDomainName.GetType() == typeof(_RPC_UNICODE_STRING))
                    && actualLogonDomainName.Equals(primaryDomainNetBiosName, StringComparison.OrdinalIgnoreCase);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104525,
                    actual LogonDomainName: {0},
                    expected LogonDomainName: {1}",
                    actualLogonDomainName,
                    primaryDomainNetBiosName);

                // Verify MS-NRPC requirement:  MS-NRPC_R104525.
                Site.CaptureRequirementIfIsTrue(
                    isLogonDomainNameValid,
                    "MS-PAC",
                    104525,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure ]LogonDomainName:  A RPC_UNICODE_STRING structure
                    that contains the NetBIOS name of the domain to which this account belongs.");

                string actualSid = GetStringFromRpcSid(validationSamInfo.LogonDomainId[0]);

                // LogonDomainId array has only one element.
                bool isLogonDomainIdValid = (validationSamInfo.LogonDomainId.GetType() == typeof(_RPC_SID[]))
                    && actualSid.Equals(PrimaryDomainSID);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104526,
                    actual LogonDomainId: {0},
                    expected LogonDomainId: {1}",
                    actualSid,
                    PrimaryDomainSID);

                // Verify MS-NRPC requirement:  MS-NRPC_R104526.
                Site.CaptureRequirementIfIsTrue(
                    isLogonDomainIdValid,
                    "MS-PAC",
                    104526,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure ]LogonDomainId:  A SID structure that contains the SID
                    for the domain specified in LogonDomainName.");

                // Initial the allSidCountInExtraSids to 0.
                int allSidCountInExtraSids = 0;

                // Get all sid count present in ExtraSids.
                for (int i = 0; i < validationSamInfo.ExtraSids.Length; i++)
                {
                    allSidCountInExtraSids += validationSamInfo.ExtraSids[i].Sid.Length;

                    // Verify Attributes member in NETLOGON_SID_AND_ATTRIBUTES structure.
                    this.VerifyAttributesInNetlogonSidAndAttributes(validationSamInfo.ExtraSids[i].Attributes, hresult);
                }

                bool isSidCountValid = (validationSamInfo.SidCount.GetType() == typeof(uint))
                    && (validationSamInfo.SidCount == (uint)allSidCountInExtraSids);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104527,
                    SidCount: {0},
                    allSidCount: {1}",
                    validationSamInfo.SidCount,
                    allSidCountInExtraSids);

                // Verify MS-NRPC requirement:  MS-NRPC_R104527.
                Site.CaptureRequirementIfIsTrue(
                    isSidCountValid,
                    "MS-PAC",
                    104527,
                    @"[In NETLOGON_VALIDATION_SAM_INFO2 structure]SidCount:  A 32-bit unsigned integer that contains
                    the total number of SIDs present in the ExtraSids member.");

                if (validationSamInfo.SidCount != 0)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104528");

                    // Bit D corresponding to the last 6 bit, the value is 0x0020.
                    uint valueDBit = 0x0020;

                    // Verify MS-NRPC requirement:  MS-NRPC_R104528.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        valueDBit,
                        validationSamInfo.UserFlags & valueDBit,
                        "MS-PAC",
                        104528,
                        @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]SidCount: If this member is not zero then the D
                        bit MUST be set in the UserFlags member.");
                }

                // Get the actual logon server name value.
                string actualLogonServerValue = GetRpcUnicodeString(validationSamInfo.LogonServer);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104524,
                    actual LogonServer: {0},
                    expected LogonServer: {1}",
                    actualLogonServerValue,
                    Site.Properties["Common.WritableDC1.NetbiosName"]);

                bool isVerifyR104524 = (validationSamInfo.LogonServer.GetType() == typeof(_RPC_UNICODE_STRING))
                    && actualLogonServerValue.Equals(
                                                      Site.Properties["Common.WritableDC1.NetbiosName"],
                                                      StringComparison.OrdinalIgnoreCase);

                // Verify MS-NRPC requirement:  MS-NRPC_R104524.
                // KDC is PDC in our test environment.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR104524,
                    "MS-PAC",
                    104524,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure ]LogonServer:  A RPC_UNICODE_STRING structure
                    that contains the NetBIOS name of the Kerberos KDC that performed the authentication server
                    (AS) ticket request.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104529");

                // Verify MS-NRPC requirement:  MS-NRPC_R104529.
                // _NETLOGON_SID_AND_ATTRIBUTES is corresponding to KERB_SID_AND_ATTRIBUTES,
                // it is only used to verify the type not the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_NETLOGON_SID_AND_ATTRIBUTES[]),
                    validationSamInfo.ExtraSids.GetType(),
                    "MS-PAC",
                    104529,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExtraSids: A pointer to a list of
                    KERB_SID_AND_ATTRIBUTES (section 2.2.1) structures that contain a list of SIDs corresponding
                    to groups in domains other than the account domain to which the principal belongs.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104532");

                // Verify MS-NRPC requirement:  MS-NRPC_R104532.
                // It is only used to verify the type not the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(uint),
                    validationSamInfo.UserAccountControl.GetType(),
                    "MS-PAC",
                    104532,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]UserAccountControl:  A 32-bit unsigned integer that
                    contains a set of bit flags that represent information about this account.");

                #region unused string-type dummy fields

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1667");


                // Verify MS-NRPC requirement: MS-NRPC_R1667
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString1.Length,
                    1667,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString1:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1668");

                // Verify MS-NRPC requirement: MS-NRPC_R1668.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString1.MaximumLength,
                    1668,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString1:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1669,
                    Buffer field of ExpansionString1: expected value is null, actual value: {0}",
                    validationSamInfo.ExpansionString1.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1669.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString1.Buffer,
                    1669,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString1:  [MUST contain]NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1672");

                // Verify MS-NRPC requirement: MS-NRPC_R1672.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString2.Length,
                    1672,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString2:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1673");

                // Verify MS-NRPC requirement: MS-NRPC_R1673.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString2.MaximumLength,
                    1673,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString2:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1674,
                    Buffer field of ExpansionString2: expected value is null, actual value: {0}",
                    validationSamInfo.ExpansionString2.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1674.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString2.Buffer,
                    1674,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString2:  [MUST contain]NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1677");

                // Verify MS-NRPC requirement: MS-NRPC_R1677.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString3.Length,
                    1677,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString3:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1678");

                // Verify MS-NRPC requirement: MS-NRPC_R1678.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString3.MaximumLength,
                    1678,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString3:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1679,
                    Buffer field of ExpansionString3: expected value is null, actual value: {0}",
                    validationSamInfo.ExpansionString3.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1679.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString3.Buffer,
                    1679,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString3:  [MUST contain] NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1682");

                // Verify MS-NRPC requirement: MS-NRPC_R1682.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString4.Length,
                    1682,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString4:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1683");

                // Verify MS-NRPC requirement: MS-NRPC_R1683.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString4.MaximumLength,
                    1683,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString4:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1684,
                    Buffer field of ExpansionString4: expected value is null, actual value: {0}",
                    validationSamInfo.ExpansionString4.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1684.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString4.Buffer,
                    1684,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString4:  [MUST contain]NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1687");

                // Verify MS-NRPC requirement: MS-NRPC_RR1687.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString5.Length,
                    1687,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString5:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1688");

                // Verify MS-NRPC requirement: MS-NRPC_R1688.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString5.MaximumLength,
                    1688,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString5:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1689,
                    Buffer field of ExpansionString5: expected value is null, actual value: {0}",
                    validationSamInfo.ExpansionString5.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1689.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString5.Buffer,
                    1689,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString5:  [MUST contain]NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1692");

                // Verify MS-NRPC requirement: MS-NRPC_RR1692.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString6.Length,
                    1692,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString6:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1693");

                // Verify MS-NRPC requirement: MS-NRPC_R1693.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString6.MaximumLength,
                    1693,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString6:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1694,
                    Buffer field of ExpansionString6: expected value is null, actual value: {0}",
                    validationSamInfo.ExpansionString6.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1694.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString6.Buffer,
                    1694,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString6:  [MUST contain]NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1697");

                // Verify MS-NRPC requirement: MS-NRPC_RR1697.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString7.Length,
                    1697,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString7:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1698");

                // Verify MS-NRPC requirement: MS-NRPC_R1698.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString7.MaximumLength,
                    1698,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString7:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1699,
                    Buffer field of ExpansionString7: expected value is null, actual value: {0}",
                    validationSamInfo.ExpansionString7.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1699.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString7.Buffer,
                    1699,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString7:  [MUST contain]NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1702");

                // Verify MS-NRPC requirement: MS-NRPC_R1702.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString8.Length,
                    1702,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString8:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1703");

                // Verify MS-NRPC requirement: MS-NRPC_R1703.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString8.MaximumLength,
                    1703,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString8:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1704,
                    Buffer field of ExpansionString8: expected value is null, actual value is {0}",
                    validationSamInfo.ExpansionString8.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1704.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString8.Buffer,
                    1704,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString8:  [MUST contain]NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1707");

                // Verify MS-NRPC requirement: MS-NRPC_R1707.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString9.Length,
                    1707,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString9:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1708");

                // Verify MS-NRPC requirement: MS-NRPC_R1708.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString9.MaximumLength,
                    1708,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString9:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1709,
                    Buffer field of ExpansionString9: expected value is null, actual value is {0}",
                    validationSamInfo.ExpansionString9.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1709.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString9.Buffer,
                    1709,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString9:  [MUST contain]NULL for the
                    Buffer field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1712");

                // Verify MS-NRPC requirement: MS-NRPC_R1712.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString10.Length,
                    1712,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString10:  MUST contain 0 for the
                    Length field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1713");

                // Verify MS-NRPC requirement: MS-NRPC_R1713.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    validationSamInfo.ExpansionString10.MaximumLength,
                    1713,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString10:  [MUST contain]0 for the
                    MaximumLength field.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1714,
                    Buffer field of ExpansionString10: expected value is null, actual value: {0}",
                    validationSamInfo.ExpansionString10.Buffer);

                // Verify MS-NRPC requirement: MS-NRPC_R1714.
                Site.CaptureRequirementIfIsNull(
                    validationSamInfo.ExpansionString10.Buffer,
                    1714,
                    @"[In NETLOGON_VALIDATION_SAM_INFO4 structure]ExpansionString10:  [MUST contain] NULL for the
                    Buffer field.");

                #endregion
            }
        }


        /// <summary>
        ///  Verify PasswordLastSet member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="passwordLastSet"> Returned passwordLastSet _OLD_LARGE_INTEGER structure.</param>
        /// <param name="expectedPasswordLastSet"> Expected PasswordLastSet type.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyPasswordLastSetInNetlogonValidationSamInfo(
            _OLD_LARGE_INTEGER passwordLastSet,
            long expectedPasswordLastSet,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Convert _OLD_LARGE_INTEGER structure to Int64.
                long actualPasswordLastSetInt = GetInt64ValueFromOldLargeInteger(passwordLastSet);

                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                bool isPasswordLastSetValid = (passwordLastSet.GetType() == typeof(_OLD_LARGE_INTEGER))
                    && actualPasswordLastSetInt.Equals(expectedPasswordLastSet);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104297,
                    actual PasswordLastSet: {0},
                    expected PasswordLastSet: {1}",
                    actualPasswordLastSetInt,
                    expectedPasswordLastSet);

                // Verify MS-NRPC requirement:  MS-NRPC_R104297.
                // The expectedPasswordLastSet is the pwdLastSet attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isPasswordLastSetValid,
                    "MS-PAC",
                    104297,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]PasswordLastSet:  A FILETIME structure
                    that contains the user account's pwdLastSet attribute ([MS-ADA3] section 2.174) value
                    for interactive logon");
            }
        }


        /// <summary>
        ///  Verify PasswordCanChange member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="passwordCanChange"> Returned PasswordCanChange value.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyPasswordCanChangeInNetlogonValidationSamInfo(
            _OLD_LARGE_INTEGER passwordCanChange,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104302");

                // Verify MS-NRPC requirement:  MS-NRPC_R104302.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                // It's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    passwordCanChange.GetType(),
                    "MS-PAC",
                    104302,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]PasswordCanChange: A FILETIME structure that contains
                    the time at which the client's password is allowed to change for interactive logon");
            }
        }


        /// <summary>
        ///  Verify PasswordMustChange member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="passwordMustChange"> Returned passwordMustChange _OLD_LARGE_INTEGER structure.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyPasswordMustChangeInNetlogonValidationSamInfo(
            _OLD_LARGE_INTEGER passwordMustChange,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104306");

                // Verify MS-NRPC requirement:  MS-NRPC_R104306.
                // Type _OLD_LARGE_INTEGER in NRPC is corresponding to type FILETIME in PAC.
                // It's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_OLD_LARGE_INTEGER),
                    passwordMustChange.GetType(),
                    "MS-PAC",
                    104306,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]PasswordMustChange: A FILETIME structure that
                    contains the time at which the client's password expires for interactive logon.");
            }
        }


        /// <summary>
        ///  Verify EffectiveName member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="effectiveName"> Returned effectiveName _RPC_UNICODE_STRING structure.</param>
        /// <param name="expectedEffectiveName"> Expected EffectiveName string.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyEffectiveNameInNetlogonValidationSamInfo(
            _RPC_UNICODE_STRING effectiveName,
            string expectedEffectiveName,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Convert the _RPC_UNICODE_STRING structure to string.
                string actualEffectiveName = GetRpcUnicodeString(effectiveName);
                bool isEffectiveNameValid;
                if (null == expectedEffectiveName)
                {
                    isEffectiveNameValid = null == actualEffectiveName;
                }
                else
                {
                    isEffectiveNameValid = (effectiveName.GetType() == typeof(_RPC_UNICODE_STRING))
                    && actualEffectiveName.Equals(expectedEffectiveName, StringComparison.OrdinalIgnoreCase);
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104311,
                    actual EffectiveName: {0},
                    expected EffectiveName: {1}",
                    actualEffectiveName,
                    expectedEffectiveName);

                // Verify MS-NRPC requirement:  MS-NRPC_R104311.
                // The expectedEffectiveName is the samAccountName attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isEffectiveNameValid,
                    "MS-PAC",
                    104311,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]EffectiveName:  A RPC_UNICODE_STRING structure
                    that contains the user account's samAccountName attribute ([MS-ADA3] section 2.221) value for
                    interactive logon");
            }
        }


        /// <summary>
        ///  Verify FullName member in NETLOGON_VALIDATION_SAM_INFO structure
        /// </summary>
        /// <param name="fullName"> Returned FullName _RPC_UNICODE_STRING structure.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyFullNameInNetlogonValidationSamInfo(
            _RPC_UNICODE_STRING fullName,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104314");

                // Verify MS-NRPC requirement:  MS-NRPC_R104314.
                // It's only used to verify the type not the content because other protocol is used to get the content.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_RPC_UNICODE_STRING),
                    fullName.GetType(),
                    "MS-PAC",
                    104314,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]FullName:  A RPC_UNICODE_STRING structure that
                    contains the user account's full name for interactive logon");
            }

            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
            {
                // Verify requirement : MS-NRPC_R104315, MS-NRPC_R104316.
                string isR104315Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104315Implementation"];
                if (PDCIsWindows)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104316,
                        FullName.Length: {0}",
                        fullName.Length);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104316.
                    Site.CaptureRequirementIfAreEqual<ushort>(
                        0,
                        fullName.Length,
                        "MS-PAC",
                        104316,
                        @"[In NETLOGON_VALIDATION_SAM_INFO structure]FullName: in Windows,[it] is zero for
                        network logon.");

                    if (null == isR104315Implemented)
                    {
                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R104315Implementation", bool.TrueString);
                        isR104315Implemented = bool.TrueString;
                    }
                }

                if (null != isR104315Implemented)
                {
                    bool implement = bool.Parse(isR104315Implemented);
                    bool isSatisfied = fullName.Length == 0;

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104315,
                        FullName.Length: {0}",
                        fullName.Length);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104315.
                    Site.CaptureRequirementIfAreEqual<bool>(
                        implement,
                        isSatisfied,
                        "MS-PAC",
                        104315,
                        string.Format(CultureInfo.InvariantCulture, 
                            @"[In NETLOGON_VALIDATION_SAM_INFO structure]FullName:
                            SHOULD be zero for network logon.
                            This requirement is {0} implemented.",
                            implement ? string.Empty : "not"));
                }
            }
        }


        /// <summary>
        ///  Verify LogonScript member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="logonScript"> Returned LogonScript _RPC_UNICODE_STRING structure.</param>
        /// <param name="expectedLogonScript"> Expected LogonScript string type.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyLogonScriptInNetlogonValidationSamInfo(
            _RPC_UNICODE_STRING logonScript,
            string expectedLogonScript,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Convert the _RPC_UNICODE_STRING structure to string.
                string actualLogonScript = GetRpcUnicodeString(logonScript);
                bool isLogonScriptValid;
                if (null == expectedLogonScript)
                {
                    isLogonScriptValid = null == actualLogonScript;
                }
                else
                {
                    isLogonScriptValid = (logonScript.GetType() == typeof(_RPC_UNICODE_STRING))
                    && actualLogonScript.Equals(expectedLogonScript, StringComparison.OrdinalIgnoreCase);
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104318,
                    actual LogonScript: {0},
                    expected LogonScript: {1}",
                    actualLogonScript,
                    expectedLogonScript);

                // Verify MS-NRPC requirement:  MS-NRPC_R104318.
                // The expectedLogonScript is the scriptPath attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isLogonScriptValid,
                    "MS-PAC",
                    104318,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]LogonScript: A RPC_UNICODE_STRING structure
                    that contains the user account's scriptPath attribute ([MS-ADA3] section 2.231) value for
                    interactive logon");
            }

            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
            {
                // Verify requirement : MS-NRPC_R104319, MS-NRPC_R104320.
                string isR104319Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104319Implementation"];
                if (PDCIsWindows)
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R104320.
                    Site.CaptureRequirementIfAreEqual<ushort>(
                        0,
                        logonScript.Length,
                        "MS-PAC",
                        104320,
                        @"[In NETLOGON_VALIDATION_SAM_INFO structure]LogonScript: in Windows,[it] is zero
                        for network logon.");

                    if (null == isR104319Implemented)
                    {
                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R104319Implementation", bool.TrueString);
                        isR104319Implemented = bool.TrueString;
                    }
                }

                if (null != isR104319Implemented)
                {
                    bool implement = bool.Parse(isR104319Implemented);
                    bool isSatisfied = logonScript.Length == 0;

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104319,
                        LogonScript.Length: {0}",
                        logonScript.Length);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104319.
                    Site.CaptureRequirementIfAreEqual<bool>(
                        implement,
                        isSatisfied,
                        "MS-PAC",
                        104319,
                        string.Format(CultureInfo.InvariantCulture, 
                            @"[In NETLOGON_VALIDATION_SAM_INFO structure]LogonScript:
                            SHOULD be zero for network logon.
                            This requirement is {0} implemented.",
                            implement ? string.Empty : "not"));
                }
            }
        }


        /// <summary>
        ///  Verify ProfilePath member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="profilePath"> Returned ProfilePath _RPC_UNICODE_STRING structure.</param>
        /// <param name="expectedProfilePath"> Expected ProfilePath string type.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyProfilePathInNetlogonValidationSamInfo(
            _RPC_UNICODE_STRING profilePath,
            string expectedProfilePath,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Convert the _RPC_UNICODE_STRING structure to string.
                string actualProfilePath = GetRpcUnicodeString(profilePath);
                bool isProfilePathValid;
                if (null == expectedProfilePath)
                {
                    isProfilePathValid = null == actualProfilePath;
                }
                else
                {
                    isProfilePathValid = (profilePath.GetType() == typeof(_RPC_UNICODE_STRING))
                    && actualProfilePath.Equals(expectedProfilePath, StringComparison.OrdinalIgnoreCase);
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104321,
                    actual ProfilePath: {0},
                    expected ProfilePath: {1}",
                    actualProfilePath,
                    expectedProfilePath);

                // Verify MS-NRPC requirement:  MS-NRPC_R104321.
                // The expectedProfilePath is the profilePath attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isProfilePathValid,
                    "MS-PAC",
                    104321,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]ProfilePath: A RPC_UNICODE_STRING structure
                    that contains the user account's profilePath attribute ([MS-ADA3] section 2.166) value for
                    interactive logon");
            }

            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
            {
                // Verify requirement : MS-NRPC_R104323, MS-NRPC_R104324.
                string isR104323Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104323Implementation"];
                if (PDCIsWindows)
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R104324.
                    Site.CaptureRequirementIfAreEqual<ushort>(
                        0,
                        profilePath.Length,
                        "MS-PAC",
                        104324,
                        @"[In NETLOGON_VALIDATION_SAM_INFO structure]ProfilePath: in Windows,[it] is zero for
                        network logon.");

                    if (null == isR104323Implemented)
                    {
                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R104323Implementation", bool.TrueString);
                        isR104323Implemented = bool.TrueString;
                    }
                }

                if (null != isR104323Implemented)
                {
                    bool implement = bool.Parse(isR104323Implemented);
                    bool isSatisfied = profilePath.Length == 0;

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104323,
                        Actual profilePath.Length: {0}",
                        profilePath.Length);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104323.
                    Site.CaptureRequirementIfAreEqual<bool>(
                        implement,
                        isSatisfied,
                        "MS-PAC",
                        104323,
                        string.Format(CultureInfo.InvariantCulture, 
                            @"[In NETLOGON_VALIDATION_SAM_INFO structure]ProfilePath:
                            SHOULD be zero for network logon.
                            This requirement is {0} implemented.",
                            implement ? string.Empty : "not"));
                }
            }
        }


        /// <summary>
        ///  Verify HomeDirectory member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="homeDirectory"> Returned HomeDirectory _RPC_UNICODE_STRING structure.</param>
        /// <param name="expectedHomeDirectory"> Expected HomeDirectory string type.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyHomeDirectoryInNetlogonValidationSamInfo(
            _RPC_UNICODE_STRING homeDirectory,
            string expectedHomeDirectory,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Convert the _RPC_UNICODE_STRING structure to string.
                string actualHomeDirectory = GetRpcUnicodeString(homeDirectory);
                bool isHomeDirectoryValid;
                if (null == expectedHomeDirectory)
                {
                    isHomeDirectoryValid = null == actualHomeDirectory;
                }
                else
                {
                    isHomeDirectoryValid = (homeDirectory.GetType() == typeof(_RPC_UNICODE_STRING))
                        && actualHomeDirectory.Equals(expectedHomeDirectory, StringComparison.OrdinalIgnoreCase);
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104326,
                    actual HomeDirectory: {0},
                    expected HomeDirectory: {1}",
                    actualHomeDirectory,
                    expectedHomeDirectory);

                // Verify MS-NRPC requirement:  MS-NRPC_R104326.
                // The expectedHomeDirectory is the HomeDirectory attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isHomeDirectoryValid,
                    "MS-PAC",
                    104326,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]HomeDirectory: A RPC_UNICODE_STRING structure
                    that contains the user account's HomeDirectory attribute ([MS-ADA1] section 2.295) value for
                    interactive logon");
            }

            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
            {
                // Verify requirement : MS-NRPC_R104327, MS-NRPC_R104328.
                string isR104327Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104327Implementation"];
                if (PDCIsWindows)
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R104328.
                    Site.CaptureRequirementIfAreEqual<ushort>(
                        0,
                        homeDirectory.Length,
                        "MS-PAC",
                        104328,
                        @"[In NETLOGON_VALIDATION_SAM_INFO structure]HomeDirectory: in Windows,[it] is zero for
                        network logon.");

                    if (null == isR104327Implemented)
                    {
                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R104327Implementation", bool.TrueString);
                        isR104327Implemented = bool.TrueString;
                    }
                }

                if (null != isR104327Implemented)
                {
                    bool implement = bool.Parse(isR104327Implemented);
                    bool isSatisfied = homeDirectory.Length == 0;

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104327,
                        HomeDirectory.Length: {0}",
                        homeDirectory.Length);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104327.
                    Site.CaptureRequirementIfAreEqual<bool>(
                        implement,
                        isSatisfied,
                        "MS-PAC",
                        104327,
                        string.Format(CultureInfo.InvariantCulture, 
                            @"[In NETLOGON_VALIDATION_SAM_INFO structure]HomeDirectory:
                            SHOULD be zero for network logon.
                            This requirement is {0} implemented.",
                            implement ? string.Empty : "not"));
                }
            }
        }


        /// <summary>
        ///  Verify HomeDirectoryDrive member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="homeDirectoryDrive"> Returned HomeDirectoryDrive _RPC_UNICODE_STRING structure.</param>
        /// <param name="expectedHomeDirectoryDrive"> Expected HomeDirectoryDrive string type.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyHomeDirectoryDriveInNetlogonValidationSamInfo(
            _RPC_UNICODE_STRING homeDirectoryDrive,
            string expectedHomeDirectoryDrive,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                // Convert the _RPC_UNICODE_STRING structure to string.
                string actualHomeDirectoryDrive = GetRpcUnicodeString(homeDirectoryDrive);
                bool isHomeDirectoryDriveValid;
                if (null == expectedHomeDirectoryDrive)
                {
                    isHomeDirectoryDriveValid = null == actualHomeDirectoryDrive;
                }
                else
                {
                    isHomeDirectoryDriveValid = (homeDirectoryDrive.GetType() == typeof(_RPC_UNICODE_STRING))
                       && actualHomeDirectoryDrive.Equals(
                                                           expectedHomeDirectoryDrive,
                                                           StringComparison.OrdinalIgnoreCase);
                }

                // Add the debug information. 
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104330,
                    actual HomeDirectoryDrive: {0},
                    expected HomeDirectoryDrive: {1}",
                    actualHomeDirectoryDrive,
                    expectedHomeDirectoryDrive);

                // Verify MS-NRPC requirement:  MS-NRPC_R104330.
                // The expectedHomeDirectoryDrive is the HomeDrive attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isHomeDirectoryDriveValid,
                    "MS-PAC",
                    104330,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]HomeDirectoryDrive: A RPC_UNICODE_STRING structure
                    that contains the user account's HomeDrive attribute ([MS-ADA1] section 2.296) value for
                    interactive logon");
            }

            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
            {
                // Verify requirement : MS-NRPC_R104331, MS-NRPC_R104332.
                string isR104331Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104331Implementation"];
                if (PDCIsWindows)
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R104332.
                    Site.CaptureRequirementIfAreEqual<ushort>(
                        0,
                        homeDirectoryDrive.Length,
                        "MS-PAC",
                        104332,
                        @"[In NETLOGON_VALIDATION_SAM_INFO structure]HomeDirectoryDrive: in Windows,[it] is zero for
                        network logon.");

                    if (null == isR104331Implemented)
                    {
                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R104331Implementation", bool.TrueString);
                        isR104331Implemented = bool.TrueString;
                    }
                }

                if (null != isR104331Implemented)
                {
                    bool implement = bool.Parse(isR104331Implemented);
                    bool isSatisfied = homeDirectoryDrive.Length == 0;

                    // Add the debug information. 
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104331,
                        HomeDirectoryDrive.Length: {0}",
                        homeDirectoryDrive.Length);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104331.
                    Site.CaptureRequirementIfAreEqual<bool>(
                        implement,
                        isSatisfied,
                        "MS-PAC",
                        104331,
                        string.Format(CultureInfo.InvariantCulture, 
                            @"[In NETLOGON_VALIDATION_SAM_INFO structure]HomeDirectoryDrive:
                            SHOULD be zero for network logon.
                            This requirement is {0} implemented.",
                            implement ? string.Empty : "not"));
                }
            }
        }


        /// <summary>
        ///  Verify BadPasswordCount member in NETLOGON_VALIDATION_SAM_INFO structure.
        /// </summary>
        /// <param name="badPasswordCount">
        ///  Returned BadPasswordCount, A 16-bit unsigned integer that contains the user account's badPwdCount attribute
        ///  ([MS-ADA1] section 2.83) value for interactive logon.
        /// </param>
        /// <param name="expectedBadPasswordCount">
        ///  Expected BadPasswordCount, A 16-bit unsigned integer that contains the user account's badPwdCount attribute
        ///  ([MS-ADA1] section 2.83) value for interactive logon.
        /// </param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of the logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        private void VerifyBadPasswordCountInNetlogonValidationSamInfo(
            ushort badPasswordCount,
            ushort expectedBadPasswordCount,
            _NETLOGON_LOGON_INFO_CLASS logonLevel)
        {
            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation)
            {
                bool isBadPasswordCountValid = (badPasswordCount.GetType() == typeof(ushort))
                    && badPasswordCount.Equals(expectedBadPasswordCount);

                // Add the debug information. 
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104336,
                    actual BadPasswordCount: {0},
                    expected BadPasswordCount: {1}",
                    badPasswordCount,
                    expectedBadPasswordCount);

                // Verify MS-NRPC requirement:  MS-NRPC_R104336.
                // The expectedBadPasswordCount is the badPwdCount attribute value.
                Site.CaptureRequirementIfIsTrue(
                    isBadPasswordCountValid,
                    "MS-PAC",
                    104336,
                    @"[In NETLOGON_VALIDATION_SAM_INFO structure]BadPasswordCount: A 16-bit unsigned integer
                    that contains the user account's badPwdCount attribute ([MS-ADA1] section 2.83) value for
                    interactive logon");
            }

            if (logonLevel == _NETLOGON_LOGON_INFO_CLASS.NetlogonNetworkInformation)
            {
                // Verify requirement : MS-NRPC_R104337, MS-NRPC_R104338.
                string isR104337Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104337Implementation"];
                if (PDCIsWindows)
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R104338.
                    Site.CaptureRequirementIfAreEqual<ushort>(
                        0,
                        badPasswordCount,
                        "MS-PAC",
                        104338,
                        @"[In NETLOGON_VALIDATION_SAM_INFO structure]BadPasswordCount:In Windows,[it] is zero for
                        network logon.");

                    if (null == isR104337Implemented)
                    {
                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R104337Implementation", bool.TrueString);
                        isR104337Implemented = bool.TrueString;
                    }
                }

                if (null != isR104337Implemented)
                {
                    bool implement = bool.Parse(isR104337Implemented);
                    bool isSatisfied = badPasswordCount == 0;

                    // Add the debug information. 
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104337,
                        BadPasswordCount: {0}",
                        badPasswordCount);

                    // Verify MS-NRPC requirement:  MS-NRPC_R104337.
                    Site.CaptureRequirementIfAreEqual<bool>(
                        implement,
                        isSatisfied,
                        "MS-PAC",
                        104337,
                        string.Format(CultureInfo.InvariantCulture, 
                            @"[In NETLOGON_VALIDATION_SAM_INFO structure]BadPasswordCount:
                            SHOULD be zero for network logon.
                            This requirement is {0} implemented.",
                            implement ? string.Empty : "not"));
                }
            }
        }

        #endregion

        #region DOMAIN_NAME_BUFFER (Section 2.2.1.6.1)

        /// <summary>
        ///  Verify DOMAIN_NAME_BUFFER structure.
        /// </summary>
        /// <param name="domainNameBuffer"> the DOMAIN_NAME_BUFFER structure value.</param>
        private void VerifyDomainNameBuffer(_DOMAIN_NAME_BUFFER domainNameBuffer)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1805");

            // Verify MS-NRPC requirement: MS-NRPC_R1805.
            Site.CaptureRequirementIfAreEqual<uint>(
                (uint)domainNameBuffer.DomainNames.Length,
                domainNameBuffer.DomainNameByteCount,
                1805,
                @"[In DOMAIN_NAME_BUFFER structure]DomainNameByteCount:  The size, in bytes, of the buffer pointed
                to by the DomainNames field.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R104867,
                DomainNames: {0}",
                ArrayToString(domainNameBuffer.DomainNames));

            // Verify MS-NRPC requirement: MS-NRPC_R104867.
            Site.CaptureRequirementIfIsTrue(
                IsMultiSzFormat(domainNameBuffer.DomainNames),
                104867,
                @"[In DOMAIN_NAME_BUFFER structure]DomainNames:  The Unicode string buffer that contains the list
                of trusted domains, in MULTI-SZ format. MULTI-SZ format is a UTF-16 string composed of one or more
                substrings. Each substring is separated from adjacent substrings by the UTF-16 null character, 0x0000.
                After the final substring, the MULTI-SZ format string is terminated by two UTF-16 null characters.");
        }

        #endregion

        #region DS_DOMAIN_TRUSTSW (Section 2.2.1.6.2)

        /// <summary>
        ///  Verify DS_DOMAIN_TRUSTSW structure.
        /// </summary>
        /// <param name="dsdomainTrustsw"> The DS_DOMAIN_TRUSTSW structure value.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Performance",
            "CA1804:RemoveUnusedLocals",
            MessageId = "expectedGuid")]
        private void VerifyDsDomainTrustsw(_DS_DOMAIN_TRUSTSW dsdomainTrustsw)
        {
            // A: 0x00000001.
            bool isBitASet = (dsdomainTrustsw.Flags & 0x00000001) == 0x00000001;

            // B: 0x00000002.
            bool isBitBSet = (dsdomainTrustsw.Flags & 0x00000002) == 0x00000002;

            if (isBitASet || isBitBSet)
            {
                // According to the TD section 3.5.5.6.1 DsrEnumerateDomainTrusts,
                // Flags: A set of bit flags that specify properties that MUST be true for a domain trust to be part of
                // the returned domain name list.
                //                     1                   2                   3
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0       H G O F E D C B A
                // Where the bits are defined as:
                // Value    Description
                // A        Domain is a member of the forest.
                // B        Domain is directly trusted by this domain.
                string expectedDomainNetBiosName = isBitASet ? primaryDomainNetBiosName : trustDomainNetBiosName;
                string expectedDnsDomainName = isBitASet ? PrimaryDomainDnsName : TrustDomainDnsName;
                string expectedSid = isBitASet ? PrimaryDomainSID : TrustDomainSid;

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1814");

                // Verify MS-NRPC requirement: MS-NRPC_R1814.
                Site.CaptureRequirementIfAreEqual<string>(
                    expectedDomainNetBiosName.ToLower(CultureInfo.InvariantCulture),
                    dsdomainTrustsw.NetbiosDomainName.ToLower(CultureInfo.InvariantCulture),
                    1814,
                    @"[In DS_DOMAIN_TRUSTSW structure]NetbiosDomainName:  A pointer to a null-terminated Unicode
                    string that contains the NetBIOS name of the trusted domain.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1815");

                // Verify MS-NRPC requirement: MS-NRPC_R1815.
                Site.CaptureRequirementIfAreEqual<string>(
                    expectedDnsDomainName.ToLower(CultureInfo.InvariantCulture),
                    dsdomainTrustsw.DnsDomainName.ToLower(CultureInfo.InvariantCulture),
                    1815,
                    @"[In DS_DOMAIN_TRUSTSW structure]DnsDomainName:  A pointer to a null-terminated Unicode string
                    that contains the fully qualified domain name (FQDN) of the trusted domain.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1861");

                // Verify MS-NRPC requirement: MS-NRPC_R1861.
                // DomainSid array has only one element.
                Site.CaptureRequirementIfAreEqual<string>(
                    expectedSid,
                    GetStringFromRpcSid(dsdomainTrustsw.DomainSid[0]),
                    1861,
                    @"[In DS_DOMAIN_TRUSTSW structure]DomainSid:  A pointer to an SID structure that identifies the
                    current domain.");
            }

            // A: 0x00000001.
            if ((dsdomainTrustsw.Flags & 0x00000001)
                == 0x00000001)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1819");

                // Verify MS-NRPC requirement: MS-NRPC_R1819.
                // PrimaryDomainNetBiosName is a member of the forest.
                Site.CaptureRequirementIfAreEqual<string>(
                    primaryDomainNetBiosName.ToLower(CultureInfo.InvariantCulture),
                    dsdomainTrustsw.NetbiosDomainName.ToLower(CultureInfo.InvariantCulture),
                    1819,
                    @"[In DS_DOMAIN_TRUSTSW structure]When A bit in flags parameter is set,
                    it means domain is a member of a forest.");
            }

            // B: 0x00000002.
            if ((dsdomainTrustsw.Flags & 0x00000002)
                == 0x00000002)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1820");

                // Verify MS-NRPC requirement: MS-NRPC_R1820.
                // The dsdomainTrustsw.NetbiosDomainName is trusted by the current domain: primary domain.
                Site.CaptureRequirementIfAreEqual<string>(
                    trustDomainNetBiosName.ToLower(CultureInfo.InvariantCulture),
                    dsdomainTrustsw.NetbiosDomainName.ToLower(CultureInfo.InvariantCulture),
                    1820,
                    @"[In DS_DOMAIN_TRUSTSW structure]When B bit in flags parameter is set,it means domain is directly
                    trusted by the current domain.");
            }

            // C: 0x00000004.
            if ((dsdomainTrustsw.Flags & 0x00000004)
                == 0x00000004)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1821");

                // Verify MS-NRPC requirement: MS-NRPC_R1821.
                // PrimaryDomainNetBiosName is the root of the forest.
                Site.CaptureRequirementIfAreEqual<string>(
                    primaryDomainNetBiosName.ToLower(CultureInfo.InvariantCulture),
                    dsdomainTrustsw.NetbiosDomainName.ToLower(CultureInfo.InvariantCulture),
                    1821,
                    @"[In DS_DOMAIN_TRUSTSW structure]When C bit in flags parameter is set,
                    it means domain is the root of a forest.");
            }

            // D: 0x00000008.
            if ((dsdomainTrustsw.Flags & 0x00000008)
                == 0x00000008)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1822");

                // Verify MS-NRPC requirement: MS-NRPC_R1822.
                // PrimaryDomainNetBiosName is the primary domain of the queried server.
                Site.CaptureRequirementIfAreEqual<string>(
                    primaryDomainNetBiosName.ToLower(CultureInfo.InvariantCulture),
                    dsdomainTrustsw.NetbiosDomainName.ToLower(CultureInfo.InvariantCulture),
                    1822,
                    @"[In DS_DOMAIN_TRUSTSW structure]When D bit in flags parameter is set,it means domain is the
                    primary domain of the queried server.");
            }

            // E: 0x00000010.
            if ((dsdomainTrustsw.Flags & 0x00000010)
                == 0x00000010)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1823");

                // Verify MS-NRPC requirement: MS-NRPC_R1823
                // Primary domain is running in native mode, so only verify the domain name.
                Site.CaptureRequirementIfAreEqual<string>(
                    primaryDomainNetBiosName.ToLower(CultureInfo.InvariantCulture),
                    dsdomainTrustsw.NetbiosDomainName.ToLower(CultureInfo.InvariantCulture),
                    1823,
                    @"[In DS_DOMAIN_TRUSTSW structure]When E bit in flags parameter is set,it means primary domain
                    is running in native mode.");
            }

            // F: 0x00000020
            if ((dsdomainTrustsw.Flags & 0x00000020)
                == 0x00000020)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1824");

                // Verify MS-NRPC requirement: MS-NRPC_R1824
                // The returned dsdomainTrustsw.NetbiosDomainName trusts the current domain Pdc,
                // so only verify the domain name.
                Site.CaptureRequirementIfAreEqual<string>(
                    trustDomainNetBiosName.ToLower(CultureInfo.InvariantCulture),
                    dsdomainTrustsw.NetbiosDomainName.ToLower(CultureInfo.InvariantCulture),
                    1824,
                    @"[In DS_DOMAIN_TRUSTSW structure]When F bit in flags parameter is set,it means domain directly
                    trusts the current domain.");
            }

            // Flags: A set of bit flags that define the domain trust attributes.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 H G 0 F E D C B A
            // The value when set A to H bits.
            uint allUnusedBits = ~(uint)(0x00000001
                | 0x00000002
                | 0x00000004
                | 0x00000008
                | 0x00000010
                | 0x00000020
                | 0x00000080
                | 0x00000100);

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1829,
                Flags: {0}",
                dsdomainTrustsw.Flags);

            // Verify MS-NRPC requirement: MS-NRPC_R1829.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                dsdomainTrustsw.Flags & allUnusedBits,
                1829,
                @"[In DS_DOMAIN_TRUSTSW structure]Flags:All other bits[except A to H bits] MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1833");

            // Verify MS-NRPC requirement: MS-NRPC_R1833.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                dsdomainTrustsw.ParentIndex,
                1833,
                @"[In DS_DOMAIN_TRUSTSW structure]ParentIndex:Otherwise[if the A flag was not specified in the Flags
                parameter of the DsrEnumerateDomainTrusts method or if the Flags field of this structure,
                DS_DOMAIN_TRUSTSW, contains the C flag], it MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1839,
                TrustType: {0}",
                dsdomainTrustsw.TrustType);

            // TrustType: A set of bit flags describing the type of domain with which the trust is associated.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 D C B A
            // A: 0x00000001
            // B: 0x00000002
            // C: 0x00000004
            // D: 0x00000008
            bool isVerifyR1839 = (dsdomainTrustsw.TrustType == 0x00000001)
                || (dsdomainTrustsw.TrustType == 0x00000002)
                || (dsdomainTrustsw.TrustType == 0x00000004)
                || (dsdomainTrustsw.TrustType == 0x00000008);

            // Verify MS-NRPC requirement: MS-NRPC_R1839.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR1839,
                1839,
                @"[In DS_DOMAIN_TRUSTSW structure]TrustType MUST be one, and only one, of the following bits
                [A,B,C,D bits].");

            // Add the debug information.
            Site.Log.Add(
    LogEntryKind.Debug,
    "Verify MS-NRPC_R1844");

            // TrustType: A set of bit flags describing the type of domain with which the trust is associated.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 D C B A
            // A: 0x00000001
            // B: 0x00000002
            // C: 0x00000004
            // D: 0x00000008
            allUnusedBits = ~(uint)(0x00000001
                | 0x00000002
                | 0x00000004
                | 0x00000008);

            // Verify MS-NRPC requirement: MS-NRPC_R1844.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                dsdomainTrustsw.TrustType & allUnusedBits,
                1844,
                @"[In DS_DOMAIN_TRUSTSW structure]TrustType:All other bits[except A,B,C,D bits] MUST be
                set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1848,
                TrustAttributes: {0}",
                dsdomainTrustsw.TrustAttributes);

            // TrustAttributes: A set of bit flags describing trust link attributes.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 I H 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 G F E D C B A
            // D: 0x00000008
            // E: 0x00000010
            // F: 0x00000020
            bool isVerifyR1848 = !((((dsdomainTrustsw.TrustAttributes & (uint)0x00000008)
                | (dsdomainTrustsw.TrustAttributes & (uint)0x00000010)) > 0)
                && ((dsdomainTrustsw.TrustAttributes & (uint)0x00000020) > 0));

            // Verify MS-NRPC requirement: MS-NRPC_R1848
            // If the flags is valid, it means there are no exception as R1848 says, so the requirement can be verified.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR1848,
                1848,
                @"[In DS_DOMAIN_TRUSTSW structure]TrustAttributes:The value is constructed from zero or more bit flags
                [the set of A to G bits] from the following table, with the exception that bit F cannot be combined
                with E or D.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1859,
                TrustAttributes: {0}",
                dsdomainTrustsw.TrustAttributes);

            // TrustAttributes: A set of bit flags describing trust link attributes.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 I H 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 G F E D C B A
            allUnusedBits = ~(uint)(0x00000001
                | 0x00000002
                | 0x00000004
                | 0x00000008
                | 0x00000010
                | 0x00000020
                | 0x00000040
                | 0x00400000
                | 0x00800000);

            // Verify MS-NRPC requirement: MS-NRPC_R1859.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                dsdomainTrustsw.TrustAttributes & allUnusedBits,
                1859,
                @"[In DS_DOMAIN_TRUSTSW structure]TrustAttributes:All other bits[except the set of A to I bits]
                MUST be set to zero.");
        }

        #endregion

        #region NETLOGON_TRUSTED_DOMAIN_ARRAY (Section 2.2.1.6.3)

        /// <summary>
        ///  Verify NETLOGON_TRUSTED_DOMAIN_ARRAY structure.
        /// </summary>
        /// <param name="hresult">
        ///  Returned value of a method that takes NETLOGON_TRUSTED_DOMAIN_ARRAY structure as a parameter.
        /// </param>
        private void VeirfyNetlogonTrustedDomainArray(HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R1870
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    1870,
                    @"[In NETLOGON_TRUSTED_DOMAIN_ARRAY structure]Domains:  The data structure that contains 
                    an array of DS_DOMAIN_TRUSTSW structures, as specified in section 2.2.1.6.2, that 
                    represent trusted domains.");
            }
        }

        #endregion

        #region NL_GENERIC_RPC_DATA (Section 2.2.1.6.4)

        /// <summary>
        ///  Verify NL_GENERIC_RPC_DATA structure.
        /// </summary>
        /// <param name="rpcData"> The NL_GENERIC_RPC_DATA structure value.</param>
        /// <param name="hresult">
        ///  Returned value of a method that takes UnicodeStringData member as a parameter.
        /// </param>
        private void VeirfyNlGenericRpcData(
            _NL_GENERIC_RPC_DATA rpcData,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1874");

                // Verify MS-NRPC requirement: MS-NRPC_R1874.
                Site.CaptureRequirementIfAreEqual<uint>(
                    (uint)rpcData.UlongData.Length,
                    rpcData.UlongEntryCount,
                    1874,
                    @"[In NL_GENERIC_RPC_DATA structure]UlongEntryCount:  The number of entries in UlongData.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1876");

                uint expectedCount = (rpcData.UnicodeStringData == null) ? 0 : (uint)rpcData.UnicodeStringData.Length;

                // Verify MS-NRPC requirement: MS-NRPC_R1876.
                Site.CaptureRequirementIfAreEqual<uint>(
                    expectedCount,
                    rpcData.UnicodeStringEntryCount,
                    1876,
                    @"[In NL_GENERIC_RPC_DATA structure]UnicodeStringEntryCount:  The number of entries
                    in UnicodeStringData.");

                // Verify MS-NRPC requirement: MS-NRPC_R1877.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD, 
                // if the method using this field as parameter executes successfully,
                // it indicates that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    1877,
                    @"[In NL_GENERIC_RPC_DATA structure]UnicodeStringData:  A pointer to an array of
                    Unicode string structures.");
            }
        }

        #endregion

        #region NETLOGON_INFO_1 (Section 2.2.1.7.2)

        /// <summary>
        ///  Verify NETLOGON_INFO_1 structure.
        /// </summary>
        /// <param name="netlogonInfo"> The NETLOGON_INFO_1 structure value.</param>
        private void VerifyNetlogonInfo1(_NETLOGON_INFO_1 netlogonInfo)
        {
            // netlog1_flags: A set of bit flags that have the following meanings.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 G F E D C B A
            // This is the value when all unused bits are set, and all used bits are clear.
            uint allUnusedBits = ~(uint)(0x00000001
                | 0x00000002
                | 0x00000004
                | 0x00000008
                | 0x00000010
                | 0x00000020
                | 0x00000040);

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1892");

            // Verify MS-NRPC requirement: MS-NRPC_R1892.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                netlogonInfo.netlog1_flags & allUnusedBits,
                1892,
                @"[In NETLOGON_INFO_1 structure]netlog1_flags:The value is constructed from zero or more bit flags
                [the set of A bit to G bit] from the following table.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1923");

            // Verify MS-NRPC requirement: MS-NRPC_R1923.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                netlogonInfo.netlog1_flags & allUnusedBits,
                1923,
                @"[In NETLOGON_INFO_1 structure]netlog1_flags:All other bits[except the set of A bit to G bit]
                MUST be set to zero.");
        }

        #endregion

        #region NETLOGON_INFO_2 (Section 2.2.1.7.3)

        /// <summary>
        ///  Verify NETLOGON_INFO_2 structure.
        /// </summary>
        /// <param name="netlogonInfo"> The NETLOGON_INFO_2 structure value.</param>
        private void VerifyNetlogonInfo2(_NETLOGON_INFO_2 netlogonInfo)
        {
            // netlog2_flags: A set of bit flags describing the following control query responses from the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 C 0 B A 0 0 0 0
            // A: 0x00000010
            // B: 0x00000020
            // C: 0x00000080
            uint allUnusedBits = ~(uint)(0x00000010
                | 0x00000020
                | 0x00000080);

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1932");

            // Verify MS-NRPC requirement: MS-NRPC_R1932.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                netlogonInfo.netlog2_flags & allUnusedBits,
                1932,
                @"[In NETLOGON_INFO_2 structure]netlog2_flags:The value is constructed from zero or more bit flags
                [A,B,C bits] from the following table.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1942");

            // Verify MS-NRPC requirement: MS-NRPC_R1942.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                netlogonInfo.netlog2_flags & allUnusedBits,
                1942,
                @"[In NETLOGON_INFO_2 structure]netlog2_flags:All other bits[except A,B,C bits] MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1948,
                netlog2_trusted_dc_name: {0}",
                netlogonInfo.netlog2_trusted_dc_name);

            bool isVerifyR1948 =
                string.Equals(
                               trustDCName.ToLowerInvariant(),
                               netlogonInfo.netlog2_trusted_dc_name.ToLowerInvariant().Replace(@"\\", string.Empty),
                               StringComparison.OrdinalIgnoreCase)
                || string.Equals(
                                  trustDCNetBiosName.ToLowerInvariant(),
                                  netlogonInfo.netlog2_trusted_dc_name.ToLowerInvariant().Replace(@"\\", string.Empty),
                                  StringComparison.OrdinalIgnoreCase);

            // Verify MS-NRPC requirement: MS-NRPC_R1948.
            // Trust DC name can be FQDN or NetBios format.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR1948,
                1948,
                @"[In NETLOGON_INFO_2 structure]netlog2_trusted_dc_name:  A pointer to a null-terminated Unicode
                string that contains the DNS or NetBIOS name of the DC used on the secure channel for the specified
                domain.");

            if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                || (currentSutOperatingSystem == PlatformType.WindowsXp)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                || (currentSutOperatingSystem == PlatformType.WindowsVista)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                || (currentSutOperatingSystem == PlatformType.Windows7)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2))
            {
                if ((netlogonInfo.netlog2_flags & 0x00000010) == 0x00000010)
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R104909.
                    // When OS is the specified OS, the server returns success,
                    // it indicates that in the specified OS.
                    // If A flag is set, this RS is captured directly.
                    Site.CaptureRequirement(
                        104909,
                        @"<62> Section 2.2.1.7.3: This flag[A bit in netlog2_flags of NETLOGON_INFO_2 structure]
                        can be set in the query response from a server running Windows 2000 Server, Windows XP,
                        Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, and Windows Server
                        2008 R2.");
                }

                // netlog2_flags: A set of bit flags describing the following control query responses from the DC.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 C 0 B A 0 0 0 0
                // B: 0x00000020
                if ((netlogonInfo.netlog2_flags & 0x00000020) == 0x00000020)
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R104910.
                    // If B flag is set, this RS is captured directly.
                    Site.CaptureRequirement(
                        104910,
                        @"<63> Section 2.2.1.7.3: This flag[B bit in netlog2_flags of NETLOGON_INFO_2 structure]can
                        be set in the query response from a server running Windows 2000 Server, Windows XP, Windows
                        Server 2003, Windows Vista, Windows Server 2008, Windows 7, and Windows Server 2008 R2.");
                }
            }

            if ((currentSutOperatingSystem == PlatformType.WindowsServer2003)
                || (currentSutOperatingSystem == PlatformType.WindowsVista)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                || (currentSutOperatingSystem == PlatformType.Windows7)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2))
            {
                // netlog2_flags: A set of bit flags describing the following control query responses from the DC.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 C 0 B A 0 0 0 0
                // C: 0x00000080
                if ((netlogonInfo.netlog2_flags & 0x00000080) == 0x00000080)
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R104911.
                    // If C flag is set, this RS is captured directly.
                    Site.CaptureRequirement(
                        104911,
                        @"<64> Section 2.2.1.7.3: This flag[C bit in netlog2_flags]  can be set in the query response
                        from a server running Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, and
                        Windows Server 2008 R2.");
                }
            }
        }

        #endregion

        #region NETLOGON_INFO_3 (Section 2.2.1.7.4)

        /// <summary>
        ///  Verify NETLOGON_INFO_3 structure.
        /// </summary>
        /// <param name="netlogonInfo"> The NETLOGON_INFO_3 structure value.</param>
        private void VerifyNetlogonInfo3(_NETLOGON_INFO_3 netlogonInfo)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1956");

            // Verify MS-NRPC requirement: MS-NRPC_R1956.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)netlogonInfo.netlog3_flags,
                1956,
                @"[In NETLOGON_INFO_3 structure]netlog3_flags:  MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1959");

            // Verify MS-NRPC requirement: MS-NRPC_R1959.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)netlogonInfo.netlog3_reserved1,
                1959,
                @"[In NETLOGON_INFO_3 structure]netlog3_reserved1:  MUST be set to zero");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1961");

            // Verify MS-NRPC requirement: MS-NRPC_R1961.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)netlogonInfo.netlog3_reserved2,
                1961,
                @"[In NETLOGON_INFO_3 structure]netlog3_reserved2:  MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1963");

            // Verify MS-NRPC requirement: MS-NRPC_R1963.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)netlogonInfo.netlog3_reserved3,
                1963,
                @"[In NETLOGON_INFO_3 structure]netlog3_reserved3:  MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1965");

            // Verify MS-NRPC requirement: MS-NRPC_R1965.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)netlogonInfo.netlog3_reserved4,
                1965,
                @"[In NETLOGON_INFO_3 structure]netlog3_reserved4:  MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R1967");

            // Verify MS-NRPC requirement: MS-NRPC_R1967.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (uint)netlogonInfo.netlog3_reserved5,
                1967,
                @"[In NETLOGON_INFO_3 structure]netlog3_reserved5:  MUST be set to zero");
        }

        #endregion

        #region NETLOGON_INFO_4 (Section 2.2.1.7.5)

        /// <summary>
        ///  Verify NETLOGON_INFO_4 structure
        /// </summary>
        /// <param name="netlogonInfo"> The NETLOGON_INFO_4 structure value.</param>
        private void VerifyNetlogonInfo4(_NETLOGON_INFO_4 netlogonInfo)
        {
            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1971,
                netlog4_trusted_dc_name: {0} ",
                netlogonInfo.netlog4_trusted_dc_name);

            bool isVerifyR1971 =
                (trustDCName.ToLowerInvariant() ==
                netlogonInfo.netlog4_trusted_dc_name.ToLowerInvariant().Replace(@"\\", string.Empty))
                || (trustDCNetBiosName.ToLowerInvariant() ==
                netlogonInfo.netlog4_trusted_dc_name.ToLowerInvariant().Replace(@"\\", string.Empty));

            // Verify MS-NRPC requirement: MS-NRPC_R1971.
            // Trust DC name can be FQDN or NetBios format.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR1971,
                1971,
                @"[In NETLOGON_INFO_4 structure]netlog4_trusted_dc_name:  A pointer to a null-terminated 
                Unicode string that contains the DNS or NetBIOS name of a DC that is used on the secure 
                channel for the primary or directly trusted domain containing the specified user account.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R1974,
                netlog4_trusted_domain_name: {0} ",
                netlogonInfo.netlog4_trusted_domain_name);

            bool isVerifyR1974 =
                (TrustDomainDnsName.ToLowerInvariant() ==
                netlogonInfo.netlog4_trusted_domain_name.ToLowerInvariant())
                || (trustDomainNetBiosName.ToLowerInvariant() ==
                netlogonInfo.netlog4_trusted_domain_name.ToLowerInvariant());

            // Verify MS-NRPC requirement: MS-NRPC_R1974.
            // Trust domain name can be FQDN or NetBios format.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR1974,
                1974,
                @"[In NETLOGON_INFO_4 structure]netlog4_trusted_domain_name:  A pointer to a null-terminated
                Unicode string that contains the NetBIOS name of the primary or directly trusted domain containing
                the specified user account.");
        }

        #endregion

        #region Netlogon NegotiateFlag Options (Section 3.1.4.2)

        /// <summary>
        ///  Verify NegotiateFlag Response information.
        /// </summary>
        /// <param name="serverNegotiateFlag">
        ///  Capabilities that server supports, the server responses to the client.
        /// </param>
        private void VerifyNegotiateFlagForAuthenticateMethod(uint serverNegotiateFlag)
        {
            // The specified bit value A-Y is set. other bit values are 0.
            uint allOtherBitValueNotExist = 0x00000001
                | 0x00000002
                | 0x00000004
                | 0x00000008
                | 0x00000010
                | 0x00000020
                | 0x00000040
                | 0x00000080
                | 0x00000100
                | 0x00000200
                | 0x00000400
                | 0x00000800
                | 0x00001000
                | 0x00002000
                | 0x00004000
                | 0x00008000
                | 0x00010000
                | 0x00020000
                | 0x00040000
                | 0x00080000
                | 0x00100000
                | 0x00200000
                | 0x01000000
                | 0x20000000
                | 0x40000000;

            // Specify a uint value: the other bit value is 1. A-Y bit value is 0.
            uint allOtherBitValueExist = ~allOtherBitValueNotExist;

            // According to the TD description, all other bits should be 0.
            bool isOtherBitCorrect = (allOtherBitValueExist & (uint)serverNegotiateFlag) == 0;

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R895,
                allOtherBitValueExist: {0},
                serverNegotiateFlag: {1},
                isOtherBitCorrect: {2}",
                allOtherBitValueExist,
                serverNegotiateFlag,
                isOtherBitCorrect);

            // Verify MS-NRPC requirement:  MS-NRPC_R895.
            Site.CaptureRequirementIfIsTrue(
                isOtherBitCorrect,
                895,
                @"[In Netlogon Negotiable Options]All other bits[except the set of A-Y bits]MUST be set as specified
                in the NegotiateFlags description.");
        }

        #endregion

        #region DC Location Methods

        #region DsrGetDcNameEx2 Method (Opnum 34) (Section 3.5.4.3.1)

        /// <summary>
        ///  Verify DsrGetDcNameEx2 method response.
        /// </summary>
        /// <param name="hresult"> Returned value of DsrGetDcNameEx2 method(success or failure).</param>
        /// <param name="domainNameType"> Domain Name parameter in DsrGetDcNameEx method.</param>
        /// <param name="flags"> Flags parameter in DsrGetDcNameEx2 method.</param>
        /// <param name="recipientIsDc"> True if recipient is DC.</param>
        /// <param name="domainControllerInfo"> Returned DOMAIN_CONTROLLER_INFOW structure.</param>
        private void VerifyDsrGetDcNameEx2Response(
            HRESULT hresult,
            DomainNameType domainNameType,
            uint flags,
            bool recipientIsDc,
            _DOMAIN_CONTROLLER_INFOW domainControllerInfo)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                this.VerifyFlagsInDsrGetDcNameEx2(
                    flags,
                    domainControllerInfo,
                    domainNameType);

                // Verify MS-NRPC requirement: MS-NRPC_R103087.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method having this field as parameter returns success,
                // it indicates that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    103087,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)]  DomainControllerInfo: A pointer to a DOMAIN_CONTROLLER_INFOW
                    structure (section 2.2.1.2.1) containing data about the DC.");

                this.VerifyDomainControllerInfo(domainControllerInfo, recipientIsDc, domainNameType);
            }
        }


        /// <summary>
        ///  Verify Flags parameter in DsrGetDcNameEx2 method.
        /// </summary>
        /// <param name="flags"> Flags parameter in DsrGetDcNameEx2 method.</param>
        /// <param name="domainControllerInfo"> Returned DOMAIN_CONTROLLER_INFOW structure.</param>
        /// <param name="domainNameType"> Requested domain name type.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Maintainability",
            "CA1502:AvoidExcessiveComplexity")]
        private void VerifyFlagsInDsrGetDcNameEx2(
            uint flags,
            _DOMAIN_CONTROLLER_INFOW domainControllerInfo,
            DomainNameType domainNameType)
        {
            bool isDcNameValid = false;
            bool isDomainNameValid = false;

            if (domainNameType == DomainNameType.TrustedDomainName)
            {
                // Flags: A set of bit flags that provide an additional data that is used to process the request.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
                // S: 0x80000000
                // When Flag S is set, the returned DC is NetBios format,
                // otherwise, the returned DC can be NetBios or FQDN format.
                if ((flags & 0x80000000) > 0)
                {
                    isDcNameValid = domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).Equals(
                        trustDCNetBiosName, StringComparison.OrdinalIgnoreCase);
                    isDomainNameValid = domainControllerInfo.DomainName.Equals(
                        trustDomainNetBiosName, StringComparison.OrdinalIgnoreCase);
                }
                else
                {
                    isDcNameValid = domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).Equals(
                        trustDCNetBiosName, StringComparison.OrdinalIgnoreCase)
                        || domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).Equals(
                        trustDCName, StringComparison.OrdinalIgnoreCase);
                    isDomainNameValid = domainControllerInfo.DomainName.Equals(
                        TrustDomainDnsName, StringComparison.OrdinalIgnoreCase)
                        || domainControllerInfo.DomainName.Equals(
                        trustDomainNetBiosName, StringComparison.OrdinalIgnoreCase);
                }
            }
            else
            {
                // Flags: A set of bit flags that provide an additional data that is used to process the request.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
                // S: 0x80000000
                // When Flag S is set, the returned DC is NetBios format,
                // otherwise, the returned DC can be NetBios or FQDN format.
                if ((flags & 0x80000000) > 0)
                {
                    isDcNameValid = domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).Equals(
                        primaryDCNetBiosName, StringComparison.OrdinalIgnoreCase);
                    isDomainNameValid = domainControllerInfo.DomainName.Equals(
                        primaryDomainNetBiosName, StringComparison.OrdinalIgnoreCase);
                }
                else
                {
                    isDcNameValid = domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).Equals(
                        primaryDCNetBiosName, StringComparison.OrdinalIgnoreCase)
                        || domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).Equals(
                        primaryDCName, StringComparison.OrdinalIgnoreCase);
                    isDomainNameValid = domainControllerInfo.DomainName.Equals(
                        primaryDomainNetBiosName, StringComparison.OrdinalIgnoreCase)
                        || domainControllerInfo.DomainName.Equals(
                        PrimaryDomainDnsName, StringComparison.OrdinalIgnoreCase);
                }
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // C: 0x00000020
            if ((flags & 0x00000020) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103041,
                    DomainControllerName:{0}",
                    domainControllerInfo.DomainControllerName);

                // Verify MS-NRPC requirement: MS-NRPC_R103041.
                // PDC supports directory service, so only verify the domain name.
                Site.CaptureRequirementIfIsTrue(
                    isDcNameValid,
                    103041,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When C flag in Flags parameter is set , Indicates that 
                    the method MUST first attempt to find a DC that supports directory service functions.<139>If 
                    a DC that supports directory services is not available, the method returns the name of a 
                    non–directory service DC.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // D: 0x00000040
            if ((flags & 0x00000040) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103043,
                    DomainControllerName:{0}",
                    domainControllerInfo.DomainControllerName);

                // Verify MS-NRPC requirement: MS-NRPC_R103043.
                // Primary dc is the global catalog server for the forest of domains.
                Site.CaptureRequirementIfIsTrue(
                    isDcNameValid,
                    103043,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When D flag in Flags parameter is set, Requires that the
                    returned DC be a global catalog server for the forest of domains.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // E: 0x00000080
            if ((flags & 0x00000080) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103047,
                    DomainControllerName:{0}",
                    domainControllerInfo.DomainControllerName);

                bool isVerifyR103047 = domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).Equals(
                    primaryDCNetBiosName, StringComparison.OrdinalIgnoreCase)
                    || domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).Equals(
                    primaryDCName, StringComparison.OrdinalIgnoreCase);

                // Verify MS-NRPC requirement: MS-NRPC_R103047.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103047,
                    103047,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When E flag in Flags parameter is set , Requires that the
                    returned DC be the PDC for the domain.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // G: 0x00000200
            if ((flags & 0x00000200) > 0)
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R103050.
                Site.CaptureRequirementIfAreEqual<DomainControllerAddressType_Values>(
                    DomainControllerAddressType_Values.IpAddress,
                    domainControllerInfo.DomainControllerAddressType,
                    103050,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)]  When G flag in Flags parameter is set, Indicates that the
                    returned DC MUST have an IP (either IPv4 or IPv6) address.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // H: 0x00000020
            if ((flags & 0x00000400) > 0)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R103051.
                // In MS-NRPC section 2.2.1.2.1, description for E Flag:
                // The DC is a Kerberos Key Distribution Center (KDC).
                Site.CaptureRequirementIfAreEqual<uint>(
                    (uint)0x00000020,
                    domainControllerInfo.Flags & (uint)0x00000020,
                    103051,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)]  When H flag in Flags parameter is set, Requires that the
                    returned DC be currently running the Kerberos Key Distribution Center service.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // I: 0x00000800
            if ((flags & 0x00000800) > 0)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R103053.
                // In MS-NRPC section 2.2.1.2.1, description for F Flag: The DC has a network time service available.
                Site.CaptureRequirementIfAreEqual<uint>(
                    (uint)0x00000040,
                    domainControllerInfo.Flags & (uint)0x00000040,
                    103053,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When I flag in Flags parameter is set, Requires that the
                    returned DC be currently running the Windows Time Service.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // J: 0x00001000
            if ((flags & 0x00001000) > 0)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R103054.
                // In MS-NRPC section 2.2.1.2.1, description for L Flag: The server is a writable DC,
                // but is not running Windows Server 2003 or Windows 2000 Server.
                Site.CaptureRequirementIfIsTrue(
                    (domainControllerInfo.Flags & 0x00000100) > 0,
                    103054,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)]  When J flag in Flags parameter is set , Requires that the
                    returned DC be writable.<139>");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // K: 0x00002000
            if ((flags & 0x00002000) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103055,
                    DomainControllerName: {0}",
                    domainControllerInfo.DomainControllerName);

                // Verify MS-NRPC requirement: MS-NRPC_R103055.
                // Primary DC server is a reliable time server or currently running the Windows Time Service,
                // so only verify the dc name.
                Site.CaptureRequirementIfIsTrue(
                    isDcNameValid,
                    103055,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When K flag in Flags parameter is set, Indicates that
                    the method MUST first attempt to find a DC that is a reliable time server.If a reliable time
                    server is unavailable, the method requires that the returned DC be currently running the Windows
                    Time Service.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // M: 0x00008000
            if ((flags & 0x00008000) > 0)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R103061.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0x00000008,
                    domainControllerInfo.Flags & 0x00000008,
                    103061,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When M flag in Flags parameter is set , Specifies that
                    the server returned is an LDAP server.");

                // Flags: A set of bit flags that provide an additional data that is used to process the request.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
                // D: 0x00000040
                if ((flags & 0x00000040) > 0)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R103065,
                        DomainControllerName: {0}",
                        domainControllerInfo.DomainControllerName);

                    // Verify MS-NRPC requirement: MS-NRPC_R103065.
                    // Primary DC server is a global catalog server.
                    Site.CaptureRequirementIfIsTrue(
                        isDcNameValid,
                        103065,
                        @"[In  DsrGetDcNameEx2 (Opnum 34), When M flag in Flags parameter is set ,]
                        If this flag is used with the D flag, the server returned is an LDAP server that also
                        hosts a global catalog server.");
                }
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // P: 0x00040000
            if ((flags & 0x00040000) > 0)
            {
                if (!IsClosestSiteDCAvailable && !IsNextClosestSiteDCAvailable)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R103077,
                        DomainControllerName: {0}",
                        domainControllerInfo.DomainControllerName);

                    // Verify MS-NRPC requirement:  MS-NRPC_R103077.
                    // In test environment, there is only one dc(PDC or TDC).
                    // The returned available DC value depends on the input domainNameType parameter,
                    // it can be PDC or TDC.
                    Site.CaptureRequirementIfIsTrue(
                        isDcNameValid,
                        103077,
                        @"[In  DsrGetDcNameEx2 (Opnum 34), When P  flag in Flags parameter is set ,if a DC 
                        in the closest site is not available, and] If a DC in the next closest site is also 
                        not available, the method returns any available DC.<140>");
                }
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // R: 0x40000000
            if ((flags & 0x40000000) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103079,
                    DomainControllerName: {0},
                    DomainName: {1}",
                    domainControllerInfo.DomainControllerName,
                    domainControllerInfo.DomainName);

                // Verify MS-NRPC requirement: MS-NRPC_R103079.
                // In MS-NRPC section 2.2.1.2.1, description for M Flag: The DC's name is a DNS name;
                // Description for N Flag: The DC's domain name is a DNS name.
                Site.CaptureRequirementIfAreEqual<uint>(
                    (uint)(0x20000000 | 0x40000000),
                    domainControllerInfo.Flags & (uint)(0x20000000 | 0x40000000),
                    103079,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When R  flag in Flags parameter is set , Specifies that
                    the names returned in the DomainControllerName and DomainName fields of DomainControllerInfo
                    MUST be DNS names.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // S: 0x80000000
            if ((flags & 0x80000000) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103082,
                    DomainControllerName: {0},
                    DomainName: {1}",
                    domainControllerInfo.DomainControllerName,
                    domainControllerInfo.DomainName);

                // Verify MS-NRPC requirement:  MS-NRPC_R103082.
                Site.CaptureRequirementIfIsTrue(
                    isDcNameValid && isDomainNameValid,
                    103082,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When S  flag in Flags parameter is set , Specifies that
                    the names returned in the DomainControllerName and DomainName fields of DomainControllerInfo
                    MUST be NetBIOS names.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // R: 0x40000000
            // S: 0x80000000
            // Neither R nor S flag is set.
            if (((flags & 0x40000000) == 0)
                && ((flags & 0x80000000) == 0))
            {
                if (PDCIsWindows)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R103131,
                        DomainName: {0}",
                        domainControllerInfo.DomainName);

                    // Verify MS-NRPC requirement:  MS-NRPC_R103131.
                    Site.CaptureRequirementIfIsTrue(
                        isDomainNameValid,
                        103131,
                        @"<142> Section 3.5.5.2.1: If neither the R nor S flag is specified, Windows returns the type
                        of name that matches the type of the DomainName parameter.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103132");

                    // Verify MS-NRPC requirement:  MS-NRPC_R103132.
                    Site.CaptureRequirementIfIsTrue(
                        isDomainNameValid,
                        103132,
                        @"<143> Section 3.5.5.2.1: If neither the R nor S flag is specified, Windows returns the type
                        of name that matches the type of the DomainName parameter.");
                }
            }

            if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                || (currentSutOperatingSystem == PlatformType.WindowsXp)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                || (currentSutOperatingSystem == PlatformType.WindowsVista)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                || (currentSutOperatingSystem == PlatformType.Windows7)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                || (currentSutOperatingSystem == PlatformType.Windows8)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                || (currentSutOperatingSystem == PlatformType.Windows8_1)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R103020.
                // When OS is the specified OS, the server returns success, it indicates that the specified OS
                // supports DsrGetDcNameEx2 method, so it can be captured directly.
                Site.CaptureRequirement(
                    103020,
                    @"<209> Section 3.5.4.3.1: [DsrGetDcNameEx2 ]Supported in Windows 2000 Server, Windows XP, Windows 
                    Server 2003, Windows Vista,  Windows Server 2008,  Windows 7, Windows Server 2008 R2, Windows 8,
                    Windows Server 2012, Windows 8.1, Windows Server 2012 R2.");
            }

            if ((currentSutOperatingSystem == PlatformType.Windows7)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2))
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R103133.
                // When OS is the specified OS, the server returns success, it indicates that the specified OS
                // supports DsrGetDcNameEx2 method, so it can be captured directly.
                Site.CaptureRequirement(
                    103133,
                    @"<216> Section 3.5.4.3.1: [returned DC be currently running the Active Directory Web Service] 
                    Added in Windows 7 and Windows Server 2008 R2.");
            }
        }


        /// <summary>
        ///  Verify _DOMAIN_CONTROLLER_INFOW structure.
        /// </summary>
        /// <param name="domainControllerInfo"> Returned DOMAIN_CONTROLLER_INFOW structure.</param>
        /// <param name="recipientIsDc"> True if recipient is DC.</param>
        /// <param name="domainNameType"> Requested domain name type.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Maintainability",
            "CA1505:AvoidUnmaintainableCode"),
        System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Maintainability",
            "CA1502:AvoidExcessiveComplexity")]
        private void VerifyDomainControllerInfo(
            _DOMAIN_CONTROLLER_INFOW domainControllerInfo,
            bool recipientIsDc,
            DomainNameType domainNameType)
        {
            string domainControllerName = domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty);
            bool isPrefixValid = domainControllerInfo.DomainControllerName.StartsWith(@"\\", StringComparison.OrdinalIgnoreCase);

            if (domainNameType == DomainNameType.TrustedDomainName)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R50,
                    DomainControllerName: {0}",
                    domainControllerName);

                bool isDomainNameCorrect = domainControllerName.Replace(@"\\", string.Empty).Equals(
                    trustDCNetBiosName, StringComparison.OrdinalIgnoreCase)
                    || domainControllerName.Replace(@"\\", string.Empty).Equals(
                    trustDCName, StringComparison.OrdinalIgnoreCase);
                bool isVerifyR50 = isPrefixValid && isDomainNameCorrect;

                // Verify MS-NRPC requirement:  MS-NRPC_R50.
                // The null-terminated and UTF-16 are set in stack.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR50,
                    50,
                    @"[In DOMAIN_CONTROLLER_INFOW structure] DomainControllerName:  A null-terminated UTF-16 string that 
                    contains a NetBIOS or fully qualified domain name (FQDN) (2) of the DC, prefixed with ""\\"".");
            }
            else
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R50,
                    DomainControllerName: {0}",
                    domainControllerName);

                bool isDomainNameCorrect = domainControllerName.Replace(@"\\", string.Empty).Equals(
                    primaryDCNetBiosName, StringComparison.OrdinalIgnoreCase)
                    || domainControllerName.Replace(@"\\", string.Empty).Equals(
                    primaryDCName, StringComparison.OrdinalIgnoreCase)
                    || domainControllerName.Replace(@"\\", string.Empty).Equals(
                    secondaryDCName, StringComparison.OrdinalIgnoreCase)
                    || domainControllerName.Replace(@"\\", string.Empty).Equals(
                    secondaryDCNetBiosName, StringComparison.OrdinalIgnoreCase);
            

                bool isVerifyR50 = isPrefixValid && isDomainNameCorrect;

                // Verify MS-NRPC requirement:  MS-NRPC_R50.
                // The null-terminated and UTF-16 are set in stack.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR50,
                    50,
                    @"[In DOMAIN_CONTROLLER_INFOW structure] DomainControllerName:  A null-terminated UTF-16 string that 
                    contains a NetBIOS or fully qualified domain name (FQDN) (2) of the DC, prefixed with ""\\"".");
            }

            string domainControllerAdress = domainControllerInfo.DomainControllerAddress;
            DomainControllerAddressType_Values domainControllercAddressType = domainControllerInfo.DomainControllerAddressType;
            bool isIpAddress = false;
            bool isNetBiosName = false;

            // Remove the leading backslashes in dcAddress if it exists.
            string actualDcAddress = RemoveLeadingBackslash(domainControllerAdress);

            if (domainControllercAddressType == DomainControllerAddressType_Values.IpAddress)
            {
                // Ipv4 or ipv6 format.
                if (domainNameType == DomainNameType.TrustedDomainName)
                {
                    string validIpv4AddrsForTdc = Site.Properties["Common.TDC.IPAddress"];
                    string validIpv6AddrsForTdc = Site.Properties["MS_NRPC.SUT.ValidAddrsForTdc.IP.V6"];

                    isIpAddress = validIpv4AddrsForTdc.Equals(actualDcAddress, StringComparison.OrdinalIgnoreCase)
                        || validIpv6AddrsForTdc.Equals(actualDcAddress, StringComparison.OrdinalIgnoreCase);
                }
                else
                {
                    string validIpv4Addrs = Site.Properties["Common.WritableDC1.IPAddress"];
                    string validIpv6Addrs = Site.Properties["MS_NRPC.SUT.Primary.ValidAddrs.IP.V6"];
                    string valisSdcAddrs = Site.Properties["Common.WritableDC2.IPAddress"];

                    isIpAddress = validIpv4Addrs.Equals(actualDcAddress, StringComparison.OrdinalIgnoreCase)
                        || validIpv6Addrs.Equals(actualDcAddress, StringComparison.OrdinalIgnoreCase)
                        || valisSdcAddrs.Equals(actualDcAddress, StringComparison.OrdinalIgnoreCase);
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R54,
                    dcAdress: {0}",
                    domainControllerAdress);

                // Verify MS-NRPC requirement: MS-NRPC_R54.
                Site.CaptureRequirementIfIsTrue(
                    isIpAddress,
                    54,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When the value in DomainControllerAddressType parameter is
                    0x00000001, it means the address is a string that contains an IP address in dotted-decimal notation
                    (for example, 192.168.0.1).<8>");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103394,
                    dcAdress: {0}",
                    domainControllerAdress);

                // Verify MS-NRPC requirement: MS-NRPC_R103394.
                if (PDCIsWindows)
                {
                    Site.CaptureRequirementIfIsTrue(
                        isIpAddress,
                        103394,
                        @"<154> Section 3.5.5.2.3: If the IP address of the DC to which the message was sent is known
                        from the underlying transport protocol, that address is used to set the DomainControllerAddress
                        field.");
                }
            }
            else if (domainControllercAddressType == DomainControllerAddressType_Values.NetBiosName)
            {
                string trustedDcNetBiosName = string.Empty;

                if (domainNameType == DomainNameType.TrustedDomainName)
                {
                    trustedDcNetBiosName = Site.Properties["Common.TDC.NetbiosName"];
                }
                else
                {
                    trustedDcNetBiosName = Site.Properties["Common.WritableDC1.NetbiosName"];
                }

                // Judge whether the dc name is valid.
                isNetBiosName = trustedDcNetBiosName.Equals(actualDcAddress, StringComparison.OrdinalIgnoreCase);
            }

            if (isIpAddress)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103206");

                // Verify MS-NRPC requirement: MS-NRPC_R103206.
                Site.CaptureRequirementIfAreEqual<DomainControllerAddressType_Values>(
                    DomainControllerAddressType_Values.IpAddress,
                    domainControllerInfo.DomainControllerAddressType,
                    103206,
                    @"[In DsrGetDcName (Opnum 20), Using these response messages, the DsrGetDcName populates the
                    returned DOMAIN_CONTROLLER_INFOW structure (section 2.2.1.2.1) as follows:] The
                    DomainControllerInfo.DomainControllerAddressType field MUST be set to 0x00000001 if the
                    DomainControllerAddress field is set to the IP address of the DC.");
            }

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R52,
                isIpAddress: {0},
                isNetBiosName: {1}",
                isIpAddress,
                isNetBiosName);

            // Verify MS-NRPC requirement:  MS-NRPC_R52.
            Site.CaptureRequirementIfIsTrue(
                isIpAddress || isNetBiosName,
                52,
                @"[In DOMAIN_CONTROLLER_INFOW structure]DomainControllerAddress:The string can be either a textual
                representation of an IPv4/IPv6 address<7> or the NetBIOS name of the DC, determined by the
                DomainControllerAddressType field.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R51,
                isIpAddress: {0},
                isNetBiosName: {1}",
                isIpAddress,
                isNetBiosName);

            // Verify MS-NRPC requirement:  MS-NRPC_R51.
            // According to the TD, DC address can be ipv4, ipv6 or the NetBIOS name of the DC format.
            // Configure the corresponding IP address or NetBIOS name which is prefixed with \\,
            // so verify the received IP address or NetBIOS name is right.
            Site.CaptureRequirementIfIsTrue(
                isIpAddress || isNetBiosName,
                51,
                @"[In DOMAIN_CONTROLLER_INFOW structure] DomainControllerAddress:  A pointer to a null-terminated 
                Unicode string that contains the DC address, prefixed with ""\\"".");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R53,
                dcAddressType: {0}",
                (uint)domainControllercAddressType);

            bool isVerifyR53 = (domainControllercAddressType == DomainControllerAddressType_Values.IpAddress)
                || (domainControllercAddressType == DomainControllerAddressType_Values.NetBiosName);

            // Verify MS-NRPC requirement:  MS-NRPC_R53.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR53,
                53,
                @"[In DOMAIN_CONTROLLER_INFOW structure]DomainControllerAddressType:  A 32-bit value indicating the
                DC address type, which MUST be one, and only one, of the following[0x00000001,0x00000002].");

            System.Guid domainGuid = domainControllerInfo.DomainGuid;
            Guid expectedDomainGuid = Guid.Empty;

            if (domainNameType == DomainNameType.TrustedDomainName)
            {
                expectedDomainGuid = TrustDomainGuid;
            }
            else
            {
                expectedDomainGuid = new Guid(PrimaryDomainSrvGUID);
            }

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R58");

            // Verify MS-NRPC requirement:  MS-NRPC_R58.
            Site.CaptureRequirementIfAreEqual<string>(
                expectedDomainGuid.ToString(),
                domainGuid.ToString(),
                58,
                @"[In DOMAIN_CONTROLLER_INFOW structure]DomainGuid:  A globally unique identifier (GUID) structure
                that contains an identifier for the domain.");
            

            string domainName = domainControllerInfo.DomainName;
            bool isDomainNameValid = false;

            if (domainNameType == DomainNameType.TrustedDomainName)
            {
                isDomainNameValid = domainName.Equals(TrustDomainDnsName, StringComparison.OrdinalIgnoreCase)
                    || domainName.Equals(trustDomainNetBiosName, StringComparison.OrdinalIgnoreCase);
            }
            else
            {
                isDomainNameValid = domainName.Equals(primaryDomainNetBiosName, StringComparison.OrdinalIgnoreCase)
                    || domainName.Equals(PrimaryDomainDnsName, StringComparison.OrdinalIgnoreCase);
            }

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R62,
                DomainName: {0}",
                domainName);

            // Verify MS-NRPC requirement:  MS-NRPC_R62.
            Site.CaptureRequirementIfIsTrue(
                isDomainNameValid,
                62,
                @"[In DOMAIN_CONTROLLER_INFOW structure]DomainName:  A Unicode string that contains the NetBIOS or
                fully qualified domain name (FQDN) (2) of the domain.");

            string dnsForestName = domainControllerInfo.DnsForestName;
            string expectedForestName = string.Empty;

            if (domainNameType == DomainNameType.TrustedDomainName)
            {
                expectedForestName = TrustDomainDnsName;
            }
            else
            {
                expectedForestName = PrimaryDomainDnsName;
            }

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R63");

            // Verify MS-NRPC requirement:  MS-NRPC_R63.
            Site.CaptureRequirementIfAreEqual<string>(
                expectedForestName.ToLower(CultureInfo.InvariantCulture),
                dnsForestName.ToLower(CultureInfo.InvariantCulture),
                63,
                @"[In DOMAIN_CONTROLLER_INFOW structure]DnsForestName:  A pointer to a null-terminated Unicode string
                that contains the fully qualified domain name (FQDN) of the forest.");

            uint flags = domainControllerInfo.Flags;

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // This is the value when all unused bits are set, and all used bits are clear.
            uint allUnusedBits = ~(uint)
                (0x00000001             // A
                | 0x00000004            // B
                | 0x00000008            // C
                | 0x00000010            // D
                | 0x00000020            // E
                | 0x00000040            // F
                | 0x00000080            // G
                | 0x00000100            // H
                | 0x00000200            // I
                | 0x00000400            // J
                | 0x00000800            // K
                | 0x00001000            // L
                | 0x00002000            // P
                | 0x00004000            // Q
                | 0x00008000            // R
                | 0x00010000            // S
                | 0x00020000            // T
                | 0x20000000            // M
                | 0x40000000            // N
                | 0x80000000            // O
                );

            string dcname = domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).ToLower(CultureInfo.InvariantCulture);

            // The returned DomainControllerName can be either FQDN name or NetBIOS name.
            bool isPdc = dcname.Equals(primaryDCName, StringComparison.OrdinalIgnoreCase) ||
                dcname.Equals(primaryDCNetBiosName, StringComparison.OrdinalIgnoreCase);
            bool isTrustDc = dcname.Equals(trustDCName, StringComparison.OrdinalIgnoreCase) ||
                dcname.Equals(trustDCNetBiosName, StringComparison.OrdinalIgnoreCase);

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R68,
                Flags: {0},
                DomainControllerName: {1}",
                flags,
                dcname);

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // A: 0x00000001
            // B: 0x00000004
            // D: 0x00000010
            // E: 0x00000020
            // F: 0x00000040
            // I: 0x00000200
            // P: 0x00002000
            bool isVerifyR68 = ((flags & 0x00000400) == 0)
                || (flags & (uint)(0x00000001
                | 0x00000004
                | 0x00000010
                | 0x00000020
                | 0x00000040
                | 0x00000200
                | 0x00002000)) == 0;

            // Verify MS-NRPC requirement:  MS-NRPC_R68.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR68,
                68,
                @"[In DOMAIN_CONTROLLER_INFOW structure]Flags: bit J cannot be combined with A, B, D, E, F, I, or P.");

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // A: 0x00000001
            if ((flags & (uint)0x00000001) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R70");

                // Verify MS-NRPC requirement:  MS-NRPC_R70.
                // Both PDC and TrustDC are the primary domain controller in its domain.
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    70,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When A bit in Flags field is set, the DC is the domain's
                    primary domain controller (PDC).");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R71");

                // Verify MS-NRPC requirement:  MS-NRPC_R71.
                // J flag should not be set.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    (flags & (uint)0x00000400),
                    71,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]A flag cannot be combined with the J flag.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // B: 0x00000004
            if ((flags & (uint)0x00000004) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R72,
                    Flags: {0},
                    DomainControllerName: {1}",
                    flags,
                    dcname);

                // Verify MS-NRPC requirement:  MS-NRPC_R72.
                // Both PDC and TrustDC contain the global catalog (GC) for the forest Active Directory.
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    72,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When B bit in Flags field is set, the DC contains the
                    global catalog (GC) for the forest Active Directory.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R73");

                // Verify MS-NRPC requirement:  MS-NRPC_R73.
                // J flag should not be set.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    (flags & (uint)0x00000400),
                    73,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]B flag cannot be combined with the J flag.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // C: 0x00000008
            if ((flags & (uint)0x00000008) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R74,
                    Flags: {0},
                    DomainControllerName: {1}",
                    flags,
                    dcname);

                // Verify MS-NRPC requirement:  MS-NRPC_R74.
                // Both PDC and TrustDC support the Lightweight Directory Access Protocol (LDAP).
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    74,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When C bit in Flags field is set, the DC  supports the
                    Lightweight Directory Access Protocol (LDAP).");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // D: 0x00000010
            if ((flags & (uint)0x00000010) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R75,
                    Flags: {0},
                    DomainControllerName: {1}",
                    flags,
                    dcname);

                // Verify MS-NRPC requirement:  MS-NRPC_R75.
                // Both PDC and TrustDC support a directory service.
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    75,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When D bit in Flags field is set, the DC supports a
                    directory service.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R77");

                // Verify MS-NRPC requirement:  MS-NRPC_R77.
                // J flag should not be set.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    (flags & (uint)0x00000400),
                    77,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]D flag cannot be combined with the J flag.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // E: 0x00000020
            if ((flags & (uint)0x00000020) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R76,
                    Flags: {0},
                    DomainControllerName: {1}",
                    flags,
                    dcname);

                // Verify MS-NRPC requirement:  MS-NRPC_R76.
                // Both PDC and TrustDC are Kerberos Key Distribution Center (KDC).
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    76,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When E bit in Flags field is set,the DC is a Kerberos
                    Key Distribution Center (KDC).");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R78");

                // Verify MS-NRPC requirement:  MS-NRPC_R78.
                // J flag should not be set.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    (flags & (uint)0x00000400),
                    78,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]E flag cannot be combined with the J flag.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // F: 0x00000040
            if ((flags & (uint)0x00000040) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R79,
                    DomainControllerInfo.Flags: {0},
                    DomainControllerName: {1}",
                    flags,
                    dcname);

                // Verify MS-NRPC requirement:  MS-NRPC_R79.
                // Both PDC and TrustDC have an available network time service.
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    79,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When F bit in Flags field is set,the DC has a network time
                    service available.");

                // Verify MS-NRPC requirement:  MS-NRPC_R80.
                // J flag should not be set.
                Site.CaptureRequirementIfAreEqual<uint>(
                    0,
                    (flags & (uint)0x00000400),
                    80,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]F flag cannot be combined with the J flag.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // G: 0x00000080
            if ((flags & (uint)0x00000080) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R81,
                    DomainControllerInfo.Flags: {0},
                    DomainControllerName: {1}",
                    flags,
                    dcname);

                // Verify MS-NRPC requirement:  MS-NRPC_R81.
                // Both PDC and TrustDC are in the closest site to the client.
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    81,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When G bit in Flags field is set,the DC is in the closest
                    site to the client.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // H: 0x00000100
            if ((flags & (uint)0x00000100) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R82,
                    DomainControllerInfo.Flags: {0},
                    DomainControllerName: {1}",
                    flags,
                    dcname);

                // Verify MS-NRPC requirement:  MS-NRPC_R82.
                // Both PDC and TrustDC have a writable directory service available.
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    82,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When H bit in Flags field is set,the DC has a writable
                    directory service available.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // I: 0x00000200
            // J: 0x00000400
            // Flag I and J cannot be set at the same time.
            bool isVerifyR84 = !(((flags & (uint)0x00000200) > 0)
                && ((flags & 0x00000400) > 0));

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R84,
                DomainControllerInfo.Flags: {0}",
                flags);

            // Verify MS-NRPC requirement:  MS-NRPC_R84.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR84,
                84,
                @"[In DOMAIN_CONTROLLER_INFOW structure]I flag cannot be combined with the J flag.");

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // A: 0x00000001
            // B: 0x00000004
            // D: 0x00000010
            // E: 0x00000020
            // F: 0x00000040
            // I: 0x00000200
            // P: 0x00002000
            // J flag cannot be combined with any of the following flags: A, B, D, E, F, I, and P.
            bool isVerifyR86 = !(((flags & (uint)(0x00000001
                | 0x00000004
                | 0x00000010
                | 0x00000020
                | 0x00000040
                | 0x00000200
                | 0x00002000)) > 0) &&
                ((flags & 0x00000400) > 0));

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R86,
                DomainControllerInfo.Flags: {0}",
                flags);

            // Verify MS-NRPC requirement:  MS-NRPC_R86.
            Site.CaptureRequirementIfIsTrue(
                isVerifyR86,
                86,
                @"[In DOMAIN_CONTROLLER_INFOW structure]J flag cannot be combined with any of the following flags: 
                A, B, D, E, F, I, and P.");

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // L: 0x00001000
            if ((flags & (uint)0x00001000) != 0)
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R89.
                // Both PDC and TrustDC are writable DCs,
                // but not running Windows Server 2003 or Windows 2000 Server.
                if ((currentSutOperatingSystem != PlatformType.WindowsServer2003)
                    && (currentSutOperatingSystem != PlatformType.WindowsServer2000))
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R89,
                        DomainControllerInfo.Flags: {0},
                        DomainControllerName: {1}",
                        flags,
                        dcname);

                    Site.CaptureRequirementIfIsTrue(
                        isPdc || isTrustDc,
                        89,
                        @"[In DOMAIN_CONTROLLER_INFOW structure]When L bit in Flags field is set, the server is a
                        writable DC, but is not running Windows Server 2003 or Windows 2000 Server.<11>");
                }
            }

            if (HelperIsDnsName(domainControllerInfo.DomainControllerName))
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103219,
                    DomainControllerInfo.Flags: {0}",
                    flags);

                // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
                // M: 0x20000000
                bool isVerifyR103219 = (flags & (uint)0x20000000) != 0;

                // Verify MS-NRPC requirement:  MS-NRPC_R103219.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103219,
                    103219,
                    @"[In DsrGetDcName (Opnum 20), Using these response messages, the DsrGetDcName populates the
                    returned DOMAIN_CONTROLLER_INFOW  structure (section 2.2.1.2.1) as follows:] Additionally,
                    the following flags are set in the DomainControllerInfo.Flags field: The flag M MUST be set
                    if the DomainControllerInfo.DomainControllerName field is set to the fully qualified domain name
                    (FQDN) (1) of the DC.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // M: 0x20000000
            if ((flags & (uint)0x20000000) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R91,
                    DomainControllerName: {0}",
                    domainControllerInfo.DomainControllerName);

                // Verify MS-NRPC requirement:  MS-NRPC_R91.
                Site.CaptureRequirementIfIsTrue(
                    HelperIsDnsName(domainControllerInfo.DomainControllerName),
                    91,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When M bit in Flags field is set, the DC's name
                    is a DNS name.");
            }

            if (HelperIsDnsName(domainControllerInfo.DomainName))
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103220,
                    DomainControllerInfo.Flags: {0}",
                    flags);

                // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
                // N: 0x40000000
                bool isVerifyR103220 = (flags & (uint)0x40000000) != 0;

                // Verify MS-NRPC requirement:  MS-NRPC_R103220.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103220,
                    103220,
                    @"[In DsrGetDcName (Opnum 20), Using these response messages, the DsrGetDcName populates the
                    returned DOMAIN_CONTROLLER_INFOW structure (section 2.2.1.2.1) as follows: Additionally, the
                    following flags are set in the DomainControllerInfo.Flags field: ] The flag N MUST be set if
                    the DomainControllerInfo.DomainName field is set to the fully qualified domain name (FQDN) (2)
                    of the domain.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // N: 0x40000000
            if ((flags & (uint)0x40000000) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R92,
                    DomainName: {0}",
                    domainControllerInfo.DomainName);

                // Verify MS-NRPC requirement:  MS-NRPC_R92.
                Site.CaptureRequirementIfIsTrue(
                    HelperIsDnsName(domainControllerInfo.DomainName),
                    92,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When N bit in Flags field is set, the DC's domain
                    name is a DNS name.");
            }

            if (!string.IsNullOrEmpty(domainControllerInfo.DnsForestName))
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103220,
                    DomainControllerInfo.Flags: {0}",
                    flags);

                // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
                // O: 0x80000000
                bool isVerifyR103221 = (flags & (uint)0x80000000) != 0;

                // Verify MS-NRPC requirement:  MS-NRPC_R103221.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103221,
                    103221,
                    @"[In DsrGetDcName (Opnum 20), Using these response messages, the DsrGetDcName populates
                    the returned DOMAIN_CONTROLLER_INFOW structure (section 2.2.1.2.1) as follows: Additionally,
                    the following flags are set in the DomainControllerInfo.Flags field: ] The flag O MUST be set
                    if the DomainControllerInfo.DnsForestName field is set.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // O: 0x80000000
            if ((flags & (uint)0x80000000) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R93,
                    DnsForestName: {0}",
                    domainControllerInfo.DnsForestName);

                // Verify MS-NRPC requirement:  MS-NRPC_R93.
                Site.CaptureRequirementIfIsTrue(
                    HelperIsDnsName(domainControllerInfo.DnsForestName),
                    93,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When O bit in Flags field is set, the DC's forest name
                    is a DNS name.");
            }

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // P: 0x00002000
            if ((flags & (uint)0x00002000) != 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R94,
                    DomainControllerInfo.Flags: {0},
                    DomainControllerName: {1}",
                    flags,
                    dcname);

                // Verify MS-NRPC requirement:  MS-NRPC_R94.
                // Both PDC and TrustDC have an Active Directory Web Service available.
                Site.CaptureRequirementIfIsTrue(
                    isPdc || isTrustDc,
                    94,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]When P bit in Flags field is set, the DC has an Active
                    Directory Web Service available.");
            }

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R95,
                Flags: {0}",
                flags);

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // J: 0x00000400
            // P: 0x00002000
            bool isPAndJSet = ((flags & (uint)0x00002000) != 0)
                && ((flags & (uint)0x00000400) != 0);

            // Verify MS-NRPC requirement:  MS-NRPC_R95.
            // P and J flags can not be set at the same time.
            Site.CaptureRequirementIfIsFalse(
                isPAndJSet,
                95,
                @"[In DOMAIN_CONTROLLER_INFOW structure]P flag cannot be combined with the J flag. <12>");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                @"Verify MS-NRPC_R97,
                Flags: {0}",
                flags);

            // Flags: A set of bit flags in little-endian format that describes the features and roles of the DC.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // O N M 0 0 0 0 0 0 0 0 0 0 0 T S R Q P L K J I H G F E D C B 0 A
            // E: 0x00000020
            // S: 0x00010000
            // T: 0x00020000
            if ((flags & (uint)0x00020000) != 0)
            {
                bool isEAndSSet = ((flags & (uint)0x00000020) != 0)
                    && ((flags & (uint)0x00010000) != 0);

                // Verify MS-NRPC requirement:  MS-NRPC_R103222.
                Site.CaptureRequirementIfIsTrue(
                    isEAndSSet,
                    103222,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]If T bit is set, bit S and bit E must also be set.");
            }

            // Verify MS-NRPC requirement:  MS-NRPC_R97.
            // All other bits[except A to S bits]MUST be set to zero, which is duplicate with 67.
            Site.CaptureRequirementIfAreEqual<uint>(
                0,
                (flags & allUnusedBits),
                97,
                @"[In DOMAIN_CONTROLLER_INFOW structure]Flags:All other bits[except A to T bits]MUST be set to zero.");

            // Add the debug information.
            Site.Log.Add(
                LogEntryKind.Debug,
                "Verify MS-NRPC_R99");

            // Verify MS-NRPC requirement:  MS-NRPC_R99.
            // The condition that there is a configured associated site.
            Site.CaptureRequirementIfAreEqual<string>(
                defaultSiteName.ToLower(CultureInfo.InvariantCulture),
                domainControllerInfo.DcSiteName.ToLower(CultureInfo.InvariantCulture),
                99,
                @"[In DOMAIN_CONTROLLER_INFOW structure]DcSiteName:  Pointer to a null-terminated Unicode string that
                contains the site name that is associated with the DC.");

            if (recipientIsDc)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R101");

                // Verify MS-NRPC requirement:  MS-NRPC_R101.
                // NULL string in the TD is tested by empty string here.
                Site.CaptureRequirementIfAreEqual(
                    defaultSiteName,
                    domainControllerInfo.ClientSiteName,
                    101,
                    @"[In DOMAIN_CONTROLLER_INFOW structure]ClientSiteName:  Pointer to a null-terminated Unicode string
                that contains the client's site name.");
            }
        }

        #endregion

        #region DsrGetDcNameEx Method (Opnum 27) (Section 3.5.4.3.2)

        /// <summary>
        ///  Verify DsrGetDcNameEx2 method response.
        /// </summary>
        /// <param name="hresult"> Returned value of DsrGetDcNameEx method(success or failure).</param>
        /// <param name="domainNameType"> Domain Name parameter in DsrGetDcNameEx method.</param>
        /// <param name="flags"> Flags parameter in DsrGetDcNameEx method.</param>
        /// <param name="recipientIsDc"> True if recipient is DC.</param>
        /// <param name="domainControllerInfo"> Returned DOMAIN_CONTROLLER_INFOW structure.</param>
        private void VerifyDsrGetDcNameExResponse(
            HRESULT hresult,
            DomainNameType domainNameType,
            uint flags,
            bool recipientIsDc,
            _DOMAIN_CONTROLLER_INFOW domainControllerInfo)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify Flags field.
                this.VerifyFlagsInDsrGetDcNameEx(flags, domainControllerInfo, domainNameType);

                // Verify returned DOMAIN_CONTROLLER_INFOW field.
                this.VerifyDomainControllerInfo(domainControllerInfo, recipientIsDc, domainNameType);
            }
        }


        /// <summary>
        ///  Verify Flags parameter in DsrGetDcNameEx method.
        /// </summary>
        /// <param name="flags"> Flags parameter in DsrGetDcNameEx method.</param>
        /// <param name="domainControllerInfo"> Returned DOMAIN_CONTROLLER_INFOW structure.</param>
        /// <param name="domainNameType"> Domain Name parameter in DsrGetDcNameEx method.</param>
        private void VerifyFlagsInDsrGetDcNameEx(
            uint flags,
            _DOMAIN_CONTROLLER_INFOW domainControllerInfo,
            DomainNameType domainNameType)
        {
            bool isDcNameValid = false;
            bool isDomainNameValid = false;

            if (domainNameType == DomainNameType.TrustedDomainName)
            {
                // Flags: A set of bit flags that provide an additional data that is used to process the request.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
                // When Flag S is set, the returned DC is NetBios format.
                // Otherwise, the returned DC can be NetBios or FQDN format.
                if ((flags & 0x80000000) > 0)
                {
                    isDcNameValid =
                        domainControllerInfo.DomainControllerName.Substring(2, domainControllerInfo.DomainControllerName.Length - 2).Equals(
                        trustDCNetBiosName, StringComparison.OrdinalIgnoreCase);
                    isDomainNameValid = domainControllerInfo.DomainName.Equals(
                        trustDomainNetBiosName, StringComparison.OrdinalIgnoreCase);
                }
                else
                {
                    isDcNameValid =
                        domainControllerInfo.DomainControllerName.Substring(2, domainControllerInfo.DomainControllerName.Length - 2).Equals(
                        trustDCNetBiosName, StringComparison.OrdinalIgnoreCase)
                        || domainControllerInfo.DomainControllerName.Substring(2, domainControllerInfo.DomainControllerName.Length - 2).Equals(
                        trustDCName, StringComparison.OrdinalIgnoreCase);
                    isDomainNameValid =
                        domainControllerInfo.DomainName.Equals(TrustDomainDnsName, StringComparison.OrdinalIgnoreCase)
                        || domainControllerInfo.DomainName.Equals(trustDomainNetBiosName, StringComparison.OrdinalIgnoreCase);
                }
            }
            else
            {
                // Flags: A set of bit flags that provide an additional data that is used to process the request.
                //                     1                   2                   3  
                // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
                // When Flag S is set, the returned DC is NetBios format
                // otherwise, the returned DC can be NetBios or FQDN format.
                if ((flags & 0x80000000) > 0)
                {
                    isDcNameValid =
                        domainControllerInfo.DomainControllerName.Substring(2, domainControllerInfo.DomainControllerName.Length - 2).Equals(
                        primaryDCNetBiosName, StringComparison.OrdinalIgnoreCase);
                    isDomainNameValid =
                        domainControllerInfo.DomainName.Equals(primaryDomainNetBiosName, StringComparison.OrdinalIgnoreCase);
                }
                else
                {
                    isDcNameValid =
                        domainControllerInfo.DomainControllerName.Substring(2, domainControllerInfo.DomainControllerName.Length - 2).Equals(
                        primaryDCNetBiosName, StringComparison.OrdinalIgnoreCase)
                        || domainControllerInfo.DomainControllerName.Substring(2, domainControllerInfo.DomainControllerName.Length - 2).Equals(
                        primaryDCName, StringComparison.OrdinalIgnoreCase);
                    isDomainNameValid =
                        domainControllerInfo.DomainName.Equals(primaryDomainNetBiosName, StringComparison.OrdinalIgnoreCase)
                        || domainControllerInfo.DomainName.Equals(PrimaryDomainDnsName, StringComparison.OrdinalIgnoreCase);
                }
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // C: 0x00000020
            if ((flags & 0x00000020) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104846,
                    DomainControllerName:{0}",
                    domainControllerInfo.DomainControllerName);

                // Verify MS-NRPC requirement: MS-NRPC_R104846.
                // PDC supports directory service, as described in ptfconfig,
                // so only verify the domain name.
                Site.CaptureRequirementIfIsTrue(
                    isDcNameValid,
                    104846,
                    @"[In DsrGetDcNameEx (Opnum 27)] When C flag in Flags parameter is set , Indicates that 
                    the method MUST first attempt to find a DC that supports directory service functions.<138>");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // E: 0x00000080
            if ((flags & 0x00000080) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103047,
                    DomainControllerName: {0}",
                    domainControllerInfo.DomainControllerName);

                // Verify MS-NRPC requirement: MS-NRPC_R103047.
                // PDC supports directory service, so only verify the domain name.
                Site.CaptureRequirementIfIsTrue(
                    isDcNameValid,
                    103047,
                    @"[In  DsrGetDcNameEx2 (Opnum 34)] When E flag in Flags parameter is set , Requires that the
                    returned DC be the PDC for the domain.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // G: 0x00000200
            if ((flags & 0x00000200) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104848");

                // Verify MS-NRPC requirement: MS-NRPC_R104848.
                Site.CaptureRequirementIfAreEqual<DomainControllerAddressType_Values>(
                    DomainControllerAddressType_Values.IpAddress,
                    domainControllerInfo.DomainControllerAddressType,
                    104848,
                    @"[In DsrGetDcNameEx (Opnum 27)]  When G flag in Flags parameter is set , Indicates that the
                    returned DC MUST have an IP (either IPv4 or IPv6) address.");
            }

            // Flags: A set of bit flags that provide an additional data that is used to process the request.
            //                     1                   2                   3  
            // 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            // S R 0 0 0 0 0 0 0 V U T Q P O N M L K J I H G F E D C B 0 0 0 A
            // S: 0x80000000
            if ((flags & 0x80000000) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104852,
                    DomainControllerName: {0},
                    DomainName: {1}",
                    domainControllerInfo.DomainControllerName,
                    domainControllerInfo.DomainName);

                // Verify MS-NRPC requirement:  MS-NRPC_R104852.
                Site.CaptureRequirementIfIsTrue(
                    isDcNameValid && isDomainNameValid,
                    104852,
                    @"[In DsrGetDcNameEx (Opnum 27)] When S  flag in Flags parameter is set , Specifies that the
                    names returned in the DomainControllerName and DomainName fields of DomainControllerInfo MUST
                    be NetBIOS names.");
            }

            if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                || (currentSutOperatingSystem == PlatformType.WindowsXp)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                || (currentSutOperatingSystem == PlatformType.WindowsVista)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                || (currentSutOperatingSystem == PlatformType.Windows7)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                || (currentSutOperatingSystem == PlatformType.Windows8)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                || (currentSutOperatingSystem == PlatformType.Windows8_1)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R103134.
                // When OS is the specified OS, the server returns success, it indicates that the specified OS
                // supports DsrGetDcNameEx2 method, so it can be captured directly.
                Site.CaptureRequirement(
                    103134,
                    @"<220> Section 3.5.4.3.2: [DsrGetDcNameEx method] Supported in Windows 2000 Server, Windows XP,
                    Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows Server 2008 R2, Windows 8,
                    Windows Server 2012, Windows 8.1, Windows Server 2012 R2.");
            }
        }

        #endregion

        #region DsrGetDcName Method (Opnum 20) (Section 3.5.4.3.3)

        /// <summary>
        ///  Verify DsrGetDcName method response.
        /// </summary>
        /// <param name="hresult"> Returned value of DsrGetDcName method(success or failure).</param>
        /// <param name="domainNameType"> Domain Name parameter in DsrGetDcNameEx method.</param>
        /// <param name="flags"> Flags parameter in DsrGetDcName method.</param>
        /// <param name="recipientIsDc"> True if recipient is DC.</param>
        /// <param name="domainControllerInfo"> Returned DOMAIN_CONTROLLER_INFOW structure.</param>
        private void VerifyDsrGetDcNameResponse(
            HRESULT hresult,
            DomainNameType domainNameType,
            uint flags,
            bool recipientIsDc,
            _DOMAIN_CONTROLLER_INFOW domainControllerInfo)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify Flags field.
                this.VerifyFlagsInDsrGetDcNameEx(flags, domainControllerInfo, domainNameType);

                // Verify returned DOMAIN_CONTROLLER_INFOW field.
                this.VerifyDomainControllerInfo(domainControllerInfo, recipientIsDc, domainNameType);

                // Verify Flags parameter in DsrGetDcName method.
                this.VerifyFlagsInDsrGetDcName(flags, domainControllerInfo);
            }
        }


        /// <summary>
        ///  Verify Flags parameter in DsrGetDcName method.
        /// </summary>
        /// <param name="flags"> Flags parameter in DsrGetDcName method.</param>
        /// <param name="domainControllerInfo"> Returned DOMAIN_CONTROLLER_INFOW structure.</param>
        private void VerifyFlagsInDsrGetDcName(
            uint flags,
            _DOMAIN_CONTROLLER_INFOW domainControllerInfo)
        {
            if ((flags & 0x00000020) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104839");

                // Verify MS-NRPC requirement: MS-NRPC_R104839.
                // PDC supports directory service, as described in ptfconfig
                Site.CaptureRequirementIfAreEqual<string>(
                    primaryDCName.ToLower(CultureInfo.InvariantCulture),
                    domainControllerInfo.DomainControllerName.Replace(@"\\", string.Empty).ToLower(CultureInfo.InvariantCulture),
                    104839,
                    @"[In  DsrGetDcName (Opnum 20)] When C flag in Flags parameter is set , Indicates that the method
                    MUST first attempt to find a DC that supports directory service functions.<139>");
            }

            if ((flags & 0x00000200) > 0)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104841");

                // Verify MS-NRPC requirement: MS-NRPC_R104841.
                Site.CaptureRequirementIfAreEqual<DomainControllerAddressType_Values>(
                    DomainControllerAddressType_Values.IpAddress,
                    domainControllerInfo.DomainControllerAddressType,
                    104841,
                    @"[In  DsrGetDcName (Opnum 20)]  When G flag in Flags parameter is set , Indicates that the
                    returned DC MUST have an IP (either IPv4 or IPv6) address.");
            }

            if ((currentSutOperatingSystem == PlatformType.Windows2000)
                || (currentSutOperatingSystem == PlatformType.WindowsXp)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                || (currentSutOperatingSystem == PlatformType.WindowsVista)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                || (currentSutOperatingSystem == PlatformType.Windows7)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                || (currentSutOperatingSystem == PlatformType.Windows8)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                || (currentSutOperatingSystem == PlatformType.Windows8_1)
                || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103382,");

                // Verify MS-NRPC requirement:  MS-NRPC_R103382.
                // When OS is the specified OS, the server returns success, it indicates that the specified OS
                // supports DsrGetDcName method, so it can be captured directly.
                Site.CaptureRequirement(
                    103382,
                    @"<221> Section 3.5.4.3.3: [The DsrGetDcName method] Supported in Windows 2000, Windows XP, Windows
                    Server 2003, Windows Vista, Windows Server 2008,  Windows 7, Windows Server 2008 R2, Windows 8,
                    Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
            }
        }

        #endregion

        #region NetrGetDCName Method (Opnum 11) (Section 3.5.4.3.4)

        /// <summary>
        ///  Verify Buffer field in NetrGetDcName method.
        /// </summary>
        /// <param name="hresult"> Return value of DsrGetDcName method.</param>
        /// <param name="domainNameType"> Specified domain type in DsrGetDcName method.</param>
        /// <param name="buffer"> Buffer parameter in DsrGetDcName method.</param>
        private void VerifyBufferInNetrGetDCName(
            HRESULT hresult,
            DomainNameType domainNameType,
            string buffer)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if ((currentSutOperatingSystem == PlatformType.WindowsNt)
                    || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP2)
                    || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP4)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R103400.
                    // When OS is the specified OS, the server returns success, it indicates that the specified OS
                    // supports NetrGetDC method, so it can be captured directly.
                    Site.CaptureRequirement(
                        103400,
                        @"<222> Section 3.5.4.3.4: This method [NetrGetDCName] was used in Windows NT Server 3.1 and
                        is supported in Windows NT Server 3.1 versions. It was superseded by the [DsrGetDcNameEx2] method
                        as of Windows 2000.");
                }

                // Get the expected dc name according to the domain type.
                // The dc name is prefixed with "\\".
                string expectedDcName = string.Empty;

                if (domainNameType == DomainNameType.TrustedDomainName)
                {
                    expectedDcName = trustDCNetBiosName;
                }
                else
                {
                    expectedDcName = primaryDCNetBiosName;
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103239");

                // Verify MS-NRPC requirement: MS-NRPC_R103239.
                Site.CaptureRequirementIfAreEqual<string>(
                    expectedDcName,
                    buffer.Replace(@"\\", string.Empty).ToLower(CultureInfo.InvariantCulture),
                    103239,
                    @"[In NetrGetDCName (Opnum 11)]  Buffer: A pointer to a null-terminated Unicode string that
                    contains the NetBIOS name of the PDC for the specified domain.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103240");

                // Verify MS-NRPC requirement: MS-NRPC_R103240.
                Site.CaptureRequirementIfAreEqual<string>(
                    @"\\",
                    buffer.Substring(0, 2),
                    103240,
                    @"[In NetrGetDCName (Opnum 11), for Buffer] The server name returned by this method is prefixed
                    by two backslashes (\\).");
            }
        }

        #endregion

        #region NetrGetAnyDCName Method (Opnum 13) (Section 3.5.4.3.5)

        /// <summary>
        ///  Verify Buffer parameter in NetrGetAnyDCName method.
        /// </summary>
        /// <param name="hresult"> Return value of NetrGetAnyDCName method.</param>
        /// <param name="domainNameType"> Specified domain type in NetrGetAnyDCName method.</param>
        /// <param name="buffer"> Buffer parameter in NetrGetAnyDCName method.</param>
        private void VerifyBufferInNetrGetAnyDCName(
            HRESULT hresult,
            DomainNameType domainNameType,
            string buffer)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if ((currentSutOperatingSystem == PlatformType.WindowsNt)
                    || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP2)
                    || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP4)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R103403.
                    // When OS is the specified OS, the server returns success, it indicates that the specified OS
                    // supports NetrGetAnyDCName method, so it can be captured directly.
                    Site.CaptureRequirement(
                        103403,
                        @"<225> Section 3.5.4.3.5: This method [NetrGetAnyDCName ] was introduced in Windows NT Server 
                        3.1 and is supported in Windows NT Server 3.1 versions. It was superseded by the [DsrGetDcNameEx2] method
                        in Windows 2000.");
                }


                bool verifyDCName;
                if (domainNameType == DomainNameType.TrustedDomainName)
                {
                    verifyDCName = string.Equals(buffer.Replace(@"\\", string.Empty), trustDCNetBiosName, StringComparison.InvariantCultureIgnoreCase);
                }
                else
                {
                    verifyDCName = string.Equals(buffer.Replace(@"\\", string.Empty), PDCNetbiosName, StringComparison.InvariantCultureIgnoreCase)
                    || string.Equals(buffer.Replace(@"\\", string.Empty), secondaryDCNetBiosName, StringComparison.InvariantCultureIgnoreCase);
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103253");

                
                // Verify MS-NRPC requirement: MS-NRPC_R103253.
                Site.CaptureRequirementIfIsTrue(verifyDCName,
                    103253,
                    @"[In NetrGetAnyDCName (Opnum 13)] Buffer: A pointer to an allocated buffer that contains 
                    the null-terminated Unicode string containing the NetBIOS name of a DC in the specified domain.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103254");

                // Verify MS-NRPC requirement: MS-NRPC_R103254.
                Site.CaptureRequirementIfAreEqual<string>(
                    @"\\",
                    buffer.Substring(0, 2),
                    103254,
                    @"[In NetrGetAnyDCName (Opnum 13), for Buffer:] The DC name is prefixed by two backslashes (\\).");
            }
        }

        #endregion

        #region DsrGetSiteName Method (Opnum 28) (Section 3.5.4.3.6)

        /// <summary>
        ///  Verify DsrGetSiteName method response.
        /// </summary>
        /// <param name="computerName"> The ComputerName parameter passed into DsrGetSiteName.</param>
        /// <param name="siteName"> SiteName, output parameter of DsrGetSiteName method.</param>
        /// <param name="hresult"> Response Result of method DsrGetSiteName.</param>
        private void VerifyDsrGetSiteName(
            ComputerType computerName,
            string siteName,
            HRESULT hresult)
        {
            // Verify requirements when computerName is PrimaryDc or NonDcServer,
            // because other DsrGetSiteName is a local call.
            if ((hresult == HRESULT.ERROR_SUCCESS)
                && (computerName == ComputerType.PrimaryDc
                || computerName == ComputerType.NonDcServer))
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103265");

                // Verify MS-NRPC requirement: MS-NRPC_R103265.
                Site.CaptureRequirementIfAreEqual<string>(
                    defaultSiteName,
                    siteName,
                    103265,
                    @"[In DsrGetSiteName (Opnum 28)] SiteName: A null-terminated Unicode string that contains the name
                    of the site in which the computer that receives this call [DsrGetSiteName ] resides.");

                // If the computer has been configured with a SiteName.
                if (!string.IsNullOrEmpty(defaultSiteName))
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103267");

                    // Verify MS-NRPC requirement: MS-NRPC_R103267.
                    Site.CaptureRequirementIfAreEqual<string>(
                        defaultSiteName,
                        siteName,
                        103267,
                        @"[In DsrGetSiteName (Opnum 28)] If the computer has been configured with a SiteName, it MUST
                        return the SiteName immediately.");
                }

                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports DsrGetSiteName method, so it can be captured directly.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"<228> Section 3.5.4.3.6: [DsrGetSiteName] Supported in Windows 2000 Server,
                        Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows
                        Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
                }
            }
        }

        #endregion

        #region DsrGetDcSiteCoverageW Method (Opnum 38) (Section 3.5.4.3.7)

        /// <summary>
        ///  Verify SiteNames parameter in DsrGetDcSiteCoverageW method.
        /// </summary>
        /// <param name="siteNames"> SiteNames parameter in DsrGetSiteName method.</param>
        /// <param name="expectedSiteNames"> An string array, specifies expected SiteNames.</param>
        /// <param name="hresult">
        ///  Response Result value of a Method that use _NL_SITE_NAME_ARRAY as input parameter.
        /// </param>
        private void VerifySiteNamesInDsrGetDcSiteCoverageW(
            _NL_SITE_NAME_ARRAY siteNames,
            string[] expectedSiteNames,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R103281.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD, 
                // if the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD.
                Site.CaptureRequirement(
                    103281,
                    @"[In DsrGetDcSiteCoverageW (Opnum 38)] SiteNames: A pointer to an NL_SITE_NAME_ARRAY structure
                    (section 2.2.1.2.2) that contains an array of site name strings.");

                // judge whether the returned site names is equal the expected site names.
                bool isSiteNameValid = true;

                for (int i = 0; i < siteNames.EntryCount; i++)
                {
                    // Get the returned site name value.
                    string siteName = GetRpcUnicodeString(siteNames.SiteNames[i]);

                    if (!siteName.Equals(expectedSiteNames[i], StringComparison.OrdinalIgnoreCase))
                    {
                        isSiteNameValid = false;
                        break;
                    }
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103299,
                    siteNames.EntryCount: {0},
                    expectedSiteNames.Length: {1},
                    isSiteNameValid: {2}",
                    siteNames.EntryCount,
                    expectedSiteNames.Length,
                    isSiteNameValid);

                bool isVerifyR103284 = (siteNames.EntryCount == (uint)expectedSiteNames.Length)
                    && isSiteNameValid;

                // Verify MS-NRPC requirement: MS-NRPC_R103284.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103284,
                    103284,
                    @"[In DsrGetDcSiteCoverageW (Opnum 38)] The server MUST return all the sites for which the DC
                    publishes site-specific DNS SRV records ([MS-ADTS] section 7.3.2.1 ).");


                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R103408.
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports DsrGetDcSiteCoverageW method, so it can be captured directly.
                    Site.CaptureRequirement(
                        103408,
                        @"<231> Section 3.5.4.3.7: [DsrGetDcSiteCoverageW ] Supported in Windows 2000 Server,
                        Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows
                        Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2.");
                }
            }
        }

        #endregion

        #region DsrAddressToSiteNamesW Method (Opnum 33) (Section 3.5.4.3.8)

        /// <summary>
        ///  Verify SiteNames parameter in DsrAddressToSiteNamesW method.
        /// </summary>
        /// <param name="entryCount">
        ///  The number of socket addresses specified in SocketAddresses,
        ///  input parameter forDsrAddressToSiteNamesW method.
        /// </param>
        /// <param name="siteNamesArray"> SiteNames parameter in DsrAddressToSiteNamesW method.</param>
        /// <param name="addressType"> The AddressType passed into DsrAddressToSiteNamesW.</param>
        /// <param name="hresult">
        ///  Response Result value of a Method that use _NL_SITE_NAME_ARRAY as input parameter.
        /// </param>
        private void VerifySiteNamesInDsrAddressToSiteNamesW(
            uint entryCount,
            _NL_SITE_NAME_ARRAY[] siteNamesArray,
            SocketAddressType addressType,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // After DsrAddressToSiteNamesW returns successfully, the siteNamesArray[0]
                // references the _NL_SITE_NAME_ARRAY structure returned by DsrAddressToSiteNamesW.
                _NL_SITE_NAME_ARRAY siteNames = siteNamesArray[0];

                // Verify MS-NRPC requirement: MS-NRPC_R103293.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    103293,
                    @"[In DsrAddressToSiteNamesW (Opnum 33)] SiteNames: A pointer to an NL_SITE_NAME_ARRAY structure
                    (section 2.2.1.2.2) that contains a corresponding array of site names.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103294");

                // Verify MS-NRPC requirement: MS-NRPC_R103294.
                Site.CaptureRequirementIfAreEqual<uint>(
                    entryCount,
                    siteNames.EntryCount,
                    103294,
                    @"[In DsrAddressToSiteNamesW (Opnum 33), for SiteNames: ] The number of entries returned is
                    equal to EntryCount.");

                // judge whether the return value is valid.
                if (siteNames.EntryCount == entryCount)
                {
                    // judge whether the returned site names is equal to the expected site names.
                    bool isSiteNameValid = true;

                    // If the socket address is invalid,the returned site name should be null.
                    // Verify whether the returned site name is null or not.
                    // Else: Socket address is valid
                    if ((addressType == SocketAddressType.InvalidFormatSocketAddress)
                        || (addressType == SocketAddressType.InvalidSocketAddress))
                    {
                        int errorIndex = -1;
                        for (int i = 0; i < entryCount; i++)
                        {
                            // Get returned site name.
                            string siteName = GetRpcUnicodeString(siteNames.SiteNames[i]);
                            if (siteName != null)
                            {
                                isSiteNameValid = false;
                                errorIndex = i;
                                break;
                            }
                        }

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R103295,
                            error index of siteNames.SiteNames: {0}",
                            errorIndex);

                        // Verify MS-NRPC requirement: MS-NRPC_R103295.
                        Site.CaptureRequirementIfIsTrue(
                            isSiteNameValid,
                            103295,
                            @"[In DsrAddressToSiteNamesW (Opnum 33), for SiteNames: ]  An entry is returned as NULL
                            if the corresponding socket address does not map to any site, or if the address family of
                            the socket address is not IPV4 or IPV6.");

                        // Reset isSiteNameValid, it will be used in follow.
                        isSiteNameValid = true;
                    }
                    else
                    {
                        // The expected site names are splitted by ','.
                        string[] expectedSiteNames = new string[] { defaultSiteName };
                        // judge whether the returned site names is equal to the expected site names.
                        for (int i = 0; i < entryCount; i++)
                        {
                            // get returned site name.
                            string siteName = GetRpcUnicodeString(siteNames.SiteNames[i]);

                            // Site name is valid if it's null or it equals the expected site name.
                            // According to the TD, an entry is returned as null if the corresponding 
                            // socket address does not map to any site. So the siteName can be null.
                            if (!(string.IsNullOrEmpty(siteName) || siteName.Equals(expectedSiteNames[i])))
                            {
                                isSiteNameValid = false;
                                break;
                            }
                        }

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R103299,
                            siteNames.EntryCount: {0},
                            expectedSiteNames.Length: {1},
                            isSiteNameValid: {2}",
                            siteNames.EntryCount,
                            expectedSiteNames.Length,
                            isSiteNameValid);

                        // Verify MS-NRPC requirement: MS-NRPC_R103299.
                        Site.CaptureRequirementIfIsTrue(
                            (siteNames.EntryCount == (uint)expectedSiteNames.Length) && isSiteNameValid,
                            103299,
                            @"[In DsrAddressToSiteNamesW (Opnum 33)] The server MUST return the site names that
                            correspond to the SocketAddresses parameter by using the method specified for IP address
                            and site/subnet mapping ([MS-ADTS] section 7.1.1.2.2.2.1).");
                    }
                }

                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R103409.
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports DsrAddressToSiteNamesW method, so it can be captured directly.
                    Site.CaptureRequirement(
                        103409,
                        @"<232> Section 3.5.4.3.8: [DsrAddressToSiteNamesW (Opnum 33)] Supported in Windows 2000
                        Server, Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, 
                        Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2.");
                }
            }
        }

        #endregion

        #region DsrAddressToSiteNamesExW Method (Opnum 37) (Section 3.5.4.3.9)

        /// <summary>
        ///  Verify SiteNames parameter in DsrAddressToSiteNamesExW method.
        /// </summary>
        /// <param name="entryCount"> The number of socket addresses specified in SocketAddresses.</param>
        /// <param name="returnedSiteNames"> SiteNames parameter in DsrAddressToSiteNamesExW method.</param>
        /// <param name="addressType"> The AddressType passed into DsrAddressToSiteNamesExW.</param>
        /// <param name="hresult">
        ///  Response Result value of a Method that using _NL_SITE_NAME_ARRAY as input parameter.
        /// </param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Maintainability",
            "CA1502:AvoidExcessiveComplexity")]
        private void VerifySiteNamesInDsrAddressToSiteNamesExW(
            uint entryCount,
            _NL_SITE_NAME_EX_ARRAY[] returnedSiteNames,
            SocketAddressType addressType,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // After calling DsrAddressToSiteNamesExW successfully, returnedSiteNames[0] references
                // the _NL_SITE_NAME_EX_ARRAY structure returned by DsrAddressToSiteNamesExW method.
                _NL_SITE_NAME_EX_ARRAY siteNames = returnedSiteNames[0];

                // Verify MS-NRPC requirement: MS-NRPC_R103307.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    103307,
                    @"[In DsrAddressToSiteNamesExW (Opnum 37)] SiteNames: A pointer to an NL_SITE_NAME_EX_ARRAY 
                    structure (section 2.2.1.2.3) that contains an array of site names and an array of subnet 
                    names that correspond to socket addresses in SocketAddresses.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103308");

                // Verify MS-NRPC requirement: MS-NRPC_R103308.
                Site.CaptureRequirementIfAreEqual<uint>(
                    entryCount,
                    siteNames.EntryCount,
                    103308,
                    @"[In DsrAddressToSiteNamesExW (Opnum 37), for  SiteNames: ] The number of 
                    entries returned is equal to EntryCount.");

                // judge whether the return value is valid.
                if (siteNames.EntryCount == entryCount)
                {
                    // Judge whether the returned site names is equal to the expected site names.
                    bool isSiteNameValid = true;

                    // Judge whether the returned subnet names is equal to the expected subnet names.
                    bool isSubnetNameValid = true;

                    // Store the erroe index or siteNames.SiteNames or siteNames.SubnetNames.
                    int errorIndex = -1;

                    // If the socket address is invalid,the returned site name should be null.
                    // Verify whether the returned site name or subnet name is null or not.
                    // Else: Socket address is valid.
                    if ((addressType == SocketAddressType.InvalidFormatSocketAddress)
                        || (addressType == SocketAddressType.InvalidSocketAddress))
                    {
                        for (int i = 0; i < siteNames.EntryCount; i++)
                        {
                            // Get the returned site name value.
                            string siteName = GetRpcUnicodeString(siteNames.SiteNames[i]);
                            if (siteName != null)
                            {
                                isSiteNameValid = false;
                                errorIndex = i;
                                break;
                            }

                            // Get returned subnet name value.
                            string subnetName = GetRpcUnicodeString(siteNames.SubnetNames[i]);
                            if (subnetName != null)
                            {
                                isSubnetNameValid = false;
                                errorIndex = i;
                                break;
                            }
                        }

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R103309,
                            error index of SiteNames or SubnetNames: {0},
                            isSiteNameValid: {1},
                            isSubnetNameValid: {2}",
                            errorIndex,
                            isSiteNameValid,
                            isSubnetNameValid);

                        // Verify MS-NRPC requirement: MS-NRPC_R103309.
                        Site.CaptureRequirementIfIsTrue(
                            isSiteNameValid && isSubnetNameValid,
                            103309,
                            @"[In DsrAddressToSiteNamesExW (Opnum 37), for  SiteNames: ]  An entry is returned 
                            as NULL if the corresponding socket address does not map to any site, or if the 
                            address family of the socket address is not IPV4 or IPV6.");

                        // Reset isSiteNameValid, it will be used in follow.
                        isSiteNameValid = true;

                        // Reset isSubnetNameValid, it will be used in follow.
                        isSubnetNameValid = true;
                    }
                    else
                    {
                        // The expected site names is splitted by ','
                        string[] expectedSiteNames = new string[] { defaultSiteName };
                        string[] expectedSubnetNames = (addressType == SocketAddressType.Ipv4SocketAddress) ?
                            Site.Properties["MS_NRPC.SUT.SubnetNames.IP.V4"].Split(',') : Site.Properties["MS_NRPC.Adapter.Ipv6SubnetNames"].Split(',');

                        // Judge whether the returned site names is equal the expected site names.
                        // Judge whether the returned subnet names is equal the expected subnet names.
                        for (int i = 0; i < siteNames.EntryCount; i++)
                        {
                            string siteName = GetRpcUnicodeString(siteNames.SiteNames[i]);

                            // Site name is valid if it's null or it equals the expected site name.
                            // According to the TD, an entry is returned as null if the corresponding 
                            // socket address does not map to any site. So the siteName can be null.
                            if (!(string.IsNullOrEmpty(siteName) || siteName.Equals(expectedSiteNames[i])))
                            {
                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R103313,
                                    expected Site Name: {0},
                                    actual Site Name: {1}",
                                    expectedSiteNames[i],
                                    siteName);

                                isSiteNameValid = false;
                                break;
                            }

                            string subnetName = GetRpcUnicodeString(siteNames.SubnetNames[i]);

                            // Subnet name is valid if it's null or it equals expected subnet name.
                            // According to the TD, An entry is returned as null if the address family of the 
                            // socket address is not IPV4 or IPV6. So the subnet name is valid if its value is null.
                            if (!(string.IsNullOrEmpty(subnetName) || subnetName.Equals(expectedSubnetNames[i])))
                            {
                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R103313,
                                    expected Subnet Name: {0},
                                    actual Subnet Name: {1}",
                                    expectedSubnetNames[i],
                                    subnetName);

                                isSubnetNameValid = false;
                                break;
                            }
                        }

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R103313,
                            siteNames.EntryCount: {0},
                            expected SiteNames.Length: {1},
                            isSiteNameValid: {2},
                            expected SubnetNames.Length: {3},
                            isSubnetNameValid: {4}",
                            siteNames.EntryCount,
                            expectedSiteNames.Length,
                            isSiteNameValid,
                            expectedSubnetNames.Length,
                            isSubnetNameValid);

                        bool isVerifyR103313 = (siteNames.EntryCount == (uint)expectedSiteNames.Length)
                            && (siteNames.EntryCount == (uint)expectedSubnetNames.Length)
                            && isSiteNameValid && isSubnetNameValid;

                        // Verify MS-NRPC requirement: MS-NRPC_R103313.
                        Site.CaptureRequirementIfIsTrue(
                            isVerifyR103313,
                            103313,
                            @"[In DsrAddressToSiteNamesExW (Opnum 37)] The server MUST return the site and subnet names
                            that correspond to the SocketAddresses by using the method specified for IP address and
                            site/subnet mapping ([MS-ADTS] section  7.1.1.2.2.2.1).");
                    }
                }

                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R103411.
                    // when OS is the specified OS, the server returns success,
                    // indicates that the specified OS supports DsrAddressToSiteNamesExW method,
                    // so it can be captured directly.
                    Site.CaptureRequirement(
                        103411,
                        @"<234> Section 3.5.4.3.9: [DsrAddressToSiteNamesExW (Opnum 37)] Supported in
                        Windows 2000 Server, Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008,
                        Windows 7, Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1,
                        and Windows Server 2012 R2.");
                }
            }
        }

        #endregion

        #region DsrDeregisterDnsHostRecords Method (Opnum 41) (Section 3.5.4.3.10)

        /// <summary>
        ///  Verify DsrDeregisterDnsHostRecords method response.
        /// </summary>
        /// <param name="hresult"> Response Result value of a Method DsrDeregisterDnsHostRecords.</param>
        private void VerifyDsrDeregisterDnsHostRecordsResponse(HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R103413.
                    // When OS is the specified OS, the server returns success,
                    // indicates that the specified OS supports DsrDeregisterDnsHostRecords method,
                    // so it can be captured directly.
                    Site.CaptureRequirement(
                        103413,
                        @"<237> Section 3.5.4.3.10: [DsrDeregisterDnsHostRecords (Opnum 41)] Supported in
                        Windows 2000 Server, Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008,
                        Windows 7, Windows Server 2008 R2, Windows 8, Windows 2012, Windows 8.1, and Windows Server 2012 R2.");
                }
            }
        }

        #endregion

        #endregion

        #region Secure Channel Establishment and Maintenance Methods

        #region NetrServerReqChallenge Method (Opnum 4) (Section 3.5.4.4.1)

        /// <summary>
        ///  Verify NetrServerReqChallenge Response information.
        /// </summary>
        /// <param name="hresult"> Returned value of NetrServerReqChallenge method(success or failure).</param>
        private void VerifyNetrServerReqChallengeResponse(HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R103338.
                // Stack has changed pointer to corresponding structure.
                // This structure NETLOGON_CREDENTIALis generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                // So when the hresult is success, this requirement is captured.
                Site.CaptureRequirement(
                    103338,
                    @"[In NetrServerReqChallenge (Opnum 4)] ServerChallenge: A pointer to a NETLOGON_CREDENTIAL
                    structure, as specified in section 2.2.1.3.4, that contains the server challenge response.");

                // Verify MS-NRPC requirement:  MS-NRPC_R103345.
                // This structure NETLOGON_CREDENTIALis generated based on the IDL from the TD.
                // If the method with field 'ServerChallenge' as parameter execute successfully, it indicates
                // that this field is the type defined in the TD.
                // NETLOGON_CREDENTIAL structure contains an byte[] array, which has 8 elements.
                // don't need to verify random attribute. only to verify containing 64-bit value.
                // So when the hresult is success, this requirement is captured,
                // and it is not needed to verify the specific content.
                Site.CaptureRequirement(
                    103345,
                    @"[In NetrServerReqChallenge (Opnum 4)] The server MUST generate a 64-bit random number as the
                    server challenge to be returned in the ServerChallenge parameter.");
            }
        }

        #endregion

        #region NetrServerAuthenticate3 Method (Opnum 26) (Section 3.5.4.4.2)

        /// <summary>
        ///  Verify NetrServerAuthenticate3 Response information.
        /// </summary>
        /// <param name="hresult">
        ///  Returned value of NetrServerAuthenticate3 method(success or failure).
        /// </param>
        /// <param name="credential">
        ///  The server credential value, out data returned by NetrServerAuthenticate3 method.
        /// </param>
        /// <param name="serverNegotiateFlag">
        ///  Capabilities that the server supports, the server responses to the client.
        /// </param>
        /// <param name="accountRid">
        ///  The returned the RID of the requested account.
        /// </param>
        private void VerifyNetrServerAuthenticate3Response(
            HRESULT hresult,
            _NETLOGON_CREDENTIAL? credential,
            uint serverNegotiateFlag,
            uint accountRid)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify response NegotiateFlag parameter information.
                this.VerifyNegotiateFlagForAuthenticateMethod(serverNegotiateFlag);

                // Verify MS-NRPC requirement:  MS-NRPC_R103356.
                // Stack has changed pointer to corresponding structure.
                // This structure NETLOGON_CREDENTIALis generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                // So when the hresult is success, this requirement is captured.
                Site.CaptureRequirement(
                    103356,
                    @"[In NetrServerAuthenticate3 (Opnum 26)] ServerCredential: A pointer to a NETLOGON_CREDENTIAL
                    structure, as specified in section 2.2.1.3.4, that contains the returned server credentials.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103361");

                uint expectedAccountRid = (uint)EndpointRid;

                // Verify MS-NRPC requirement:  MS-NRPC_R103361.
                Site.CaptureRequirementIfAreEqual<uint>(
                    expectedAccountRid,
                    accountRid,
                    103361,
                    @"[In NetrServerAuthenticate3 (Opnum 26)] AccountRid: A pointer that receives the RID of the
                    account specified by the AccountName parameter.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103377");

                // Verify MS-NRPC requirement: MS-NRPC_R103377.
                // The "the ServerCredential value returned by the server is not null"
                // specifies the server computes this value.
                Site.CaptureRequirementIfIsNotNull(
                    credential,
                    103377,
                    @"[In NetrServerAuthenticate3 (Opnum 26)] The server MUST compute the server Netlogon credential
                    to be returned to the client.");

                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R103414.
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports NetrServerAuthenticate3 method, so it can be captured directly.
                    Site.CaptureRequirement(
                        103414,
                        @"<240> Section 3.5.4.4.2: [NetrServerAuthenticate3 (Opnum 26)] Supported in Windows 2000 Server,
                        Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows Server 2008 R2,
                        Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
                }
            }
        }

        #endregion

        #region NetrServerAuthenticate2 Method (Opnum 15) (Section 3.5.4.4.3)

        /// <summary>
        ///  Verify NetrServerAuthenticate2 Response information.
        /// </summary>
        /// <param name="hresult"> 
        ///  Returned value of NetrServerAuthenticate2 method(success or failure).
        /// </param>
        /// <param name="serverNegotiateFlag">
        ///  Capabilities that the server supports, the server responses to the client.
        /// </param>
        private void VerifyNetrServerAuthenticate2Response(
            HRESULT hresult,
            uint serverNegotiateFlag)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify response NegotiateFlag parameter information.
                this.VerifyNegotiateFlagForAuthenticateMethod(serverNegotiateFlag);

                // Verify MS-NRPC requirement:  MS-NRPC_R103470.
                // Stack has changed pointer to corresponding structure.
                // This structure NETLOGON_CREDENTIALis generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                // So when the hresult is success, this requirement is captured.
                Site.CaptureRequirement(
                    103470,
                    @"[In NetrServerAuthenticate2 (Opnum 15)] ServerCredential: A pointer to a NETLOGON_CREDENTIAL
                    structure, as specified in section 2.2.1.3.4, that contains the returned server credentials.");

                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports NetrServerAuthenticate2 method, so it can be captured directly.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"<244> Section 3.5.4.4.3: [NetrServerAuthenticate2 (Opnum 15)] This method was used in Windows NT 3.5 
                        and Windows NT 4.0. In Windows 2000 Server, Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008,
                        Windows 7, and Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2,
                        it was superseded by the NetrServerAuthenticate3 method (section 3.5.4.4.2).");
                }
            }
        }

        #endregion

        #region NetrServerPasswordSet2 (Opnum 30) (Section 3.5.4.4.5)

        /// <summary>
        ///  Verify NetrServerPasswordSet2 Response information.
        /// </summary>
        /// <param name="hresult">
        ///  Returned value of NetrServerPasswordSet2 method(success or failure).
        /// </param>
        /// <param name="returnAuthenticator">
        ///  The output parameter ReturnAuthenticator.
        /// </param>
        /// <param name="encryptedPassword">
        ///  The encrypted _NL_TRUST_PASSWORD password structure that to be sent.
        /// </param>
        /// <param name="passwordSent"> The new password sent to the server.</param>
        private void VerifyNetrServerPasswordSet2Response(
            HRESULT hresult,
            _NETLOGON_AUTHENTICATOR? returnAuthenticator,
            _NL_TRUST_PASSWORD encryptedPassword,
            string passwordSent)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R912.
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports NetrServerPasswordSet2 method, so it can be captured directly.
                    Site.CaptureRequirement(
                        912,
                        @"<246> Section 3.5.4.4.5: The method [NetrServerPasswordSet2] Supported in Windows 2000 Server,
                        Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows Server 2008 R2,
                        Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
                }

                // Verify MS-NRPC requirement:  MS-NRPC_R925.
                // This structure NETLOGON_AUTHENTICATOR generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                // So when the hresult is success, this requirement is captured.
                Site.CaptureRequirement(
                    925,
                    @"[In NetrServerPasswordSet2 (Opnum 30)]ReturnAuthenticator: A pointer to a NETLOGON_AUTHENTICATOR
                    structure, as specified in section 2.2.1.1.5, that contains the server return authenticator.");

                // Verify NETLOGON_AUTHENTICATOR structure.
                this.VerifyNetlogonAuthenticator(hresult, returnAuthenticator);

                // _NL_TRUST_PASSWORD "Buffer" field size is 512.
                int bufferFieldSize = 512;

                // _NL_TRUST_PASSWORD "Length" field size is 4.
                int lengthFieldSize = 8;
                byte[] decryptedResult = new byte[bufferFieldSize + lengthFieldSize];
                MarshalHelper.GetBytes(encryptedPassword.Buffer, true).CopyTo(decryptedResult, 0);
                BitConverter.GetBytes(encryptedPassword.Length).CopyTo(decryptedResult, bufferFieldSize);
                int passwordLength = (int)BitConverter.ToUInt32(decryptedResult, bufferFieldSize);

                string decryptedPwd = Encoding.Unicode.GetString(
                    MarshalHelper.SubBytes(decryptedResult, bufferFieldSize - passwordLength, passwordLength),
                    0,
                    passwordLength);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R1537");

                // Verify MS-NRPC requirement:  MS-NRPC_R1537.
                // If the decrypted password equals to the sent clear password,
                // it indicates that decryption is success. Otherwise, 
                // it indicates that decryption is failure.
                Site.CaptureRequirementIfAreEqual<string>(
                    passwordSent,
                    decryptedPwd,
                    1537,
                    @"[In NetrServerPasswordSet2 (Opnum 30)]The RC4 algorithm and the session key established as the
                    encryption key is used decrypt the message, which is encrypted by using the RC4 algorithm and the
                    session key established as the encryption key.");
            }
        }

        #endregion

        #region NetrServerPasswordSet (Opnum 6) (Section 3.5.4.4.6)

        /// <summary>
        ///  Verify NetrServerPasswordSet Response information.
        /// </summary>
        /// <param name="hresult"> Returned value of NetrServerPasswordSet method(success or failure).</param>
        /// <param name="returnAuthenticator"> The output parameter ReturnAuthenticator.</param>
        /// <param name="encryptedPassword"> The encrypted _LM_OWF_PASSWORD password structure that to be sent.</param>
        /// <param name="passwordSent"> The new password sent to the server.</param>
        /// <param name="sessionKey"> The session key.</param>
        private void VerifyNetrServerPasswordSetResponse(
            HRESULT hresult,
            _NETLOGON_AUTHENTICATOR? returnAuthenticator,
            _LM_OWF_PASSWORD encryptedPassword,
            string passwordSent,
            byte[] sessionKey)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R954
                // Stack has changed pointer to corresponding structure.
                // This structure NETLOGON_AUTHENTICATOR is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                // So when the hresult is success, this requirement is captured.
                Site.CaptureRequirement(
                    954,
                    @"[In NetrServerPasswordSet(Opnum 6)]ReturnAuthenticator: A pointer to a NETLOGON_AUTHENTICATOR
                    structure, as specified in section 2.2.1.1.5, that contains the server return authenticator.");

                // Verify NETLOGON_AUTHENTICATOR structure.
                this.VerifyNetlogonAuthenticator(hresult, returnAuthenticator);

                byte[] expectedHashValue =
                    Microsoft.Protocols.TestTools.StackSdk.Security.Nlmp.NlmpUtility.GetResponseKeyNt(
                    TestTools.StackSdk.Security.Nlmp.NlmpVersion.v1,
                    PrimaryDomainDnsName,
                    DomainAdministratorName,
                    passwordSent);

                byte[] actualHashValue = GetPlainNtHashFromEncryptedOwfPassword(
                    encryptedPassword, sessionKey);

                bool isHashValueEqual =
                    BitConverter.ToString(expectedHashValue).Equals(BitConverter.ToString(actualHashValue));

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104853,
                    sessionKey.Length: {0},
                    plaintextOWFPassword: {1},
                    decryptedOWFPassword: {2}",
                    sessionKey.Length,
                    BitConverter.ToString(expectedHashValue),
                    BitConverter.ToString(actualHashValue));

                // Verify MS-NRPC requirement:  MS-NRPC_R104853.
                // If the decrypted password equals to the sent clear password,
                // it indicates that decryption is success. or else failure.
                Site.CaptureRequirementIfIsTrue(
                    isHashValueEqual,
                    104853,
                    @"The server MUST decrypt the new password that is supplied in the UasNewPassword parameter by
                    using the inverse to the encryption algorithm that is specified in [MS-SAMR] section 2.2.11.1.1,
                    Encrypt an NT Hash or LM Hash Value with a Specified Key. The session key is the specified key
                    input, and the decryption keys  are derived using the 16-byte value process, as specified in
                    [MS-SAMR] section 2.2.11.1.4.");
            }
        }

        #endregion

        #region NetrServerTrustPasswordsGet (Opnum 42) (Section 3.5.4.4.8)

        /// <summary>
        ///  Verify NetrServerTrustPasswordsGet Response information.
        /// </summary>
        /// <param name="hresult"> Returned value of NetrServerTrustPasswordsGet method(success or failure).</param>
        /// <param name="returnAuthenticator"> The output parameter ReturnAuthenticator.</param>
        /// <param name="encryptedNewOwfPassword"> Returned encrypted New OwfPassword.</param>
        /// <param name="encryptedOldOwfPassword"> Returned encrypted Old OwfPassword.</param>
        /// <param name="accountType">
        ///  A NETLOGON_SECURE_CHANNEL_TYPE enumerated value,
        ///  that describes the secure channel to be used for authentication.
        /// </param>
        /// <param name="sessionKey"> Session key.</param>
        private void VerifyNetrServerTrustPasswordsGetResponse(
            HRESULT hresult,
            _NETLOGON_AUTHENTICATOR? returnAuthenticator,
            _NT_OWF_PASSWORD? encryptedNewOwfPassword,
            _NT_OWF_PASSWORD? encryptedOldOwfPassword,
            _NETLOGON_SECURE_CHANNEL_TYPE accountType,
            byte[] sessionKey)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R1011.
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports NetrServerTrustPasswordsGet method, so it can be captured directly.
                    Site.CaptureRequirement(
                        1011,
                        @"<252> Section 3.5.4.4.8: [NetrServerTrustPasswordsGet method is ] Supported in Windows 2000 Server SP4,
                        Windows XP, and Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows Server 2008 R2,
                        Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
                }

                // Verify MS-NRPC requirement:  MS-NRPC_R1023.
                // Stack has changed pointer to corresponding structure.
                // This structure NETLOGON_AUTHENTICATOR generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                // So when the hresult is success, this requirement is captured.
                Site.CaptureRequirement(
                    1023,
                    @"[In NetrServerTrustPasswordsGet (Opnum 42)]ReturnAuthenticator: A pointer to a 
                    NETLOGON_AUTHENTICATOR structure, as specified in section 2.2.1.1.5, that contains
                    the server return authenticator.");

                // Verify NETLOGON_AUTHENTICATOR structure.
                this.VerifyNetlogonAuthenticator(hresult, returnAuthenticator);

                // Generate the expected new password OWF structure from string.
                _NT_OWF_PASSWORD expectedNewNTOWFPassword =
                    GetEncryptedNtOwfPasswordStructure(ENDPOINTPassword, sessionKey);

                // Generate the expected old password OWF structure from string.
                _NT_OWF_PASSWORD expectedOldNTOWFPassword =
                    GetEncryptedNtOwfPasswordStructure(string.Empty, sessionKey);

                bool isNewNTOWFPasswordValid =
                    VerifyOwfStructureEqual(expectedNewNTOWFPassword, encryptedNewOwfPassword);
                bool isOldNTOWFPasswordValid =
                    VerifyOwfStructureEqual(expectedOldNTOWFPassword, encryptedOldOwfPassword);

                if (accountType == _NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R1431,
                        encrypted NtOwfPassword: {0},
                        expected password: {1}",
                        ArrayToString(expectedOldNTOWFPassword.data[0].data),
                        ArrayToString(encryptedOldOwfPassword.Value.data[1].data));

                    // Verify MS-NRPC requirement:  MS-NRPC_R1431.
                    Site.CaptureRequirementIfIsTrue(
                        isOldNTOWFPasswordValid,
                        1431,
                        @"[In NetrServerTrustPasswordsGet (Opnum 42)]If the OWF of the previous password is not
                        required, an empty password MUST be used to calculate the OWF.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R1027,
                        encrypted NtOwfPassword: {0},
                        expected password: {1}",
                        ArrayToString(expectedOldNTOWFPassword.data[0].data),
                        ArrayToString(encryptedOldOwfPassword.Value.data[1].data));

                    // Verify MS-NRPC requirement:  MS-NRPC_R1027.
                    Site.CaptureRequirementIfIsTrue(
                        isOldNTOWFPasswordValid,
                        1027,
                        @"[In NetrServerTrustPasswordsGet (Opnum 42)]EncryptedOldOwfPassword: A pointer to an
                        ENCRYPTED_NT_OWF_PASSWORD structure, as specified in section 2.2.1.1.4, that contains the
                        NTOWFv1 (as specified in NTLM v1 Authentication in [MS-NLMP] section 3.3.1) of the previous
                        password, encrypted as specified in [MS-SAMR] section 2.2.11.1.1, Encrypting an NT Hash or
                        LM Hash Value with a Specified Key.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R1027,
                        encrypted NtOwfPassword: {0},
                        expected password: {1}",
                        ArrayToString(expectedOldNTOWFPassword.data[0].data),
                        ArrayToString(encryptedOldOwfPassword.Value.data[1].data));

                    // Verify MS-NRPC requirement:  MS-NRPC_R101432.
                    // If encrypted password that the client gets by encrypting the decryped password
                    // (the client decrypts the server returned password.)
                    // equals to the server returned password,
                    // it indicates that the server encrypts password following the TD.
                    // So this RS can be captured directly.
                    Site.CaptureRequirementIfIsTrue(
                        isOldNTOWFPasswordValid,
                        101432,
                        @"[In NetrServerTrustPasswordsGet (Opnum 42)]The NTOWFv1 of the previous passwords MUST be 
                        encrypted as specified in [MS-SAMR] section 2.2.11.1.1, Encrypting an NT Hash or LM Hash 
                        Value with a Specified Key.The session key is the specified 16-byte key used to derive its 
                        keys via the 16-byte value process, as specified in [MS-SAMR] section 2.2.11.1.4.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R1434,
                        encrypted NtOwfPassword: {0},
                        expected password: {1}",
                        ArrayToString(expectedOldNTOWFPassword.data[0].data),
                        ArrayToString(encryptedOldOwfPassword.Value.data[1].data));

                    // Verify MS-NRPC requirement:  MS-NRPC_R1434.
                    Site.CaptureRequirementIfIsTrue(
                        isOldNTOWFPasswordValid && isNewNTOWFPasswordValid,
                        1434,
                        @"[In NetrServerTrustPasswordsGet (Opnum 42)]The encrypted versions MUST be returned in the
                        parameters EncryptedNewOwfPassword and EncryptedOldOwfPassword.");
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1024,
                    encrypted NtOwfPassword: {0},
                    expected password: {1}",
                    ArrayToString(expectedNewNTOWFPassword.data[0].data),
                    ArrayToString(encryptedNewOwfPassword.Value.data[1].data));

                // Verify MS-NRPC requirement:  MS-NRPC_R1024.
                Site.CaptureRequirementIfIsTrue(
                    isNewNTOWFPasswordValid,
                    1024,
                    @"[In NetrServerTrustPasswordsGet (Opnum 42)]EncryptedNewOwfPassword: A pointer to an
                    ENCRYPTED_NT_OWF_PASSWORD structure, as specified in section 2.2.1.1.4, that contains the NTOWFv1
                    (as specified in NTLM v1 Authentication in [MS-NLMP] section 3.3.1) of the current password,
                    encrypted as specified in [MS-SAMR] section 2.2.11.1.1, Encrypting an NT Hash or LM Hash Value
                    with a Specified Key.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R1432,
                    encrypted NtOwfPassword: {0},
                    expected password: {1}",
                    ArrayToString(expectedNewNTOWFPassword.data[0].data),
                    ArrayToString(encryptedNewOwfPassword.Value.data[1].data));

                // Verify MS-NRPC requirement:  MS-NRPC_R1432.
                // If encrypted password that the client gets by encrypting the decrypted password
                // (the client decrypts the server returned password.)
                // equals to the server returned password, 
                // it indicates that the server encrypts password following the TD.
                // so this RS can be captured directly. 
                Site.CaptureRequirementIfIsTrue(
                    isNewNTOWFPasswordValid,
                    1432,
                    @"[In NetrServerTrustPasswordsGet (Opnum 42)]The NTOWFv1 of the current passwords MUST be encrypted 
                    as specified in [MS-SAMR] section 2.2.11.1.1, Encrypting an NT Hash or LM Hash Value with a 
                    Specified Key.The session key is the specified 16-byte key used to derive its keys via the 16-byte 
                    value process, as specified in [MS-SAMR] section 2.2.11.1.4.");
            }
        }

        #endregion

        #region NetrLogonGetDomainInfo (Opnum 29) (Section 3.5.4.4.9)

        /// <summary>
        ///  Verify NetrLogonGetDomainInfo Response information.
        /// </summary>
        /// <param name="hresult"> Returned value of NetrLogonGetDomainInfo method(success or failure).</param>
        /// <param name="returnAuthenticator"> The output parameter ReturnAuthenticator.</param>
        /// <param name="level"> Input parameter, The information level requested by the client.</param>
        /// <param name="domainInfo">
        ///  A NETLOGON_DOMAIN_INFORMATION structure, out data returned by NetrLogonGetDomainInfo method.
        /// </param>
        /// <param name="workStaBuffer">
        ///  A _NETLOGON_WORKSTATION_INFORMATION structure, input data of NetrLogonGetDomainInfo method.
        /// </param>
        /// <param name="dnsHostNameAttribute"> The dnsHostName attribute for the client machine in AD.</param>
        /// <param name="spnAttribute"> The ServicePrincipalName attribute for the client machine in AD.</param>
        /// <param name="operatingSystemAttribute"> OperatingSystem attribute</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode"),
        System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        private void VerifyNetrLogonGetDomainInfoResponse(
            HRESULT hresult,
            _NETLOGON_AUTHENTICATOR? returnAuthenticator,
            Level_Values level,
            _NETLOGON_DOMAIN_INFORMATION? domainInfo,
            _NETLOGON_WORKSTATION_INFORMATION workStaBuffer,
            string dnsHostNameAttribute,
            string spnAttribute,
            string operatingSystemAttribute)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                _NETLOGON_DOMAIN_INFORMATION domBuffer = domainInfo.Value;

                if ((currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R1035.
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports NetrLogonGetDomainInfo method, so it can be captured directly.
                    Site.CaptureRequirement(
                        1035,
                        @"<254> Section 3.5.4.4.9: [NetrLogonGetDomainInfo method is ] Supported in Windows 2000 Server,
                        Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows Server 2008 R2,
                        Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
                }

                // Verify MS-NRPC requirement:  MS-NRPC_R1039.
                // Stack has changed pointer to corresponding structure.
                // This structure NETLOGON_AUTHENTICATOR is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                // So when the hresult is success, this requirement is captured.
                Site.CaptureRequirement(
                    1039,
                    @"[In NetrLogonGetDomainInfo (Opnum 29)]ReturnAuthenticator: A pointer to a NETLOGON_AUTHENTICATOR
                    structure, as specified in section 2.2.1.1.5, that contains the server return authenticator.");

                // Verify NETLOGON_AUTHENTICATOR structure.
                this.VerifyNetlogonAuthenticator(hresult, returnAuthenticator);

                // Verify MS-NRPC requirement:  MS-NRPC_R1044.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD,
                // if the method having this field as parameter returns success,
                // it indicates that this field is the type as defined in the TD.
                Site.CaptureRequirement(
                    1044,
                    @"[In NetrLogonGetDomainInfo (Opnum 29)]DomBuffer: A pointer to a NETLOGON_DOMAIN_INFORMATION
                    structure, as specified in section 2.2.1.3.12, that contains information about the domain or
                    policy information.");

                if (level == Level_Values.NetlogonDomainInfo)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R1057");

                    // DomainInfo array is generated based on the IDL, and it has only one element.
                    string actualDomainName = GetRpcUnicodeString(domBuffer.DomainInfo[0].PrimaryDomain.DomainName);

                    // Verify MS-NRPC requirement:  MS-NRPC_R1057.
                    Site.CaptureRequirementIfAreEqual<string>(
                        primaryDomainNetBiosName.ToLower(CultureInfo.InvariantCulture),
                        actualDomainName.ToLower(CultureInfo.InvariantCulture),
                        1057,
                        @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                        structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO.PrimaryDomain. DomainName
                        MUST be set to NetbiosDomainName.");

                    string actualDnsDomainName = GetRpcUnicodeString(
                        domBuffer.DomainInfo[0].PrimaryDomain.DnsDomainName);

                    // If actualDnsDomainName ends with '.' (e.g. "contoso.com."), remove the last '.'.
                    if (actualDnsDomainName[actualDnsDomainName.Length - 1] == '.')
                    {
                        actualDnsDomainName = actualDnsDomainName.Substring(0, actualDnsDomainName.Length - 1);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R1058");

                    // Verify MS-NRPC requirement:  MS-NRPC_R1058.
                    Site.CaptureRequirementIfAreEqual<string>(
                        PrimaryDomainDnsName.ToLower(CultureInfo.InvariantCulture),
                        actualDnsDomainName.ToLower(CultureInfo.InvariantCulture),
                        1058,
                        @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                        structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO.PrimaryDomain. DnsDomainName
                        MUST be set to DnsDomainName.");

                    string actualDnsForestName = GetRpcUnicodeString(
                        domBuffer.DomainInfo[0].PrimaryDomain.DnsForestName);

                    // If actualDnsForestName ends with '.' (e.g. "contoso.com."), remove the last '.'.
                    if (actualDnsForestName[actualDnsForestName.Length - 1] == '.')
                    {
                        actualDnsForestName = actualDnsForestName.Substring(0, actualDnsForestName.Length - 1);
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R1059");

                    // Verify MS-NRPC requirement:  MS-NRPC_R1059.
                    Site.CaptureRequirementIfAreEqual<string>(
                        Site.Properties["Common.PrimaryDomain.DNSName"],
                        actualDnsForestName,
                        1059,
                        @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                        structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO.PrimaryDomain. DnsForestName
                        MUST be set to DnsForestName.");

                    Guid actualDomainGuid = domBuffer.DomainInfo[0].PrimaryDomain.DomainGuid;
                    if (actualDomainGuid != null)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R1060");

                        // Verify MS-NRPC requirement:  MS-NRPC_R1060.
                        Site.CaptureRequirementIfAreEqual<string>(
                            Site.Properties["Common.PrimaryDomainDnsName.ServerGUID"],
                            actualDomainGuid.ToString(),
                            1060,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                            structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO.PrimaryDomain. DomainGuid
                            MUST be set to DomainGuid if not NULL.");
                    }

                    if (domBuffer.DomainInfo[0].PrimaryDomain.DomainSid != null)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R1061");

                        string actualDomainSid = GetStringFromRpcSid(domBuffer.DomainInfo[0].PrimaryDomain.DomainSid[0]);

                        // Verify MS-NRPC requirement:  MS-NRPC_R1061.
                        Site.CaptureRequirementIfAreEqual<string>(
                            PrimaryDomainSID,
                            actualDomainSid,
                            1061,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                            structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO.PrimaryDomain. DomainSid
                            MUST be set to DomainSid if DomainSid is not NULL.");
                    }

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R1062");

                    // Verify MS-NRPC requirement:  MS-NRPC_R1062.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        workStaBuffer.WorkstationInfo[0].WorkstationFlags & 0x3,
                        domBuffer.DomainInfo[0].WorkstationFlags,
                        1062,
                        @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                        structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO.WorkstationFlags MUST be set
                        with the bitwise AND of NETLOGON_WORKSTATION_INFORMATION. WorkstationInfo.WorkstationFlags 
                        and 0x3.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R1063");

                    // Verify MS-NRPC requirement:  MS-NRPC_R1063.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        (uint)TrustedDomainCount,
                        domBuffer.DomainInfo[0].TrustedDomainCount,
                        1063,
                        @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                        structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO.TrustedDomainCount MUST be
                        set to the size of the ForestTrustList.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R1064");

                    // Verify MS-NRPC requirement:  MS-NRPC_R1064.
                    // This structure is generated based on the IDL from the TD.
                    // If the method using this field as parameter executes successfully, it indicates
                    // that this field is the type defined in the TD, and the specific content will be verify follows.
                    // So here only to verify the count number.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        (uint)TrustedDomainCount,
                        domBuffer.DomainInfo[0].TrustedDomainCount,
                        1064,
                        @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                        structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO.TrustedDomains MUST be set
                        to a TrustedDomainCount-sized array of NETLOGON_ONE_DOMAIN_INFO structures.");

                    if (domBuffer.DomainInfo[0].TrustedDomainCount > 0)
                    {
                        // Get the expected value for trusted domain.
                        string[] expectNetBIOSDomainNamesForTrustedDomain = NetBIOSDomainNamesForTrustedDomain.Split(',');
                        string[] dnsDomainNamesForTrustedDomain = 
                            { Site.Properties["Common.PrimaryDomain.DNSName"], Site.Properties["TrustDomain.DNSName"] };
                        string[] domainGuidsForTrustedDomain = DomainGuidsForTrustedDomain.Split(',');
                        string[] domainSidsForTrustedDomain = DomainSidsForTrustedDomain.Split(',');
                        string[] machineAccountRidForTrustedDomain =
                            Site.Properties["MS_NRPC.Adapter.MachineAccountRidForTrustedDomain"].Split(',');
                        string[] flagsForTrustedDomain = FlagsForTrustedDomain.Split(',');
                        string[] parentIndexForTrustedDomain = ParentIndexForTrustedDomain.Split(',');
                        string[] trustTypeForTrustedDomain = TrustTypeForTrustedDomain.Split(',');
                        string[] trustAttributesForTrustedDomain = TrustAttributesForTrustedDomain.Split(',');

                        // Used to indicate whether the returned value is right.
                        bool isNetBIOSDomainNamesCorrect = true;
                        bool isDnsDomainNamesCorrect = true;
                        bool isDomainGuidsCorrect = true;
                        bool isDomainSidsCorrect = true;
                        bool isDnsForestNameCorrect = true;
                        bool isTrustExtensionLengthCorrect = true;
                        bool isTrustExtensionBufferCorrect = true;


                        foreach (_NETLOGON_ONE_DOMAIN_INFO domain in domBuffer.DomainInfo[0].TrustedDomains)
                        {
                            // A local variable used to indicate if a match is found for a specified object.
                            bool isMatchFound = false;

                            #region NETBIOSDomainNames
                            foreach (string expectedNetBIOSDomainName in expectNetBIOSDomainNamesForTrustedDomain)
                            {
                                if (expectedNetBIOSDomainName.Equals(
                                                                     GetRpcUnicodeString(domain.DomainName),
                                                                     StringComparison.OrdinalIgnoreCase))
                                {
                                    isMatchFound = true;
                                    this.VerifyOneDomainInfo(hresult, domain, expectedNetBIOSDomainName);
                                    break;
                                }
                            }

                            if (!isMatchFound)
                            {
                                isNetBIOSDomainNamesCorrect = false;
                            }

                            #endregion

                            // Reset to false for next use.
                            isMatchFound = false;

                            #region DnsDomainNames

                            foreach (string dnsDomainName in dnsDomainNamesForTrustedDomain)
                            {
                                if (dnsDomainName.Equals(GetRpcUnicodeString(domain.DnsDomainName), StringComparison.OrdinalIgnoreCase))
                                {
                                    isMatchFound = true;
                                    break;
                                }
                            }

                            if (!isMatchFound)
                            {
                                isDnsDomainNamesCorrect = false;
                            }

                            #endregion

                            // Reset to false for next use.
                            isMatchFound = false;

                            #region DomainGuids
                            foreach (string domainGuid in domainGuidsForTrustedDomain)
                            {
                                if (domainGuid.Equals(domain.DomainGuid.ToString(), StringComparison.OrdinalIgnoreCase))
                                {
                                    isMatchFound = true;
                                    break;
                                }
                            }

                            if (!isMatchFound)
                            {
                                isDomainGuidsCorrect = false;
                            }
                            #endregion

                            // Reset to false for next use.
                            isMatchFound = false;

                            #region DomainSids
                            for (int i = 0; i < domainSidsForTrustedDomain.Length; i++)
                            {
                                if (domainSidsForTrustedDomain[i].Equals(
                                        GetStringFromRpcSid(domain.DomainSid[0]),
                                        StringComparison.OrdinalIgnoreCase))
                                {
                                    isMatchFound = true;
                                    break;
                                }
                            }

                            if (!isMatchFound)
                            {
                                isDomainSidsCorrect = false;
                            }
                            #endregion

                            #region DnsForestName

                            if (null != domain.DnsForestName.Buffer)
                            {
                                isDnsForestNameCorrect = false;
                            }
                            #endregion

                            #region TrustExtensionLength
                            // Section 3.5.4.3.9: For Windows 2000, windows xp, Windows Server 2003, Windows Vista,
                            // Windows Server 2008, Windows 7, and Windows Server 2008 R2,
                            // NETLOGON_ONE_DOMAIN_INFO.TrustExtension MaximumLength and Length are set to the size 0x10.
                            if (!(domain.TrustExtension.MaximumLength == 0x10
                                && domain.TrustExtension.Length == 0x10))
                            {
                                isTrustExtensionLengthCorrect = false;
                            }
                            #endregion

                            // Reset to false for next use.
                            isMatchFound = false;

                            #region TrustExtensionBuffer
                            // If workStationFlags is 0, which indicates the client doesn't receive inbound trusts,
                            // the bit F in returned domBuffer.DomainInfo[0].TrustedDomains[i].TrustExtension.Buffer.
                            // Flags field should NOT be set. Because according to the TD, TrustExtension contains the  
                            // fileds in DS_DOMAIN_TRUSTSW structure, in DS_DOMAIN_TRUSTSW, bit F means domain directly 
                            // trusts the current domain. The conclusion is if workStationFlags is 0 the bit F 
                            // in returned domain should not be set. 
                            // In configuration file, the expected Flags value is configured with bit F not set.
                            // So only verify these requirements when workStationFlags is 0.
                            for (int i = 0; i < domBuffer.DomainInfo[0].TrustedDomainCount; i++)
                            {
                                if (IsBufferCorrectForTrustedDomain(
                                    domain.TrustExtension.Buffer,
                                    uint.Parse(flagsForTrustedDomain[i], CultureInfo.InvariantCulture),
                                    uint.Parse(parentIndexForTrustedDomain[i], CultureInfo.InvariantCulture),
                                    uint.Parse(trustTypeForTrustedDomain[i], CultureInfo.InvariantCulture),
                                    uint.Parse(trustAttributesForTrustedDomain[i], CultureInfo.InvariantCulture)))
                                {
                                    isMatchFound = true;
                                    break;
                                }
                            }

                            if (!isMatchFound)
                            {
                                isTrustExtensionBufferCorrect = false;
                            }
                            #endregion
                        }

                        if (PDCIsWindows)
                        {
                            if (currentSutOperatingSystem == PlatformType.Windows2000
                                || currentSutOperatingSystem == PlatformType.WindowsXp
                                || currentSutOperatingSystem == PlatformType.WindowsServer2003
                                || currentSutOperatingSystem == PlatformType.WindowsVista
                                || currentSutOperatingSystem == PlatformType.WindowsServer2008
                                || currentSutOperatingSystem == PlatformType.Windows7
                                || currentSutOperatingSystem == PlatformType.WindowsServer2008R2
                                || currentSutOperatingSystem == PlatformType.Windows8
                                || currentSutOperatingSystem == PlatformType.WindowsServer2012
                                || currentSutOperatingSystem == PlatformType.Windows8_1
                                || currentSutOperatingSystem == PlatformType.WindowsServer2012R2)
                            {
                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R1070,
                                    MaximumLength: {0},
                                    Length: {1}",
                                    domBuffer.DomainInfo[0].TrustedDomains[0].TrustExtension.MaximumLength,
                                    domBuffer.DomainInfo[0].TrustedDomains[0].TrustExtension.Length);

                                // Verify MS-NRPC requirement:  MS-NRPC_R1070.
                                Site.CaptureRequirementIfIsTrue(
                                    isTrustExtensionLengthCorrect,
                                    1070,
                                    @"<257> Section 3.5.4.4.9: For Windows 2000, Windows XP, Windows Server 2003,
                                    Windows Vista, Windows Server 2008, Windows 7, Windows Server 2008 R2, Windows 8,
                                    Windows Server 2012, Windows 8.1, and Windows Server 2012 R2, NETLOGON_ONE_DOMAIN_INFO.TrustExtension
                                    MaximumLength and Length are set to the size 0x10.");

                                // If workStationFlags is 0, which indicates the client doesn't receive inbound trusts,
                                // the bit F in returned domBuffer.DomainInfo[0].TrustedDomains[i].TrustExtension.Buffer.
                                // Flags field should NOT be set. Because according to the TD, TrustExtension contains 
                                // the fields in DS_DOMAIN_TRUSTSW structure, in DS_DOMAIN_TRUSTSW, bit F means 
                                // domain directly trusts the current domain. The conclusion is 
                                // if workStationFlags is 0 the bit F in returned domain should not be set.
                                // In configuration file, the expected Flags value is configured with bit F not set.
                                // So only verify these requirements when workStationFlags is 0.
                                if (workStaBuffer.WorkstationInfo[0].WorkstationFlags == 0)
                                {
                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R1071,
                                        Buffer: {0}",
                                        domBuffer.DomainInfo[0].TrustedDomains[0].TrustExtension.Buffer);

                                    // Verify MS-NRPC requirement:  MS-NRPC_R1071.
                                    Site.CaptureRequirementIfIsTrue(
                                        isTrustExtensionBufferCorrect,
                                        1071,
                                        @"<188> Section 3.5.5.3.9:Buffer points to a buffer containing the following
                                        fields of a DS_DOMAIN_TRUSTSW structure: Flags, ParentIndex, TrustType,
                                        TrustAttributes.");
                                }
                            }
                        }

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R1065,
                            DomainName.Buffer: {0}",
                            domBuffer.DomainInfo[0].TrustedDomains[0].DomainName.Buffer.ToString());

                        // Verify MS-NRPC requirement:  MS-NRPC_R1065.
                        Site.CaptureRequirementIfIsTrue(
                            isNetBIOSDomainNamesCorrect,
                            1065,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1,
                            a TrustedDomainCount-sized array of NETLOGON_ONE_DOMAIN_INFO structures MUST be
                            generated as follows:] NETLOGON_ONE_DOMAIN_INFO.DomainName MUST be set to the
                            NetBIOS domain name of the trusted domain.");

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R1066,
                            DnsDomainName: {0}",
                            GetRpcUnicodeString(domBuffer.DomainInfo[0].TrustedDomains[0].DnsDomainName));

                        // Verify MS-NRPC requirement:  MS-NRPC_R1066.
                        Site.CaptureRequirementIfIsTrue(
                            isDnsDomainNamesCorrect,
                            1066,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1,
                            a TrustedDomainCount-sized array of NETLOGON_ONE_DOMAIN_INFO structures MUST be
                            generated as follows:] NETLOGON_ONE_DOMAIN_INFO.DnsDomainName MUST be set to the
                            DNS domain name of the trusted domain.");

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R1067,
                            DnsForestName: {0}",
                            GetRpcUnicodeString(domBuffer.DomainInfo[0].TrustedDomains[0].DnsForestName));

                        // Verify MS-NRPC requirement:  MS-NRPC_R1067.
                        // All DnsForestName field in domBuffer.DomainInfo[0].TrustedDomains array must be null.
                        Site.CaptureRequirementIfIsTrue(
                            isDnsForestNameCorrect,
                            1067,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1,
                            a TrustedDomainCount-sized array of NETLOGON_ONE_DOMAIN_INFO structures MUST be generated
                            as follows:] NETLOGON_ONE_DOMAIN_INFO.DnsForestName MUST be set to NULL string.");

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R1068,
                            DomainGuid: {0}",
                            domBuffer.DomainInfo[0].TrustedDomains[0].DomainGuid.ToString());

                        // Verify MS-NRPC requirement:  MS-NRPC_R1068.
                        Site.CaptureRequirementIfIsTrue(
                            isDomainGuidsCorrect,
                            1068,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1,
                            a TrustedDomainCount-sized array of NETLOGON_ONE_DOMAIN_INFO structures MUST be generated
                            as follows:] NETLOGON_ONE_DOMAIN_INFO.DomainGuid MUST be set to the domain GUID of the
                            trusted domain.");

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R1069,
                            DomainSid: {0}",
                            domBuffer.DomainInfo[0].TrustedDomains[0].DomainSid.ToString());

                        // Verify MS-NRPC requirement:  MS-NRPC_R1069.
                        Site.CaptureRequirementIfIsTrue(
                            isDomainSidsCorrect,
                            1069,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1,
                            a TrustedDomainCount-sized array of NETLOGON_ONE_DOMAIN_INFO structures MUST be generated
                            as follows:] NETLOGON_ONE_DOMAIN_INFO.DomainSid MUST be set to the domain SID of the
                            trusted domain.<188>");

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R1072");

                        // Verify MS-NRPC requirement:  MS-NRPC_R1072.
                        Site.CaptureRequirementIfAreEqual<uint>(
                            (uint)PdcSupportedEncryptionTypes,
                            domBuffer.DomainInfo[0].SupportedEncTypes,
                            1072,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 1, the return
                            structure MUST be generated as follows:]NETLOGON_DOMAIN_INFO. SupportedEncTypes MUST be
                            set to the supported encryption algorithms.");

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R1074");

                        // Verify MS-NRPC requirement:  MS-NRPC_R1074.
                        Site.CaptureRequirementIfAreEqual<uint>(
                            0,
                            domBuffer.DomainInfo[0].LsaPolicy.LsaPolicySize,
                            1074,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 
                            1]NETLOGON_DOMAIN_INFO.LsaPolicy.LsaPolicySize is set to 0.");

                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R1075");

                        // Verify MS-NRPC requirement:  MS-NRPC_R1075.
                        Site.CaptureRequirementIfIsNull(
                            domBuffer.DomainInfo[0].LsaPolicy.LsaPolicy,
                            1075,
                            @"[In NetrLogonGetDomainInfo (Opnum 29) If the Level parameter is set to 
                            1]NETLOGON_DOMAIN_INFO.LsaPolicy.LsaPolicy is set to NULL.");

                        // If WkstaBuffer.WorkstationInfo.WorkstationFlags has the 0x2 bit set.
                        if ((workStaBuffer.WorkstationInfo[0].WorkstationFlags & 0x2) == 0x2)
                        {
                            // Add the debug information.
                            Site.Log.Add(
                                LogEntryKind.Debug,
                                "Verify MS-NRPC_R1076");

                            // Verify MS-NRPC requirement: MS-NRPC_R1076.
                            Site.CaptureRequirementIfAreEqual<string>(
                                dnsHostNameAttribute,
                                GetRpcUnicodeString(domBuffer.DomainInfo[0].DnsHostNameInDs),
                                1076,
                                @"[In NetrLogonGetDomainInfo (Opnum 29)] If WkstaBuffer.WorkstationInfo.WorkstationFlags
                                has the 0x2 bit set, NETLOGON_DOMAIN_INFO.DnsHostNameInDs is set to the dNSHostName
                                ([MS-ADA1] section 2.185) of the client account.");
                        }

                        // If WkstaBuffer.WorkstationInfo.WorkstationFlags does not have the 0x2 bit set.
                        if ((workStaBuffer.WorkstationInfo[0].WorkstationFlags & 0x2) != 0x2)
                        {
                            string expectedNetBiosName =
                                string.Format(CultureInfo.InvariantCulture, "HOST/{0}", Site.Properties["Common.ENDPOINT.NetbiosName"]);
                            string clientDnsHostName = Site.Properties["Common.ENDPOINT.NetbiosName"] + "." + Site.Properties["Common.PrimaryDomain.DNSName"];
                            string expectedFqdnName =
                                string.Format(CultureInfo.InvariantCulture, "HOST/{0}", clientDnsHostName);

                            // Add the debug information.
                            Site.Log.Add(
                                LogEntryKind.Debug,
                                @"Verify MS-NRPC_R1078,
                                expected NetBIOS SPN name: {0},
                                actual SPN name: {1}",
                                expectedNetBiosName,
                                spnAttribute);

                            // Verify MS-NRPC requirement: MS-NRPC_R1078.
                            Site.CaptureRequirementIfIsTrue(
                                spnAttribute.Contains(expectedNetBiosName),
                                1078,
                                @"[In NetrLogonGetDomainInfo (Opnum 29) If WkstaBuffer.WorkstationInfo.WorkstationFlags
                                does not have the 0x2 bit set, the server adds the SPNs of ]HOST/<Netbios name>[ to the
                                ServicePrincipalName attribute of the clients account].");

                            // Add the debug information.
                            Site.Log.Add(
                                LogEntryKind.Debug,
                                @"Verify MS-NRPC_R1079,
                                expected FQDN SPN name: {0},
                                actual SPN name: {1}",
                                expectedFqdnName,
                                spnAttribute);

                            // Verify MS-NRPC requirement: MS-NRPC_R1079.
                            Site.CaptureRequirementIfIsTrue(
                                spnAttribute.Contains(expectedFqdnName),
                                1079,
                                @"[In NetrLogonGetDomainInfo (Opnum 29) If WkstaBuffer.WorkstationInfo.WorkstationFlags
                                does not have the 0x2 bit set, the server adds the SPNs of ]HOST/<FQDN name>[ to the
                                ServicePrincipalName attribute of the clients account].");
                        }

                        // If the WkstaBuffer.WorkstationInfo.OsName is specified.
                        if (workStaBuffer.WorkstationInfo[0].OsName.Length != 0)
                        {
                            // Add the debug information.
                            Site.Log.Add(
                                LogEntryKind.Debug,
                                "Verify MS-NRPC_R262");

                            // Verify MS-NRPC requirement: MS-NRPC_R262.
                            Site.CaptureRequirementIfAreEqual<string>(
                                ClientOsVersion,
                                operatingSystemAttribute,
                                262,
                                @"[In NETLOGON_WORKSTATION_INFO structure]OsName:The DC that receives this data
                                structure updates the operatingSystem attribute of the client's machine account
                                object in Active Directory, as specified in [MS-ADA3], section 2.52.");
                        }

                        // If WkstaBuffer.WorkstationInfo.OsVersion is specified 
                        // but WkstaBuffer.WorkstationInfo.OsName is not specified.
                        if (workStaBuffer.WorkstationInfo[0].OsName.Length == 0
                          && workStaBuffer.WorkstationInfo[0].OsVersion.Length != 0)
                        {
                            byte[] buffer =
                                MarshalHelper.GetBytes(workStaBuffer.WorkstationInfo[0].OsVersion.Buffer, false);

                            // According to [MS-RPRN] the latest byte is wProductType.
                            OS_TYPE clientOSType = (OS_TYPE)buffer[buffer.Length - 1];

                            if (clientOSType == OS_TYPE.VER_NT_WORKSTATION)
                            {
                                // Verify requirement MS-NRPC_R1084 and MS-NRPC_R1085.
                                string isR1084Implemented = Site.Properties.Get("MS_NRPC.SHOULDMAY.R1084Implementation");
                                bool isR1085Satisfied = operatingSystemAttribute.Equals(
                                                                            "Windows Workstation",
                                                                            StringComparison.OrdinalIgnoreCase);

                                if (PDCIsWindows)
                                {
                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R1085, operatingSystem attribute:{0}",
                                        operatingSystemAttribute);

                                    // Verify MS-NRPC requirement: MS-NRPC_R1085.
                                    Site.CaptureRequirementIfIsTrue(
                                        isR1085Satisfied,
                                        1085,
                                        @"[In NetrLogonGetDomainInfo (Opnum 29)]If WkstaBuffer.WorkstationInfo.OsVersion 
                                        is specified but WkstaBuffer.WorkstationInfo.OsName is not, and if the  
                                        wProductType is VER_NT_WORKSTATION, then the string ""Windows Workstation""  
                                        is used to update the operatingSystem attribute in Windows Vista,  
                                        Windows server 2K8, Windows 7, Windows NT, Windows server 2K8 R2.");

                                    if (null == isR1084Implemented)
                                    {
                                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R1084Implementation", bool.TrueString);
                                        isR1084Implemented = bool.TrueString;
                                    }
                                }

                                if (null != isR1084Implemented)
                                {
                                    bool implement = bool.Parse(isR1084Implemented);
                                    bool isSatisfied = isR1085Satisfied;

                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R1084,
                                    operatingSystem attribute: {0}",
                                        operatingSystemAttribute);

                                    // Verify MS-NRPC requirement: MS-NRPC_R1084.
                                    Site.CaptureRequirementIfAreEqual<bool>(
                                        implement,
                                        isSatisfied,
                                        1084,
                                        string.Format(CultureInfo.InvariantCulture, 
                                        @"[In NetrLogonGetDomainInfo (Opnum 29)]If WkstaBuffer.WorkstationInfo.OsVersion 
                                        is specified but WkstaBuffer.WorkstationInfo.OsName is not, then a different  
                                        generic string SHOULD be used to update the operatingSystem attribute, depending 
                                        on the value of WkstaBuffer.WorkstationInfo.OsVersion.wProductType. If the  
                                        wProductType is VER_NT_WORKSTATION, then the string that SHOULD be used is 
                                        ""Windows Workstation"". 
                                        This requirement is {0} implemented.",
                                        implement ? string.Empty : "not"));
                                }
                            }
                            else
                            {
                                // Verify requirement MS-NRPC_R1088 and MS-NRPC_R101088.
                                string isR1088Implemented = Site.Properties.Get("MS_NRPC.SHOULDMAY.R1088Implementation");
                                bool isR101088Satisfied = operatingSystemAttribute.Equals(
                                                                              "Windows Server",
                                                                              StringComparison.OrdinalIgnoreCase);

                                if (PDCIsWindows)
                                {
                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R101088,
                                    operatingSystem attribute:{0}",
                                        operatingSystemAttribute);

                                    // Verify MS-NRPC requirement: MS-NRPC_R101088.
                                    Site.CaptureRequirementIfIsTrue(
                                        isR101088Satisfied,
                                        101088,
                                        @"[In NetrLogonGetDomainInfo (Opnum 29)]otherwise
                                        [If WkstaBuffer.WorkstationInfo.OsVersion is specified but 
                                        WkstaBuffer.WorkstationInfo.OsName is not, and the wProductType 
                                        isn't VER_NT_WORKSTATION] the string ""Windows Server"" is used to update 
                                        the operatingSystem attribute in Windows Vista, Windows server 2K8, 
                                        Windows 7, Windows NT, Windows server 2K8 R2.");

                                    if (null == isR1088Implemented)
                                    {
                                        Site.Properties.Add("MS_NRPC.SHOULDMAY.R1088Implementation", bool.TrueString);
                                        isR1088Implemented = bool.TrueString;
                                    }
                                }

                                if (null != isR1088Implemented)
                                {
                                    bool implement = bool.Parse(isR1088Implemented);
                                    bool isSatisfied = isR101088Satisfied;

                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R1088,
                                    operatingSystem attribute: {0}",
                                        operatingSystemAttribute);

                                    // Verify MS-NRPC requirement: MS-NRPC_R1088.
                                    Site.CaptureRequirementIfAreEqual<bool>(
                                        implement,
                                        isSatisfied,
                                        1088,
                                        string.Format(CultureInfo.InvariantCulture, 
                                            @"[In NetrLogonGetDomainInfo (Opnum 29)]otherwise[If 
                                            WkstaBuffer.WorkstationInfo.OsVersion is specified but 
                                            WkstaBuffer.WorkstationInfo.OsName is not, and the wProductType isn't 
                                            VER_NT_WORKSTATION] the string SHOULD be ""Windows Server"" 
                                            This requirement is {0} implemented.",
                                            implement ? string.Empty : "not"));
                                }
                            }
                        }

                        // If WkstaBuffer.WorkstationInfo.OsName and 
                        // WkstaBuffer.WorkstationInfo.OsVersion are not specified.
                        if (workStaBuffer.WorkstationInfo[0].OsName.Length == 0
                            && workStaBuffer.WorkstationInfo[0].OsVersion.Length == 0)
                        {
                            // Verify requirement MS-NRPC_R1082 and MS-NRPC_R1083.
                            string isR1082Implemented = Site.Properties.Get("MS_NRPC.SHOULDMAY.R1082Implementation");
                            bool isR1083Satisfied = operatingSystemAttribute.Equals(
                                                                        "Windows unknown version",
                                                                        StringComparison.OrdinalIgnoreCase);

                            if (PDCIsWindows)
                            {
                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R1083,
                                    operatingSystem attribute:{0}",
                                    operatingSystemAttribute);

                                // Verify MS-NRPC requirement: MS-NRPC_R1083.
                                Site.CaptureRequirementIfIsTrue(
                                    isR1083Satisfied,
                                    1083,
                                    @"[In NetrLogonGetDomainInfo (Opnum 29)]If WkstaBuffer.WorkstationInfo.OsName and 
                                    WkstaBuffer.WorkstationInfo.OsVersion are not specified, then a generic string 
                                    ""Windows unknown version"" is used to update the operatingSystem attribute in 
                                    Windows Vista, Windows server 2K8, Windows 7, Windows NT, Windows server 2K8 R2.");

                                if (null == isR1082Implemented)
                                {
                                    Site.Properties.Add("MS_NRPC.SHOULDMAY.R1082Implementation", bool.TrueString);
                                    isR1082Implemented = bool.TrueString;
                                }
                            }

                            if (null != isR1082Implemented)
                            {
                                bool implement = bool.Parse(isR1082Implemented);
                                bool isSatisfied = isR1083Satisfied;

                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R1082,
                                    operatingSystem attribute: {0}",
                                    operatingSystemAttribute);

                                // Verify MS-NRPC requirement: MS-NRPC_R1082.
                                Site.CaptureRequirementIfAreEqual<bool>(
                                    implement,
                                    isSatisfied,
                                    1082,
                                    string.Format(CultureInfo.InvariantCulture, 
                                        @"[In NetrLogonGetDomainInfo (Opnum 29)]If WkstaBuffer.WorkstationInfo. OsName
                                        and WkstaBuffer.WorkstationInfo.OsVersion are not specified, then a generic 
                                        string SHOULD be used to update the operatingSystem attribute 
                                        (""Windows unknown version"").
                                        This requirement is {0} implemented.",
                                        implement ? string.Empty : "not"));
                            }
                        }
                    }
                }
            }
        }

        #endregion

        #region NetrLogonGetCapabilities (Opnum 21) (Section 3.5.4.4.10)

        /// <summary>
        ///  Verify NetrLogonGetCapabilities Response information.
        /// </summary>
        /// <param name="hresult"> Returned value of NetrLogonGetCapabilities method(success or failure).</param>
        /// <param name="returnAuthenticator"> The output parameter ReturnAuthenticator.</param>
        /// <param name="queryLevel"> Input parameter, The information level requested by the client.</param>
        /// <param name="serverCapabilities">
        ///  A _NETLOGON_CAPABILITIES structure, out data returned by NetrLogonGetCapabilities method.
        /// </param>
        /// <param name="negotiateFlag">
        ///  A uint value, negotiated flags for the secure channel of calling the client.
        /// </param>
        private void VerifyNetrLogonGetCapabilitiesResponse(
            HRESULT hresult,
            _NETLOGON_AUTHENTICATOR? returnAuthenticator,
            uint queryLevel,
            _NETLOGON_CAPABILITIES? serverCapabilities,
            uint negotiateFlag)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // <259> Section 3.5.4.4.10: This method [NetrLogonGetCapabilities] is supported by WindowsServer2008R2,
                // WindowsServer2012, WindowsServer2012R2.
                if ((currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports NetrLogonGetCapabilities method, so it can be captured directly.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"<259> Section 3.5.4.4.10: [NetrLogonGetCapabilities method is ] Supported in Windows 7, Windows Server 2008 R2,
                        Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");

                    // Verify MS-NRPC requirement:  MS-NRPC_R1097.
                    // Stack has changed pointer to corresponding structure.
                    // This structure NETLOGON_AUTHENTICATOR is generated based on the IDL from the TD.
                    // If the method using this field as parameter executes successfully, it indicates
                    // that this field is the type defined in the TD.
                    // So when the hresult is success, this requirement is captured.
                    Site.CaptureRequirement(
                        1097,
                        @"[In NetrLogonGetCapabilities (Opnum 21)]ReturnAuthenticator: A pointer to a
                        NETLOGON_AUTHENTICATOR structure that contains the server return authenticator.");

                    // Verify NETLOGON_AUTHENTICATOR structure.
                    this.VerifyNetlogonAuthenticator(hresult, returnAuthenticator);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R1101");

                    // Verify MS-NRPC requirement:  MS-NRPC_R1101.
                    // If the structure is not null, it is a 32 bit value according to defination.
                    // So this requirement is captured by this way.
                    Site.CaptureRequirementIfIsNotNull(
                        serverCapabilities,
                        1101,
                        @"[In NetrLogonGetCapabilities (Opnum 21)]ServerCapabilities: A pointer to a 32-bit set of bit
                        flags that identify the server's capabilities.");

                    if (queryLevel == 1)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R1112");

                        Site.CaptureRequirementIfAreEqual<uint>(
                            negotiateFlag,
                            serverCapabilities.Value.ServerCapabilities,
                            1112,
                            @"[In NetrLogonGetCapabilities (Opnum 21),Upon receiving the call of
                            NetrLogonGetCapabilities method, the server MUST perform the following validation steps:]
                            If the QueryLevel parameter is set to 1, the return structure MUST be generated as follows:
                            NETLOGON_CAPABILITIES.ServerCapabilities MUST be set to the negotiated flags for the
                            secure channel of the calling client.");
                    }
                }
            }
        }

        #endregion

        #endregion

        #region Pass-Through Authentication Methods

        #region NetrLogonSamLogonEx Method (Opnum 39) (Section 3.5.4.5.1)

        /// <summary>
        ///  Verify NetrLogonSamLogonEx Response information.
        /// </summary>
        /// <param name="hresult"> Returned value of NetrLogonSamLogonEx method(success or failure).</param>
        /// <param name="logonLevel">
        /// A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of logon information passed into
        /// the LogonInformation parameter.
        /// </param>
        /// <param name="encryptedLogonInformation"> _NETLOGON_LEVEL structure, the encrypted LogonInformation.</param>
        /// <param name="outputExtraFalgs"> The output ExtraFlags.</param>
        /// <param name="inputExtraFalgs"> The input ExtraFlags.</param>
        /// <param name="sessionkey"> The session key.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Maintainability",
            "CA1502:AvoidExcessiveComplexity")]
        private void VerifyNetrLogonSamLogonExResponse(
             HRESULT hresult,
            _NETLOGON_LOGON_INFO_CLASS logonLevel,
            _NETLOGON_LEVEL encryptedLogonInformation,
            NrpcNetrLogonSamLogonExtraFlags outputExtraFalgs,
            NrpcNetrLogonSamLogonExtraFlags inputExtraFalgs,
            byte[] sessionkey)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug, @"Verify MS-NRPC_R1122");

                // Verify MS-NRPC requirement:  MS-NRPC_R1122.
                // SDK has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD.
                Site.CaptureRequirement(
                    1122,
                    @"[In NetrLogonSamLogonEx (Opnum 39)]ValidationInformation: A pointer 
                    to a NETLOGON_VALIDATION structure, as specified in section 2.2.1.4.14, 
                    that describes the user validation information returned to the client.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug, @"Verify MS-NRPC_R1143");

                // Verify MS-NRPC requirement:  MS-NRPC_R1143.
                Site.CaptureRequirementIfAreEqual<NrpcNetrLogonSamLogonExtraFlags>(
                    inputExtraFalgs,
                    outputExtraFalgs,
                    1143,
                    @"[In NetrLogonSamLogonEx (Opnum 39),ExtraFlags:] Output flags MUST be the same as input.");

                // Check whether the inputExtraFalgs is valid(All other bits except A,B,C and D are set to zero.),
                // if yes, capture R1152.
                // A|B|C|D = 0xf
                if ((((uint)inputExtraFalgs) | 0xf) == 0x0000000f)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug, @"Verify MS-NRPC_R1152");

                    // Add the debug information.
                    // A|B|C|D = 0xf
                    bool isOtherBitASet = (((uint)outputExtraFalgs) | 0xf) == 0x0000000f;
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R1152, actual isOtherBitASet: {0}",
                        isOtherBitASet.ToString());

                    // Verify MS-NRPC requirement:  MS-NRPC_R1152.
                    Site.CaptureRequirementIfIsTrue(
                        isOtherBitASet,
                        1152,
                        @"[In NetrLogonSamLogonEx (Opnum 39)] All other bits[the bits except A,B,C and D] 
                        MUST be set to zero.");
                }

                // Compute RC4NTOWF and RC4LMOWF.
                byte[] responseKeyNt =
                    Microsoft.Protocols.TestTools.StackSdk.Security.Nlmp.NlmpUtility.GetResponseKeyNt(
                    TestTools.StackSdk.Security.Nlmp.NlmpVersion.v1,
                    PrimaryDomainDnsName,
                    DomainAdministratorName,
                    DomainUserPassword);

                byte[] responseKeyLm =
                    Microsoft.Protocols.TestTools.StackSdk.Security.Nlmp.NlmpUtility.GetResponseKeyLm(
                    TestTools.StackSdk.Security.Nlmp.NlmpVersion.v1,
                    PrimaryDomainDnsName,
                    DomainAdministratorName,
                    DomainUserPassword);

                switch (logonLevel)
                {
                    case _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation:
                        {
                            if (encryptedLogonInformation.LogonInteractive != null)
                            {
                                int length =
                                    encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[1].data.Length;
                                byte[] encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[0].data.Length);
                                byte[] actualLmHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionkey,
                                    encryptedOwf);

                                length =
                                    encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[1].data.Length;
                                encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[0].data.Length);
                                byte[] actualNtHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionkey,
                                    encryptedOwf);

                                bool isNtHashEquals =
                                    BitConverter.ToUInt64(responseKeyNt, 0) == BitConverter.ToUInt64(actualNtHash, 0);
                                bool isLmHashEquals =
                                    BitConverter.ToUInt64(responseKeyLm, 0) == BitConverter.ToUInt64(actualLmHash, 0);

                                if ((currentSutOperatingSystem == PlatformType.Windows2000)
                                  || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP2)
                                  || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP4)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2000)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                                  || (currentSutOperatingSystem == PlatformType.WindowsXp)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                                  || (currentSutOperatingSystem == PlatformType.WindowsVista)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                                  || (currentSutOperatingSystem == PlatformType.Windows7)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                                  || (currentSutOperatingSystem == PlatformType.Windows8)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                                  || (currentSutOperatingSystem == PlatformType.Windows8_1)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                                {
                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R101184,
                                        expect responseKeyNT: {0},
                                        actual LMHash: {1};
                                        expect responseKeyNT: {2},
                                        actual LMHash: {3}; ",
                                        responseKeyLm,
                                        actualNtHash,
                                        responseKeyLm,
                                        actualLmHash);

                                    // Verify MS-NRPC requirement: MS-NRPC_R101184.
                                    Site.CaptureRequirementIfIsTrue(
                                        isNtHashEquals && isLmHashEquals,
                                        101184,
                                        @"<270> Section 3.5.4.5.1:[If the LogonLevel is NetlogonInteractiveInformation] 
                                        For all versions of Windows except Windows NT 3.1, decrypt[the LmOwfPassword and NtOwfPassword 
                                        members in the NETLOGON_INTERACTIVE_INFO (section 2.2.1.4.3) structure] 
                                        by using RC4 and the session key.");
                                }
                            }
                        }

                        break;
                    case _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveTransitiveInformation:
                        {
                            if (encryptedLogonInformation.LogonInteractiveTransitive != null)
                            {
                                int length =
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[1].data.Length;
                                byte[] encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[0].data.Length);
                                byte[] actualLmHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionkey,
                                    encryptedOwf);

                                length =
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[1].data.Length;
                                encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[0].data.Length);
                                byte[] actualNtHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionkey,
                                    encryptedOwf);

                                bool isNtHashEquals =
                                    BitConverter.ToUInt64(responseKeyNt, 0) == BitConverter.ToUInt64(actualNtHash, 0);
                                bool isLmHashEquals =
                                    BitConverter.ToUInt64(responseKeyLm, 0) == BitConverter.ToUInt64(actualLmHash, 0);

                                if ((currentSutOperatingSystem == PlatformType.Windows2000)
                                  || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP2)
                                  || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP4)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2000)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                                  || (currentSutOperatingSystem == PlatformType.WindowsXp)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                                  || (currentSutOperatingSystem == PlatformType.WindowsVista)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                                  || (currentSutOperatingSystem == PlatformType.Windows7)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                                  || (currentSutOperatingSystem == PlatformType.Windows8)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                                  || (currentSutOperatingSystem == PlatformType.Windows8_1)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                                {
                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R111184,
                                        expect responseKeyNT: {0},
                                        actual LMHash: {1};
                                        expect responseKeyNT: {2},
                                        actual LMHash: {3};",
                                        responseKeyLm,
                                        actualNtHash,
                                        responseKeyLm,
                                        actualLmHash);

                                    // Verify MS-NRPC requirement: MS-NRPC_R111184.
                                    Site.CaptureRequirementIfIsTrue(
                                        isNtHashEquals && isLmHashEquals,
                                        111184,
                                        @"<270> Section 3.5.4.5.1: 
                                        [If the LogonLevel is NetlogonInteractiveTransitiveInformation]
                                        For all versions of Windows except Windows NT 3.1, decrypt[the LmOwfPassword and NtOwfPassword 
                                        members in the NETLOGON_INTERACTIVE_INFO (section 2.2.1.4.3) structure] 
                                        by using RC4 and the session key.");
                                }
                            }
                        }

                        break;
                    case _NETLOGON_LOGON_INFO_CLASS.NetlogonServiceInformation:
                        {
                            if (encryptedLogonInformation.LogonService != null)
                            {
                                int length =
                                    encryptedLogonInformation.LogonService[0].LmOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonService[0].LmOwfPassword.data[1].data.Length;
                                byte[] encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonService[0].LmOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonService[0].LmOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonService[0].LmOwfPassword.data[0].data.Length);
                                byte[] actualLmHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionkey,
                                    encryptedOwf);

                                length =
                                    encryptedLogonInformation.LogonService[0].NtOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonService[0].NtOwfPassword.data[1].data.Length;
                                encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonService[0].NtOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonService[0].NtOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonService[0].NtOwfPassword.data[0].data.Length);
                                byte[] actualNtHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionkey,
                                    encryptedOwf);

                                bool isNtHashEquals =
                                    BitConverter.ToUInt64(responseKeyNt, 0) == BitConverter.ToUInt64(actualNtHash, 0);
                                bool isLmHashEquals =
                                    BitConverter.ToUInt64(responseKeyLm, 0) == BitConverter.ToUInt64(actualLmHash, 0);

                                if ((currentSutOperatingSystem == PlatformType.Windows2000)
                                  || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP2)
                                  || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP4)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2000)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                                  || (currentSutOperatingSystem == PlatformType.WindowsXp)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                                  || (currentSutOperatingSystem == PlatformType.WindowsVista)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                                  || (currentSutOperatingSystem == PlatformType.Windows7)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                                  || (currentSutOperatingSystem == PlatformType.Windows8)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                                  || (currentSutOperatingSystem == PlatformType.Windows8_1)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                                {
                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R101186,
                                    expect responseKeyNT: {0},
                                    actual LMHash: {1};
                                    expect responseKeyNT: {2},
                                    actual LMHash: {3};",
                                        responseKeyLm,
                                        actualNtHash,
                                        responseKeyLm,
                                        actualLmHash);

                                    // Verify MS-NRPC requirement: MS-NRPC_R101186.
                                    Site.CaptureRequirementIfIsTrue(
                                        isNtHashEquals && isLmHashEquals,
                                        101186,
                                        @"<271> Section 3.5.4.5.1: [If the LogonLevel is NetlogonServiceInformation]
                                        For all versions of Windows except Windows NT 3.1, decrypt[the LmOwfPassword and NtOwfPassword  
                                        members in the NETLOGON_SERVICE_INFO (section 2.2.1.4.4) structure] 
                                        by using RC4 and the session key.");
                                }
                            }
                        }

                        break;
                    case _NETLOGON_LOGON_INFO_CLASS.NetlogonServiceTransitiveInformation:
                        {
                            if (encryptedLogonInformation.LogonServiceTransitive != null)
                            {
                                int length =
                                    encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[1].data.Length;
                                byte[] encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[0].data.Length);
                                byte[] actualLmHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionkey,
                                    encryptedOwf);

                                length =
                                    encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[1].data.Length;
                                encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[0].data.Length);
                                byte[] actualNtHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionkey,
                                    encryptedOwf);

                                bool isNtHashEquals =
                                    BitConverter.ToUInt64(responseKeyNt, 0) == BitConverter.ToUInt64(actualNtHash, 0);
                                bool isLmHashEquals =
                                    BitConverter.ToUInt64(responseKeyLm, 0) == BitConverter.ToUInt64(actualLmHash, 0);

                                if ((currentSutOperatingSystem == PlatformType.Windows2000)
                                  || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP2)
                                  || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP4)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2000)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                                  || (currentSutOperatingSystem == PlatformType.WindowsXp)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                                  || (currentSutOperatingSystem == PlatformType.WindowsVista)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                                  || (currentSutOperatingSystem == PlatformType.Windows7)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                                  || (currentSutOperatingSystem == PlatformType.Windows8)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                                  || (currentSutOperatingSystem == PlatformType.Windows8_1)
                                  || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                                {
                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R111186,
                                    expect responseKeyNT: {0},
                                    actual LMHash: {1};
                                    expect responseKeyNT: {2},
                                    actual LMHash: {3};",
                                        responseKeyLm,
                                        actualNtHash,
                                        responseKeyLm,
                                        actualLmHash);

                                    // Verify MS-NRPC requirement: MS-NRPC_R101186.
                                    Site.CaptureRequirementIfIsTrue(
                                        isNtHashEquals && isLmHashEquals,
                                        111186,
                                        @"<271> Section 3.5.4.5.1:  
                                        [If the LogonLevel is NetlogonServiceTransitiveInformation]For all versions of Windows except Windows NT 3.1,
                                        decrypt[the LmOwfPassword and NtOwfPassword members in the 
                                        NETLOGON_SERVICE_INFO (section 2.2.1.4.4) structure] 
                                        by using RC4 and the session key.");
                                }
                            }
                        }

                        break;
                }
            }
        }

        #endregion

        #region NetrLogonSamLogonWithFlags (Opnum 45) (Section 3.5.4.5.2)

        /// <summary>
        ///  Verify NetrLogonSamLogonWithFlags Response information.
        /// </summary>
        /// <param name="hresult"> Returned value of NetrLogonSamLogonWithFlags method(success or failure).</param>
        /// <param name="returnAuthenticator"> The output parameter ReturnAuthenticator.</param>
        /// <param name="logonLevel">
        ///  A NETLOGON_LOGON_INFO_CLASS structure, which specifies the type of logon information passed into
        ///  the LogonInformation parameter.
        /// </param>
        /// <param name="encryptedLogonInformation"> _NETLOGON_LEVEL structure, the encrypted LogonInformation.</param>
        /// <param name="validationLevel">
        ///  _NETLOGON_VALIDATION_INFO_CLASS enum passed into NetrLogonSamLogonWithFlags.
        /// </param>
        /// <param name="validationInfo"> The _NETLOGON_VALIDATION returned by NetrLogonSamLogonWithFlags.</param>
        /// <param name="expectedPasswordLastSet"> Expected PasswordLastSet string type.</param>
        /// <param name="expectedEffectiveName"> Expected EffectiveName string type.</param>
        /// <param name="expectedLogonScript"> Expected LogonScript string type.</param>
        /// <param name="expectedProfilePath"> Expected ProfilePath string type.</param>
        /// <param name="expectedHomeDirectory"> Expected HomeDirectory string type.</param>
        /// <param name="expectedHomeDirectoryDrive"> Expected HomeDirectoryDrive string type.</param>
        /// <param name="expectedBadPasswordCount">
        ///  Expected BadPasswordCount, A 16-bit unsigned integer that contains the user account's badPwdCount attribute
        ///  ([MS-ADA1] section 2.83) value for interactive logon.
        /// </param>
        /// <param name="expectedLogonCount">
        ///  Expected LogonCount, A 16-bit unsigned integer that contains the user account's LogonCount attribute
        ///  ([MS-ADA1] section 2.375) value.
        /// </param>
        /// <param name="sessionKey"> The session key.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Maintainability",
            "CA1502:AvoidExcessiveComplexity")]
        private void VerifyNetrLogonSamLogonWithFlagsResponse(
            HRESULT hresult,
            _NETLOGON_AUTHENTICATOR? returnAuthenticator,
            _NETLOGON_LOGON_INFO_CLASS logonLevel,
            _NETLOGON_LEVEL encryptedLogonInformation,
            _NETLOGON_VALIDATION_INFO_CLASS validationLevel,
            _NETLOGON_VALIDATION? validationInfo,
            long expectedPasswordLastSet,
            string expectedEffectiveName,
            string expectedLogonScript,
            string expectedProfilePath,
            string expectedHomeDirectory,
            string expectedHomeDirectoryDrive,
            ushort expectedBadPasswordCount,
            ushort expectedLogonCount,
            byte[] sessionKey)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if ((currentSutOperatingSystem == PlatformType.WindowsXp)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                    || (currentSutOperatingSystem == PlatformType.Windows7)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                    || (currentSutOperatingSystem == PlatformType.Windows8)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                {
                    // Verify MS-NRPC requirement:  MS-NRPC_R1206.
                    // When OS is the specified OS, the server returns success, it indicates that the
                    // specified OS supports NetrLogonSamLogonWithFlags method, so it can be captured directly.
                    Site.CaptureRequirement(
                        1206,
                        @"<275> Section 3.5.4.5.2: [NetrLogonSamLogonWithFlags method is]Supported in Windows XP 
                        Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows Server 2008
                        R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
                }

                // Verify MS-NRPC requirement:  MS-NRPC_R1210.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD.
                Site.CaptureRequirement(
                    1210,
                    @"[In NetrLogonSamLogonWithFlags (Opnum 45)]ReturnAuthenticator: A pointer to a
                    NETLOGON_AUTHENTICATOR structure, as specified in section 2.2.1.1.5, that contains
                    the server return authenticator.");

                // Verify NETLOGON_AUTHENTICATOR structure.
                this.VerifyNetlogonAuthenticator(hresult, returnAuthenticator);

                // Verify MS-NRPC requirement:  MS-NRPC_R1215.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD.
                Site.CaptureRequirement(
                    1215,
                    @"[In NetrLogonSamLogonWithFlags (Opnum 45)]ValidationInformation: A pointer to a
                    NETLOGON_VALIDATION structure, as specified in section 2.2.1.4.14, that describes the
                    user validation information returned to the client.");

                // Compute RC4NTOWF and RC4LMOWF.
                byte[] responseKeyNt =
                    Microsoft.Protocols.TestTools.StackSdk.Security.Nlmp.NlmpUtility.GetResponseKeyNt(
                    TestTools.StackSdk.Security.Nlmp.NlmpVersion.v1,
                    PrimaryDomainDnsName,
                    DomainAdministratorName,
                    DomainUserPassword);

                byte[] responseKeyLm =
                    Microsoft.Protocols.TestTools.StackSdk.Security.Nlmp.NlmpUtility.GetResponseKeyLm(
                    TestTools.StackSdk.Security.Nlmp.NlmpVersion.v1,
                    PrimaryDomainDnsName,
                    DomainAdministratorName,
                    DomainUserPassword);

                switch (logonLevel)
                {
                    case _NETLOGON_LOGON_INFO_CLASS.NetlogonServiceInformation:
                        {
                            if (encryptedLogonInformation.LogonService != null)
                            {
                                int length =
                                    encryptedLogonInformation.LogonService[0].LmOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonService[0].LmOwfPassword.data[1].data.Length;
                                byte[] encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonService[0].LmOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonService[0].LmOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonService[0].LmOwfPassword.data[0].data.Length);
                                byte[] actualLmHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionKey,
                                    encryptedOwf);

                                length =
                                    encryptedLogonInformation.LogonService[0].NtOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonService[0].NtOwfPassword.data[1].data.Length;
                                encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonService[0].NtOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonService[0].NtOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonService[0].NtOwfPassword.data[0].data.Length);
                                byte[] actualNtHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionKey,
                                    encryptedOwf);

                                bool isNtHashEquals =
                                    BitConverter.ToUInt64(responseKeyNt, 0) == BitConverter.ToUInt64(actualNtHash, 0);
                                bool isLmHashEquals =
                                    BitConverter.ToUInt64(responseKeyLm, 0) == BitConverter.ToUInt64(actualLmHash, 0);

                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R10195,
                                expect responseKeyNT: {0},
                                actual LMHash: {1};
                                expect responseKeyNT: {2},
                                actualLMHash: {3}; ",
                                    responseKeyLm,
                                    actualNtHash,
                                    responseKeyLm,
                                    actualLmHash);

                                // Verify MS-NRPC requirement: MS-NRPC_R10195.
                                Site.CaptureRequirementIfIsTrue(
                                    isNtHashEquals && isLmHashEquals,
                                    10195,
                                    @"[In NetrLogonSamLogonWithFlags (Opnum 45)]If the LogonLevel is
                                NetlogonServiceInformation, The RC4 and the session key is used to decrypt
                                the LmOwfPassword and NtOwfPassword members in the NETLOGON_SERVICE_INFO
                                (section 2.2.1.4.4) structure, which is encrypted by the RC4 and the session key.");
                            }
                        }

                        break;
                    case _NETLOGON_LOGON_INFO_CLASS.NetlogonServiceTransitiveInformation:
                        {
                            if (encryptedLogonInformation.LogonServiceTransitive != null)
                            {
                                int length =
                                    encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[1].data.Length;
                                byte[] encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonServiceTransitive[0].LmOwfPassword.data[0].data.Length);
                                byte[] actualLmHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionKey,
                                    encryptedOwf);

                                length =
                                    encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[1].data.Length;
                                encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonServiceTransitive[0].NtOwfPassword.data[0].data.Length);
                                byte[] actualNtHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionKey,
                                    encryptedOwf);

                                bool isNtHashEquals =
                                    BitConverter.ToUInt64(responseKeyNt, 0) == BitConverter.ToUInt64(actualNtHash, 0);
                                bool isLmHashEquals =
                                    BitConverter.ToUInt64(responseKeyLm, 0) == BitConverter.ToUInt64(actualLmHash, 0);

                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R10196,
                                expect responseKeyNT: {0},
                                actual LMHash: {1};
                                expect responseKeyNT: {2},
                                actual LMHash: {3}; ",
                                    responseKeyLm,
                                    actualNtHash,
                                    responseKeyLm,
                                    actualLmHash);

                                // Verify MS-NRPC requirement: MS-NRPC_R10196.
                                Site.CaptureRequirementIfIsTrue(
                                    isNtHashEquals && isLmHashEquals,
                                    10196,
                                    @"[In NetrLogonSamLogonWithFlags (Opnum 45)]If the LogonLevel is
                                NetlogonServiceTransitiveInformation, The RC4 and the session key is used to decrypt
                                the LmOwfPassword and NtOwfPassword members in the NETLOGON_SERVICE_INFO
                                (section 2.2.1.4.4) structure, which is encrypted by the RC4 and the session key.");
                            }
                        }

                        break;
                    case _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveInformation:
                        {
                            if (encryptedLogonInformation.LogonInteractive != null)
                            {
                                int length =
                                    encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[1].data.Length;
                                byte[] encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonInteractive[0].LmOwfPassword.data[0].data.Length);
                                byte[] actualLmHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionKey,
                                    encryptedOwf);

                                length =
                                    encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[1].data.Length;
                                encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonInteractive[0].NtOwfPassword.data[0].data.Length);
                                byte[] actualNtHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionKey,
                                    encryptedOwf);

                                bool isNtHashEquals =
                                    BitConverter.ToUInt64(responseKeyNt, 0) == BitConverter.ToUInt64(actualNtHash, 0);
                                bool isLmHashEquals =
                                    BitConverter.ToUInt64(responseKeyLm, 0) == BitConverter.ToUInt64(actualLmHash, 0);

                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R10191,
                                expect responseKeyNT: {0},
                                actual LMHash: {1};
                                expect responseKeyNT: {2},
                                actual LMHash: {3}; ",
                                    responseKeyLm,
                                    actualNtHash,
                                    responseKeyLm,
                                    actualLmHash);

                                // Verify MS-NRPC requirement: MS-NRPC_R10191.
                                Site.CaptureRequirementIfIsTrue(
                                    isNtHashEquals && isLmHashEquals,
                                    10191,
                                    @"[In NetrLogonSamLogonWithFlags (Opnum 45)]If the LogonLevel is
                                NetlogonInteractiveInformation, The RC4 and the session key is used to decrypt the
                                LmOwfPassword and NtOwfPassword members in the NETLOGON_INTERACTIVE_INFO
                                (section 2.2.1.4.3) structure, which is encrypted by The RC4 and the session key.");
                            }
                        }

                        break;
                    case _NETLOGON_LOGON_INFO_CLASS.NetlogonInteractiveTransitiveInformation:
                        {
                            if (encryptedLogonInformation.LogonInteractiveTransitive != null)
                            {
                                int length =
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[1].data.Length;
                                byte[] encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].LmOwfPassword.data[0].data.Length);
                                byte[] actualLmHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionKey,
                                    encryptedOwf);

                                length =
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[0].data.Length +
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[1].data.Length;
                                encryptedOwf = new byte[length];
                                encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[0].data.CopyTo(
                                    encryptedOwf,
                                    0);
                                encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[1].data.CopyTo(
                                    encryptedOwf,
                                    encryptedLogonInformation.LogonInteractiveTransitive[0].NtOwfPassword.data[0].data.Length);
                                byte[] actualNtHash = NrpcUtility.DecryptBuffer(
                                    false,
                                    sessionKey,
                                    encryptedOwf);

                                bool isNtHashEquals =
                                    BitConverter.ToUInt64(responseKeyNt, 0) == BitConverter.ToUInt64(actualNtHash, 0);
                                bool isLmHashEquals =
                                    BitConverter.ToUInt64(responseKeyLm, 0) == BitConverter.ToUInt64(actualLmHash, 0);

                                // Add the debug information.
                                Site.Log.Add(
                                    LogEntryKind.Debug,
                                    @"Verify MS-NRPC_R10192,
                                expect responseKeyNT: {0},
                                actual LMHash: {1};
                                expect responseKeyNT: {2},
                                actual LMHash: {3}; ",
                                    responseKeyLm,
                                    actualNtHash,
                                    responseKeyLm,
                                    actualLmHash);

                                // Verify MS-NRPC requirement: MS-NRPC_R10192.
                                Site.CaptureRequirementIfIsTrue(
                                    isNtHashEquals && isLmHashEquals,
                                    10192,
                                    @"[In NetrLogonSamLogonWithFlags (Opnum 45)][If the LogonLevel is
                                NetlogonInteractiveInformation] For Windows NT 3.5 and later, decrypt
                                [the LmOwfPassword and NtOwfPassword members in the NETLOGON_INTERACTIVE_INFO
                                (section 2.2.1.4.3) structure] by using RC4 and the session key.");

                                if ((currentSutOperatingSystem == PlatformType.Windows2000)
                                    || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP2)
                                    || (currentSutOperatingSystem == PlatformType.WindowsNT4_0SP4)
                                    || (currentSutOperatingSystem == PlatformType.WindowsServer2000)
                                    || (currentSutOperatingSystem == PlatformType.WindowsServer2000_SP4)
                                    || (currentSutOperatingSystem == PlatformType.WindowsXp)
                                    || (currentSutOperatingSystem == PlatformType.WindowsServer2003)
                                    || (currentSutOperatingSystem == PlatformType.WindowsVista)
                                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008)
                                    || (currentSutOperatingSystem == PlatformType.Windows7)
                                    || (currentSutOperatingSystem == PlatformType.WindowsServer2008R2)
                                    || (currentSutOperatingSystem == PlatformType.Windows8)
                                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012)
                                    || (currentSutOperatingSystem == PlatformType.Windows8_1)
                                    || (currentSutOperatingSystem == PlatformType.WindowsServer2012R2))
                                {
                                    // Add the debug information.
                                    Site.Log.Add(
                                        LogEntryKind.Debug,
                                        @"Verify MS-NRPC_R1010192,
                                    expect responseKeyNT: {0},
                                    actual LMHash: {1};
                                    expect responseKeyNT: {2},
                                    actual LMHash: {3};",
                                        responseKeyLm,
                                        actualNtHash,
                                        responseKeyLm,
                                        actualLmHash);

                                    // Verify MS-NRPC requirement: MS-NRPC_R1010192.
                                    Site.CaptureRequirementIfIsTrue(
                                        isNtHashEquals && isLmHashEquals,
                                        1010192,
                                        @"[In NetrLogonSamLogonWithFlags (Opnum 45)][If the LogonLevel is 
                                        NetlogonInteractiveTransitiveInformation] For Windows NT 3.5 and later, decrypt
                                        [the LmOwfPassword and NtOwfPassword members in the NETLOGON_INTERACTIVE_INFO
                                        (section 2.2.1.4.3) structure] by using RC4 and the session key.");
                                }
                            }
                        }

                        break;
                    default:
                        break;
                }

                if (validationLevel == _NETLOGON_VALIDATION_INFO_CLASS.NetlogonValidationSamInfo)
                {
                    // Verify NETLOGON_VALIDATION_SAM_INFO structure.
                    this.VerifyNetlogonValidationSamInfo(
                        hresult,
                        validationInfo.Value.ValidationSam[0],
                        logonLevel,
                        expectedPasswordLastSet,
                        expectedEffectiveName,
                        expectedLogonScript,
                        expectedProfilePath,
                        expectedHomeDirectory,
                        expectedHomeDirectoryDrive,
                        expectedBadPasswordCount,
                        expectedLogonCount);
                }

                if (validationLevel == _NETLOGON_VALIDATION_INFO_CLASS.NetlogonValidationSamInfo2)
                {
                    // Verify NETLOGON_VALIDATION_SAM_INFO2 structure.
                    this.VerifyNetlogonValidationSamInfo2(
                        hresult,
                        validationInfo.Value.ValidationSam2[0],
                        logonLevel,
                        expectedPasswordLastSet,
                        expectedEffectiveName,
                        expectedLogonScript,
                        expectedProfilePath,
                        expectedHomeDirectory,
                        expectedHomeDirectoryDrive,
                        expectedBadPasswordCount,
                        expectedLogonCount);
                }

                if (validationLevel == _NETLOGON_VALIDATION_INFO_CLASS.NetlogonValidationSamInfo4)
                {
                    // Verify NETLOGON_VALIDATION_SAM_INFO4 structure.
                    this.VerifyNetlogonValidationSamInfo4(
                        hresult,
                        validationInfo.Value.ValidationSam4[0],
                        logonLevel,
                        expectedPasswordLastSet,
                        expectedEffectiveName,
                        expectedLogonScript,
                        expectedProfilePath,
                        expectedHomeDirectory,
                        expectedHomeDirectoryDrive,
                        expectedBadPasswordCount,
                        expectedLogonCount);
                }
            }
        }

        #endregion

        #region NetrLogonSamLogoff (Opnum 3) (Section 3.5.4.5.4)

        /// <summary>
        ///  Verify NetrLogonSamLogoff Response information.
        /// </summary>
        /// <param name="hresult"> Returned value of NetrLogonSamLogoff method(success or failure).</param>
        /// <param name="netlogonAuthenticator"> The output parameter _NETLOGON_AUTHENTICATOR.</param>
        private void VerifyNetrLogonSamLogoffResponse(
            HRESULT hresult,
            _NETLOGON_AUTHENTICATOR? netlogonAuthenticator)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement:  MS-NRPC_R1254.
                // Stack has changed pointer to corresponding structure.
                // This structure is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully,
                // it indicates that this field is the type as defined in the TD.
                Site.CaptureRequirement(
                    1254,
                    @"[In NetrLogonSamLogoff (Opnum 3)]ReturnAuthenticator: A pointer to a NETLOGON_AUTHENTICATOR
                    structure, as specified in section 2.2.1.1.5, that contains the server return authenticator");

                // Verify NETLOGON_AUTHENTICATOR structure.
                this.VerifyNetlogonAuthenticator(hresult, netlogonAuthenticator);
            }
        }

        #endregion

        #endregion

        #region Domain Trust Methods

        #region DsrEnumerateDomainTrusts Method (Opnum 40) (Section 3.5.4.7.1)

        /// <summary>
        ///  Verify requirements related to DsrEnumerateDomainTrusts.
        /// </summary>
        /// <param name="sutType"> The sutType parameter passed into DsrEnumerateDomainTrusts.</param>
        /// <param name="domains"> The Domains structure returned by DsrEnumerateDomainTrusts.</param>
        /// <param name="hresult"> The hresult returned by DsrEnumerateDomainTrusts.</param>
        private void VerifyDsrEnumerateDomainTrusts(
            ComputerType sutType,
            _NETLOGON_TRUSTED_DOMAIN_ARRAY? domains,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103573");

                // Verify MS-NRPC requirement: MS-NRPC_R103573.
                // This method is called after DsrEnumerateDomainTrusts returns. The structure 
                // pointed by 'domains' is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                Site.CaptureRequirementIfAreEqual<Type>(
                    typeof(_NETLOGON_TRUSTED_DOMAIN_ARRAY),
                    domains.Value.GetType(),
                    103573,
                    @"[In DsrEnumerateDomainTrusts (Opnum 40)] Domains: A pointer to a NETLOGON_TRUSTED_DOMAIN_ARRAY
                    structure, as specified in section 2.2.1.6.3, that contains a list of trusted domains.");

                // If _NETLOGON_TRUSTED_DOMAIN_ARRAY.DomainCount is 0, the _NETLOGON_TRUSTED_DOMAIN_ARRAY.Domains
                // can be null, which indicates the array doesn't contain any element,
                // else(DomainCount is not 0), the Domains can't be null.
                bool isAnArray = (domains.Value.DomainCount == 0) ?
                    (domains.Value.Domains == null) :
                    (domains.Value.Domains != null);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103582");

                // Verify MS-NRPC requirement: MS-NRPC_R103582.
                Site.CaptureRequirementIfIsTrue(
                    isAnArray,
                    103582,
                    @"[In DsrEnumerateDomainTrusts (Opnum 40)]The server MUST return an array of DS_DOMAIN_TRUSTSW
                    structures (as specified in section 2.2.1.6.2), that represent the domain trusts.");

                // Verify members in NETLOGON_TRUSTED_DOMAIN_ARRAY structure.
                this.VeirfyNetlogonTrustedDomainArray(hresult);
                if (domains.Value.DomainCount > 0)
                    foreach (var domain in domains.Value.Domains)
                    {
                        if (!(string.Equals(domain.DnsDomainName, TrustDomainDnsName, StringComparison.InvariantCultureIgnoreCase)
                        | string.Equals(domain.DnsDomainName, PrimaryDomainDnsName, StringComparison.InvariantCultureIgnoreCase)))
                            continue;
                        // Verify the _DS_DOMAIN_TRUSTSW structure.
                        this.VerifyDsDomainTrustsw(domain);
                    }
            }

            // If the ServerName is a valid domain controller.
            if (sutType == ComputerType.PrimaryDc)
            {
                if (currentSutOperatingSystem == PlatformType.WindowsServer2000
                    || currentSutOperatingSystem == PlatformType.WindowsXp
                    || currentSutOperatingSystem == PlatformType.WindowsServer2003
                    || currentSutOperatingSystem == PlatformType.WindowsVista
                    || currentSutOperatingSystem == PlatformType.WindowsServer2008
                    || currentSutOperatingSystem == PlatformType.Windows7
                    || currentSutOperatingSystem == PlatformType.WindowsServer2008R2
                    || currentSutOperatingSystem == PlatformType.Windows8
                    || currentSutOperatingSystem == PlatformType.WindowsServer2012
                    || currentSutOperatingSystem == PlatformType.Windows8_1
                    || currentSutOperatingSystem == PlatformType.WindowsServer2012R2)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R103582, 
                        HRESULT: {0}",
                        hresult);

                    bool isVerifyR103566 = (hresult != HRESULT.ERROR_NOT_SUPPORTED)
                        && (hresult != HRESULT.STATUS_NOT_SUPPORTED);

                    // Verify MS-NRPC requirement: MS-NRPC_R103566.
                    Site.CaptureRequirementIfIsTrue(
                        isVerifyR103566,
                        103566,
                        @"<287> Section 3.5.4.7.1: [DsrEnumerateDomainTrusts method is]Supported in Windows 2000
                        Server, Windows XP, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7,
                        Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
                }
            }
        }

        #endregion

        #region NetrEnumerateTrustedDomainsEx Method (Opnum 36) (Section 3.5.4.7.2)

        /// <summary>
        ///  Verify requirements related to NetrEnumerateTrustedDomainsEx.
        /// </summary>
        /// <param name="domains"> The Domains structure returned by NetrEnumerateTrustedDomainsEx.</param>
        /// <param name="hresult"> The hresult returned by NetrEnumerateTrustedDomainsEx.</param>
        private void VerifyNetrEnumerateTrustedDomainsEx(
            _NETLOGON_TRUSTED_DOMAIN_ARRAY? domains,
            HRESULT hresult)
        {
            // R103591 can only be verified when the call succeeds, because
            // if NetrEnumerateTrustedDomainsEx fails, nothing is returned.
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103591");

                // Verify MS-NRPC requirement: MS-NRPC_R103591.
                Site.CaptureRequirementIfIsNotNull(
                    domains.Value.Domains,
                    103591,
                    @"[In NetrEnumerateTrustedDomainsEx (Opnum 36)]Domains: A pointer to a
                    NETLOGON_TRUSTED_DOMAIN_ARRAY structure, as specified in section 2.2.1.6.3, that contains
                    an array of DS_DOMAIN_TRUSTSW structures, as specified in section 2.2.1.6.2, one for each
                    trusted domain.");

                // Verify members in NETLOGON_TRUSTED_DOMAIN_ARRAY structure.
                this.VeirfyNetlogonTrustedDomainArray(hresult);
            }

            if (currentSutOperatingSystem == PlatformType.WindowsServer2000
                || currentSutOperatingSystem == PlatformType.WindowsXp
                || currentSutOperatingSystem == PlatformType.WindowsServer2003
                || currentSutOperatingSystem == PlatformType.WindowsVista
                || currentSutOperatingSystem == PlatformType.WindowsServer2008
                || currentSutOperatingSystem == PlatformType.Windows7
                || currentSutOperatingSystem == PlatformType.WindowsServer2008R2
                || currentSutOperatingSystem == PlatformType.Windows8
                || currentSutOperatingSystem == PlatformType.WindowsServer2012
                || currentSutOperatingSystem == PlatformType.Windows8_1
                || currentSutOperatingSystem == PlatformType.WindowsServer2012R2)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103586,
                    HRESULT: {0}",
                    hresult);

                bool isVerifyR103586 = (hresult != HRESULT.ERROR_NOT_SUPPORTED)
                    && (hresult != HRESULT.STATUS_NOT_SUPPORTED);

                // Verify MS-NRPC requirement: MS-NRPC_R103586.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103586,
                    103586,
                    @"<289> Section 3.5.4.7.2:[NetrEnumerateTrustedDomainsEx method is] Supported in Windows 2000
                    Server, windows xp, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7,
                    Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
            }
        }

        #endregion

        #region NetrEnumerateTrustedDomains Method (Opnum 19) (Section 3.5.4.7.3)

        /// <summary>
        ///  Verify requirements related to NetrEnumerateTrustedDomains.
        /// </summary>
        /// <param name="domainNameBuffer">
        ///  The DomainNameBuffer structure returned by NetrEnumerateTrustedDomains. 
        /// </param>
        /// <param name="hresult"> The hresult returned by NetrEnumerateTrustedDomains.</param>
        private void VerifyNetrEnumerateTrustedDomains(
            _DOMAIN_NAME_BUFFER? domainNameBuffer,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R103597.
                // This method is called after NetrEnumerateTrustedDomains returns. The structure 
                // pointed by 'domainNameBuffer' is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    103597,
                    @"[In NetrEnumerateTrustedDomains (Opnum 19)]DomainNameBuffer: A pointer to a DOMAIN_NAME_BUFFER
                    structure, as specified in section 2.2.1.6.1, that contains a list of trusted domain names.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103609");

                // Verify MS-NRPC requirement: MS-NRPC_R103609.
                Site.CaptureRequirementIfAreEqual<uint>(
                    (uint)domainNameBuffer.Value.DomainNames.Length,
                    domainNameBuffer.Value.DomainNameByteCount,
                    103609,
                    @"[In NetrEnumerateTrustedDomains (Opnum 19), The fields of the DomainNameBuffer structure are
                    populated as follows]DomainNameBuffer.DomainNameByteCount contains the number of bytes returned
                    in DomainNameBuffer.DomainNames.");

                bool isFormatValid = IsMultiSzFormat(domainNameBuffer.Value.DomainNames);

                if (!isFormatValid)
                {
                    // Add the debug information
                    // When the format is invalid, to avoid
                    // long log file. The log information is useless when the 
                    // format is valid.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104857,
                        DomainNames: {0}",
                        ArrayToString(domainNameBuffer.Value.DomainNames));
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R104857");

                // Verify MS-NRPC requirement: MS-NRPC_R104857.
                Site.CaptureRequirementIfIsTrue(
                    isFormatValid,
                    104857,
                    @"[In NetrEnumerateTrustedDomains (Opnum 19)]DomainNameBuffer.DomainNames contains an allocated
                    buffer, which in turn contains the list of trusted domains in MULTI-SZ format. MULTI-SZ format 
                    is a Unicode, UTF-16 string composed of one or more substrings. Each substring is separated from 
                    adjacent substrings by the UTF-16 null character, 0x0000.After the final substring, the MULTI-SZ
                    format string is terminated by two UTF-16 null characters.");

                // Verify members in DOMAIN_NAME_BUFFER structure.
                this.VerifyDomainNameBuffer(domainNameBuffer.Value);
            }
        }

        #endregion

        #region DsrGetForestTrustInformation Method (Opnum 43) (Section 3.5.4.7.5)

        /// <summary>
        ///  Verify requirements related to DsrGetForestTrustInformation.
        /// </summary>
        /// <param name="sutType"> The sutType parameter passed into DsrGetForestTrustInformation.</param>
        /// <param name="trustedDomainName">
        ///  The TrustedDomainName parameter passed into DsrGetForestTrustInformation.
        /// </param>
        /// <param name="hresult"> HRESULT returned by DsrGetForestTrustInformation.</param>
        private void VerifyDsrGetForestTrustInformation(
            ComputerType sutType,
            string trustedDomainName,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                // Verify MS-NRPC requirement: MS-NRPC_R103644.
                // This method is called after DsrGetForestTrustInformation returns. The structure 
                // pointed by 'forestTrustInfo' is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates
                // that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    103644,
                    @"[in DsrGetForestTrustInformation (Opnum 43), Flags:]ForestTrustInfo: A pointer to an 
                    LSA_FOREST_TRUST_INFORMATION structure, as specified in [MS-LSAD] section 2.2.7.25, that contains 
                    data for each forest trust.");

                if (trustedDomainName == null)
                {
                    // Verify MS-NRPC requirement: MS-NRPC_R103766.
                    // If the method with the PLSA_FOREST_TRUST_INFORMATION field as its 
                    // parameter execute successfully, with the TrustedDomainName set to NULL,
                    // it indicates that the forest trust information is returned.
                    Site.CaptureRequirement(
                        103766,
                        @"[in DsrGetForestTrustInformation (Opnum 43)]If the TrustedDomainName parameter is NULL, 
                        the forest trust information for the domain hosted by ServerName MUST be returned.");
                }
            }

            // If the ServerName is a valid domain controller
            if (sutType == ComputerType.PrimaryDc)
            {
                if (currentSutOperatingSystem == PlatformType.WindowsXp
                    || currentSutOperatingSystem == PlatformType.WindowsServer2003
                    || currentSutOperatingSystem == PlatformType.WindowsVista
                    || currentSutOperatingSystem == PlatformType.WindowsServer2008
                    || currentSutOperatingSystem == PlatformType.Windows7
                    || currentSutOperatingSystem == PlatformType.WindowsServer2008R2
                    || currentSutOperatingSystem == PlatformType.Windows8
                    || currentSutOperatingSystem == PlatformType.WindowsServer2012
                    || currentSutOperatingSystem == PlatformType.Windows8_1
                    || currentSutOperatingSystem == PlatformType.WindowsServer2012R2)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R103635,
                        HRESULT: {0}",
                        hresult);

                    bool isVerifyR103635 = (hresult != HRESULT.STATUS_NOT_SUPPORTED)
                        && (hresult != HRESULT.ERROR_NOT_SUPPORTED);

                    // Verify MS-NRPC requirement: MS-NRPC_R103635.
                    Site.CaptureRequirementIfIsTrue(
                        isVerifyR103635,
                        103635,
                        @"<215> Section 3.5.5.6.5: [DsrGetForestTrustInformation method is]Supported in
                        windows xp Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, 
                        Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
                }
            }
        }

        #endregion

        #region NetrServerGetTrustInfo Method (Opnum 46) (Section 3.5.4.7.6)

        /// <summary>
        ///  Verify requirements related to NetrServerGetTrustInfo.
        /// </summary>
        /// <param name="trustedDcName"> The TrustedDcName parameter passed into NetrServerGetTrustInfo.</param>
        /// <param name="secureChannelType">
        ///  The SecureChannelType parameter passed into NetrServerGetTrustInfo.
        /// </param>
        /// <param name="encryptedNewOwfPassword">
        ///  The EncryptedNewOwfPassword returned by NetrServerGetTrustInfo.
        /// </param>
        /// <param name="encryptedOldOwfPassword">
        ///  The EncryptedOldOwfPassword returned by NetrServerGetTrustInfo.
        /// </param>
        /// <param name="trustInfo"> The TrustInfo returned by NetrServerGetTrustInfo.</param>
        /// <param name="hresult"> The hresult returned by NetrServerGetTrustInfo.</param>
        /// <param name="sessionKey"> The session key.</param>
        private void VerifyNetrServerGetTrustInfo(
            ComputerType trustedDcName,
            _NETLOGON_SECURE_CHANNEL_TYPE secureChannelType,
            _NT_OWF_PASSWORD? encryptedNewOwfPassword,
            _NT_OWF_PASSWORD? encryptedOldOwfPassword,
            _NL_GENERIC_RPC_DATA[] trustInfo,
            HRESULT hresult,
            byte[] sessionKey)
        {
            // Requirements related to secure channel types other than 
            // WorkstationSecureChannel are not verified.
            if ((hresult == HRESULT.ERROR_SUCCESS)
                && (secureChannelType == _NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel))
            {
                // Verify MS-NRPC requirement: MS-NRPC_R103670.
                // This method is called after NetrServerGetTrustInfo returns. The structure 
                // pointed by 'returnAuthenticator' is generated based on the IDL from the TD.
                // If the method having this field as parameter returns success, it indicates
                // that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    103670,
                    @"[In NetrServerGetTrustInfo (Opnum 46)]ReturnAuthenticator: A pointer to a 
                    NETLOGON_AUTHENTICATOR structure, as specified in section 2.2.1.1.5, that contains the server
                    return authenticator.");

                // Verify MS-NRPC requirement: MS-NRPC_R103675.
                // This method is called after NetrServerGetTrustInfo returns. The structure 
                // pointed by 'trustInfo' is generated based on the IDL from the TD.
                // If the method having this field as parameter returns success, it indicates
                // that this field is the type defined in the TD.
                Site.CaptureRequirement(
                    103675,
                    @"[In NetrServerGetTrustInfo (Opnum 46)]TrustInfo: A pointer to an NL_GENERIC_RPC_DATA structure,
                    as specified in section 2.2.1.6.4, that contains a block of generic RPC data with trust 
                    information for the specified server.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103693,
                    encrypted NewOwfPassword.HasValue: {0},
                    encrypted OldOwfPassword.HasValue: {1}",
                    encryptedNewOwfPassword.HasValue,
                    encryptedOldOwfPassword.HasValue);

                // Verify MS-NRPC requirement: MS-NRPC_R103693.
                Site.CaptureRequirementIfIsTrue(
                    encryptedNewOwfPassword.HasValue && encryptedOldOwfPassword.HasValue,
                    103693,
                    @"[In NetrServerGetTrustInfo (Opnum 46)]The encrypted versions MUST be returned in the 
                    parameters EncryptedNewOwfPassword and EncryptedOldOwfPassword.");

                if (trustInfo != null)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103695");

                    // Verify MS-NRPC requirement: MS-NRPC_R103695.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        0x1,
                        trustInfo[0].UlongEntryCount,
                        103695,
                        @"[In NetrServerGetTrustInfo (Opnum 46)]If the TrustInfo parameter is not NULL, the structure
                        is generated by setting NL_GENERIC_RPC_DATA.UlongEntryCount to 1.");

                    // In [MS-LSAD] section 2.2.7.9, the TrustAttributes is an unsigned 32-bit
                    // integer and the high 24 bits are reserved and must be set to 0. So if
                    // the high 24 bits of trustInfo[0].UlongData[0] is 0, it's a valid TrustAttributes.
                    uint bitGroups = 0xFFFFFF00;

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R103696,
                        UlongData: {0}",
                        trustInfo[0].UlongData[0]);

                    // Verify MS-NRPC requirement: MS-NRPC_R103696.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        0x0,
                        (bitGroups & trustInfo[0].UlongData[0]),
                        103696,
                        @"[In NetrServerGetTrustInfo (Opnum 46)]If the TrustInfo parameter is not NULL, setting
                        NL_GENERIC_RPC_DATA.UlongData to a 32-bit value that contains the trust attributes.");
                }

                bool isNewOwfValid = false;
                bool isOldOwfValid = false;
                string password = Site.Properties["ENDPOINT.Password"];

                // According to the TD section 3.5.5.6.6 NetrServerGetTrustInfo, the shared secret
                // of computer account is used to compute the EncryptedNewOwfPassword when the
                // SecureChannelType is WorkstationSecureChannel.
                _NT_OWF_PASSWORD expectedEncryptedNewOwfPassword =
                    GetEncryptedNtOwfPasswordStructure(password, sessionKey);

                isNewOwfValid = VerifyOwfStructureEqual(
                    new _NT_OWF_PASSWORD?(expectedEncryptedNewOwfPassword),
                    encryptedNewOwfPassword);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104859,
                    EncryptedNewOwfPassword: {0} {1}",
                    ArrayToString(encryptedNewOwfPassword.Value.data[0].data),
                    ArrayToString(encryptedNewOwfPassword.Value.data[1].data));

                // Verify MS-NRPC requirement: MS-NRPC_R104859.
                // The _NT_OWF_PASSWORD structure contains 16 bytes data,
                // so both first 8 bytes and last 8 bytes should be compared.
                Site.CaptureRequirementIfIsTrue(
                    isNewOwfValid,
                    104859,
                    @"[In NetrServerGetTrustInfo (Opnum 46)]EncryptedNewOwfPassword: A pointer to an 
                    ENCRYPTED_NT_OWF_PASSWORD structure, as specified in section 2.2.1.1.4, that contains the NTOWFv1
                    (as specified in NTLM v1 Authentication in [MS-NLMP] section 3.3.1) of the current password, 
                    encrypted as specified in [MS-SAMR] section 2.2.11.1.1, Encrypting an NT Hash or LM Hash Value
                    with a Specified Key. The session key is the specified 16-byte key that is used to derive its 
                    keys via the 16-byte value process, as specified in [MS-SAMR] section 2.2.11.1.4.");

                // Verify NT_OWF_PASSWORD Encryption method.
                this.VerifyNtOwfPasswordEncryption(encryptedNewOwfPassword.Value, password, sessionKey);

                // Verify NT_OWF_PASSWORD structure member.
                this.VerifyNtOwfPassword(encryptedNewOwfPassword.Value, sessionKey);

                // Verify members in NL_GENERIC_RPC_DATA structure.
                this.VeirfyNlGenericRpcData(trustInfo[0], hresult);
                
                // According to the TD section 3.5.5.6.6 NetrServerGetTrustInfo, if the OWF of the previous password is
                // not required, an empty password must be used to calculate the EncryptedOldOwfPassword.
                string sharedSecret = PreviousEndpointPasswordExists ? ENDPOINTOldPassword : string.Empty;
                _NT_OWF_PASSWORD expectedEncryptedOldOwfPassword =
                    GetEncryptedNtOwfPasswordStructure(sharedSecret, sessionKey);

                isOldOwfValid = VerifyOwfStructureEqual(
                    new _NT_OWF_PASSWORD?(expectedEncryptedOldOwfPassword),
                    encryptedOldOwfPassword);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104860,
                    EncryptedOldOwfPassword: {0} {1}",
                    ArrayToString(encryptedOldOwfPassword.Value.data[0].data),
                    ArrayToString(encryptedOldOwfPassword.Value.data[1].data));

                // Verify MS-NRPC requirement: MS-NRPC_R104860.
                Site.CaptureRequirementIfIsTrue(
                    isOldOwfValid,
                    104860,
                    @"[In NetrServerGetTrustInfo (Opnum 46)]EncryptedOldOwfPassword: A pointer to an 
                    ENCRYPTED_NT_OWF_PASSWORD structure, as specified in section 2.2.1.1.4, that contains the 
                    NTOWFv1 (as specified in NTLM v1 Authentication in [MS-NLMP] section 3.3.1) of the old password,
                    encrypted as specified in [MS-SAMR] section 2.2.11.1.1, Encrypting an NT Hash or LM Hash Value 
                    with a Specified Key. The session key is the specified 16-byte key that is used to derive its 
                    keys via the 16-byte value process, as specified in [MS-SAMR] section 2.2.11.1.4.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104864,
                    isNewOwfValid: {0},
                    isOldOwfValid: {1}",
                    isNewOwfValid,
                    isOldOwfValid);

                // Verify MS-NRPC requirement: MS-NRPC_R104864.
                Site.CaptureRequirementIfIsTrue(
                    isNewOwfValid && isOldOwfValid,
                    104864,
                    @"[In NetrServerGetTrustInfo (Opnum 46)]The NTOWFv1 of the current and previous passwords MUST
                    be encrypted as specified in [MS-SAMR] section 2.2.11.1.1, Encrypting an NT Hash or LM Hash 
                    Value with a Specified Key. The session key is the specified 16-byte key used to derive its keys
                    via the 16-byte value process, as specified in [MS-SAMR] section 2.2.11.1.4.");

                // If the OWF of the previous password is not required.
                if (!PreviousEndpointPasswordExists)
                {
                    expectedEncryptedOldOwfPassword =
                        GetEncryptedNtOwfPasswordStructure(string.Empty, sessionKey);

                    isOldOwfValid = VerifyOwfStructureEqual(
                        new _NT_OWF_PASSWORD?(expectedEncryptedOldOwfPassword),
                        encryptedOldOwfPassword);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R103690,
                        EncryptedOldOwfPassword: {0} {1}",
                        ArrayToString(encryptedOldOwfPassword.Value.data[0].data),
                        ArrayToString(encryptedOldOwfPassword.Value.data[1].data));

                    // Verify MS-NRPC requirement: MS-NRPC_R103690.
                    Site.CaptureRequirementIfIsTrue(
                        isOldOwfValid,
                        103690,
                        @"[In NetrServerGetTrustInfo (Opnum 46)]If the OWF of the previous password is not required,
                        an empty password MUST be used to calculate the OWF.");
                }
                expectedEncryptedNewOwfPassword = GetEncryptedNtOwfPasswordStructure(ENDPOINTPassword, sessionKey);

                isNewOwfValid = VerifyOwfStructureEqual(
                    new _NT_OWF_PASSWORD?(expectedEncryptedNewOwfPassword),
                    encryptedNewOwfPassword);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103688,
                    EncryptedNewOwfPassword: {0} {1}",
                    ArrayToString(encryptedNewOwfPassword.Value.data[0].data),
                    ArrayToString(encryptedNewOwfPassword.Value.data[1].data));

                // Verify MS-NRPC requirement: MS-NRPC_R103688.
                // The condition of this requirement is SecureChannelType equals WorkstationSecureChannel,
                // this condition has been added at the beginning of this method.
                Site.CaptureRequirementIfIsTrue(
                    isNewOwfValid,
                    103688,
                    @"[In NetrServerGetTrustInfo (Opnum 46),The server MUST retrieve the current OWF of the password 
                    for the account identified by the AccountName and SecureChannelType parameters] 
                    WorkstationSecureChannel that may be used require that the SharedSecret 
                    of the computer account is used.");
            }

            if (currentSutOperatingSystem == PlatformType.WindowsXp
                || currentSutOperatingSystem == PlatformType.WindowsServer2003
                || currentSutOperatingSystem == PlatformType.WindowsVista
                || currentSutOperatingSystem == PlatformType.WindowsServer2008
                || currentSutOperatingSystem == PlatformType.Windows7
                || currentSutOperatingSystem == PlatformType.WindowsServer2008R2
                || currentSutOperatingSystem == PlatformType.Windows8
                || currentSutOperatingSystem == PlatformType.WindowsServer2012
                || currentSutOperatingSystem == PlatformType.Windows8_1
                || currentSutOperatingSystem == PlatformType.WindowsServer2012R2)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103688,
                    HRESULT: {0}",
                    hresult);

                bool isVerifyR103662 = (trustedDcName == ComputerType.NonDcServer
                    && (hresult == HRESULT.STATUS_NOT_SUPPORTED))
                    || ((hresult != HRESULT.STATUS_NOT_SUPPORTED)
                    && (hresult != HRESULT.ERROR_NOT_SUPPORTED));

                // Verify MS-NRPC requirement: MS-NRPC_R103662.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103662,
                    103662,
                    @"<217> Section 3.5.5.6.6: [NetrServerGetTrustInfo method is]Supported in windows xp and
                    Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, Windows Server 2008 R2,
                    Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
            }
        }

        #endregion

        #endregion

        #region Message Protection Methods

        #region NetrLogonComputeServerDigest Method (Opnum 24) (Section 3.5.4.8.2)

        /// <summary>
        ///  Verify requirements related to NetrLogonComputeServerDigest method.
        /// </summary>
        /// <param name="rid"> The Rid parameter passed into NetrLogonComputeServerDigest.</param>
        /// <param name="message"> The Message parameter passed into NetrLogonComputeServerDigest.</param>
        /// <param name="newMessageDigest"> The NewMessageDigest returned by NetrLogonComputeServerDigest.</param>
        /// <param name="oldMessageDigest"> The OldMessageDigest returned by NetrLogonComputeServerDigest.</param>
        /// <param name="hresult"> The hresult returned by NetrLogonComputeServerDigest.</param>
        private void VerifyNetrLogonComputeServerDigest(
            RidType rid,
            byte[] message,
            byte[] newMessageDigest,
            byte[] oldMessageDigest,
            HRESULT hresult)
        {
            // Only need to verify these requirements when the rid is RidOfNonDcMachineAccount,
            // which indicates this is the rid of the client machine. All other types of rid are out of scope.
            if ((hresult == HRESULT.ERROR_SUCCESS)
                && (rid == RidType.RidOfNonDcMachineAccount))
            {
                byte[] expectedNewDigest = GetMessageDigest(ENDPOINTPassword, message);

                // According to the TD section 3.5.5.7.2 NetrLogonComputeServerDigest, if no previous 
                // machine account password exists, then the current password is used.
                string previousPassword = PreviousEndpointPasswordExists ? ENDPOINTOldPassword : ENDPOINTPassword;
                byte[] expectedOldDigest = GetMessageDigest(previousPassword, message);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103738,
                    expected NewMessageDigest: {0},
                    actual NewMessageDigest: {1}",
                    ArrayToString(expectedNewDigest),
                    ArrayToString(newMessageDigest));

                // Verify MS-NRPC requirement: MS-NRPC_R103738.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedNewDigest, newMessageDigest),
                    103738,
                    @"[In NetrLogonComputeServerDigest (Opnum 24)]NewMessageDigest: A 128-bit MD5 digest of the current
                    machine account password and the message in the Message buffer.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103740,
                    expected OldMessageDigest: {0},
                    actual OldMessageDigest: {1}",
                    ArrayToString(expectedOldDigest),
                    ArrayToString(oldMessageDigest));

                // Verify MS-NRPC requirement: MS-NRPC_R103740.
                // Before computing the expected old message digest, if the previous machine account password
                // exists, the previous password is used to compute the digest.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedOldDigest, oldMessageDigest),
                    103740,
                    @"[In NetrLogonComputeServerDigest (Opnum 24)] OldMessageDigest: A 128-bit MD5 digest of the
                    previous machine account password, if [OldMessageDigest] present, and the message in the Message
                    buffer.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103751");

                // Verify MS-NRPC requirement: MS-NRPC_R103751.
                // The current password is not sent to the client, but if the returned
                // NewMessageDigest equals the expectedNewDigest, the server has
                // computed the NTOWFv1 of the current password. Because the expectedNewDigest
                // is computed according to the NTOWFv1 of the current password.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedNewDigest, newMessageDigest),
                    103751,
                    @"[In NetrLogonComputeServerDigest (Opnum 24)]The server MUST compute or retrieve the NTOWFv1
                    of the current password.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103752");

                // Verify MS-NRPC requirement: MS-NRPC_R103752.
                // The lmPwdHistory attribute is not sent to the client, but if the returned
                // NewMessageDigest equals to the expectedNewDigest, the server has retrieved
                // the lmPwdHistory attribute. Because the expectedNewDigest is computed according
                // to the lmPwdHistory attribute.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedNewDigest, newMessageDigest),
                    103752,
                    @"[In NetrLogonComputeServerDigest (Opnum 24),The server] retrieve lmPwdHistory ([MS-ADA1]
                    section 2.363).");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103753");

                // Verify MS-NRPC requirement: MS-NRPC_R103753.
                // The NTOWFv1 of the previous password is not sent to the client.
                // But if OldMessageDigest equals the expectedOldDigest, the server
                // has retrieved the NTOWFv1 of the previous password. Because the 
                // expectedOldDigest is computed according to the NTOWFv1 of the previous password.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedOldDigest, oldMessageDigest),
                    103753,
                    @"[In NetrLogonComputeServerDigest (Opnum 24), The server retrieve] the NTOWFv1 of the previous
                    password (if it exists) for the machine account whose security identifier ( [MS-ADA3] section
                    2.236) corresponds to the generated SID.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103758");

                // Verify MS-NRPC requirement: MS-NRPC_R103758.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedNewDigest, newMessageDigest),
                    103758,
                    @"[In NetrLogonComputeServerDigest (Opnum 24)]The digest of the Message parameter MUST be
                    calculated with the following algorithm[CALL MD5Init(md5context) IF OWF of password is present 
                    CALL MD5Update(md5context, OWF of password, length of OWF of password) CALL MD5Update(md5context,
                    Message, MessageSize) CALL MD5Final(md5context) SET digest to md5context.digest], using this
                    one-way function (OWF) of the password.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103759");

                // Verify MS-NRPC requirement: MS-NRPC_R103759.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedNewDigest, newMessageDigest),
                    103759,
                    @"[In NetrLogonComputeServerDigest (Opnum 24)]The NewMessageDigest parameter MUST be computed by
                    using the current password.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103761");

                // Verify MS-NRPC requirement: MS-NRPC_R103761.
                // If previous password doesn't exist, the expectedOldDigest
                // is computed according to the new password.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedOldDigest, oldMessageDigest),
                    103761,
                    @"[In NetrLogonComputeServerDigest (Opnum 24)]If the previous password is not present, the 
                    new password MUST be used to compute the OldMessageDigest.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103760");

                // Verify MS-NRPC requirement: MS-NRPC_R103760.
                // If previous password exists, the expectedOldDigest
                // is computed according to the previous password.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedOldDigest, oldMessageDigest),
                    103760,
                    @"[In NetrLogonComputeServerDigest (Opnum 24)]The OldMessageDigest parameter MUST be computed
                    by using the previous password, if it exists.");
            }

            if (currentSutOperatingSystem == PlatformType.WindowsServer2000
                || currentSutOperatingSystem == PlatformType.WindowsXp
                || currentSutOperatingSystem == PlatformType.WindowsServer2003
                || currentSutOperatingSystem == PlatformType.WindowsVista
                || currentSutOperatingSystem == PlatformType.WindowsServer2008
                || currentSutOperatingSystem == PlatformType.Windows7
                || currentSutOperatingSystem == PlatformType.WindowsServer2008R2
                || currentSutOperatingSystem == PlatformType.Windows8
                || currentSutOperatingSystem == PlatformType.WindowsServer2012
                || currentSutOperatingSystem == PlatformType.Windows8_1
                || currentSutOperatingSystem == PlatformType.WindowsServer2012R2)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103727,
                    HRESULT: {0}",
                    hresult);

                bool isVerifyR103727 = (hresult != HRESULT.ERROR_NOT_SUPPORTED)
                    && (hresult != HRESULT.STATUS_NOT_SUPPORTED);

                // Verify MS-NRPC requirement: MS-NRPC_R103727.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103727,
                    103727,
                    @"<299> Section 3.5.4.8.2: [NetrLogonComputeServerDigest method is]Supported in Windows 2000
                    Server, windows xp, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, and
                    Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
            }
        }

        #endregion

        #region NetrLogonComputeClientDigest Method (Opnum 25) (Section 3.5.4.8.3)

        /// <summary>
        ///  Verify requirements related to NetrLogonComputeClientDigest.
        /// </summary>
        /// <param name="sutType"> The sutType parameter passed into NetrLogonComputeClientDigest.</param>
        /// <param name="message"> The Message parameter passed into NetrLogonComputeClientDigest.</param>
        /// <param name="newMessageDigest"> The NewMessageDigest returned by NetrLogonComputeClientDigest.</param>
        /// <param name="oldMessageDigest"> The OldMessageDigest returned by NetrLogonComputeClientDigest.</param>
        /// <param name="hresult"> The HRESULT returned by NetrLogonComputeClientDigest.</param>
        private void VerifyNetrLogonComputeClientDigest(
            ComputerType sutType,
            byte[] message,
            byte[] newMessageDigest,
            byte[] oldMessageDigest,
            HRESULT hresult)
        {
            // These requirements can only be verified when ServerName is the name of
            // non-DC server. Because this method computes message digest by using the
            // computer account password, the PDC doesn't have a computer account, other
            // types of ServerName(e.g. Null) indicates a local call, which is out of scope.
            if ((hresult == HRESULT.ERROR_SUCCESS)
                && (sutType == ComputerType.NonDcServer))
            {
                byte[] expectedNewDigest = GetMessageDigest(DMPassword, message);

                // According to the TD section 3.5.5.7.3 NetrLogonComputeClientDigest, if no previous 
                // machine account password exists, then the current password is used.
                string previousPassword = PreviousDmPasswordExists ? DMOldPassword : DMPassword;
                byte[] expectedOldDigest = GetMessageDigest(previousPassword, message);

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103792,
                    expected NewMessageDigest: {0},
                    actual NewMessageDigest: {1},
                    expected OldMessageDigest: {2},
                    actual OldMessageDigest: {3}",
                    ArrayToString(expectedNewDigest),
                    ArrayToString(newMessageDigest),
                    ArrayToString(expectedOldDigest),
                    ArrayToString(oldMessageDigest));

                bool newDigestValid = ElementsEqual(expectedNewDigest, newMessageDigest);

                // For oldMessageDigest, R103792 and R103794 only defined behavior when previous password exists,
                // so set oldDigestValid to true if previous password doesn't exist. This means
                // R103792 and R103794 don't concern about the value of oldDigestValid
                // (if previous password doesn't exist).
                bool oldDigestValid =
                    (!PreviousDmPasswordExists) ? true : ElementsEqual(expectedOldDigest, oldMessageDigest);

                // Verify MS-NRPC requirement: MS-NRPC_R103792
                // The NTOWFv1 is not sent to the client. But if Old/NewMessageDigest equals
                // the expected digest, the server has retrieved the NTOWFv1 of the password.
                // Because the expected digests are computed according to the NTOWFv1 of the
                // corresponded password.
                Site.CaptureRequirementIfIsTrue(
                    newDigestValid && oldDigestValid,
                    103792,
                    @"[In NetrLogonComputeClientDigest (Opnum 25)]The server MUST compute or retrieve the NTOWFv1 of
                    the current machine password and the NTOWFv1 of the previous machine password, if it exists.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103794");

                // Verify MS-NRPC requirement: MS-NRPC_R103794.
                // The newMessageDigest must be verified. But the oldMessageDigest may not.
                // Because if previous password doesn't exist, there is no need to verify it.
                Site.CaptureRequirementIfIsTrue(
                    newDigestValid && oldDigestValid,
                    103794,
                    @"[In NetrLogonComputeClientDigest (Opnum 25)]The server MUST compute the NTOWFv1 (as specified
                    in [MS-NLMP] section 3.3.1) of each password, if present.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103795");

                // Verify MS-NRPC requirement: MS-NRPC_R103795.
                // The expectedNewDigest is computed by using the algorithm
                // specified in this requirement.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedNewDigest, newMessageDigest),
                    103795,
                    @"[In NetrLogonComputeClientDigest (Opnum 25)]The digest of the Message parameter MUST be 
                    calculated using this OWF of the password, as follows[CALL MD5Init(md5context) IF OWF of password
                    is present CALL MD5Update(md5context, OWF of password, length of OWF of password) CALL MD5Update
                    (md5context, Message, MessageSize) CALL MD5Final(md5context) SET digest to md5context.digest].");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103796");

                // Verify MS-NRPC requirement: MS-NRPC_R103796.
                // The expectedNewDigest is computed by using the current password.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedNewDigest, newMessageDigest),
                    103796,
                    @"[In NetrLogonComputeClientDigest (Opnum 25)]The NewMessageDigest parameter MUST be computed by
                    using the current password.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103798");

                // Verify MS-NRPC requirement: MS-NRPC_R103798.
                // If previous password doesn't exist, the expectedOldDigest
                // is computed by using the new password.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedOldDigest, oldMessageDigest),
                    103798,
                    @"[In NetrLogonComputeClientDigest (Opnum 25)]If the previous password is not present, the 
                    new password MUST be used to compute the OldMessageDigest.");

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    "Verify MS-NRPC_R103797");

                // Verify MS-NRPC requirement: MS-NRPC_R103797.
                // If previous password exists, the expectedOldDigest
                // is computed by using the previous password.
                Site.CaptureRequirementIfIsTrue(
                    ElementsEqual(expectedOldDigest, oldMessageDigest),
                    103797,
                    @"[In NetrLogonComputeClientDigest (Opnum 25)]The OldMessageDigest parameter MUST be 
                    computed by using the previous password, if it[OldMessageDigest parameter] exists.");
            }

            if (currentSutOperatingSystem == PlatformType.WindowsServer2000
                || currentSutOperatingSystem == PlatformType.WindowsXp
                || currentSutOperatingSystem == PlatformType.WindowsServer2003
                || currentSutOperatingSystem == PlatformType.WindowsVista
                || currentSutOperatingSystem == PlatformType.WindowsServer2008
                || currentSutOperatingSystem == PlatformType.Windows7
                || currentSutOperatingSystem == PlatformType.WindowsServer2008R2
                || currentSutOperatingSystem == PlatformType.Windows8
                || currentSutOperatingSystem == PlatformType.WindowsServer2012
                || currentSutOperatingSystem == PlatformType.Windows8_1
                || currentSutOperatingSystem == PlatformType.WindowsServer2012R2)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103776,
                        HRESULT: {0}",
                    hresult);

                bool isVerifyR103776 = (hresult != HRESULT.ERROR_NOT_SUPPORTED)
                    && (hresult != HRESULT.STATUS_NOT_SUPPORTED);

                // Verify MS-NRPC requirement: MS-NRPC_R103776.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103776,
                    103776,
                    @"<301> Section 3.5.4.8.3:[NetrLogonComputeClientDigest method is] Supported in Windows 2000
                        Server, windows xp, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7, and
                        Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
            }
        }

        #endregion

        #region NetrLogonGetTimeServiceParentDomain Method (Opnum 35) (Section 3.5.4.8.6)

        /// <summary>
        ///  Verify requirements related to NetrLogonGetTimeServiceParentDomain.
        /// </summary>
        /// <param name="hresult"> The hresult returned by NetrLogonGetTimeServiceParentDomain.</param>
        private void VerifyNetrLogonGetTimeServiceParentDomain(HRESULT hresult)
        {
            if (currentSutOperatingSystem == PlatformType.WindowsServer2000
                || currentSutOperatingSystem == PlatformType.WindowsXp
                || currentSutOperatingSystem == PlatformType.WindowsServer2003
                || currentSutOperatingSystem == PlatformType.WindowsVista
                || currentSutOperatingSystem == PlatformType.WindowsServer2008
                || currentSutOperatingSystem == PlatformType.Windows7
                || currentSutOperatingSystem == PlatformType.WindowsServer2008R2
                || currentSutOperatingSystem == PlatformType.Windows8
                || currentSutOperatingSystem == PlatformType.WindowsServer2012
                || currentSutOperatingSystem == PlatformType.Windows8_1
                || currentSutOperatingSystem == PlatformType.WindowsServer2012R2)
            {
                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R103863,
                    HRESULT: {0}",
                    hresult);

                bool isVerifyR103863 = (hresult != HRESULT.ERROR_NOT_SUPPORTED)
                    && (hresult != HRESULT.STATUS_NOT_SUPPORTED);

                // Verify MS-NRPC requirement: MS-NRPC_R103863.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR103863,
                    103863,
                    @"<307> Section 3.5.4.8.6: [NetrLogonGetTimeServiceParentDomain method is]Supported in Windows
                    2000 Server, windows xp, Windows Server 2003, Windows Vista, Windows Server 2008, Windows 7,
                    and Windows Server 2008 R2, Windows 8, Windows Server 2012, Windows 8.1, and Windows Server 2012 R2.");
            }
        }

        #endregion

        #endregion

        #region Administrative Services Methods

        #region NetrLogonControl2Ex Method (Opnum 18) (Section 3.5.4.9.1)

        /// <summary>
        ///  Verify requirements related to NetrLogonControl2Ex.
        /// </summary>
        /// <param name="sutType"> The sutType parameter passed into NetrLogonControl2Ex.</param>
        /// <param name="functionCode"> The FunctionCode parameter passed into NetrLogonControl2Ex.</param>
        /// <param name="queryLevel"> The QueryLevel parameter passed into NetrLogonControl2Ex.</param>
        /// <param name="buffer"> The Buffer structure returned by NetrLogonControl2Ex.</param>
        /// <param name="hresult"> The hresult returned by NetrLogonControl2Ex.</param>
        private void VerifyNetrLogonControl2Ex(
            ComputerType sutType,
            FunctionCode_Values functionCode,
            QueryLevel_Values queryLevel,
            _NETLOGON_CONTROL_QUERY_INFORMATION? buffer,
            HRESULT hresult)
        {
            // The 'The requested information is returned' can only be verified when
            // NetrLogonControl2Ex returns HRESULT.ERROR_SUCCESS, because
            // if it fails nothing is returned.
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if (functionCode == FunctionCode_Values.NETLOGON_CONTROL_QUERY)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103894");

                    // Verify MS-NRPC requirement: MS-NRPC_R103894.
                    // The buffer has value means the requested data has been returned.
                    Site.CaptureRequirementIfIsTrue(
                        buffer.HasValue,
                        103894,
                        @"[In NetrLogonControl2Ex (Opnum 18),FunctionCode]When the value in FunctionCode parameter is 
                        NETLOGON_CONTROL_QUERY 0x00000001,the requested information is returned.");
                }

                if (functionCode == FunctionCode_Values.NETLOGON_CONTROL_FIND_USER)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R103926,
                        trusted domain name: {0}",
                        buffer.Value.NetlogonInfo4[0].netlog4_trusted_domain_name);

                    bool isVerifyR103926 =
                        (TrustDomainDnsName.ToLowerInvariant() ==
                            buffer.Value.NetlogonInfo4[0].netlog4_trusted_domain_name.ToLowerInvariant())
                        || (trustDomainNetBiosName.ToLowerInvariant() ==
                            buffer.Value.NetlogonInfo4[0].netlog4_trusted_domain_name.ToLowerInvariant());

                    // Verify MS-NRPC requirement: MS-103926.
                    // Trust domain name can be FQDN or NetBios format.
                    // NetlogonInfo4 array has only one element.
                    Site.CaptureRequirementIfIsTrue(
                        isVerifyR103926,
                        103926,
                        @"[In NetrLogonControl2Ex (Opnum 18),FunctionCode]When the value in FunctionCode parameter
                        is NETLOGON_CONTROL_FIND_USER 0x00000008, [the server] Queries the name of a trusted domain
                        that contains an account for a user with the specified name.");
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo1)
                {
                    // NetlogonInfo1 array has only one element.
                    // Verify NetlogonInfo1 data.
                    this.VerifyNetlogonInfo1(buffer.Value.NetlogonInfo1[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103968");

                    // Verify MS-NRPC requirement: MS-NRPC_R103968.
                    // The information of "returned NetlogonInfo1 value is not null" shows that NETLOGON_INFO_1
                    // structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo1,
                        103968,
                        @"[In NetrLogonControl2Ex (Opnum 18)]When the value in QueryLevel field is 0x00000001, 
                        A NETLOGON_INFO_1 structure in Buffer parameter is returned.");
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo2)
                {
                    // NetlogonInfo2 array has only one element.
                    // Verify NetlogonInfo2 data.
                    this.VerifyNetlogonInfo2(buffer.Value.NetlogonInfo2[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103969");

                    // Verify MS-NRPC requirement: MS-NRPC_R103969.
                    // The "returned NetlogonInfo2 value is not null" shows that NETLOGON_INFO_2 structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo2,
                        103969,
                        @"[In NetrLogonControl2Ex (Opnum 18)]When the value in QueryLevel field is 0x00000002,
                        A NETLOGON_INFO_2 structure in Buffer parameter is returned.");
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo3)
                {
                    // NetlogonInfo3 array has only one element.
                    // Verify NetlogonInfo3 data.
                    this.VerifyNetlogonInfo3(buffer.Value.NetlogonInfo3[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103970");

                    // Verify MS-NRPC requirement: MS-NRPC_R103970.
                    // The "returned NetlogonInfo3 value is not null" shows that NETLOGON_INFO_3 structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo3,
                        103970,
                        @"[In NetrLogonControl2Ex (Opnum 18)]When the value in QueryLevel field is 0x00000003,
                        A NETLOGON_INFO_3 structure in Buffer parameter is returned.");
                }

                if ((queryLevel == QueryLevel_Values.NetlogonInfo1)
                    && (sutType == ComputerType.PrimaryDc))
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103977");

                    // Verify MS-NRPC requirement: MS-NRPC_R103997.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        0,
                        buffer.Value.NetlogonInfo1[0].netlog1_pdc_connection_status,
                        103997,
                        @"[In NetrLogonControl2Ex (Opnum 18),For QueryLevel 1, the return structure MUST be generated
                        as follows:]This field[ConnectionStatus field] MUST be set to zero if this server is the PDC.");
                }

                if ((queryLevel == QueryLevel_Values.NetlogonInfo2)
                    && (sutType == ComputerType.PrimaryDc))
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104000");

                    // Verify MS-NRPC requirement: MS-NRPC_R104000.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        0,
                        buffer.Value.NetlogonInfo2[0].netlog2_pdc_connection_status,
                        104000,
                        @"[In NetrLogonControl2Ex (Opnum 18),For QueryLevel 2, the return structure MUST be 
                        generated as follows:]This field[ConnectionStatus field] MUST be set to zero if this
                        server is the PDC.");
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo3)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104003");

                    // Verify MS-NRPC requirement: MS-NRPC_R104003.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        0,
                        (uint)buffer.Value.NetlogonInfo3[0].netlog3_flags,
                        104003,
                        @"[In NetrLogonControl2Ex (Opnum 18),For QueryLevel 3, the return structure MUST be generated as
                        follows:]NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo3.netlog3_flags MUST be set to zero.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104005,
                        reserved1: {0},
                        reserved2: {1},
                        reserved3: {2},
                        reserved4: {3},
                        reserved5: {4}",
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved1,
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved2,
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved3,
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved4,
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved5);

                    bool isReservedFieldValid = (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved1)
                        && (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved2)
                        && (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved3)
                        && (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved4)
                        && (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved5);

                    // Verify MS-NRPC requirement: MS-NRPC_R104005.
                    Site.CaptureRequirementIfIsTrue(
                        isReservedFieldValid,
                        104005,
                        @"[In NetrLogonControl2Ex (Opnum 18),For QueryLevel 3, the return structure MUST be generated
                        as follows:] NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo3.netlog3_reserved1 through 
                        NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo3.netlog3_reserved5 MUST be set to zero.");
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo4)
                {
                    // NetlogonInfo4 array has only one element.
                    // Verify NetlogonInfo4 data.
                    this.VerifyNetlogonInfo4(buffer.Value.NetlogonInfo4[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103971");

                    // Verify MS-NRPC requirement: MS-NRPC_R103971.
                    // The "returned NetlogonInfo4 value is not null" shows that NETLOGON_INFO_4 structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo4,
                        103971,
                        @"[In NetrLogonControl2Ex (Opnum 18)]When the value in QueryLevel field is 0x00000004,
                        A NETLOGON_INFO_4 structure in Buffer parameter is returned.");

                    // NetlogonInfo4 array has only one element.
                    _NETLOGON_INFO_4 netlogonInfo = buffer.Value.NetlogonInfo4[0];

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104007,
                        trusted dc name: {0}",
                        netlogonInfo.netlog4_trusted_dc_name);

                    bool isVerifyR104007 =
                        (trustDCName.ToLowerInvariant() ==
                        netlogonInfo.netlog4_trusted_dc_name.ToLowerInvariant().Replace(@"\\", string.Empty))
                        || (trustDCNetBiosName.ToLowerInvariant() ==
                        netlogonInfo.netlog4_trusted_dc_name.ToLowerInvariant().Replace(@"\\", string.Empty));

                    // Verify MS-NRPC requirement: MS-NRPC_R104007.
                    // Trust DC name can be FQDN or NetBios format.
                    Site.CaptureRequirementIfIsTrue(
                        isVerifyR104007,
                        104007,
                        @"[In NetrLogonControl2Ex (Opnum 18),For QueryLevel 4, the return structure MUST be generated
                        as follows:]NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo4.netlog4_trusted_dc_name MUST be
                        set to the DC in the trusted domain.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104007,
                        trusted domain name: {0} ",
                        netlogonInfo.netlog4_trusted_domain_name);

                    bool isVerifyR104006 =
                        (TrustDomainDnsName.ToLowerInvariant() ==
                        netlogonInfo.netlog4_trusted_domain_name.ToLowerInvariant())
                        || (trustDomainNetBiosName.ToLowerInvariant() ==
                        netlogonInfo.netlog4_trusted_domain_name.ToLowerInvariant());

                    // Verify MS-NRPC requirement: MS-NRPC_R104006.
                    // Trust domain name can be FQDN or NetBios format.
                    Site.CaptureRequirementIfIsTrue(
                        isVerifyR104006,
                        104006,
                        @"[In NetrLogonControl2Ex (Opnum 18),For QueryLevel 4, the return structure MUST be generated
                        as follows:]NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo4.netlog4_trusted_domain_name MUST
                        be set to the trusted domain that the user was found in.");
                }

                if ((queryLevel == QueryLevel_Values.NetlogonInfo1)
                    && (sutType == ComputerType.PrimaryDc))
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R103997");

                    // Verify MS-NRPC requirement: MS-NRPC_R103997.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        0,
                        buffer.Value.NetlogonInfo1[0].netlog1_pdc_connection_status,
                        103997,
                        @"[In NetrLogonControl2Ex (Opnum 18),For QueryLevel 1, the return structure MUST be generated
                        as follows:]This field[ConnectionStatus field] MUST be set to zero if this server is the PDC.");
                }
            }
        }


        #endregion

        #region NetrLogonControl2 Method (Opnum 14) (Section 3.5.4.9.2)

        /// <summary>
        ///  Verify requirements related to NetrLogonControl2.
        /// </summary>
        /// <param name="sutType"> The sutType parameter passed into NetrLogonControl2Ex.</param>
        /// <param name="functionCode"> The FunctionCode parameter passed into NetrLogonControl2Ex.</param>
        /// <param name="queryLevel"> The QueryLevel parameter passed into NetrLogonControl2Ex.</param>
        /// <param name="buffer"> The Buffer structure returned by NetrLogonControl2Ex.</param>
        /// <param name="hresult"> The hresult returned by NetrLogonControl2Ex.</param>
        private void VerifyNetrLogonControl2(
            ComputerType sutType,
            FunctionCode_Values functionCode,
            QueryLevel_Values queryLevel,
            _NETLOGON_CONTROL_QUERY_INFORMATION? buffer,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if (functionCode == FunctionCode_Values.NETLOGON_CONTROL_QUERY)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104059");

                    // Verify MS-NRPC requirement: MS-NRPC_R104059.
                    Site.CaptureRequirementIfIsTrue(
                        buffer.HasValue,
                        104059,
                        @"[In NetrLogonControl2 (Opnum 14),FunctionCode]When the value in FunctionCode parameter is 
                        NETLOGON_CONTROL_QUERY 0x00000001,the requested information is returned.");
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo1)
                {
                    // NetlogonInfo1 array has only one element.
                    // Verify NetlogonInfo1 data.
                    this.VerifyNetlogonInfo1(buffer.Value.NetlogonInfo1[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104112");

                    // Verify MS-NRPC requirement: MS-NRPC_R104112.
                    // The "returned NetlogonInfo1 value is not null" shows that NETLOGON_INFO_1 structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo1,
                        104112,
                        @"[In NetrLogonControl2 (Opnum 14)]When the value in QueryLevel field is 0x00000001, 
                        A NETLOGON_INFO_1 structure in Buffer parameter is returned.");

                    if (sutType == ComputerType.PrimaryDc)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R104141");

                        // Verify MS-NRPC requirement: MS-NRPC_R104141.
                        Site.CaptureRequirementIfAreEqual<uint>(
                            0,
                            buffer.Value.NetlogonInfo1[0].netlog1_pdc_connection_status,
                            104141,
                            @"[In NetrLogonControl2 (Opnum 14),For QueryLevel 1, the return structure MUST be 
                            generated as follows:]This field[ConnectionStatus field] MUST be set to zero if this 
                            server is the PDC.");
                    }
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo2)
                {
                    // NetlogonInfo2 array has only one element.
                    // Verify NetlogonInfo2 data.
                    this.VerifyNetlogonInfo2(buffer.Value.NetlogonInfo2[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104113");

                    // Verify MS-NRPC requirement: MS-NRPC_R104113.
                    // The "returned NetlogonInfo2 value is not null" shows that NETLOGON_INFO_2 structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo2,
                        104113,
                        @"[In NetrLogonControl2 (Opnum 14)]When the value in QueryLevel field is 0x00000002, 
                        A NETLOGON_INFO_2 structure in Buffer parameter is returned.");

                    if (sutType == ComputerType.PrimaryDc)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R104144");

                        // Verify MS-NRPC requirement: MS-NRPC_R104144.
                        Site.CaptureRequirementIfAreEqual<uint>(
                            0,
                            buffer.Value.NetlogonInfo2[0].netlog2_pdc_connection_status,
                            104144,
                            @"[In NetrLogonControl2 (Opnum 14),For QueryLevel 2, the return structure MUST be 
                            generated as follows:]This field[ConnectionStatus field] MUST be set to zero if this 
                            server is the PDC.");
                    }
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo3)
                {
                    // NetlogonInfo3 array has only one element.
                    // Verify NetlogonInfo3 data.
                    this.VerifyNetlogonInfo3(buffer.Value.NetlogonInfo3[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104114");

                    // Verify MS-NRPC requirement: MS-NRPC_R104114.
                    // The "returned NetlogonInfo3 value is not null" shows that NETLOGON_INFO_3 structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo3,
                        104114,
                        @"[In NetrLogonControl2 (Opnum 14)]When the value in QueryLevel field is 0x00000003, 
                        A NETLOGON_INFO_3 structure in Buffer parameter is returned.");
                }

                bool isVerifyR104117 = false;
                if (queryLevel == QueryLevel_Values.NetlogonInfo1)
                {
                    isVerifyR104117 = null != buffer.Value.NetlogonInfo1;
                }
                else if (queryLevel == QueryLevel_Values.NetlogonInfo2)
                {
                    isVerifyR104117 = null != buffer.Value.NetlogonInfo2;
                }
                else if (queryLevel == QueryLevel_Values.NetlogonInfo3)
                {
                    isVerifyR104117 = null != buffer.Value.NetlogonInfo3;
                }
                else
                {
                    isVerifyR104117 = null != buffer.Value.NetlogonInfo4;
                }

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104117,
                    QueryLevel: {0}",
                    queryLevel);

                // Verify MS-NRPC requirement: MS-NRPC_R104117.
                Site.CaptureRequirementIfIsTrue(
                    isVerifyR104117,
                    104117,
                    @"[In NetrLogonControl2 (Opnum 14)]Buffer: NETLOGON_CONTROL_QUERY_INFORMATION structure, as 
                    specified in section 2.2.1.7.6, that contains the specific query results, with a level of 
                    verbosity as specified in QueryLevel.");

                if (queryLevel == QueryLevel_Values.NetlogonInfo3)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104147");

                    // Verify MS-NRPC requirement: MS-NRPC_R104147.
                    Site.CaptureRequirementIfAreEqual<uint>(
                        0,
                        (uint)buffer.Value.NetlogonInfo3[0].netlog3_flags,
                        104147,
                        @"[In NetrLogonControl2 (Opnum 14),For QueryLevel 3, the return structure MUST be generated as
                        follows:]NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo3.netlog3_flags MUST be set to zero.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104149,
                        reserved1: {0},
                        reserved2: {1},
                        reserved3: {2},
                        reserved4: {3},
                        reserved5: {4}",
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved1,
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved2,
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved3,
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved4,
                        buffer.Value.NetlogonInfo3[0].netlog3_reserved5);

                    bool isReservedFieldValid = (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved1)
                        && (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved2)
                        && (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved3)
                        && (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved4)
                        && (0 == (uint)buffer.Value.NetlogonInfo3[0].netlog3_reserved5);

                    // Verify MS-NRPC requirement: MS-NRPC_R104149.
                    Site.CaptureRequirementIfIsTrue(
                        isReservedFieldValid,
                        104149,
                        @"[In NetrLogonControl2 (Opnum 14),For QueryLevel 3, the return structure MUST be generated
                        as follows:]NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo3.netlog3_reserved1 through 
                        NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo3.netlog3_reserved5 MUST be set to zero.");
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo4)
                {
                    // NetlogonInfo4 array has only one element.
                    // Verify NetlogonInfo4 data.
                    this.VerifyNetlogonInfo4(buffer.Value.NetlogonInfo4[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104115");

                    // Verify MS-NRPC requirement: MS-NRPC_R104115.
                    // The "returned NetlogonInfo4 value is not null" shows that NETLOGON_INFO_4 structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo4,
                        104115,
                        @"[In NetrLogonControl2 (Opnum 14)]When the value in QueryLevel field is 0x00000004,
                        A NETLOGON_INFO_4 structure in Buffer parameter is returned.");

                    // NetlogonInfo4 array has only one element.
                    _NETLOGON_INFO_4 netlogonInfo = buffer.Value.NetlogonInfo4[0];

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104151,
                        trusted dc name: {0}",
                        netlogonInfo.netlog4_trusted_dc_name);

                    bool isVerifyR104151 =
                        (trustDCName.ToLowerInvariant() ==
                        netlogonInfo.netlog4_trusted_dc_name.ToLowerInvariant().Replace(@"\\", string.Empty))
                        || (trustDCNetBiosName.ToLowerInvariant() ==
                        netlogonInfo.netlog4_trusted_dc_name.ToLowerInvariant().Replace(@"\\", string.Empty));

                    // Verify MS-NRPC requirement: MS-NRPC_R104151.
                    // Trust DC name can be FQDN or NetBios format.
                    Site.CaptureRequirementIfIsTrue(
                        isVerifyR104151,
                        104151,
                        @"[In NetrLogonControl2 (Opnum 14),For QueryLevel 4, the return structure MUST be generated
                        as follows:]NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo4.netlog4_trusted_dc_name MUST 
                        be set to the DC in the trusted domain.");

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        @"Verify MS-NRPC_R104150,
                        trusted domain name: {0} ",
                        netlogonInfo.netlog4_trusted_domain_name);

                    bool isVerifyR104150 =
                        (TrustDomainDnsName.ToLowerInvariant() ==
                        netlogonInfo.netlog4_trusted_domain_name.ToLowerInvariant())
                        || (trustDomainNetBiosName.ToLowerInvariant() ==
                        netlogonInfo.netlog4_trusted_domain_name.ToLowerInvariant());

                    // Verify MS-NRPC requirement: MS-NRPC_R104150.
                    // Trust domain name can be FQDN or NetBios format.
                    Site.CaptureRequirementIfIsTrue(
                        isVerifyR104150,
                        104150,
                        @"[In NetrLogonControl2 (Opnum 14),For QueryLevel 4, the return structure MUST be generated
                        as follows:]NETLOGON_CONTROL_QUERY_INFORMATION.NetlogonInfo4.netlog4_trusted_domain_name 
                        MUST be set to the trusted domain that the user was found in.");

                    if (functionCode == FunctionCode_Values.NETLOGON_CONTROL_FIND_USER)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            @"Verify MS-NRPC_R104082,
                            trusted domain name: {0} ",
                            netlogonInfo.netlog4_trusted_domain_name);

                        bool isVerifyR104082 =
                            (TrustDomainDnsName.ToLowerInvariant() ==
                            netlogonInfo.netlog4_trusted_domain_name.ToLowerInvariant())
                            || (trustDomainNetBiosName.ToLowerInvariant() ==
                            netlogonInfo.netlog4_trusted_domain_name.ToLowerInvariant());

                        // Verify MS-NRPC requirement: MS-NRPC_R104082.
                        // Verify the trust domain name contains the user account,
                        // the trust domain name can be NetBios or FQDN format.
                        Site.CaptureRequirementIfIsTrue(
                            isVerifyR104082,
                            104082,
                            @"[In NetrLogonControl2 (Opnum 14),FunctionCode]when function code value is 0x00000008,
                            The user name is specified in the UserName field of the Data parameter. Server Queries
                            the name of a trusted domain that contains an account for a user with the specified name.");
                    }
                }
            }
        }

        #endregion

        #region NetrLogonControl Method (Opnum 12) (Section 3.5.4.9.3)

        /// <summary>
        ///  Verify requirements related to NetrLogonControl.
        /// </summary>
        /// <param name="sutType"> The sutType parameter passed into NetrLogonControl.</param>
        /// <param name="functionCode"> The FunctionCode parameter passed into NetrLogonControl.</param>
        /// <param name="queryLevel"> The QueryLevel parameter passed into NetrLogonControl.</param>
        /// <param name="buffer"> The Buffer structure returned by NetrLogonControl.</param>
        /// <param name="hresult"> The hresult returned by NetrLogonControl.</param>
        private void VerifyNetrLogonControl(
            ComputerType sutType,
            FunctionCode_Values functionCode,
            QueryLevel_Values queryLevel,
            _NETLOGON_CONTROL_QUERY_INFORMATION? buffer,
            HRESULT hresult)
        {
            if (hresult == HRESULT.ERROR_SUCCESS)
            {
                if (functionCode == FunctionCode_Values.NETLOGON_CONTROL_QUERY)
                {
                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104157");

                    // Verify MS-NRPC requirement: MS-NRPC_R104157.
                    Site.CaptureRequirementIfIsTrue(
                        buffer.HasValue,
                        104157,
                        @"[In NetrLogonControl (Opnum 12),FunctionCode]When the value in FunctionCode parameter is 
                        NETLOGON_CONTROL_QUERY 0x00000001,the requested information is returned.");
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo1)
                {
                    // NetlogonInfo1 array has only one element.
                    // Verify NetlogonInfo1 data.
                    this.VerifyNetlogonInfo1(buffer.Value.NetlogonInfo1[0]);

                    // Add the debug information.
                    Site.Log.Add(
                        LogEntryKind.Debug,
                        "Verify MS-NRPC_R104209");

                    // Verify MS-NRPC requirement: MS-NRPC_R104209.
                    // The "returned NetlogonInfo1 value is not null" shows that NETLOGON_INFO_1 structure is returned.
                    Site.CaptureRequirementIfIsNotNull(
                        buffer.Value.NetlogonInfo1,
                        104209,
                        @"[In NetrLogonControl (Opnum 12)]When the value in QueryLevel field is 0x00000001,
                        A NETLOGON_INFO_1 structure in Buffer parameter is returned.");

                    if (sutType == ComputerType.PrimaryDc)
                    {
                        // Add the debug information.
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "Verify MS-NRPC_R104238");

                        // Verify MS-NRPC requirement: MS-NRPC_R104238.
                        Site.CaptureRequirementIfAreEqual<uint>(
                            0,
                            buffer.Value.NetlogonInfo1[0].netlog1_pdc_connection_status,
                            104238,
                            @"[In NetrLogonControl (Opnum 12),For QueryLevel 1, the return structure MUST be
                            generated as follows:]This field[ConnectionStatus field] MUST be set to zero if
                            this server is the PDC.");
                    }
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo2)
                {
                    // NetlogonInfo2 array has only one element.
                    // Verify NetlogonInfo2 data.
                    this.VerifyNetlogonInfo2(buffer.Value.NetlogonInfo2[0]);
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo3)
                {
                    // NetlogonInfo3 array has only one element.
                    // Verify NetlogonInfo3 data.
                    this.VerifyNetlogonInfo3(buffer.Value.NetlogonInfo3[0]);
                }

                if (queryLevel == QueryLevel_Values.NetlogonInfo4)
                {
                    // NetlogonInfo4 array has only one element.
                    // Verify NetlogonInfo4 data.
                    this.VerifyNetlogonInfo4(buffer.Value.NetlogonInfo4[0]);
                }

                // Verify MS-NRPC requirement: MS-NRPC_R104214.
                // Stack has changed pointer to corresponding structure.
                // This structure NETLOGON_CONTROL_QUERY_INFORMATION is generated based on the IDL from the TD.
                // If the method using this field as parameter executes successfully, it indicates that
                // this field is the type defined in the TD.
                // So when the hresult is success, this requirement is captured.
                Site.CaptureRequirement(
                    104214,
                    @"[In NetrLogonControl (Opnum 12)]Buffer: NETLOGON_CONTROL_QUERY_INFORMATION structure, as 
                    specified in section 2.2.1.7.6, that contains the specific query results, with a level of
                    verbosity as specified in QueryLevel.");
            }
        }

        #endregion

        #endregion

        #region Obsolete Methods

        #region NetrLogonUasLogon Method (Opnum 0) (Section 3.5.4.10.1)

        /// <summary>
        ///  Verify requirements related to NetrLogonUasLogon.
        /// </summary>
        /// <param name="hresult"> The hresult returned by NetrLogonUasLogon.</param>
        private void VerifyNetrLogonUasLogon(HRESULT hresult)
        {
            string isR104028Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104028Implementation"];

            if (PDCIsWindows)
            {
                if (null == isR104028Implemented)
                {
                    Site.Properties.Add("MS_NRPC.SHOULDMAY.R104028Implementation", bool.TrueString);
                    isR104028Implemented = bool.TrueString;
                }
            }

            if (null != isR104028Implemented)
            {
                bool implemented = bool.Parse(isR104028Implemented);
                bool isSatisfied = hresult != HRESULT.ERROR_SUCCESS;

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104028,
                    hResult: {0}",
                    hresult);

                // Verify MS-NRPC requirement: MS-NRPC_R104028.
                Site.CaptureRequirementIfAreEqual<bool>(
                    implemented,
                    isSatisfied,
                    104028,
                    @"[InNetrLogonUasLogon (Opnum 0), this method]SHOULD<241> be rejected with an error code.");
            }
        }

        #endregion

        #region NetrLogonUasLogoff Method (Opnum 1) (Section 3.5.4.10.2)

        /// <summary>
        ///  Verify requirements related to NetrLogonUasLogoff.
        /// </summary>
        /// <param name="hresult"> The hresult returned by NetrLogonUasLogoff.</param>
        private void VerifyNetrLogonUasLogoff(HRESULT hresult)
        {
            string isR104032Implemented = Site.Properties["MS_NRPC.SHOULDMAY.R104032Implementation"];

            if (PDCIsWindows)
            {
                if (null == isR104032Implemented)
                {
                    Site.Properties.Add("MS_NRPC.SHOULDMAY.R104032Implementation", bool.TrueString);
                    isR104032Implemented = bool.TrueString;
                }
            }

            if (null != isR104032Implemented)
            {
                bool implemented = bool.Parse(isR104032Implemented);
                bool isSatisfied = hresult != HRESULT.ERROR_SUCCESS;

                // Add the debug information.
                Site.Log.Add(
                    LogEntryKind.Debug,
                    @"Verify MS-NRPC_R104032,
                    hResult: {0}",
                    hresult);

                // Verify MS-NRPC requirement: MS-NRPC_R104032.
                Site.CaptureRequirementIfAreEqual<bool>(
                    implemented,
                    isSatisfied,
                    104032,
                    @"[In NetrLogonUasLogoff (Opnum 1), this method]SHOULD<242> be rejected with an error code.");
            }
        }

        #endregion

        #endregion
    }
}