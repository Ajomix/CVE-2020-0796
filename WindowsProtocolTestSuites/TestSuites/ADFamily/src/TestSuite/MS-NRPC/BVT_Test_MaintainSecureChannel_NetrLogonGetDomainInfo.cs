// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/*comment out bad memory corrupted test case//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.Protocols.TestTools;
    
    
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfo : PtfTestClassBase {
        
        public BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfo() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void NetrLogonGetDomainInfoDelegate1(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT @return);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase NetrLogonGetDomainInfoInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.INrpcServerAdapter), "NetrLogonGetDomainInfo", typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType), typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType), typeof(bool), typeof(uint), typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.INrpcServerAdapter INrpcServerAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.INrpcServerAdapterInstance = ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.INrpcServerAdapter)(this.GetAdapter(typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.INrpcServerAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS0() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp0;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp0);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp0, "sutPlatform of GetPlatform, state S1");
            this.Manager.Comment("reaching state \'S32\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp1;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp1 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp1, "return of NetrServerReqChallenge, state S48");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp2;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp2 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp2, "return of NetrServerAuthenticate3, state S80");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp3;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp3 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp3, "return of NetrLogonGetDomainInfo, state S112");
            this.Manager.Comment("reaching state \'S128\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp4;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp4 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp4, "return of NetrServerReqChallenge, state S144");
            this.Manager.Comment("reaching state \'S160\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp5;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp5 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S176\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp5, "return of NetrServerAuthenticate3, state S176");
            this.Manager.Comment("reaching state \'S192\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp6;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp6 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp6);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        
        private void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208() {
            this.Manager.Comment("reaching state \'S208\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfo.NetrLogonGetDomainInfoInfo, null, new NetrLogonGetDomainInfoDelegate1(this.BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS0NetrLogonGetDomainInfoChecker)));
            this.Manager.Comment("reaching state \'S214\'");
        }
        
        private void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS0NetrLogonGetDomainInfoChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT @return) {
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), @return, "return of NetrLogonGetDomainInfo, state S208");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS10() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS10");
            this.Manager.Comment("reaching state \'S10\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp7;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp7);
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp7, "sutPlatform of GetPlatform, state S11");
            this.Manager.Comment("reaching state \'S37\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp8;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp8 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp8, "return of NetrServerReqChallenge, state S53");
            this.Manager.Comment("reaching state \'S69\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp9;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp9 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp9, "return of NetrServerAuthenticate3, state S85");
            this.Manager.Comment("reaching state \'S101\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp10;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=False,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp10 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        false,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp10, "return of NetrLogonGetDomainInfo, state S117");
            this.Manager.Comment("reaching state \'S133\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp11;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp11 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp11, "return of NetrServerReqChallenge, state S149");
            this.Manager.Comment("reaching state \'S165\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp12;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp12 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp12, "return of NetrServerAuthenticate3, state S181");
            this.Manager.Comment("reaching state \'S197\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp13;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp13 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R266");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp13);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS12() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS12");
            this.Manager.Comment("reaching state \'S12\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp14;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp14);
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp14, "sutPlatform of GetPlatform, state S13");
            this.Manager.Comment("reaching state \'S38\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp15;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp15 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp15, "return of NetrServerReqChallenge, state S54");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp16;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp16 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp16, "return of NetrServerAuthenticate3, state S86");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp17;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=False,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp17 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        false,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp17, "return of NetrLogonGetDomainInfo, state S118");
            this.Manager.Comment("reaching state \'S134\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp18;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp18 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp18, "return of NetrServerReqChallenge, state S150");
            this.Manager.Comment("reaching state \'S166\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp19;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp19 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S182\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp19, "return of NetrServerAuthenticate3, state S182");
            this.Manager.Comment("reaching state \'S198\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp20;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp20 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R270");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp20);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS14() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS14");
            this.Manager.Comment("reaching state \'S14\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp21;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp21);
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp21, "sutPlatform of GetPlatform, state S15");
            this.Manager.Comment("reaching state \'S39\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp22;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp22 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp22, "return of NetrServerReqChallenge, state S55");
            this.Manager.Comment("reaching state \'S71\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp23;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp23 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp23, "return of NetrServerAuthenticate3, state S87");
            this.Manager.Comment("reaching state \'S103\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp24;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=1,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp24 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        1u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp24, "return of NetrLogonGetDomainInfo, state S119");
            this.Manager.Comment("reaching state \'S135\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp25;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp25 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp25, "return of NetrServerReqChallenge, state S151");
            this.Manager.Comment("reaching state \'S167\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp26;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp26 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp26, "return of NetrServerAuthenticate3, state S183");
            this.Manager.Comment("reaching state \'S199\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp27;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=1,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp27 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        1u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp27);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS209();
            this.Manager.EndTest();
        }
        
        private void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS209() {
            this.Manager.Comment("reaching state \'S209\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfo.NetrLogonGetDomainInfoInfo, null, new NetrLogonGetDomainInfoDelegate1(this.BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS14NetrLogonGetDomainInfoChecker)));
            this.Manager.Comment("reaching state \'S215\'");
        }
        
        private void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS14NetrLogonGetDomainInfoChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT @return) {
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), @return, "return of NetrLogonGetDomainInfo, state S209");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS16() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS16");
            this.Manager.Comment("reaching state \'S16\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp28;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp28);
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp28, "sutPlatform of GetPlatform, state S17");
            this.Manager.Comment("reaching state \'S40\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp29;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp29 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp29, "return of NetrServerReqChallenge, state S56");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp30;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp30 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp30, "return of NetrServerAuthenticate3, state S88");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp31;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=2,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp31 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        2u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp31, "return of NetrLogonGetDomainInfo, state S120");
            this.Manager.Comment("reaching state \'S136\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp32;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp32 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp32, "return of NetrServerReqChallenge, state S152");
            this.Manager.Comment("reaching state \'S168\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp33;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp33 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp33, "return of NetrServerAuthenticate3, state S184");
            this.Manager.Comment("reaching state \'S200\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp34;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=2,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp34 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        2u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S210\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp34, "return of NetrLogonGetDomainInfo, state S210");
            this.Manager.Comment("reaching state \'S216\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS18() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS18");
            this.Manager.Comment("reaching state \'S18\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp35;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp35);
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp35, "sutPlatform of GetPlatform, state S19");
            this.Manager.Comment("reaching state \'S41\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp36;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp36 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp36, "return of NetrServerReqChallenge, state S57");
            this.Manager.Comment("reaching state \'S73\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp37;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp37 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp37, "return of NetrServerAuthenticate3, state S89");
            this.Manager.Comment("reaching state \'S105\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp38;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=2147483649,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp38 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        2147483649u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp38, "return of NetrLogonGetDomainInfo, state S121");
            this.Manager.Comment("reaching state \'S137\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp39;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp39 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp39, "return of NetrServerReqChallenge, state S153");
            this.Manager.Comment("reaching state \'S169\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp40;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp40 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp40, "return of NetrServerAuthenticate3, state S185");
            this.Manager.Comment("reaching state \'S201\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp41;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=1,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp41 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        1u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R280");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp41);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS209();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS2() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS2");
            this.Manager.Comment("reaching state \'S2\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp42;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp42);
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp42, "sutPlatform of GetPlatform, state S3");
            this.Manager.Comment("reaching state \'S33\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp43;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp43 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp43, "return of NetrServerReqChallenge, state S49");
            this.Manager.Comment("reaching state \'S65\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp44;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp44 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp44, "return of NetrServerAuthenticate3, state S81");
            this.Manager.Comment("reaching state \'S97\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp45;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=False,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp45 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        false,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp45, "return of NetrLogonGetDomainInfo, state S113");
            this.Manager.Comment("reaching state \'S129\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp46;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp46 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp46, "return of NetrServerReqChallenge, state S145");
            this.Manager.Comment("reaching state \'S161\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp47;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp47 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S177\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp47, "return of NetrServerAuthenticate3, state S177");
            this.Manager.Comment("reaching state \'S193\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp48;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp48 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R239");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp48);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS20() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS20");
            this.Manager.Comment("reaching state \'S20\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp49;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp49);
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp49, "sutPlatform of GetPlatform, state S21");
            this.Manager.Comment("reaching state \'S42\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp50;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp50 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp50, "return of NetrServerReqChallenge, state S58");
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp51;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp51 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp51, "return of NetrServerAuthenticate3, state S90");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp52;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=False,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp52 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        false,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp52, "return of NetrLogonGetDomainInfo, state S122");
            this.Manager.Comment("reaching state \'S138\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp53;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp53 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp53, "return of NetrServerReqChallenge, state S154");
            this.Manager.Comment("reaching state \'S170\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp54;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp54 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S186\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp54, "return of NetrServerAuthenticate3, state S186");
            this.Manager.Comment("reaching state \'S202\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp55;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp55 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R283");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp55);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS22() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS22");
            this.Manager.Comment("reaching state \'S22\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp56;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp56);
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp56, "sutPlatform of GetPlatform, state S23");
            this.Manager.Comment("reaching state \'S43\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp57;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp57 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp57, "return of NetrServerReqChallenge, state S59");
            this.Manager.Comment("reaching state \'S75\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp58;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp58 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp58, "return of NetrServerAuthenticate3, state S91");
            this.Manager.Comment("reaching state \'S107\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp59;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=False,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp59 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        false,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp59, "return of NetrLogonGetDomainInfo, state S123");
            this.Manager.Comment("reaching state \'S139\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp60;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp60 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp60, "return of NetrServerReqChallenge, state S155");
            this.Manager.Comment("reaching state \'S171\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp61;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp61 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp61, "return of NetrServerAuthenticate3, state S187");
            this.Manager.Comment("reaching state \'S203\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp62;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp62 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R287");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp62);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS24() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS24");
            this.Manager.Comment("reaching state \'S24\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp63;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp63);
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp63, "sutPlatform of GetPlatform, state S25");
            this.Manager.Comment("reaching state \'S44\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp64;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp64 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp64, "return of NetrServerReqChallenge, state S60");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp65;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp65 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp65, "return of NetrServerAuthenticate3, state S92");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp66;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=False,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp66 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        false,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp66, "return of NetrLogonGetDomainInfo, state S124");
            this.Manager.Comment("reaching state \'S140\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp67;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp67 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp67, "return of NetrServerReqChallenge, state S156");
            this.Manager.Comment("reaching state \'S172\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp68;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp68 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S188\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp68, "return of NetrServerAuthenticate3, state S188");
            this.Manager.Comment("reaching state \'S204\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp69;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp69 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R292");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp69);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS26() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS26");
            this.Manager.Comment("reaching state \'S26\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp70;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp70);
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp70, "sutPlatform of GetPlatform, state S27");
            this.Manager.Comment("reaching state \'S45\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp71;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp71 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp71, "return of NetrServerReqChallenge, state S61");
            this.Manager.Comment("reaching state \'S77\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp72;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp72 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp72, "return of NetrServerAuthenticate3, state S93");
            this.Manager.Comment("reaching state \'S109\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp73;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=False,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp73 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        false,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp73, "return of NetrLogonGetDomainInfo, state S125");
            this.Manager.Comment("reaching state \'S141\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp74;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp74 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp74, "return of NetrServerReqChallenge, state S157");
            this.Manager.Comment("reaching state \'S173\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp75;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp75 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp75, "return of NetrServerAuthenticate3, state S189");
            this.Manager.Comment("reaching state \'S205\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp76;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=False,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp76 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        false,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S211\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp76, "return of NetrLogonGetDomainInfo, state S211");
            this.Manager.Comment("reaching state \'S217\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS28() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS28");
            this.Manager.Comment("reaching state \'S28\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp77;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp77);
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp77, "sutPlatform of GetPlatform, state S29");
            this.Manager.Comment("reaching state \'S46\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp78;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp78 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp78, "return of NetrServerReqChallenge, state S62");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp79;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp79 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp79, "return of NetrServerAuthenticate3, state S94");
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp80;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=False,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_WORKSTATION),IsLsaPolicyInfoNull=True))'");
            temp80 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        false,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_WORKSTATION}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp80, "return of NetrLogonGetDomainInfo, state S126");
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp81;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp81 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp81, "return of NetrServerReqChallenge, state S158");
            this.Manager.Comment("reaching state \'S174\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp82;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp82 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S190\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp82, "return of NetrServerAuthenticate3, state S190");
            this.Manager.Comment("reaching state \'S206\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp83;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=False,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_WORKSTATION),IsLsaPolicyInfoNull=True))'");
            temp83 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        false,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_WORKSTATION}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S212\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp83, "return of NetrLogonGetDomainInfo, state S212");
            this.Manager.Comment("reaching state \'S218\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS30() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS30");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp84;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp84);
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp84, "sutPlatform of GetPlatform, state S31");
            this.Manager.Comment("reaching state \'S47\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp85;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp85 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp85, "return of NetrServerReqChallenge, state S63");
            this.Manager.Comment("reaching state \'S79\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp86;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp86 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp86, "return of NetrServerAuthenticate3, state S95");
            this.Manager.Comment("reaching state \'S111\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp87;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=False,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp87 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        false,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp87, "return of NetrLogonGetDomainInfo, state S127");
            this.Manager.Comment("reaching state \'S143\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp88;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp88 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp88, "return of NetrServerReqChallenge, state S159");
            this.Manager.Comment("reaching state \'S175\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp89;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp89 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp89, "return of NetrServerAuthenticate3, state S191");
            this.Manager.Comment("reaching state \'S207\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp90;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=False,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp90 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        false,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S213\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp90, "return of NetrLogonGetDomainInfo, state S213");
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS4() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS4");
            this.Manager.Comment("reaching state \'S4\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp91;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp91);
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp91, "sutPlatform of GetPlatform, state S5");
            this.Manager.Comment("reaching state \'S34\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp92;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp92 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp92, "return of NetrServerReqChallenge, state S50");
            this.Manager.Comment("reaching state \'S66\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp93;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp93 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp93, "return of NetrServerAuthenticate3, state S82");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp94;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=False,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp94 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        false,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp94, "return of NetrLogonGetDomainInfo, state S114");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp95;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp95 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp95, "return of NetrServerReqChallenge, state S146");
            this.Manager.Comment("reaching state \'S162\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp96;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp96 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S178\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp96, "return of NetrServerAuthenticate3, state S178");
            this.Manager.Comment("reaching state \'S194\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp97;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp97 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R243");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp97);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS6() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS6");
            this.Manager.Comment("reaching state \'S6\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp98;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp98);
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp98, "sutPlatform of GetPlatform, state S7");
            this.Manager.Comment("reaching state \'S35\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp99;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp99 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp99, "return of NetrServerReqChallenge, state S51");
            this.Manager.Comment("reaching state \'S67\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp100;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp100 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp100, "return of NetrServerAuthenticate3, state S83");
            this.Manager.Comment("reaching state \'S99\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp101;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=False,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp101 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        false,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp101, "return of NetrLogonGetDomainInfo, state S115");
            this.Manager.Comment("reaching state \'S131\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp102;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp102 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp102, "return of NetrServerReqChallenge, state S147");
            this.Manager.Comment("reaching state \'S163\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp103;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp103 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp103, "return of NetrServerAuthenticate3, state S179");
            this.Manager.Comment("reaching state \'S195\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp104;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp104 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R247");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp104);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("BVT")]
        public void BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS8() {
            this.Manager.BeginTest("BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS8");
            this.Manager.Comment("reaching state \'S8\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType temp105;
            this.Manager.Comment("executing step \'call GetPlatform(out _)\'");
            this.INrpcServerAdapterInstance.GetPlatform(out temp105);
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return GetPlatform/[out WindowsServer2008R2]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.PlatformType.WindowsServer2008R2, temp105, "sutPlatform of GetPlatform, state S9");
            this.Manager.Comment("reaching state \'S36\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp106;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp106 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp106, "return of NetrServerReqChallenge, state S52");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp107;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp107 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp107, "return of NetrServerAuthenticate3, state S84");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp108;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=False,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp108 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        false,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("checking step \'return NetrLogonGetDomainInfo/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp108, "return of NetrLogonGetDomainInfo, state S116");
            this.Manager.Comment("reaching state \'S132\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp109;
            this.Manager.Comment("executing step \'call NetrServerReqChallenge(PrimaryDc,Client)\'");
            temp109 = this.INrpcServerAdapterInstance.NetrServerReqChallenge(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client);
            this.Manager.Checkpoint("MS-NRPC_R103340");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("checking step \'return NetrServerReqChallenge/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp109, "return of NetrServerReqChallenge, state S148");
            this.Manager.Comment("reaching state \'S164\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp110;
            this.Manager.Comment("executing step \'call NetrServerAuthenticate3(PrimaryDc,DomainMemberComputerAccoun" +
                    "t,WorkstationSecureChannel,Client,True,16644)\'");
            temp110 = this.INrpcServerAdapterInstance.NetrServerAuthenticate3(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AccounterNameType.DomainMemberComputerAccount, Microsoft.Protocols.TestTools.StackSdk.Security.Nrpc._NETLOGON_SECURE_CHANNEL_TYPE.WorkstationSecureChannel, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 16644u);
            this.Manager.Checkpoint("MS-NRPC_R103455");
            this.Manager.Comment("reaching state \'S180\'");
            this.Manager.Comment("checking step \'return NetrServerAuthenticate3/ERROR_SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT)(0)), temp110, "return of NetrServerAuthenticate3, state S180");
            this.Manager.Comment("reaching state \'S196\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.HRESULT temp111;
            this.Manager.Comment(@"executing step 'call NetrLogonGetDomainInfo(PrimaryDc,Client,True,1,AbstractNetLogonWorkStationInformation(WorkStationInfo=AbstractNetLogonWorkStationInfo(IsDummy1Null=True,IsDummy2Null=True,IsDummy3Null=True,IsDummy4Null=True,IsOsVersionNull=True,IsOsNameNull=True,IsDummyString3Null=True,IsDummyString4Null=True,WorkStationFlags=0,IsDummyLong2Zero=True,IsDummyLong3Zero=True,IsDummyLong4Zero=True,ClientOSType=VER_NT_SERVER),IsLsaPolicyInfoNull=True))'");
            temp111 = this.INrpcServerAdapterInstance.NetrLogonGetDomainInfo(Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.PrimaryDc, Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.ComputerType.Client, true, 1u, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInformation>(new string[] {
                            "WorkStationInfo",
                            "IsLsaPolicyInfoNull"}, new object[] {
                            this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Nrpc.AbstractNetLogonWorkStationInfo>(new string[] {
                                        "IsDummy1Null",
                                        "IsDummy2Null",
                                        "IsDummy3Null",
                                        "IsDummy4Null",
                                        "IsOsVersionNull",
                                        "IsOsNameNull",
                                        "IsDummyString3Null",
                                        "IsDummyString4Null",
                                        "WorkStationFlags",
                                        "IsDummyLong2Zero",
                                        "IsDummyLong3Zero",
                                        "IsDummyLong4Zero",
                                        "ClientOSType"}, new object[] {
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        true,
                                        0u,
                                        true,
                                        true,
                                        true,
                                        Microsoft.Protocols.TestTools.StackSdk.PrintService.Rprn.OS_TYPE.VER_NT_SERVER}),
                            true}));
            this.Manager.Checkpoint("MS-NRPC_R251");
            this.Manager.Checkpoint("MS-NRPC_R1045");
            this.Manager.AddReturn(NetrLogonGetDomainInfoInfo, null, temp111);
            BVT_Test_MaintainSecureChannel_NetrLogonGetDomainInfoS208();
            this.Manager.EndTest();
        }
        #endregion
    }
}
*/
