// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.Protocols.TestTools;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Microsoft.Protocols.TestTools.Messages.Runtime;

    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TestScenarioS12For2K8 : PtfTestClassBase {
        
        public TestScenarioS12For2K8() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000");
        }
        
        #region Expect Delegates
        public delegate void GetSUTOSVersionDelegate1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetSUTOSVersionInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter), "GetSUTOSVersion", typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter ILsadManagedAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ILsadManagedAdapterInstance = ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter)(this.GetAdapter(typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S0() {
            this.Manager.BeginTest("TestScenarioS12For2K8S0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp0;
            bool temp1;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp1 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp0);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp0, temp1);
            this.Manager.Comment("reaching state \'S1\'");
            int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S0GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S0GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S0GetSUTOSVersionChecker2)));
            if ((temp20 == 0)) {
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S416\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp3 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2);
                this.Manager.Comment("reaching state \'S572\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2, "policyHandle of OpenPolicy2, state S572");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3, "return of OpenPolicy2, state S572");
                this.Manager.Comment("reaching state \'S728\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp4;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp5;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp5 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp4);
                this.Manager.Comment("reaching state \'S884\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp4, "trustHandle of CreateTrustedDomain, state S884");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp5, "return of CreateTrustedDomain, state S884");
                this.Manager.Comment("reaching state \'S1040\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp6;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp6 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1196\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp6, "return of SetTrustedDomainInfo, state S1196");
                TestScenarioS12For2K8S1352();
                goto label0;
            }
            if ((temp20 == 1)) {
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S417\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp8;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp9;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp9 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp8);
                this.Manager.Comment("reaching state \'S573\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp8, "policyHandle of OpenPolicy2, state S573");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp9, "return of OpenPolicy2, state S573");
                this.Manager.Comment("reaching state \'S729\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp10;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp11;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp11 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp10);
                this.Manager.Comment("reaching state \'S885\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp10, "trustHandle of CreateTrustedDomain, state S885");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp11, "return of CreateTrustedDomain, state S885");
                this.Manager.Comment("reaching state \'S1041\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp12;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp12 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1197\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp12, "return of SetTrustedDomainInfo, state S1197");
                TestScenarioS12For2K8S1353();
                goto label0;
            }
            if ((temp20 == 2)) {
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S418\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp14;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp15;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp15 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp14);
                this.Manager.Comment("reaching state \'S574\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp14, "policyHandle of OpenPolicy2, state S574");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp15, "return of OpenPolicy2, state S574");
                this.Manager.Comment("reaching state \'S730\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp16;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp17;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp17 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp16);
                this.Manager.Comment("reaching state \'S886\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp16, "trustHandle of CreateTrustedDomain, state S886");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp17, "return of CreateTrustedDomain, state S886");
                this.Manager.Comment("reaching state \'S1042\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp18;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp18 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1198\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp18, "return of SetTrustedDomainInfo, state S1198");
                TestScenarioS12For2K8S1354();
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S0GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S1");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S1");
        }
        
        private void TestScenarioS12For2K8S1352() {
            this.Manager.Comment("reaching state \'S1352\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp7;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp7 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S1443\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp7, "return of DeleteTrustedDomain, state S1443");
            this.Manager.Comment("reaching state \'S1534\'");
        }
        
        private void TestScenarioS12For2K8S0GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S1");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S1");
        }
        
        private void TestScenarioS12For2K8S1353() {
            this.Manager.Comment("reaching state \'S1353\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp13;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp13 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S1444\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp13, "return of DeleteTrustedDomain, state S1444");
            this.Manager.Comment("reaching state \'S1535\'");
        }
        
        private void TestScenarioS12For2K8S0GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S1");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S1");
        }
        
        private void TestScenarioS12For2K8S1354() {
            this.Manager.Comment("reaching state \'S1354\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp19;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp19 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S1445\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp19, "return of DeleteTrustedDomain, state S1445");
            this.Manager.Comment("reaching state \'S1536\'");
        }
        #endregion
        
        #region Test Starting in S10
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S10() {
            this.Manager.BeginTest("TestScenarioS12For2K8S10");
            this.Manager.Comment("reaching state \'S10\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp21;
            bool temp22;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp22 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp21);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp21, temp22);
            this.Manager.Comment("reaching state \'S11\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S10GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S10GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S10GetSUTOSVersionChecker2)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S431\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp23;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp24;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp24 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp23);
                this.Manager.Comment("reaching state \'S587\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp23, "policyHandle of OpenPolicy2, state S587");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp24, "return of OpenPolicy2, state S587");
                this.Manager.Comment("reaching state \'S743\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp25;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp26;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp26 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp25);
                this.Manager.Comment("reaching state \'S899\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp25, "trustHandle of CreateTrustedDomain, state S899");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp26, "return of CreateTrustedDomain, state S899");
                this.Manager.Comment("reaching state \'S1055\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp27;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp27 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1211\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp27, "return of SetTrustedDomainInfo, state S1211");
                TestScenarioS12For2K8S1355();
                goto label1;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S432\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp29;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp30;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp30 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp29);
                this.Manager.Comment("reaching state \'S588\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp29, "policyHandle of OpenPolicy2, state S588");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp30, "return of OpenPolicy2, state S588");
                this.Manager.Comment("reaching state \'S744\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp31;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp32;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp32 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp31);
                this.Manager.Comment("reaching state \'S900\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp31, "trustHandle of CreateTrustedDomain, state S900");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp32, "return of CreateTrustedDomain, state S900");
                this.Manager.Comment("reaching state \'S1056\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp33;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp33 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1212\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp33, "return of SetTrustedDomainInfo, state S1212");
                TestScenarioS12For2K8S1356();
                goto label1;
            }
            if ((temp41 == 2)) {
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S433\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp35;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp36;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp36 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp35);
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp35, "policyHandle of OpenPolicy2, state S589");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp36, "return of OpenPolicy2, state S589");
                this.Manager.Comment("reaching state \'S745\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp37;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp38;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp38 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp37);
                this.Manager.Comment("reaching state \'S901\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp37, "trustHandle of CreateTrustedDomain, state S901");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp38, "return of CreateTrustedDomain, state S901");
                this.Manager.Comment("reaching state \'S1057\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp39;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp39 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1213\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp39, "return of SetTrustedDomainInfo, state S1213");
                this.Manager.Comment("reaching state \'S1363\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp40;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp40 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1454\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp40, "return of DeleteTrustedDomain, state S1454");
                this.Manager.Comment("reaching state \'S1545\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S10GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S11");
        }
        
        private void TestScenarioS12For2K8S1355() {
            this.Manager.Comment("reaching state \'S1355\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp28;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp28 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S1446\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp28, "return of DeleteTrustedDomain, state S1446");
            this.Manager.Comment("reaching state \'S1537\'");
        }
        
        private void TestScenarioS12For2K8S10GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S11");
        }
        
        private void TestScenarioS12For2K8S1356() {
            this.Manager.Comment("reaching state \'S1356\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp34;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp34 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S1447\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp34, "return of DeleteTrustedDomain, state S1447");
            this.Manager.Comment("reaching state \'S1538\'");
        }
        
        private void TestScenarioS12For2K8S10GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S11");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S11");
        }
        #endregion
        
        #region Test Starting in S100
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S100() {
            this.Manager.BeginTest("TestScenarioS12For2K8S100");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp42;
            bool temp43;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp43 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp42);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp42, temp43);
            this.Manager.Comment("reaching state \'S101\'");
            int temp61 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S100GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S100GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S100GetSUTOSVersionChecker2)));
            if ((temp61 == 0)) {
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S410\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S566\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp44;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp45;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp45 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp44);
                this.Manager.Comment("reaching state \'S722\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp44, "policyHandle of OpenPolicy2, state S722");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp45, "return of OpenPolicy2, state S722");
                this.Manager.Comment("reaching state \'S878\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp46;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp47;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp47 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp46);
                this.Manager.Comment("reaching state \'S1034\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp46, "trustHandle of CreateTrustedDomain, state S1034");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp47, "return of CreateTrustedDomain, state S1034");
                this.Manager.Comment("reaching state \'S1190\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp48;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp48 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1346\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp48, "return of SetTrustedDomainInfo, state S1346");
                TestScenarioS12For2K8S1352();
                goto label2;
            }
            if ((temp61 == 1)) {
                this.Manager.Comment("reaching state \'S255\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S567\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp49;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp50;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp50 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp49);
                this.Manager.Comment("reaching state \'S723\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp49, "policyHandle of OpenPolicy2, state S723");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp50, "return of OpenPolicy2, state S723");
                this.Manager.Comment("reaching state \'S879\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp51;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp52;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp52 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp51);
                this.Manager.Comment("reaching state \'S1035\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp51, "trustHandle of CreateTrustedDomain, state S1035");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp52, "return of CreateTrustedDomain, state S1035");
                this.Manager.Comment("reaching state \'S1191\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp53;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp53 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1347\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp53, "return of SetTrustedDomainInfo, state S1347");
                this.Manager.Comment("reaching state \'S1439\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp54;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp54 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1530\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp54, "return of DeleteTrustedDomain, state S1530");
                this.Manager.Comment("reaching state \'S1621\'");
                goto label2;
            }
            if ((temp61 == 2)) {
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S568\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp55;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp56;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp56 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp55);
                this.Manager.Comment("reaching state \'S724\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp55, "policyHandle of OpenPolicy2, state S724");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp56, "return of OpenPolicy2, state S724");
                this.Manager.Comment("reaching state \'S880\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp57;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp58;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp58 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp57);
                this.Manager.Comment("reaching state \'S1036\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp57, "trustHandle of CreateTrustedDomain, state S1036");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp58, "return of CreateTrustedDomain, state S1036");
                this.Manager.Comment("reaching state \'S1192\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp59;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp59 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1348\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp59, "return of SetTrustedDomainInfo, state S1348");
                this.Manager.Comment("reaching state \'S1440\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp60;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp60 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1531\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp60, "return of DeleteTrustedDomain, state S1531");
                this.Manager.Comment("reaching state \'S1622\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S100GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S101");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S101");
        }
        
        private void TestScenarioS12For2K8S100GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S101");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S101");
        }
        
        private void TestScenarioS12For2K8S100GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S101");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S101");
        }
        #endregion
        
        #region Test Starting in S102
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S102() {
            this.Manager.BeginTest("TestScenarioS12For2K8S102");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp62;
            bool temp63;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp63 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp62);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp62, temp63);
            this.Manager.Comment("reaching state \'S103\'");
            int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S102GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S102GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S102GetSUTOSVersionChecker2)));
            if ((temp82 == 0)) {
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S413\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S569\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp64;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp65;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp65 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp64);
                this.Manager.Comment("reaching state \'S725\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp64, "policyHandle of OpenPolicy2, state S725");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp65, "return of OpenPolicy2, state S725");
                this.Manager.Comment("reaching state \'S881\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp66;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp67;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp67 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp66);
                this.Manager.Comment("reaching state \'S1037\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp66, "trustHandle of CreateTrustedDomain, state S1037");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp67, "return of CreateTrustedDomain, state S1037");
                this.Manager.Comment("reaching state \'S1193\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp68;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp68 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1349\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp68, "return of SetTrustedDomainInfo, state S1349");
                TestScenarioS12For2K8S1383();
                goto label3;
            }
            if ((temp82 == 1)) {
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S414\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S570\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp70;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp71;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp71 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp70);
                this.Manager.Comment("reaching state \'S726\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp70, "policyHandle of OpenPolicy2, state S726");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp71, "return of OpenPolicy2, state S726");
                this.Manager.Comment("reaching state \'S882\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp72;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp73;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp73 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp72);
                this.Manager.Comment("reaching state \'S1038\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp72, "trustHandle of CreateTrustedDomain, state S1038");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp73, "return of CreateTrustedDomain, state S1038");
                this.Manager.Comment("reaching state \'S1194\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp74;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp74 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1350\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp74, "return of SetTrustedDomainInfo, state S1350");
                this.Manager.Comment("reaching state \'S1441\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp75;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp75 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1532\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp75, "return of DeleteTrustedDomain, state S1532");
                this.Manager.Comment("reaching state \'S1623\'");
                goto label3;
            }
            if ((temp82 == 2)) {
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S415\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S571\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp76;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp77;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp77 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp76);
                this.Manager.Comment("reaching state \'S727\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp76, "policyHandle of OpenPolicy2, state S727");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp77, "return of OpenPolicy2, state S727");
                this.Manager.Comment("reaching state \'S883\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp78;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp79;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp79 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp78);
                this.Manager.Comment("reaching state \'S1039\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp78, "trustHandle of CreateTrustedDomain, state S1039");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp79, "return of CreateTrustedDomain, state S1039");
                this.Manager.Comment("reaching state \'S1195\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp80;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp80 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1351\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp80, "return of SetTrustedDomainInfo, state S1351");
                this.Manager.Comment("reaching state \'S1442\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp81;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp81 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1533\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp81, "return of DeleteTrustedDomain, state S1533");
                this.Manager.Comment("reaching state \'S1624\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S102GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S103");
        }
        
        private void TestScenarioS12For2K8S1383() {
            this.Manager.Comment("reaching state \'S1383\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp69;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp69 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S1474\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp69, "return of DeleteTrustedDomain, state S1474");
            this.Manager.Comment("reaching state \'S1565\'");
        }
        
        private void TestScenarioS12For2K8S102GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S103");
        }
        
        private void TestScenarioS12For2K8S102GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S103");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S103");
        }
        #endregion
        
        #region Test Starting in S12
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S12() {
            this.Manager.BeginTest("TestScenarioS12For2K8S12");
            this.Manager.Comment("reaching state \'S12\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp83;
            bool temp84;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp84 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp83);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp83, temp84);
            this.Manager.Comment("reaching state \'S13\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S12GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S12GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S12GetSUTOSVersionChecker2)));
            if ((temp101 == 0)) {
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S434\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp85;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp86;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp86 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp85);
                this.Manager.Comment("reaching state \'S590\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp85, "policyHandle of OpenPolicy2, state S590");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp86, "return of OpenPolicy2, state S590");
                this.Manager.Comment("reaching state \'S746\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp87;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp88;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp88 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp87);
                this.Manager.Comment("reaching state \'S902\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp87, "trustHandle of CreateTrustedDomain, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp88, "return of CreateTrustedDomain, state S902");
                this.Manager.Comment("reaching state \'S1058\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp89;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp89 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1214\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp89, "return of SetTrustedDomainInfo, state S1214");
                TestScenarioS12For2K8S1355();
                goto label4;
            }
            if ((temp101 == 1)) {
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S435\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp90;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp91;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp91 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp90);
                this.Manager.Comment("reaching state \'S591\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp90, "policyHandle of OpenPolicy2, state S591");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp91, "return of OpenPolicy2, state S591");
                this.Manager.Comment("reaching state \'S747\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp92;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp93;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp93 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp92);
                this.Manager.Comment("reaching state \'S903\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp92, "trustHandle of CreateTrustedDomain, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp93, "return of CreateTrustedDomain, state S903");
                this.Manager.Comment("reaching state \'S1059\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp94;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp94 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1215\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp94, "return of SetTrustedDomainInfo, state S1215");
                TestScenarioS12For2K8S1356();
                goto label4;
            }
            if ((temp101 == 2)) {
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S436\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp95;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp96;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp96 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp95);
                this.Manager.Comment("reaching state \'S592\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp95, "policyHandle of OpenPolicy2, state S592");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp96, "return of OpenPolicy2, state S592");
                this.Manager.Comment("reaching state \'S748\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp97;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp98;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp98 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp97);
                this.Manager.Comment("reaching state \'S904\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp97, "trustHandle of CreateTrustedDomain, state S904");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp98, "return of CreateTrustedDomain, state S904");
                this.Manager.Comment("reaching state \'S1060\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp99;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp99 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1216\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp99, "return of SetTrustedDomainInfo, state S1216");
                this.Manager.Comment("reaching state \'S1364\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp100;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp100 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1455\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp100, "return of DeleteTrustedDomain, state S1455");
                this.Manager.Comment("reaching state \'S1546\'");
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S12GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S13");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S13");
        }
        
        private void TestScenarioS12For2K8S12GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S13");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S13");
        }
        
        private void TestScenarioS12For2K8S12GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S13");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S13");
        }
        #endregion
        
        #region Test Starting in S14
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S14() {
            this.Manager.BeginTest("TestScenarioS12For2K8S14");
            this.Manager.Comment("reaching state \'S14\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp102;
            bool temp103;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp103 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp102);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp102, temp103);
            this.Manager.Comment("reaching state \'S15\'");
            int temp120 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S14GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S14GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S14GetSUTOSVersionChecker2)));
            if ((temp120 == 0)) {
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S437\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp104;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp105;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp105 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp104);
                this.Manager.Comment("reaching state \'S593\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp104, "policyHandle of OpenPolicy2, state S593");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp105, "return of OpenPolicy2, state S593");
                this.Manager.Comment("reaching state \'S749\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp106;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp107;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp107 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp106);
                this.Manager.Comment("reaching state \'S905\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp106, "trustHandle of CreateTrustedDomain, state S905");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp107, "return of CreateTrustedDomain, state S905");
                this.Manager.Comment("reaching state \'S1061\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp108;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp108 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1217\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/ObjectNameCollision\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameCollision, temp108, "return of SetTrustedDomainInfo, state S1217");
                TestScenarioS12For2K8S1355();
                goto label5;
            }
            if ((temp120 == 1)) {
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S438\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp109;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp110;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp110 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp109);
                this.Manager.Comment("reaching state \'S594\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp109, "policyHandle of OpenPolicy2, state S594");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp110, "return of OpenPolicy2, state S594");
                this.Manager.Comment("reaching state \'S750\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp111;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp112;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp112 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp111);
                this.Manager.Comment("reaching state \'S906\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp111, "trustHandle of CreateTrustedDomain, state S906");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp112, "return of CreateTrustedDomain, state S906");
                this.Manager.Comment("reaching state \'S1062\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp113;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp113 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1218\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/ObjectNameCollision\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameCollision, temp113, "return of SetTrustedDomainInfo, state S1218");
                TestScenarioS12For2K8S1356();
                goto label5;
            }
            if ((temp120 == 2)) {
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S439\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp114;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp115;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp115 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp114);
                this.Manager.Comment("reaching state \'S595\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp114, "policyHandle of OpenPolicy2, state S595");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp115, "return of OpenPolicy2, state S595");
                this.Manager.Comment("reaching state \'S751\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp116;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp117;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp117 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp116);
                this.Manager.Comment("reaching state \'S907\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp116, "trustHandle of CreateTrustedDomain, state S907");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp117, "return of CreateTrustedDomain, state S907");
                this.Manager.Comment("reaching state \'S1063\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp118;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp118 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1219\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp118, "return of SetTrustedDomainInfo, state S1219");
                this.Manager.Comment("reaching state \'S1365\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp119;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp119 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1456\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp119, "return of DeleteTrustedDomain, state S1456");
                this.Manager.Comment("reaching state \'S1547\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S14GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S15");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S15");
        }
        
        private void TestScenarioS12For2K8S14GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S15");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S15");
        }
        
        private void TestScenarioS12For2K8S14GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S15");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S15");
        }
        #endregion
        
        #region Test Starting in S16
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S16() {
            this.Manager.BeginTest("TestScenarioS12For2K8S16");
            this.Manager.Comment("reaching state \'S16\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp121;
            bool temp122;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp122 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp121);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp121, temp122);
            this.Manager.Comment("reaching state \'S17\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S16GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S16GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S16GetSUTOSVersionChecker2)));
            if ((temp139 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S440\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp123;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp124;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp124 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp123);
                this.Manager.Comment("reaching state \'S596\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp123, "policyHandle of OpenPolicy2, state S596");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp124, "return of OpenPolicy2, state S596");
                this.Manager.Comment("reaching state \'S752\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp125;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp126;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp126 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp125);
                this.Manager.Comment("reaching state \'S908\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp125, "trustHandle of CreateTrustedDomain, state S908");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp126, "return of CreateTrustedDomain, state S908");
                this.Manager.Comment("reaching state \'S1064\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp127;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp127 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1220\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp127, "return of SetTrustedDomainInfo, state S1220");
                TestScenarioS12For2K8S1355();
                goto label6;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S285\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S441\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp128;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp129;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp129 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp128);
                this.Manager.Comment("reaching state \'S597\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp128, "policyHandle of OpenPolicy2, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp129, "return of OpenPolicy2, state S597");
                this.Manager.Comment("reaching state \'S753\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp130;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp131;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp131 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp130);
                this.Manager.Comment("reaching state \'S909\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp130, "trustHandle of CreateTrustedDomain, state S909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp131, "return of CreateTrustedDomain, state S909");
                this.Manager.Comment("reaching state \'S1065\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp132;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp132 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1221\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp132, "return of SetTrustedDomainInfo, state S1221");
                TestScenarioS12For2K8S1356();
                goto label6;
            }
            if ((temp139 == 2)) {
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S286\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S442\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp133;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp134;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp134 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp133);
                this.Manager.Comment("reaching state \'S598\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp133, "policyHandle of OpenPolicy2, state S598");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp134, "return of OpenPolicy2, state S598");
                this.Manager.Comment("reaching state \'S754\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp135;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp136;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp136 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp135);
                this.Manager.Comment("reaching state \'S910\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp135, "trustHandle of CreateTrustedDomain, state S910");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp136, "return of CreateTrustedDomain, state S910");
                this.Manager.Comment("reaching state \'S1066\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp137;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp137 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1222\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp137, "return of SetTrustedDomainInfo, state S1222");
                this.Manager.Comment("reaching state \'S1366\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp138;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp138 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1457\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp138, "return of DeleteTrustedDomain, state S1457");
                this.Manager.Comment("reaching state \'S1548\'");
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S16GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S17");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S17");
        }
        
        private void TestScenarioS12For2K8S16GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S17");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S17");
        }
        
        private void TestScenarioS12For2K8S16GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S17");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S17");
        }
        #endregion
        
        #region Test Starting in S18
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S18() {
            this.Manager.BeginTest("TestScenarioS12For2K8S18");
            this.Manager.Comment("reaching state \'S18\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp140;
            bool temp141;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp141 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp140);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp140, temp141);
            this.Manager.Comment("reaching state \'S19\'");
            int temp158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S18GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S18GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S18GetSUTOSVersionChecker2)));
            if ((temp158 == 0)) {
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S443\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp142;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp143;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp143 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp142);
                this.Manager.Comment("reaching state \'S599\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp142, "policyHandle of OpenPolicy2, state S599");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp143, "return of OpenPolicy2, state S599");
                this.Manager.Comment("reaching state \'S755\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp144;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp145;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp145 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp144);
                this.Manager.Comment("reaching state \'S911\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp144, "trustHandle of CreateTrustedDomain, state S911");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp145, "return of CreateTrustedDomain, state S911");
                this.Manager.Comment("reaching state \'S1067\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp146;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp146 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1223\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp146, "return of SetTrustedDomainInfo, state S1223");
                TestScenarioS12For2K8S1355();
                goto label7;
            }
            if ((temp158 == 1)) {
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S444\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp147;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp148;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp148 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp147);
                this.Manager.Comment("reaching state \'S600\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp147, "policyHandle of OpenPolicy2, state S600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp148, "return of OpenPolicy2, state S600");
                this.Manager.Comment("reaching state \'S756\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp149;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp150;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp150 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp149);
                this.Manager.Comment("reaching state \'S912\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp149, "trustHandle of CreateTrustedDomain, state S912");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp150, "return of CreateTrustedDomain, state S912");
                this.Manager.Comment("reaching state \'S1068\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp151;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp151 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1224\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp151, "return of SetTrustedDomainInfo, state S1224");
                TestScenarioS12For2K8S1356();
                goto label7;
            }
            if ((temp158 == 2)) {
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S445\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp152;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp153;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp153 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp152);
                this.Manager.Comment("reaching state \'S601\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp152, "policyHandle of OpenPolicy2, state S601");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp153, "return of OpenPolicy2, state S601");
                this.Manager.Comment("reaching state \'S757\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp154;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp155;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp155 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp154);
                this.Manager.Comment("reaching state \'S913\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp154, "trustHandle of CreateTrustedDomain, state S913");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp155, "return of CreateTrustedDomain, state S913");
                this.Manager.Comment("reaching state \'S1069\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp156;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp156 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1225\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp156, "return of SetTrustedDomainInfo, state S1225");
                this.Manager.Comment("reaching state \'S1367\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp157;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp157 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1458\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp157, "return of DeleteTrustedDomain, state S1458");
                this.Manager.Comment("reaching state \'S1549\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S18GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S19");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S19");
        }
        
        private void TestScenarioS12For2K8S18GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S19");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S19");
        }
        
        private void TestScenarioS12For2K8S18GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S19");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S19");
        }
        #endregion
        
        #region Test Starting in S2
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S2() {
            this.Manager.BeginTest("TestScenarioS12For2K8S2");
            this.Manager.Comment("reaching state \'S2\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp159;
            bool temp160;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp160 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp159);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp159, temp160);
            this.Manager.Comment("reaching state \'S3\'");
            int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S2GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S2GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S2GetSUTOSVersionChecker2)));
            if ((temp177 == 0)) {
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S419\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp161;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp162;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp162 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp161);
                this.Manager.Comment("reaching state \'S575\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp161, "policyHandle of OpenPolicy2, state S575");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp162, "return of OpenPolicy2, state S575");
                this.Manager.Comment("reaching state \'S731\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp163;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp164;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp164 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp163);
                this.Manager.Comment("reaching state \'S887\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp163, "trustHandle of CreateTrustedDomain, state S887");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp164, "return of CreateTrustedDomain, state S887");
                this.Manager.Comment("reaching state \'S1043\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp165;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp165 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1199\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp165, "return of SetTrustedDomainInfo, state S1199");
                TestScenarioS12For2K8S1355();
                goto label8;
            }
            if ((temp177 == 1)) {
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S264\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S420\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp166;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp167;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp167 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp166);
                this.Manager.Comment("reaching state \'S576\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp166, "policyHandle of OpenPolicy2, state S576");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp167, "return of OpenPolicy2, state S576");
                this.Manager.Comment("reaching state \'S732\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp168;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp169;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp169 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp168);
                this.Manager.Comment("reaching state \'S888\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp168, "trustHandle of CreateTrustedDomain, state S888");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp169, "return of CreateTrustedDomain, state S888");
                this.Manager.Comment("reaching state \'S1044\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp170;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp170 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1200\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp170, "return of SetTrustedDomainInfo, state S1200");
                TestScenarioS12For2K8S1356();
                goto label8;
            }
            if ((temp177 == 2)) {
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S265\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S421\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp171;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp172;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp172 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp171);
                this.Manager.Comment("reaching state \'S577\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp171, "policyHandle of OpenPolicy2, state S577");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp172, "return of OpenPolicy2, state S577");
                this.Manager.Comment("reaching state \'S733\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp173;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp174;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp174 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp173);
                this.Manager.Comment("reaching state \'S889\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp173, "trustHandle of CreateTrustedDomain, state S889");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp174, "return of CreateTrustedDomain, state S889");
                this.Manager.Comment("reaching state \'S1045\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp175;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp175 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1201\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp175, "return of SetTrustedDomainInfo, state S1201");
                this.Manager.Comment("reaching state \'S1357\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp176;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp176 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1448\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp176, "return of DeleteTrustedDomain, state S1448");
                this.Manager.Comment("reaching state \'S1539\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S2GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S3");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S3");
        }
        
        private void TestScenarioS12For2K8S2GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S3");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S3");
        }
        
        private void TestScenarioS12For2K8S2GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S3");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S3");
        }
        #endregion
        
        #region Test Starting in S20
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S20() {
            this.Manager.BeginTest("TestScenarioS12For2K8S20");
            this.Manager.Comment("reaching state \'S20\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp178;
            bool temp179;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp179 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp178);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp178, temp179);
            this.Manager.Comment("reaching state \'S21\'");
            int temp196 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S20GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S20GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S20GetSUTOSVersionChecker2)));
            if ((temp196 == 0)) {
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S446\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp180;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp181;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp181 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp180);
                this.Manager.Comment("reaching state \'S602\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp180, "policyHandle of OpenPolicy2, state S602");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp181, "return of OpenPolicy2, state S602");
                this.Manager.Comment("reaching state \'S758\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp182;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp183;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp183 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp182);
                this.Manager.Comment("reaching state \'S914\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp182, "trustHandle of CreateTrustedDomain, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp183, "return of CreateTrustedDomain, state S914");
                this.Manager.Comment("reaching state \'S1070\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp184;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp184 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1226\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp184, "return of SetTrustedDomainInfo, state S1226");
                TestScenarioS12For2K8S1354();
                goto label9;
            }
            if ((temp196 == 1)) {
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S447\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp185;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp186;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp186 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp185);
                this.Manager.Comment("reaching state \'S603\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp185, "policyHandle of OpenPolicy2, state S603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp186, "return of OpenPolicy2, state S603");
                this.Manager.Comment("reaching state \'S759\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp187;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp188;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp188 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp187);
                this.Manager.Comment("reaching state \'S915\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp187, "trustHandle of CreateTrustedDomain, state S915");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp188, "return of CreateTrustedDomain, state S915");
                this.Manager.Comment("reaching state \'S1071\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp189;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp189 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1227\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp189, "return of SetTrustedDomainInfo, state S1227");
                TestScenarioS12For2K8S1353();
                goto label9;
            }
            if ((temp196 == 2)) {
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S448\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp190;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp191;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp191 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp190);
                this.Manager.Comment("reaching state \'S604\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp190, "policyHandle of OpenPolicy2, state S604");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp191, "return of OpenPolicy2, state S604");
                this.Manager.Comment("reaching state \'S760\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp192;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp193;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp193 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp192);
                this.Manager.Comment("reaching state \'S916\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp192, "trustHandle of CreateTrustedDomain, state S916");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp193, "return of CreateTrustedDomain, state S916");
                this.Manager.Comment("reaching state \'S1072\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp194;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp194 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1228\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp194, "return of SetTrustedDomainInfo, state S1228");
                this.Manager.Comment("reaching state \'S1368\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp195;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp195 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1459\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp195, "return of DeleteTrustedDomain, state S1459");
                this.Manager.Comment("reaching state \'S1550\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S20GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S21");
        }
        
        private void TestScenarioS12For2K8S20GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S21");
        }
        
        private void TestScenarioS12For2K8S20GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S21");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S21");
        }
        #endregion
        
        #region Test Starting in S22
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S22() {
            this.Manager.BeginTest("TestScenarioS12For2K8S22");
            this.Manager.Comment("reaching state \'S22\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp197;
            bool temp198;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp198 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp197);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp197, temp198);
            this.Manager.Comment("reaching state \'S23\'");
            int temp217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S22GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S22GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S22GetSUTOSVersionChecker2)));
            if ((temp217 == 0)) {
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S449\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp199;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp200;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp200 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp199);
                this.Manager.Comment("reaching state \'S605\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp199, "policyHandle of OpenPolicy2, state S605");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp200, "return of OpenPolicy2, state S605");
                this.Manager.Comment("reaching state \'S761\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp201;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp202;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp202 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp201);
                this.Manager.Comment("reaching state \'S917\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp201, "trustHandle of CreateTrustedDomain, state S917");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp202, "return of CreateTrustedDomain, state S917");
                this.Manager.Comment("reaching state \'S1073\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp203;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp203 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1229\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp203, "return of SetTrustedDomainInfo, state S1229");
                this.Manager.Comment("reaching state \'S1369\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp204;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp204 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1460\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/AccessDenied\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.AccessDenied, temp204, "return of DeleteTrustedDomain, state S1460");
                this.Manager.Comment("reaching state \'S1551\'");
                goto label10;
            }
            if ((temp217 == 1)) {
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S450\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp205;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp206;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp206 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp205);
                this.Manager.Comment("reaching state \'S606\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp205, "policyHandle of OpenPolicy2, state S606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp206, "return of OpenPolicy2, state S606");
                this.Manager.Comment("reaching state \'S762\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp207;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp208;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp208 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp207);
                this.Manager.Comment("reaching state \'S918\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp207, "trustHandle of CreateTrustedDomain, state S918");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp208, "return of CreateTrustedDomain, state S918");
                this.Manager.Comment("reaching state \'S1074\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp209;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp209 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1230\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp209, "return of SetTrustedDomainInfo, state S1230");
                this.Manager.Comment("reaching state \'S1370\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp210;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp210 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1461\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/AccessDenied\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.AccessDenied, temp210, "return of DeleteTrustedDomain, state S1461");
                this.Manager.Comment("reaching state \'S1552\'");
                goto label10;
            }
            if ((temp217 == 2)) {
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S451\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp211;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp212;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp212 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp211);
                this.Manager.Comment("reaching state \'S607\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp211, "policyHandle of OpenPolicy2, state S607");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp212, "return of OpenPolicy2, state S607");
                this.Manager.Comment("reaching state \'S763\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp213;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp214;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp214 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp213);
                this.Manager.Comment("reaching state \'S919\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp213, "trustHandle of CreateTrustedDomain, state S919");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp214, "return of CreateTrustedDomain, state S919");
                this.Manager.Comment("reaching state \'S1075\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp215;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp215 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1231\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp215, "return of SetTrustedDomainInfo, state S1231");
                this.Manager.Comment("reaching state \'S1371\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp216;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp216 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1462\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp216, "return of DeleteTrustedDomain, state S1462");
                this.Manager.Comment("reaching state \'S1553\'");
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S22GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S23");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S23");
        }
        
        private void TestScenarioS12For2K8S22GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S23");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S23");
        }
        
        private void TestScenarioS12For2K8S22GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S23");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S23");
        }
        #endregion
        
        #region Test Starting in S24
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S24() {
            this.Manager.BeginTest("TestScenarioS12For2K8S24");
            this.Manager.Comment("reaching state \'S24\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp218;
            bool temp219;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp219 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp218);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp218, temp219);
            this.Manager.Comment("reaching state \'S25\'");
            int temp236 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S24GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S24GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S24GetSUTOSVersionChecker2)));
            if ((temp236 == 0)) {
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S452\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp220;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp221;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp221 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp220);
                this.Manager.Comment("reaching state \'S608\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp220, "policyHandle of OpenPolicy2, state S608");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp221, "return of OpenPolicy2, state S608");
                this.Manager.Comment("reaching state \'S764\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp222;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp223;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp223 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp222);
                this.Manager.Comment("reaching state \'S920\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp222, "trustHandle of CreateTrustedDomain, state S920");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp223, "return of CreateTrustedDomain, state S920");
                this.Manager.Comment("reaching state \'S1076\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp224;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp224 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1232\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp224, "return of SetTrustedDomainInfo, state S1232");
                TestScenarioS12For2K8S1354();
                goto label11;
            }
            if ((temp236 == 1)) {
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S453\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp225;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp226;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp226 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp225);
                this.Manager.Comment("reaching state \'S609\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp225, "policyHandle of OpenPolicy2, state S609");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp226, "return of OpenPolicy2, state S609");
                this.Manager.Comment("reaching state \'S765\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp227;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp228;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp228 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp227);
                this.Manager.Comment("reaching state \'S921\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp227, "trustHandle of CreateTrustedDomain, state S921");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp228, "return of CreateTrustedDomain, state S921");
                this.Manager.Comment("reaching state \'S1077\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp229;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp229 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1233\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp229, "return of SetTrustedDomainInfo, state S1233");
                TestScenarioS12For2K8S1353();
                goto label11;
            }
            if ((temp236 == 2)) {
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S454\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp230;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp231;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp231 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp230);
                this.Manager.Comment("reaching state \'S610\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp230, "policyHandle of OpenPolicy2, state S610");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp231, "return of OpenPolicy2, state S610");
                this.Manager.Comment("reaching state \'S766\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp232;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp233;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp233 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp232);
                this.Manager.Comment("reaching state \'S922\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp232, "trustHandle of CreateTrustedDomain, state S922");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp233, "return of CreateTrustedDomain, state S922");
                this.Manager.Comment("reaching state \'S1078\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp234;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp234 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1234\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp234, "return of SetTrustedDomainInfo, state S1234");
                this.Manager.Comment("reaching state \'S1372\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp235;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp235 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1463\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp235, "return of DeleteTrustedDomain, state S1463");
                this.Manager.Comment("reaching state \'S1554\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S24GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S25");
        }
        
        private void TestScenarioS12For2K8S24GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S25");
        }
        
        private void TestScenarioS12For2K8S24GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S25");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S25");
        }
        #endregion
        
        #region Test Starting in S26
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S26() {
            this.Manager.BeginTest("TestScenarioS12For2K8S26");
            this.Manager.Comment("reaching state \'S26\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp237;
            bool temp238;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp238 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp237);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp237, temp238);
            this.Manager.Comment("reaching state \'S27\'");
            int temp255 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S26GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S26GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S26GetSUTOSVersionChecker2)));
            if ((temp255 == 0)) {
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S455\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp239;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp240;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp240 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp239);
                this.Manager.Comment("reaching state \'S611\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp239, "policyHandle of OpenPolicy2, state S611");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp240, "return of OpenPolicy2, state S611");
                this.Manager.Comment("reaching state \'S767\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp241;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp242;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp242 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp241);
                this.Manager.Comment("reaching state \'S923\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp241, "trustHandle of CreateTrustedDomain, state S923");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp242, "return of CreateTrustedDomain, state S923");
                this.Manager.Comment("reaching state \'S1079\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp243;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp243 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1235\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp243, "return of SetTrustedDomainInfo, state S1235");
                TestScenarioS12For2K8S1354();
                goto label12;
            }
            if ((temp255 == 1)) {
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S456\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp244;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp245;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp245 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp244);
                this.Manager.Comment("reaching state \'S612\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp244, "policyHandle of OpenPolicy2, state S612");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp245, "return of OpenPolicy2, state S612");
                this.Manager.Comment("reaching state \'S768\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp246;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp247;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp247 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp246);
                this.Manager.Comment("reaching state \'S924\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp246, "trustHandle of CreateTrustedDomain, state S924");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp247, "return of CreateTrustedDomain, state S924");
                this.Manager.Comment("reaching state \'S1080\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp248;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp248 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1236\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp248, "return of SetTrustedDomainInfo, state S1236");
                TestScenarioS12For2K8S1353();
                goto label12;
            }
            if ((temp255 == 2)) {
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S457\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp249;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp250;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp250 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp249);
                this.Manager.Comment("reaching state \'S613\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp249, "policyHandle of OpenPolicy2, state S613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp250, "return of OpenPolicy2, state S613");
                this.Manager.Comment("reaching state \'S769\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp251;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp252;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp252 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp251);
                this.Manager.Comment("reaching state \'S925\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp251, "trustHandle of CreateTrustedDomain, state S925");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp252, "return of CreateTrustedDomain, state S925");
                this.Manager.Comment("reaching state \'S1081\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp253;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp253 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1237\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp253, "return of SetTrustedDomainInfo, state S1237");
                this.Manager.Comment("reaching state \'S1373\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp254;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp254 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1464\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp254, "return of DeleteTrustedDomain, state S1464");
                this.Manager.Comment("reaching state \'S1555\'");
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S26GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S27");
        }
        
        private void TestScenarioS12For2K8S26GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S27");
        }
        
        private void TestScenarioS12For2K8S26GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S27");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S27");
        }
        #endregion
        
        #region Test Starting in S28
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S28() {
            this.Manager.BeginTest("TestScenarioS12For2K8S28");
            this.Manager.Comment("reaching state \'S28\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp256;
            bool temp257;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp257 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp256);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp256, temp257);
            this.Manager.Comment("reaching state \'S29\'");
            int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S28GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S28GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S28GetSUTOSVersionChecker2)));
            if ((temp274 == 0)) {
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S458\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp258;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp259;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp259 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp258);
                this.Manager.Comment("reaching state \'S614\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp258, "policyHandle of OpenPolicy2, state S614");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp259, "return of OpenPolicy2, state S614");
                this.Manager.Comment("reaching state \'S770\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp260;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp261;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp261 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp260);
                this.Manager.Comment("reaching state \'S926\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp260, "trustHandle of CreateTrustedDomain, state S926");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp261, "return of CreateTrustedDomain, state S926");
                this.Manager.Comment("reaching state \'S1082\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp262;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp262 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1238\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp262, "return of SetTrustedDomainInfo, state S1238");
                TestScenarioS12For2K8S1354();
                goto label13;
            }
            if ((temp274 == 1)) {
                this.Manager.Comment("reaching state \'S147\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S459\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp263;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp264;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp264 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp263);
                this.Manager.Comment("reaching state \'S615\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp263, "policyHandle of OpenPolicy2, state S615");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp264, "return of OpenPolicy2, state S615");
                this.Manager.Comment("reaching state \'S771\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp265;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp266;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp266 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp265);
                this.Manager.Comment("reaching state \'S927\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp265, "trustHandle of CreateTrustedDomain, state S927");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp266, "return of CreateTrustedDomain, state S927");
                this.Manager.Comment("reaching state \'S1083\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp267;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp267 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1239\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp267, "return of SetTrustedDomainInfo, state S1239");
                TestScenarioS12For2K8S1353();
                goto label13;
            }
            if ((temp274 == 2)) {
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S460\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp268;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp269;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp269 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp268);
                this.Manager.Comment("reaching state \'S616\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp268, "policyHandle of OpenPolicy2, state S616");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp269, "return of OpenPolicy2, state S616");
                this.Manager.Comment("reaching state \'S772\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp270;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp271;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp271 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp270);
                this.Manager.Comment("reaching state \'S928\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp270, "trustHandle of CreateTrustedDomain, state S928");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp271, "return of CreateTrustedDomain, state S928");
                this.Manager.Comment("reaching state \'S1084\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp272;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp272 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1240\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp272, "return of SetTrustedDomainInfo, state S1240");
                this.Manager.Comment("reaching state \'S1374\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp273;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp273 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1465\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp273, "return of DeleteTrustedDomain, state S1465");
                this.Manager.Comment("reaching state \'S1556\'");
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S28GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S29");
        }
        
        private void TestScenarioS12For2K8S28GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S29");
        }
        
        private void TestScenarioS12For2K8S28GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S29");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S29");
        }
        #endregion
        
        #region Test Starting in S30
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S30() {
            this.Manager.BeginTest("TestScenarioS12For2K8S30");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp275;
            bool temp276;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp276 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp275);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp275, temp276);
            this.Manager.Comment("reaching state \'S31\'");
            int temp293 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S30GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S30GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S30GetSUTOSVersionChecker2)));
            if ((temp293 == 0)) {
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S461\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp277;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp278;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp278 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp277);
                this.Manager.Comment("reaching state \'S617\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp277, "policyHandle of OpenPolicy2, state S617");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp278, "return of OpenPolicy2, state S617");
                this.Manager.Comment("reaching state \'S773\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp279;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp280;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp280 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp279);
                this.Manager.Comment("reaching state \'S929\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp279, "trustHandle of CreateTrustedDomain, state S929");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp280, "return of CreateTrustedDomain, state S929");
                this.Manager.Comment("reaching state \'S1085\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp281;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp281 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1241\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp281, "return of SetTrustedDomainInfo, state S1241");
                TestScenarioS12For2K8S1354();
                goto label14;
            }
            if ((temp293 == 1)) {
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S462\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp282;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp283;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp283 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp282);
                this.Manager.Comment("reaching state \'S618\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp282, "policyHandle of OpenPolicy2, state S618");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp283, "return of OpenPolicy2, state S618");
                this.Manager.Comment("reaching state \'S774\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp284;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp285;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp285 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp284);
                this.Manager.Comment("reaching state \'S930\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp284, "trustHandle of CreateTrustedDomain, state S930");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp285, "return of CreateTrustedDomain, state S930");
                this.Manager.Comment("reaching state \'S1086\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp286;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp286 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1242\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp286, "return of SetTrustedDomainInfo, state S1242");
                TestScenarioS12For2K8S1353();
                goto label14;
            }
            if ((temp293 == 2)) {
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S307\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S463\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp287;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp288;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp288 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp287);
                this.Manager.Comment("reaching state \'S619\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp287, "policyHandle of OpenPolicy2, state S619");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp288, "return of OpenPolicy2, state S619");
                this.Manager.Comment("reaching state \'S775\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp289;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp290;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp290 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp289);
                this.Manager.Comment("reaching state \'S931\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp289, "trustHandle of CreateTrustedDomain, state S931");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp290, "return of CreateTrustedDomain, state S931");
                this.Manager.Comment("reaching state \'S1087\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp291;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp291 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1243\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp291, "return of SetTrustedDomainInfo, state S1243");
                this.Manager.Comment("reaching state \'S1375\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp292;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp292 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1466\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp292, "return of DeleteTrustedDomain, state S1466");
                this.Manager.Comment("reaching state \'S1557\'");
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S30GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S31");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S31");
        }
        
        private void TestScenarioS12For2K8S30GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S31");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S31");
        }
        
        private void TestScenarioS12For2K8S30GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S31");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S31");
        }
        #endregion
        
        #region Test Starting in S32
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S32() {
            this.Manager.BeginTest("TestScenarioS12For2K8S32");
            this.Manager.Comment("reaching state \'S32\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp294;
            bool temp295;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp295 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp294);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp294, temp295);
            this.Manager.Comment("reaching state \'S33\'");
            int temp312 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S32GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S32GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S32GetSUTOSVersionChecker2)));
            if ((temp312 == 0)) {
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S308\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S464\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp296;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp297;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp297 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp296);
                this.Manager.Comment("reaching state \'S620\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp296, "policyHandle of OpenPolicy2, state S620");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp297, "return of OpenPolicy2, state S620");
                this.Manager.Comment("reaching state \'S776\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp298;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp299;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp299 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp298);
                this.Manager.Comment("reaching state \'S932\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp298, "trustHandle of CreateTrustedDomain, state S932");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp299, "return of CreateTrustedDomain, state S932");
                this.Manager.Comment("reaching state \'S1088\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp300;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp300 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1244\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp300, "return of SetTrustedDomainInfo, state S1244");
                TestScenarioS12For2K8S1354();
                goto label15;
            }
            if ((temp312 == 1)) {
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S465\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp301;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp302;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp302 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp301);
                this.Manager.Comment("reaching state \'S621\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp301, "policyHandle of OpenPolicy2, state S621");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp302, "return of OpenPolicy2, state S621");
                this.Manager.Comment("reaching state \'S777\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp303;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp304;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp304 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp303);
                this.Manager.Comment("reaching state \'S933\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp303, "trustHandle of CreateTrustedDomain, state S933");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp304, "return of CreateTrustedDomain, state S933");
                this.Manager.Comment("reaching state \'S1089\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp305;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp305 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1245\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp305, "return of SetTrustedDomainInfo, state S1245");
                TestScenarioS12For2K8S1353();
                goto label15;
            }
            if ((temp312 == 2)) {
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S466\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp306;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp307;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp307 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp306);
                this.Manager.Comment("reaching state \'S622\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp306, "policyHandle of OpenPolicy2, state S622");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp307, "return of OpenPolicy2, state S622");
                this.Manager.Comment("reaching state \'S778\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp308;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp309;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp309 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp308);
                this.Manager.Comment("reaching state \'S934\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp308, "trustHandle of CreateTrustedDomain, state S934");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp309, "return of CreateTrustedDomain, state S934");
                this.Manager.Comment("reaching state \'S1090\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp310;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp310 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1246\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp310, "return of SetTrustedDomainInfo, state S1246");
                this.Manager.Comment("reaching state \'S1376\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp311;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp311 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1467\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp311, "return of DeleteTrustedDomain, state S1467");
                this.Manager.Comment("reaching state \'S1558\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S32GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S33");
        }
        
        private void TestScenarioS12For2K8S32GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S33");
        }
        
        private void TestScenarioS12For2K8S32GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S33");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S33");
        }
        #endregion
        
        #region Test Starting in S34
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S34() {
            this.Manager.BeginTest("TestScenarioS12For2K8S34");
            this.Manager.Comment("reaching state \'S34\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp313;
            bool temp314;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp314 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp313);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp313, temp314);
            this.Manager.Comment("reaching state \'S35\'");
            int temp331 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S34GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S34GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S34GetSUTOSVersionChecker2)));
            if ((temp331 == 0)) {
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S467\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp315;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp316;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp316 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp315);
                this.Manager.Comment("reaching state \'S623\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp315, "policyHandle of OpenPolicy2, state S623");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp316, "return of OpenPolicy2, state S623");
                this.Manager.Comment("reaching state \'S779\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp317;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp318;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp318 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp317);
                this.Manager.Comment("reaching state \'S935\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp317, "trustHandle of CreateTrustedDomain, state S935");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp318, "return of CreateTrustedDomain, state S935");
                this.Manager.Comment("reaching state \'S1091\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp319;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp319 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1247\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/NoSuchDomain\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp319, "return of SetTrustedDomainInfo, state S1247");
                TestScenarioS12For2K8S1354();
                goto label16;
            }
            if ((temp331 == 1)) {
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S468\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp320;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp321;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp321 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp320);
                this.Manager.Comment("reaching state \'S624\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp320, "policyHandle of OpenPolicy2, state S624");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp321, "return of OpenPolicy2, state S624");
                this.Manager.Comment("reaching state \'S780\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp322;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp323;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp323 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp322);
                this.Manager.Comment("reaching state \'S936\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp322, "trustHandle of CreateTrustedDomain, state S936");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp323, "return of CreateTrustedDomain, state S936");
                this.Manager.Comment("reaching state \'S1092\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp324;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp324 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1248\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/NoSuchDomain\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp324, "return of SetTrustedDomainInfo, state S1248");
                TestScenarioS12For2K8S1353();
                goto label16;
            }
            if ((temp331 == 2)) {
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S313\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S469\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp325;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp326;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp326 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp325);
                this.Manager.Comment("reaching state \'S625\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp325, "policyHandle of OpenPolicy2, state S625");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp326, "return of OpenPolicy2, state S625");
                this.Manager.Comment("reaching state \'S781\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp327;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp328;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp328 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp327);
                this.Manager.Comment("reaching state \'S937\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp327, "trustHandle of CreateTrustedDomain, state S937");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp328, "return of CreateTrustedDomain, state S937");
                this.Manager.Comment("reaching state \'S1093\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp329;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp329 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1249\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp329, "return of SetTrustedDomainInfo, state S1249");
                this.Manager.Comment("reaching state \'S1377\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp330;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp330 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1468\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp330, "return of DeleteTrustedDomain, state S1468");
                this.Manager.Comment("reaching state \'S1559\'");
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S34GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S35");
        }
        
        private void TestScenarioS12For2K8S34GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S35");
        }
        
        private void TestScenarioS12For2K8S34GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S35");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S35");
        }
        #endregion
        
        #region Test Starting in S36
        //[TestCategory("PDC")]
        //[TestCategory("DomainWin2008R2")]
        //[TestCategory("ForestWin2008R2")]
        //[TestCategory("MS-LSAD")]
        //[Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        // Does not support PDCOSVersion >= Win2k8r2
        public void LSAD_TestScenarioS12For2K8S36() {
            this.Manager.BeginTest("TestScenarioS12For2K8S36");
            this.Manager.Comment("reaching state \'S36\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp332;
            bool temp333;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp333 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp332);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp332, temp333);
            this.Manager.Comment("reaching state \'S37\'");
            int temp350 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S36GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S36GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S36GetSUTOSVersionChecker2)));
            if ((temp350 == 0)) {
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S470\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp334;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp335;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp335 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp334);
                this.Manager.Comment("reaching state \'S626\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp334, "policyHandle of OpenPolicy2, state S626");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp335, "return of OpenPolicy2, state S626");
                this.Manager.Comment("reaching state \'S782\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp336;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp337;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp337 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp336);
                this.Manager.Comment("reaching state \'S938\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp336, "trustHandle of CreateTrustedDomain, state S938");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp337, "return of CreateTrustedDomain, state S938");
                this.Manager.Comment("reaching state \'S1094\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp338;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp338 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1250\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/NoSuchDomain\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp338, "return of SetTrustedDomainInfo, state S1250");
                TestScenarioS12For2K8S1354();
                goto label17;
            }
            if ((temp350 == 1)) {
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S471\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp339;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp340;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp340 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp339);
                this.Manager.Comment("reaching state \'S627\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp339, "policyHandle of OpenPolicy2, state S627");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp340, "return of OpenPolicy2, state S627");
                this.Manager.Comment("reaching state \'S783\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp341;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp342;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp342 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp341);
                this.Manager.Comment("reaching state \'S939\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp341, "trustHandle of CreateTrustedDomain, state S939");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp342, "return of CreateTrustedDomain, state S939");
                this.Manager.Comment("reaching state \'S1095\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp343;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp343 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1251\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/NoSuchDomain\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp343, "return of SetTrustedDomainInfo, state S1251");
                TestScenarioS12For2K8S1353();
                goto label17;
            }
            if ((temp350 == 2)) {
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S472\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp344;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp345;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp345 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp344);
                this.Manager.Comment("reaching state \'S628\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp344, "policyHandle of OpenPolicy2, state S628");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp345, "return of OpenPolicy2, state S628");
                this.Manager.Comment("reaching state \'S784\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp346;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp347;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp347 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp346);
                this.Manager.Comment("reaching state \'S940\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp346, "trustHandle of CreateTrustedDomain, state S940");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp347, "return of CreateTrustedDomain, state S940");
                this.Manager.Comment("reaching state \'S1096\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp348;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp348 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1252\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp348, "return of SetTrustedDomainInfo, state S1252");
                this.Manager.Comment("reaching state \'S1378\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp349;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp349 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1469\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp349, "return of DeleteTrustedDomain, state S1469");
                this.Manager.Comment("reaching state \'S1560\'");
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S36GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S37");
        }
        
        private void TestScenarioS12For2K8S36GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S37");
        }
        
        private void TestScenarioS12For2K8S36GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S37");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S37");
        }
        #endregion
        
        #region Test Starting in S38
        //[TestCategory("PDC")]
        //[TestCategory("DomainWin2008R2")]
        //[TestCategory("ForestWin2008R2")]
        //[TestCategory("MS-LSAD")]
        //[Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S38() {
            this.Manager.BeginTest("TestScenarioS12For2K8S38");
            this.Manager.Comment("reaching state \'S38\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp351;
            bool temp352;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp352 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp351);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp351, temp352);
            this.Manager.Comment("reaching state \'S39\'");
            int temp369 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S38GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S38GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S38GetSUTOSVersionChecker2)));
            if ((temp369 == 0)) {
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S473\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp353;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp354;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp354 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp353);
                this.Manager.Comment("reaching state \'S629\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp353, "policyHandle of OpenPolicy2, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp354, "return of OpenPolicy2, state S629");
                this.Manager.Comment("reaching state \'S785\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp355;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp356;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp356 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp355);
                this.Manager.Comment("reaching state \'S941\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp355, "trustHandle of CreateTrustedDomain, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp356, "return of CreateTrustedDomain, state S941");
                this.Manager.Comment("reaching state \'S1097\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp357;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp357 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1253\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/NoSuchDomain\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp357, "return of SetTrustedDomainInfo, state S1253");
                TestScenarioS12For2K8S1354();
                goto label18;
            }
            if ((temp369 == 1)) {
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S474\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp358;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp359;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp359 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp358);
                this.Manager.Comment("reaching state \'S630\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp358, "policyHandle of OpenPolicy2, state S630");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp359, "return of OpenPolicy2, state S630");
                this.Manager.Comment("reaching state \'S786\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp360;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp361;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp361 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp360);
                this.Manager.Comment("reaching state \'S942\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp360, "trustHandle of CreateTrustedDomain, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp361, "return of CreateTrustedDomain, state S942");
                this.Manager.Comment("reaching state \'S1098\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp362;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp362 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1254\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/NoSuchDomain\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp362, "return of SetTrustedDomainInfo, state S1254");
                TestScenarioS12For2K8S1353();
                goto label18;
            }
            if ((temp369 == 2)) {
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S475\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp363;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp364;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp364 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp363);
                this.Manager.Comment("reaching state \'S631\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp363, "policyHandle of OpenPolicy2, state S631");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp364, "return of OpenPolicy2, state S631");
                this.Manager.Comment("reaching state \'S787\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp365;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp366;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp366 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp365);
                this.Manager.Comment("reaching state \'S943\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp365, "trustHandle of CreateTrustedDomain, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp366, "return of CreateTrustedDomain, state S943");
                this.Manager.Comment("reaching state \'S1099\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp367;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp367 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1255\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp367, "return of SetTrustedDomainInfo, state S1255");
                this.Manager.Comment("reaching state \'S1379\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp368;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp368 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1470\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp368, "return of DeleteTrustedDomain, state S1470");
                this.Manager.Comment("reaching state \'S1561\'");
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S38GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S39");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S39");
        }
        
        private void TestScenarioS12For2K8S38GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S39");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S39");
        }
        
        private void TestScenarioS12For2K8S38GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S39");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S39");
        }
        #endregion
        
        #region Test Starting in S4
        //[TestCategory("PDC")]
        //[TestCategory("DomainWin2008R2")]
        //[TestCategory("ForestWin2008R2")]
        //[TestCategory("MS-LSAD")]
        //[Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S4() {
            this.Manager.BeginTest("TestScenarioS12For2K8S4");
            this.Manager.Comment("reaching state \'S4\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp370;
            bool temp371;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp371 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp370);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp370, temp371);
            this.Manager.Comment("reaching state \'S5\'");
            int temp390 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S4GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S4GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S4GetSUTOSVersionChecker2)));
            if ((temp390 == 0)) {
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S266\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S422\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp372;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp373;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp373 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp372);
                this.Manager.Comment("reaching state \'S578\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp372, "policyHandle of OpenPolicy2, state S578");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp373, "return of OpenPolicy2, state S578");
                this.Manager.Comment("reaching state \'S734\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp374;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp375;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp375 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp374);
                this.Manager.Comment("reaching state \'S890\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp374, "trustHandle of CreateTrustedDomain, state S890");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp375, "return of CreateTrustedDomain, state S890");
                this.Manager.Comment("reaching state \'S1046\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp376;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp376 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1202\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp376, "return of SetTrustedDomainInfo, state S1202");
                this.Manager.Comment("reaching state \'S1358\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp377;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp377 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1449\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp377, "return of DeleteTrustedDomain, state S1449");
                this.Manager.Comment("reaching state \'S1540\'");
                goto label19;
            }
            if ((temp390 == 1)) {
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S423\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp378;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp379;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp379 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp378);
                this.Manager.Comment("reaching state \'S579\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp378, "policyHandle of OpenPolicy2, state S579");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp379, "return of OpenPolicy2, state S579");
                this.Manager.Comment("reaching state \'S735\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp380;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp381;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp381 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp380);
                this.Manager.Comment("reaching state \'S891\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp380, "trustHandle of CreateTrustedDomain, state S891");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp381, "return of CreateTrustedDomain, state S891");
                this.Manager.Comment("reaching state \'S1047\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp382;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp382 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1203\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp382, "return of SetTrustedDomainInfo, state S1203");
                this.Manager.Comment("reaching state \'S1359\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp383;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp383 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1450\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp383, "return of DeleteTrustedDomain, state S1450");
                this.Manager.Comment("reaching state \'S1541\'");
                goto label19;
            }
            if ((temp390 == 2)) {
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S424\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp384;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp385;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp385 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp384);
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp384, "policyHandle of OpenPolicy2, state S580");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp385, "return of OpenPolicy2, state S580");
                this.Manager.Comment("reaching state \'S736\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp386;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp387;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp387 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp386);
                this.Manager.Comment("reaching state \'S892\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp386, "trustHandle of CreateTrustedDomain, state S892");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp387, "return of CreateTrustedDomain, state S892");
                this.Manager.Comment("reaching state \'S1048\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp388;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp388 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1204\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp388, "return of SetTrustedDomainInfo, state S1204");
                this.Manager.Comment("reaching state \'S1360\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp389;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp389 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1451\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp389, "return of DeleteTrustedDomain, state S1451");
                this.Manager.Comment("reaching state \'S1542\'");
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S4GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S5");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S5");
        }
        
        private void TestScenarioS12For2K8S4GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S5");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S5");
        }
        
        private void TestScenarioS12For2K8S4GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S5");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S5");
        }
        #endregion
        
        #region Test Starting in S40
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S40() {
            this.Manager.BeginTest("TestScenarioS12For2K8S40");
            this.Manager.Comment("reaching state \'S40\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp391;
            bool temp392;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp392 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp391);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp391, temp392);
            this.Manager.Comment("reaching state \'S41\'");
            int temp409 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S40GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S40GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S40GetSUTOSVersionChecker2)));
            if ((temp409 == 0)) {
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S476\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp393;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp394;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp394 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp393);
                this.Manager.Comment("reaching state \'S632\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp393, "policyHandle of OpenPolicy2, state S632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp394, "return of OpenPolicy2, state S632");
                this.Manager.Comment("reaching state \'S788\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp395;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp396;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp396 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp395);
                this.Manager.Comment("reaching state \'S944\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp395, "trustHandle of CreateTrustedDomain, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp396, "return of CreateTrustedDomain, state S944");
                this.Manager.Comment("reaching state \'S1100\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp397;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp397 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1256\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp397, "return of SetTrustedDomainInfo, state S1256");
                TestScenarioS12For2K8S1354();
                goto label20;
            }
            if ((temp409 == 1)) {
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S477\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp398;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp399;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp399 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp398);
                this.Manager.Comment("reaching state \'S633\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp398, "policyHandle of OpenPolicy2, state S633");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp399, "return of OpenPolicy2, state S633");
                this.Manager.Comment("reaching state \'S789\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp400;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp401;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp401 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp400);
                this.Manager.Comment("reaching state \'S945\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp400, "trustHandle of CreateTrustedDomain, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp401, "return of CreateTrustedDomain, state S945");
                this.Manager.Comment("reaching state \'S1101\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp402;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp402 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1257\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp402, "return of SetTrustedDomainInfo, state S1257");
                TestScenarioS12For2K8S1353();
                goto label20;
            }
            if ((temp409 == 2)) {
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S478\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp403;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp404;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp404 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp403);
                this.Manager.Comment("reaching state \'S634\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp403, "policyHandle of OpenPolicy2, state S634");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp404, "return of OpenPolicy2, state S634");
                this.Manager.Comment("reaching state \'S790\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp405;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp406;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp406 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp405);
                this.Manager.Comment("reaching state \'S946\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp405, "trustHandle of CreateTrustedDomain, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp406, "return of CreateTrustedDomain, state S946");
                this.Manager.Comment("reaching state \'S1102\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp407;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp407 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1258\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp407, "return of SetTrustedDomainInfo, state S1258");
                this.Manager.Comment("reaching state \'S1380\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp408;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp408 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1471\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp408, "return of DeleteTrustedDomain, state S1471");
                this.Manager.Comment("reaching state \'S1562\'");
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S40GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S41");
        }
        
        private void TestScenarioS12For2K8S40GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S41");
        }
        
        private void TestScenarioS12For2K8S40GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S41");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S41");
        }
        #endregion
        
        #region Test Starting in S42
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S42() {
            this.Manager.BeginTest("TestScenarioS12For2K8S42");
            this.Manager.Comment("reaching state \'S42\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp410;
            bool temp411;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp411 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp410);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp410, temp411);
            this.Manager.Comment("reaching state \'S43\'");
            int temp428 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S42GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S42GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S42GetSUTOSVersionChecker2)));
            if ((temp428 == 0)) {
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S323\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S479\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp412;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp413;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp413 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp412);
                this.Manager.Comment("reaching state \'S635\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp412, "policyHandle of OpenPolicy2, state S635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp413, "return of OpenPolicy2, state S635");
                this.Manager.Comment("reaching state \'S791\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp414;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp415;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp415 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp414);
                this.Manager.Comment("reaching state \'S947\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp414, "trustHandle of CreateTrustedDomain, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp415, "return of CreateTrustedDomain, state S947");
                this.Manager.Comment("reaching state \'S1103\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp416;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp416 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1259\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp416, "return of SetTrustedDomainInfo, state S1259");
                TestScenarioS12For2K8S1354();
                goto label21;
            }
            if ((temp428 == 1)) {
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S324\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S480\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp417;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp418;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp418 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp417);
                this.Manager.Comment("reaching state \'S636\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp417, "policyHandle of OpenPolicy2, state S636");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp418, "return of OpenPolicy2, state S636");
                this.Manager.Comment("reaching state \'S792\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp419;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp420;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp420 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp419);
                this.Manager.Comment("reaching state \'S948\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp419, "trustHandle of CreateTrustedDomain, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp420, "return of CreateTrustedDomain, state S948");
                this.Manager.Comment("reaching state \'S1104\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp421;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp421 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1260\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp421, "return of SetTrustedDomainInfo, state S1260");
                TestScenarioS12For2K8S1353();
                goto label21;
            }
            if ((temp428 == 2)) {
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S325\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S481\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp422;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp423;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp423 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp422);
                this.Manager.Comment("reaching state \'S637\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp422, "policyHandle of OpenPolicy2, state S637");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp423, "return of OpenPolicy2, state S637");
                this.Manager.Comment("reaching state \'S793\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp424;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp425;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp425 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp424);
                this.Manager.Comment("reaching state \'S949\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp424, "trustHandle of CreateTrustedDomain, state S949");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp425, "return of CreateTrustedDomain, state S949");
                this.Manager.Comment("reaching state \'S1105\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp426;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp426 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1261\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp426, "return of SetTrustedDomainInfo, state S1261");
                this.Manager.Comment("reaching state \'S1381\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp427;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp427 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1472\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp427, "return of DeleteTrustedDomain, state S1472");
                this.Manager.Comment("reaching state \'S1563\'");
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S42GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S43");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S43");
        }
        
        private void TestScenarioS12For2K8S42GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S43");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S43");
        }
        
        private void TestScenarioS12For2K8S42GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S43");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S43");
        }
        #endregion
        
        #region Test Starting in S44
        //[TestCategory("PDC")]
        //[TestCategory("DomainWin2008R2")]
        //[TestCategory("ForestWin2008R2")]
        //[TestCategory("MS-LSAD")]
        //[Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S44() {
            this.Manager.BeginTest("TestScenarioS12For2K8S44");
            this.Manager.Comment("reaching state \'S44\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp429;
            bool temp430;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp430 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp429);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp429, temp430);
            this.Manager.Comment("reaching state \'S45\'");
            int temp447 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S44GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S44GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S44GetSUTOSVersionChecker2)));
            if ((temp447 == 0)) {
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S482\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp431;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp432;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp432 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp431);
                this.Manager.Comment("reaching state \'S638\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp431, "policyHandle of OpenPolicy2, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp432, "return of OpenPolicy2, state S638");
                this.Manager.Comment("reaching state \'S794\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp433;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp434;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp434 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp433);
                this.Manager.Comment("reaching state \'S950\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp433, "trustHandle of CreateTrustedDomain, state S950");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp434, "return of CreateTrustedDomain, state S950");
                this.Manager.Comment("reaching state \'S1106\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp435;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp435 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1262\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp435, "return of SetTrustedDomainInfo, state S1262");
                TestScenarioS12For2K8S1355();
                goto label22;
            }
            if ((temp447 == 1)) {
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S483\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp436;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp437;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp437 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp436);
                this.Manager.Comment("reaching state \'S639\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp436, "policyHandle of OpenPolicy2, state S639");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp437, "return of OpenPolicy2, state S639");
                this.Manager.Comment("reaching state \'S795\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp438;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp439;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp439 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp438);
                this.Manager.Comment("reaching state \'S951\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp438, "trustHandle of CreateTrustedDomain, state S951");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp439, "return of CreateTrustedDomain, state S951");
                this.Manager.Comment("reaching state \'S1107\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp440;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp440 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1263\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp440, "return of SetTrustedDomainInfo, state S1263");
                TestScenarioS12For2K8S1356();
                goto label22;
            }
            if ((temp447 == 2)) {
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S484\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp441;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp442;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp442 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp441);
                this.Manager.Comment("reaching state \'S640\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp441, "policyHandle of OpenPolicy2, state S640");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp442, "return of OpenPolicy2, state S640");
                this.Manager.Comment("reaching state \'S796\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp443;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp444;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp444 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp443);
                this.Manager.Comment("reaching state \'S952\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp443, "trustHandle of CreateTrustedDomain, state S952");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp444, "return of CreateTrustedDomain, state S952");
                this.Manager.Comment("reaching state \'S1108\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp445;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp445 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1264\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp445, "return of SetTrustedDomainInfo, state S1264");
                this.Manager.Comment("reaching state \'S1382\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp446;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp446 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1473\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp446, "return of DeleteTrustedDomain, state S1473");
                this.Manager.Comment("reaching state \'S1564\'");
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S44GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S45");
        }
        
        private void TestScenarioS12For2K8S44GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S45");
        }
        
        private void TestScenarioS12For2K8S44GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S45");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S45");
        }
        #endregion
        
        #region Test Starting in S46
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S46() {
            this.Manager.BeginTest("TestScenarioS12For2K8S46");
            this.Manager.Comment("reaching state \'S46\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp448;
            bool temp449;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp449 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp448);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp448, temp449);
            this.Manager.Comment("reaching state \'S47\'");
            int temp467 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S46GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S46GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S46GetSUTOSVersionChecker2)));
            if ((temp467 == 0)) {
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S329\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S485\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp450;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp451;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp451 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp450);
                this.Manager.Comment("reaching state \'S641\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp450, "policyHandle of OpenPolicy2, state S641");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp451, "return of OpenPolicy2, state S641");
                this.Manager.Comment("reaching state \'S797\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp452;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp453;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp453 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp452);
                this.Manager.Comment("reaching state \'S953\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp452, "trustHandle of CreateTrustedDomain, state S953");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp453, "return of CreateTrustedDomain, state S953");
                this.Manager.Comment("reaching state \'S1109\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp454;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp454 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1265\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp454, "return of SetTrustedDomainInfo, state S1265");
                TestScenarioS12For2K8S1383();
                goto label23;
            }
            if ((temp467 == 1)) {
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S330\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S486\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp455;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp456;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp456 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp455);
                this.Manager.Comment("reaching state \'S642\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp455, "policyHandle of OpenPolicy2, state S642");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp456, "return of OpenPolicy2, state S642");
                this.Manager.Comment("reaching state \'S798\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp457;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp458;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp458 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp457);
                this.Manager.Comment("reaching state \'S954\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp457, "trustHandle of CreateTrustedDomain, state S954");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp458, "return of CreateTrustedDomain, state S954");
                this.Manager.Comment("reaching state \'S1110\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp459;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp459 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1266\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp459, "return of SetTrustedDomainInfo, state S1266");
                this.Manager.Comment("reaching state \'S1384\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp460;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp460 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1475\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp460, "return of DeleteTrustedDomain, state S1475");
                this.Manager.Comment("reaching state \'S1566\'");
                goto label23;
            }
            if ((temp467 == 2)) {
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S487\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp461;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp462;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp462 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp461);
                this.Manager.Comment("reaching state \'S643\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp461, "policyHandle of OpenPolicy2, state S643");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp462, "return of OpenPolicy2, state S643");
                this.Manager.Comment("reaching state \'S799\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp463;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp464;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp464 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp463);
                this.Manager.Comment("reaching state \'S955\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp463, "trustHandle of CreateTrustedDomain, state S955");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp464, "return of CreateTrustedDomain, state S955");
                this.Manager.Comment("reaching state \'S1111\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp465;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp465 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1267\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp465, "return of SetTrustedDomainInfo, state S1267");
                this.Manager.Comment("reaching state \'S1385\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp466;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp466 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1476\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp466, "return of DeleteTrustedDomain, state S1476");
                this.Manager.Comment("reaching state \'S1567\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S46GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S47");
        }
        
        private void TestScenarioS12For2K8S46GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S47");
        }
        
        private void TestScenarioS12For2K8S46GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S47");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S47");
        }
        #endregion
        
        #region Test Starting in S48
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S48() {
            this.Manager.BeginTest("TestScenarioS12For2K8S48");
            this.Manager.Comment("reaching state \'S48\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp468;
            bool temp469;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp469 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp468);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp468, temp469);
            this.Manager.Comment("reaching state \'S49\'");
            int temp487 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S48GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S48GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S48GetSUTOSVersionChecker2)));
            if ((temp487 == 0)) {
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S332\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S488\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp470;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp471;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp471 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp470);
                this.Manager.Comment("reaching state \'S644\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp470, "policyHandle of OpenPolicy2, state S644");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp471, "return of OpenPolicy2, state S644");
                this.Manager.Comment("reaching state \'S800\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp472;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp473;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp473 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp472);
                this.Manager.Comment("reaching state \'S956\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp472, "trustHandle of CreateTrustedDomain, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp473, "return of CreateTrustedDomain, state S956");
                this.Manager.Comment("reaching state \'S1112\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp474;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp474 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1268\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp474, "return of SetTrustedDomainInfo, state S1268");
                TestScenarioS12For2K8S1383();
                goto label24;
            }
            if ((temp487 == 1)) {
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S333\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S489\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp475;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp476;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp476 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp475);
                this.Manager.Comment("reaching state \'S645\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp475, "policyHandle of OpenPolicy2, state S645");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp476, "return of OpenPolicy2, state S645");
                this.Manager.Comment("reaching state \'S801\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp477;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp478;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp478 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp477);
                this.Manager.Comment("reaching state \'S957\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp477, "trustHandle of CreateTrustedDomain, state S957");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp478, "return of CreateTrustedDomain, state S957");
                this.Manager.Comment("reaching state \'S1113\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp479;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp479 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1269\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp479, "return of SetTrustedDomainInfo, state S1269");
                this.Manager.Comment("reaching state \'S1386\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp480;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp480 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1477\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp480, "return of DeleteTrustedDomain, state S1477");
                this.Manager.Comment("reaching state \'S1568\'");
                goto label24;
            }
            if ((temp487 == 2)) {
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S490\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp481;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp482;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp482 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp481);
                this.Manager.Comment("reaching state \'S646\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp481, "policyHandle of OpenPolicy2, state S646");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp482, "return of OpenPolicy2, state S646");
                this.Manager.Comment("reaching state \'S802\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp483;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp484;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp484 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp483);
                this.Manager.Comment("reaching state \'S958\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp483, "trustHandle of CreateTrustedDomain, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp484, "return of CreateTrustedDomain, state S958");
                this.Manager.Comment("reaching state \'S1114\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp485;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp485 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1270\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp485, "return of SetTrustedDomainInfo, state S1270");
                this.Manager.Comment("reaching state \'S1387\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp486;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp486 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1478\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp486, "return of DeleteTrustedDomain, state S1478");
                this.Manager.Comment("reaching state \'S1569\'");
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S48GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S49");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S49");
        }
        
        private void TestScenarioS12For2K8S48GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S49");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S49");
        }
        
        private void TestScenarioS12For2K8S48GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S49");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S49");
        }
        #endregion
        
        #region Test Starting in S50
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S50() {
            this.Manager.BeginTest("TestScenarioS12For2K8S50");
            this.Manager.Comment("reaching state \'S50\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp488;
            bool temp489;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp489 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp488);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp488, temp489);
            this.Manager.Comment("reaching state \'S51\'");
            int temp507 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S50GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S50GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S50GetSUTOSVersionChecker2)));
            if ((temp507 == 0)) {
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S491\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp490;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp491;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp491 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp490);
                this.Manager.Comment("reaching state \'S647\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp490, "policyHandle of OpenPolicy2, state S647");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp491, "return of OpenPolicy2, state S647");
                this.Manager.Comment("reaching state \'S803\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp492;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp493;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp493 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp492);
                this.Manager.Comment("reaching state \'S959\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp492, "trustHandle of CreateTrustedDomain, state S959");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp493, "return of CreateTrustedDomain, state S959");
                this.Manager.Comment("reaching state \'S1115\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp494;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp494 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1271\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp494, "return of SetTrustedDomainInfo, state S1271");
                TestScenarioS12For2K8S1383();
                goto label25;
            }
            if ((temp507 == 1)) {
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S492\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp495;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp496;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp496 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp495);
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp495, "policyHandle of OpenPolicy2, state S648");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp496, "return of OpenPolicy2, state S648");
                this.Manager.Comment("reaching state \'S804\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp497;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp498;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp498 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp497);
                this.Manager.Comment("reaching state \'S960\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp497, "trustHandle of CreateTrustedDomain, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp498, "return of CreateTrustedDomain, state S960");
                this.Manager.Comment("reaching state \'S1116\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp499;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp499 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1272\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp499, "return of SetTrustedDomainInfo, state S1272");
                this.Manager.Comment("reaching state \'S1388\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp500;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp500 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1479\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp500, "return of DeleteTrustedDomain, state S1479");
                this.Manager.Comment("reaching state \'S1570\'");
                goto label25;
            }
            if ((temp507 == 2)) {
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S493\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp501;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp502;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp502 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp501);
                this.Manager.Comment("reaching state \'S649\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp501, "policyHandle of OpenPolicy2, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp502, "return of OpenPolicy2, state S649");
                this.Manager.Comment("reaching state \'S805\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp503;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp504;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp504 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp503);
                this.Manager.Comment("reaching state \'S961\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp503, "trustHandle of CreateTrustedDomain, state S961");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp504, "return of CreateTrustedDomain, state S961");
                this.Manager.Comment("reaching state \'S1117\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp505;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp505 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1273\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp505, "return of SetTrustedDomainInfo, state S1273");
                this.Manager.Comment("reaching state \'S1389\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp506;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp506 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1480\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp506, "return of DeleteTrustedDomain, state S1480");
                this.Manager.Comment("reaching state \'S1571\'");
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S50GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S51");
        }
        
        private void TestScenarioS12For2K8S50GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S51");
        }
        
        private void TestScenarioS12For2K8S50GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S51");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S51");
        }
        #endregion
        
        #region Test Starting in S52
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S52() {
            this.Manager.BeginTest("TestScenarioS12For2K8S52");
            this.Manager.Comment("reaching state \'S52\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp508;
            bool temp509;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp509 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp508);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp508, temp509);
            this.Manager.Comment("reaching state \'S53\'");
            int temp527 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S52GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S52GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S52GetSUTOSVersionChecker2)));
            if ((temp527 == 0)) {
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S494\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp510;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp511;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp511 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp510);
                this.Manager.Comment("reaching state \'S650\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp510, "policyHandle of OpenPolicy2, state S650");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp511, "return of OpenPolicy2, state S650");
                this.Manager.Comment("reaching state \'S806\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp512;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp513;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp513 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp512);
                this.Manager.Comment("reaching state \'S962\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp512, "trustHandle of CreateTrustedDomain, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp513, "return of CreateTrustedDomain, state S962");
                this.Manager.Comment("reaching state \'S1118\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp514;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp514 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1274\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp514, "return of SetTrustedDomainInfo, state S1274");
                TestScenarioS12For2K8S1383();
                goto label26;
            }
            if ((temp527 == 1)) {
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S495\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp515;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp516;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp516 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp515);
                this.Manager.Comment("reaching state \'S651\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp515, "policyHandle of OpenPolicy2, state S651");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp516, "return of OpenPolicy2, state S651");
                this.Manager.Comment("reaching state \'S807\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp517;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp518;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp518 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp517);
                this.Manager.Comment("reaching state \'S963\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp517, "trustHandle of CreateTrustedDomain, state S963");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp518, "return of CreateTrustedDomain, state S963");
                this.Manager.Comment("reaching state \'S1119\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp519;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp519 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1275\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp519, "return of SetTrustedDomainInfo, state S1275");
                this.Manager.Comment("reaching state \'S1390\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp520;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp520 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1481\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp520, "return of DeleteTrustedDomain, state S1481");
                this.Manager.Comment("reaching state \'S1572\'");
                goto label26;
            }
            if ((temp527 == 2)) {
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S496\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp521;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp522;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp522 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp521);
                this.Manager.Comment("reaching state \'S652\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp521, "policyHandle of OpenPolicy2, state S652");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp522, "return of OpenPolicy2, state S652");
                this.Manager.Comment("reaching state \'S808\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp523;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp524;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp524 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp523);
                this.Manager.Comment("reaching state \'S964\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp523, "trustHandle of CreateTrustedDomain, state S964");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp524, "return of CreateTrustedDomain, state S964");
                this.Manager.Comment("reaching state \'S1120\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp525;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp525 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1276\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp525, "return of SetTrustedDomainInfo, state S1276");
                this.Manager.Comment("reaching state \'S1391\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp526;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp526 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1482\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp526, "return of DeleteTrustedDomain, state S1482");
                this.Manager.Comment("reaching state \'S1573\'");
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S52GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S53");
        }
        
        private void TestScenarioS12For2K8S52GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S53");
        }
        
        private void TestScenarioS12For2K8S52GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S53");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S53");
        }
        #endregion
        
        #region Test Starting in S54
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S54() {
            this.Manager.BeginTest("TestScenarioS12For2K8S54");
            this.Manager.Comment("reaching state \'S54\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp528;
            bool temp529;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp529 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp528);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp528, temp529);
            this.Manager.Comment("reaching state \'S55\'");
            int temp547 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S54GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S54GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S54GetSUTOSVersionChecker2)));
            if ((temp547 == 0)) {
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S497\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp530;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp531;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp531 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp530);
                this.Manager.Comment("reaching state \'S653\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp530, "policyHandle of OpenPolicy2, state S653");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp531, "return of OpenPolicy2, state S653");
                this.Manager.Comment("reaching state \'S809\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp532;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp533;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp533 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp532);
                this.Manager.Comment("reaching state \'S965\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp532, "trustHandle of CreateTrustedDomain, state S965");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp533, "return of CreateTrustedDomain, state S965");
                this.Manager.Comment("reaching state \'S1121\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp534;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp534 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1277\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp534, "return of SetTrustedDomainInfo, state S1277");
                TestScenarioS12For2K8S1383();
                goto label27;
            }
            if ((temp547 == 1)) {
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S498\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp535;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp536;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp536 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp535);
                this.Manager.Comment("reaching state \'S654\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp535, "policyHandle of OpenPolicy2, state S654");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp536, "return of OpenPolicy2, state S654");
                this.Manager.Comment("reaching state \'S810\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp537;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp538;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp538 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp537);
                this.Manager.Comment("reaching state \'S966\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp537, "trustHandle of CreateTrustedDomain, state S966");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp538, "return of CreateTrustedDomain, state S966");
                this.Manager.Comment("reaching state \'S1122\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp539;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp539 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1278\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp539, "return of SetTrustedDomainInfo, state S1278");
                this.Manager.Comment("reaching state \'S1392\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp540;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp540 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1483\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp540, "return of DeleteTrustedDomain, state S1483");
                this.Manager.Comment("reaching state \'S1574\'");
                goto label27;
            }
            if ((temp547 == 2)) {
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S499\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp541;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp542;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp542 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp541);
                this.Manager.Comment("reaching state \'S655\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp541, "policyHandle of OpenPolicy2, state S655");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp542, "return of OpenPolicy2, state S655");
                this.Manager.Comment("reaching state \'S811\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp543;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp544;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp544 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp543);
                this.Manager.Comment("reaching state \'S967\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp543, "trustHandle of CreateTrustedDomain, state S967");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp544, "return of CreateTrustedDomain, state S967");
                this.Manager.Comment("reaching state \'S1123\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp545;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp545 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1279\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp545, "return of SetTrustedDomainInfo, state S1279");
                this.Manager.Comment("reaching state \'S1393\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp546;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp546 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1484\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp546, "return of DeleteTrustedDomain, state S1484");
                this.Manager.Comment("reaching state \'S1575\'");
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S54GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S55");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S55");
        }
        
        private void TestScenarioS12For2K8S54GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S55");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S55");
        }
        
        private void TestScenarioS12For2K8S54GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S55");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S55");
        }
        #endregion
        
        #region Test Starting in S56
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S56() {
            this.Manager.BeginTest("TestScenarioS12For2K8S56");
            this.Manager.Comment("reaching state \'S56\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp548;
            bool temp549;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp549 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp548);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp548, temp549);
            this.Manager.Comment("reaching state \'S57\'");
            int temp567 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S56GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S56GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S56GetSUTOSVersionChecker2)));
            if ((temp567 == 0)) {
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S500\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp550;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp551;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp551 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp550);
                this.Manager.Comment("reaching state \'S656\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp550, "policyHandle of OpenPolicy2, state S656");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp551, "return of OpenPolicy2, state S656");
                this.Manager.Comment("reaching state \'S812\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp552;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp553;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp553 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp552);
                this.Manager.Comment("reaching state \'S968\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp552, "trustHandle of CreateTrustedDomain, state S968");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp553, "return of CreateTrustedDomain, state S968");
                this.Manager.Comment("reaching state \'S1124\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp554;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp554 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1280\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp554, "return of SetTrustedDomainInfo, state S1280");
                TestScenarioS12For2K8S1383();
                goto label28;
            }
            if ((temp567 == 1)) {
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S345\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S501\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp555;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp556;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp556 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp555);
                this.Manager.Comment("reaching state \'S657\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp555, "policyHandle of OpenPolicy2, state S657");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp556, "return of OpenPolicy2, state S657");
                this.Manager.Comment("reaching state \'S813\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp557;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp558;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp558 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp557);
                this.Manager.Comment("reaching state \'S969\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp557, "trustHandle of CreateTrustedDomain, state S969");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp558, "return of CreateTrustedDomain, state S969");
                this.Manager.Comment("reaching state \'S1125\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp559;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp559 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1281\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp559, "return of SetTrustedDomainInfo, state S1281");
                this.Manager.Comment("reaching state \'S1394\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp560;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp560 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1485\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp560, "return of DeleteTrustedDomain, state S1485");
                this.Manager.Comment("reaching state \'S1576\'");
                goto label28;
            }
            if ((temp567 == 2)) {
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S346\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S502\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp561;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp562;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp562 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp561);
                this.Manager.Comment("reaching state \'S658\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp561, "policyHandle of OpenPolicy2, state S658");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp562, "return of OpenPolicy2, state S658");
                this.Manager.Comment("reaching state \'S814\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp563;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp564;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp564 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp563);
                this.Manager.Comment("reaching state \'S970\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp563, "trustHandle of CreateTrustedDomain, state S970");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp564, "return of CreateTrustedDomain, state S970");
                this.Manager.Comment("reaching state \'S1126\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp565;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp565 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1282\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp565, "return of SetTrustedDomainInfo, state S1282");
                this.Manager.Comment("reaching state \'S1395\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp566;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp566 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1486\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp566, "return of DeleteTrustedDomain, state S1486");
                this.Manager.Comment("reaching state \'S1577\'");
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S56GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S57");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S57");
        }
        
        private void TestScenarioS12For2K8S56GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S57");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S57");
        }
        
        private void TestScenarioS12For2K8S56GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S57");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S57");
        }
        #endregion
        
        #region Test Starting in S58
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S58() {
            this.Manager.BeginTest("TestScenarioS12For2K8S58");
            this.Manager.Comment("reaching state \'S58\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp568;
            bool temp569;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp569 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp568);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp568, temp569);
            this.Manager.Comment("reaching state \'S59\'");
            int temp587 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S58GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S58GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S58GetSUTOSVersionChecker2)));
            if ((temp587 == 0)) {
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S503\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp570;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp571;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp571 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp570);
                this.Manager.Comment("reaching state \'S659\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp570, "policyHandle of OpenPolicy2, state S659");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp571, "return of OpenPolicy2, state S659");
                this.Manager.Comment("reaching state \'S815\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp572;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp573;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp573 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp572);
                this.Manager.Comment("reaching state \'S971\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp572, "trustHandle of CreateTrustedDomain, state S971");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp573, "return of CreateTrustedDomain, state S971");
                this.Manager.Comment("reaching state \'S1127\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp574;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp574 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1283\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp574, "return of SetTrustedDomainInfo, state S1283");
                TestScenarioS12For2K8S1383();
                goto label29;
            }
            if ((temp587 == 1)) {
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S504\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp575;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp576;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp576 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp575);
                this.Manager.Comment("reaching state \'S660\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp575, "policyHandle of OpenPolicy2, state S660");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp576, "return of OpenPolicy2, state S660");
                this.Manager.Comment("reaching state \'S816\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp577;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp578;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp578 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp577);
                this.Manager.Comment("reaching state \'S972\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp577, "trustHandle of CreateTrustedDomain, state S972");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp578, "return of CreateTrustedDomain, state S972");
                this.Manager.Comment("reaching state \'S1128\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp579;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp579 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1284\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp579, "return of SetTrustedDomainInfo, state S1284");
                this.Manager.Comment("reaching state \'S1396\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp580;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp580 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1487\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp580, "return of DeleteTrustedDomain, state S1487");
                this.Manager.Comment("reaching state \'S1578\'");
                goto label29;
            }
            if ((temp587 == 2)) {
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S505\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp581;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp582;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp582 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp581);
                this.Manager.Comment("reaching state \'S661\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp581, "policyHandle of OpenPolicy2, state S661");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp582, "return of OpenPolicy2, state S661");
                this.Manager.Comment("reaching state \'S817\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp583;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp584;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp584 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp583);
                this.Manager.Comment("reaching state \'S973\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp583, "trustHandle of CreateTrustedDomain, state S973");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp584, "return of CreateTrustedDomain, state S973");
                this.Manager.Comment("reaching state \'S1129\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp585;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp585 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1285\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp585, "return of SetTrustedDomainInfo, state S1285");
                this.Manager.Comment("reaching state \'S1397\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp586;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp586 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1488\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp586, "return of DeleteTrustedDomain, state S1488");
                this.Manager.Comment("reaching state \'S1579\'");
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S58GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S59");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S59");
        }
        
        private void TestScenarioS12For2K8S58GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S59");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S59");
        }
        
        private void TestScenarioS12For2K8S58GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S59");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S59");
        }
        #endregion
        
        #region Test Starting in S6
        //[TestCategory("PDC")]
        //[TestCategory("DomainWin2008R2")]
        //[TestCategory("ForestWin2008R2")]
        //[TestCategory("MS-LSAD")]
        //[Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S6() {
            this.Manager.BeginTest("TestScenarioS12For2K8S6");
            this.Manager.Comment("reaching state \'S6\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp588;
            bool temp589;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp589 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp588);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp588, temp589);
            this.Manager.Comment("reaching state \'S7\'");
            int temp606 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S6GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S6GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S6GetSUTOSVersionChecker2)));
            if ((temp606 == 0)) {
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S425\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp590;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp591;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp591 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp590);
                this.Manager.Comment("reaching state \'S581\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp590, "policyHandle of OpenPolicy2, state S581");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp591, "return of OpenPolicy2, state S581");
                this.Manager.Comment("reaching state \'S737\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp592;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp593;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp593 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp592);
                this.Manager.Comment("reaching state \'S893\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp592, "trustHandle of CreateTrustedDomain, state S893");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp593, "return of CreateTrustedDomain, state S893");
                this.Manager.Comment("reaching state \'S1049\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp594;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp594 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1205\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/AccessDenied\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.AccessDenied, temp594, "return of SetTrustedDomainInfo, state S1205");
                TestScenarioS12For2K8S1355();
                goto label30;
            }
            if ((temp606 == 1)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S426\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp595;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp596;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp596 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp595);
                this.Manager.Comment("reaching state \'S582\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp595, "policyHandle of OpenPolicy2, state S582");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp596, "return of OpenPolicy2, state S582");
                this.Manager.Comment("reaching state \'S738\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp597;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp598;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp598 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp597);
                this.Manager.Comment("reaching state \'S894\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp597, "trustHandle of CreateTrustedDomain, state S894");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp598, "return of CreateTrustedDomain, state S894");
                this.Manager.Comment("reaching state \'S1050\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp599;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp599 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1206\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/AccessDenied\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.AccessDenied, temp599, "return of SetTrustedDomainInfo, state S1206");
                TestScenarioS12For2K8S1356();
                goto label30;
            }
            if ((temp606 == 2)) {
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S271\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S427\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp600;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp601;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp601 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp600);
                this.Manager.Comment("reaching state \'S583\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp600, "policyHandle of OpenPolicy2, state S583");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp601, "return of OpenPolicy2, state S583");
                this.Manager.Comment("reaching state \'S739\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp602;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp603;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp603 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp602);
                this.Manager.Comment("reaching state \'S895\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp602, "trustHandle of CreateTrustedDomain, state S895");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp603, "return of CreateTrustedDomain, state S895");
                this.Manager.Comment("reaching state \'S1051\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp604;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp604 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1207\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp604, "return of SetTrustedDomainInfo, state S1207");
                this.Manager.Comment("reaching state \'S1361\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp605;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp605 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1452\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp605, "return of DeleteTrustedDomain, state S1452");
                this.Manager.Comment("reaching state \'S1543\'");
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S6GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S7");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S7");
        }
        
        private void TestScenarioS12For2K8S6GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S7");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S7");
        }
        
        private void TestScenarioS12For2K8S6GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S7");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S7");
        }
        #endregion
        
        #region Test Starting in S60
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S60() {
            this.Manager.BeginTest("TestScenarioS12For2K8S60");
            this.Manager.Comment("reaching state \'S60\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp607;
            bool temp608;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp608 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp607);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp607, temp608);
            this.Manager.Comment("reaching state \'S61\'");
            int temp626 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S60GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S60GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S60GetSUTOSVersionChecker2)));
            if ((temp626 == 0)) {
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S506\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp609;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp610;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp610 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp609);
                this.Manager.Comment("reaching state \'S662\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp609, "policyHandle of OpenPolicy2, state S662");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp610, "return of OpenPolicy2, state S662");
                this.Manager.Comment("reaching state \'S818\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp611;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp612;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp612 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp611);
                this.Manager.Comment("reaching state \'S974\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp611, "trustHandle of CreateTrustedDomain, state S974");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp612, "return of CreateTrustedDomain, state S974");
                this.Manager.Comment("reaching state \'S1130\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp613;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp613 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1286\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp613, "return of SetTrustedDomainInfo, state S1286");
                TestScenarioS12For2K8S1383();
                goto label31;
            }
            if ((temp626 == 1)) {
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S507\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp614;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp615;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp615 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp614);
                this.Manager.Comment("reaching state \'S663\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp614, "policyHandle of OpenPolicy2, state S663");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp615, "return of OpenPolicy2, state S663");
                this.Manager.Comment("reaching state \'S819\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp616;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp617;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp617 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp616);
                this.Manager.Comment("reaching state \'S975\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp616, "trustHandle of CreateTrustedDomain, state S975");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp617, "return of CreateTrustedDomain, state S975");
                this.Manager.Comment("reaching state \'S1131\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp618;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp618 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1287\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp618, "return of SetTrustedDomainInfo, state S1287");
                this.Manager.Comment("reaching state \'S1398\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp619;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp619 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1489\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp619, "return of DeleteTrustedDomain, state S1489");
                this.Manager.Comment("reaching state \'S1580\'");
                goto label31;
            }
            if ((temp626 == 2)) {
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S352\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S508\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp620;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp621;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp621 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp620);
                this.Manager.Comment("reaching state \'S664\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp620, "policyHandle of OpenPolicy2, state S664");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp621, "return of OpenPolicy2, state S664");
                this.Manager.Comment("reaching state \'S820\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp622;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp623;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp623 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp622);
                this.Manager.Comment("reaching state \'S976\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp622, "trustHandle of CreateTrustedDomain, state S976");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp623, "return of CreateTrustedDomain, state S976");
                this.Manager.Comment("reaching state \'S1132\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp624;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp624 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1288\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp624, "return of SetTrustedDomainInfo, state S1288");
                this.Manager.Comment("reaching state \'S1399\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp625;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp625 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1490\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp625, "return of DeleteTrustedDomain, state S1490");
                this.Manager.Comment("reaching state \'S1581\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S60GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S61");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S61");
        }
        
        private void TestScenarioS12For2K8S60GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S61");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S61");
        }
        
        private void TestScenarioS12For2K8S60GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S61");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S61");
        }
        #endregion
        
        #region Test Starting in S62
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S62() {
            this.Manager.BeginTest("TestScenarioS12For2K8S62");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp627;
            bool temp628;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp628 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp627);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp627, temp628);
            this.Manager.Comment("reaching state \'S63\'");
            int temp646 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S62GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S62GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S62GetSUTOSVersionChecker2)));
            if ((temp646 == 0)) {
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S353\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S509\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp629;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp630;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp630 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp629);
                this.Manager.Comment("reaching state \'S665\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp629, "policyHandle of OpenPolicy2, state S665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp630, "return of OpenPolicy2, state S665");
                this.Manager.Comment("reaching state \'S821\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp631;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp632;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp632 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp631);
                this.Manager.Comment("reaching state \'S977\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp631, "trustHandle of CreateTrustedDomain, state S977");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp632, "return of CreateTrustedDomain, state S977");
                this.Manager.Comment("reaching state \'S1133\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp633;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp633 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1289\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp633, "return of SetTrustedDomainInfo, state S1289");
                TestScenarioS12For2K8S1383();
                goto label32;
            }
            if ((temp646 == 1)) {
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S354\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S510\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp634;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp635;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp635 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp634);
                this.Manager.Comment("reaching state \'S666\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp634, "policyHandle of OpenPolicy2, state S666");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp635, "return of OpenPolicy2, state S666");
                this.Manager.Comment("reaching state \'S822\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp636;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp637;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp637 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp636);
                this.Manager.Comment("reaching state \'S978\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp636, "trustHandle of CreateTrustedDomain, state S978");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp637, "return of CreateTrustedDomain, state S978");
                this.Manager.Comment("reaching state \'S1134\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp638;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp638 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1290\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp638, "return of SetTrustedDomainInfo, state S1290");
                this.Manager.Comment("reaching state \'S1400\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp639;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp639 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1491\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp639, "return of DeleteTrustedDomain, state S1491");
                this.Manager.Comment("reaching state \'S1582\'");
                goto label32;
            }
            if ((temp646 == 2)) {
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S355\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S511\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp640;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp641;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp641 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp640);
                this.Manager.Comment("reaching state \'S667\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp640, "policyHandle of OpenPolicy2, state S667");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp641, "return of OpenPolicy2, state S667");
                this.Manager.Comment("reaching state \'S823\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp642;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp643;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp643 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp642);
                this.Manager.Comment("reaching state \'S979\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp642, "trustHandle of CreateTrustedDomain, state S979");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp643, "return of CreateTrustedDomain, state S979");
                this.Manager.Comment("reaching state \'S1135\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp644;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp644 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1291\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp644, "return of SetTrustedDomainInfo, state S1291");
                this.Manager.Comment("reaching state \'S1401\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp645;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp645 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1492\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp645, "return of DeleteTrustedDomain, state S1492");
                this.Manager.Comment("reaching state \'S1583\'");
                goto label32;
            }
            throw new InvalidOperationException("never reached");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S62GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S63");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S63");
        }
        
        private void TestScenarioS12For2K8S62GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S63");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S63");
        }
        
        private void TestScenarioS12For2K8S62GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S63");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S63");
        }
        #endregion
        
        #region Test Starting in S64
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S64() {
            this.Manager.BeginTest("TestScenarioS12For2K8S64");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp647;
            bool temp648;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp648 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp647);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp647, temp648);
            this.Manager.Comment("reaching state \'S65\'");
            int temp666 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S64GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S64GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S64GetSUTOSVersionChecker2)));
            if ((temp666 == 0)) {
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S356\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S512\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp649;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp650;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp650 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp649);
                this.Manager.Comment("reaching state \'S668\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp649, "policyHandle of OpenPolicy2, state S668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp650, "return of OpenPolicy2, state S668");
                this.Manager.Comment("reaching state \'S824\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp651;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp652;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp652 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp651);
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp651, "trustHandle of CreateTrustedDomain, state S980");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp652, "return of CreateTrustedDomain, state S980");
                this.Manager.Comment("reaching state \'S1136\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp653;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp653 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1292\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp653, "return of SetTrustedDomainInfo, state S1292");
                TestScenarioS12For2K8S1383();
                goto label33;
            }
            if ((temp666 == 1)) {
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S357\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S513\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp654;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp655;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp655 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp654);
                this.Manager.Comment("reaching state \'S669\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp654, "policyHandle of OpenPolicy2, state S669");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp655, "return of OpenPolicy2, state S669");
                this.Manager.Comment("reaching state \'S825\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp656;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp657;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp657 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp656);
                this.Manager.Comment("reaching state \'S981\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp656, "trustHandle of CreateTrustedDomain, state S981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp657, "return of CreateTrustedDomain, state S981");
                this.Manager.Comment("reaching state \'S1137\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp658;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp658 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1293\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp658, "return of SetTrustedDomainInfo, state S1293");
                this.Manager.Comment("reaching state \'S1402\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp659;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp659 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1493\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp659, "return of DeleteTrustedDomain, state S1493");
                this.Manager.Comment("reaching state \'S1584\'");
                goto label33;
            }
            if ((temp666 == 2)) {
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S358\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S514\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp660;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp661;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp661 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp660);
                this.Manager.Comment("reaching state \'S670\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp660, "policyHandle of OpenPolicy2, state S670");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp661, "return of OpenPolicy2, state S670");
                this.Manager.Comment("reaching state \'S826\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp662;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp663;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp663 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp662);
                this.Manager.Comment("reaching state \'S982\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp662, "trustHandle of CreateTrustedDomain, state S982");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp663, "return of CreateTrustedDomain, state S982");
                this.Manager.Comment("reaching state \'S1138\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp664;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp664 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1294\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp664, "return of SetTrustedDomainInfo, state S1294");
                this.Manager.Comment("reaching state \'S1403\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp665;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp665 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1494\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp665, "return of DeleteTrustedDomain, state S1494");
                this.Manager.Comment("reaching state \'S1585\'");
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S64GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S65");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S65");
        }
        
        private void TestScenarioS12For2K8S64GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S65");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S65");
        }
        
        private void TestScenarioS12For2K8S64GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S65");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S65");
        }
        #endregion
        
        #region Test Starting in S66
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S66() {
            this.Manager.BeginTest("TestScenarioS12For2K8S66");
            this.Manager.Comment("reaching state \'S66\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp667;
            bool temp668;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp668 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp667);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp667, temp668);
            this.Manager.Comment("reaching state \'S67\'");
            int temp686 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S66GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S66GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S66GetSUTOSVersionChecker2)));
            if ((temp686 == 0)) {
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S515\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp669;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp670;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp670 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp669);
                this.Manager.Comment("reaching state \'S671\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp669, "policyHandle of OpenPolicy2, state S671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp670, "return of OpenPolicy2, state S671");
                this.Manager.Comment("reaching state \'S827\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp671;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp672;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp672 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp671);
                this.Manager.Comment("reaching state \'S983\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp671, "trustHandle of CreateTrustedDomain, state S983");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp672, "return of CreateTrustedDomain, state S983");
                this.Manager.Comment("reaching state \'S1139\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp673;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp673 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1295\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp673, "return of SetTrustedDomainInfo, state S1295");
                TestScenarioS12For2K8S1383();
                goto label34;
            }
            if ((temp686 == 1)) {
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S516\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp674;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp675;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp675 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp674);
                this.Manager.Comment("reaching state \'S672\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp674, "policyHandle of OpenPolicy2, state S672");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp675, "return of OpenPolicy2, state S672");
                this.Manager.Comment("reaching state \'S828\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp676;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp677;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp677 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp676);
                this.Manager.Comment("reaching state \'S984\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp676, "trustHandle of CreateTrustedDomain, state S984");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp677, "return of CreateTrustedDomain, state S984");
                this.Manager.Comment("reaching state \'S1140\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp678;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp678 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1296\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp678, "return of SetTrustedDomainInfo, state S1296");
                this.Manager.Comment("reaching state \'S1404\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp679;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp679 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1495\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp679, "return of DeleteTrustedDomain, state S1495");
                this.Manager.Comment("reaching state \'S1586\'");
                goto label34;
            }
            if ((temp686 == 2)) {
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S361\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S517\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp680;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp681;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp681 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp680);
                this.Manager.Comment("reaching state \'S673\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp680, "policyHandle of OpenPolicy2, state S673");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp681, "return of OpenPolicy2, state S673");
                this.Manager.Comment("reaching state \'S829\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp682;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp683;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp683 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp682);
                this.Manager.Comment("reaching state \'S985\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp682, "trustHandle of CreateTrustedDomain, state S985");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp683, "return of CreateTrustedDomain, state S985");
                this.Manager.Comment("reaching state \'S1141\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp684;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp684 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1297\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp684, "return of SetTrustedDomainInfo, state S1297");
                this.Manager.Comment("reaching state \'S1405\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp685;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp685 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1496\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp685, "return of DeleteTrustedDomain, state S1496");
                this.Manager.Comment("reaching state \'S1587\'");
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S66GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S67");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S67");
        }
        
        private void TestScenarioS12For2K8S66GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S67");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S67");
        }
        
        private void TestScenarioS12For2K8S66GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S67");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S67");
        }
        #endregion
        
        #region Test Starting in S68
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S68() {
            this.Manager.BeginTest("TestScenarioS12For2K8S68");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp687;
            bool temp688;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp688 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp687);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp687, temp688);
            this.Manager.Comment("reaching state \'S69\'");
            int temp706 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S68GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S68GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S68GetSUTOSVersionChecker2)));
            if ((temp706 == 0)) {
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S518\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp689;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp690;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp690 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp689);
                this.Manager.Comment("reaching state \'S674\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp689, "policyHandle of OpenPolicy2, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp690, "return of OpenPolicy2, state S674");
                this.Manager.Comment("reaching state \'S830\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp691;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp692;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp692 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp691);
                this.Manager.Comment("reaching state \'S986\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp691, "trustHandle of CreateTrustedDomain, state S986");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp692, "return of CreateTrustedDomain, state S986");
                this.Manager.Comment("reaching state \'S1142\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp693;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp693 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1298\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/ObjectNameCollision\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameCollision, temp693, "return of SetTrustedDomainInfo, state S1298");
                TestScenarioS12For2K8S1383();
                goto label35;
            }
            if ((temp706 == 1)) {
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S519\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp694;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp695;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp695 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp694);
                this.Manager.Comment("reaching state \'S675\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp694, "policyHandle of OpenPolicy2, state S675");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp695, "return of OpenPolicy2, state S675");
                this.Manager.Comment("reaching state \'S831\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp696;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp697;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp697 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp696);
                this.Manager.Comment("reaching state \'S987\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp696, "trustHandle of CreateTrustedDomain, state S987");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp697, "return of CreateTrustedDomain, state S987");
                this.Manager.Comment("reaching state \'S1143\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp698;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp698 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1299\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp698, "return of SetTrustedDomainInfo, state S1299");
                this.Manager.Comment("reaching state \'S1406\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp699;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp699 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1497\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp699, "return of DeleteTrustedDomain, state S1497");
                this.Manager.Comment("reaching state \'S1588\'");
                goto label35;
            }
            if ((temp706 == 2)) {
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S520\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp700;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp701;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp701 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp700);
                this.Manager.Comment("reaching state \'S676\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp700, "policyHandle of OpenPolicy2, state S676");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp701, "return of OpenPolicy2, state S676");
                this.Manager.Comment("reaching state \'S832\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp702;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp703;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp703 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp702);
                this.Manager.Comment("reaching state \'S988\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp702, "trustHandle of CreateTrustedDomain, state S988");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp703, "return of CreateTrustedDomain, state S988");
                this.Manager.Comment("reaching state \'S1144\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp704;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp704 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1300\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp704, "return of SetTrustedDomainInfo, state S1300");
                this.Manager.Comment("reaching state \'S1407\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp705;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp705 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1498\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp705, "return of DeleteTrustedDomain, state S1498");
                this.Manager.Comment("reaching state \'S1589\'");
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S68GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S69");
        }
        
        private void TestScenarioS12For2K8S68GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S69");
        }
        
        private void TestScenarioS12For2K8S68GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S69");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S69");
        }
        #endregion
        
        #region Test Starting in S70
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S70() {
            this.Manager.BeginTest("TestScenarioS12For2K8S70");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp707;
            bool temp708;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp708 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp707);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp707, temp708);
            this.Manager.Comment("reaching state \'S71\'");
            int temp726 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S70GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S70GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S70GetSUTOSVersionChecker2)));
            if ((temp726 == 0)) {
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S521\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp709;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp710;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp710 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp709);
                this.Manager.Comment("reaching state \'S677\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp709, "policyHandle of OpenPolicy2, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp710, "return of OpenPolicy2, state S677");
                this.Manager.Comment("reaching state \'S833\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp711;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp712;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp712 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp711);
                this.Manager.Comment("reaching state \'S989\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp711, "trustHandle of CreateTrustedDomain, state S989");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp712, "return of CreateTrustedDomain, state S989");
                this.Manager.Comment("reaching state \'S1145\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp713;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp713 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1301\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp713, "return of SetTrustedDomainInfo, state S1301");
                TestScenarioS12For2K8S1383();
                goto label36;
            }
            if ((temp726 == 1)) {
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S522\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp714;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp715;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp715 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp714);
                this.Manager.Comment("reaching state \'S678\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp714, "policyHandle of OpenPolicy2, state S678");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp715, "return of OpenPolicy2, state S678");
                this.Manager.Comment("reaching state \'S834\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp716;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp717;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp717 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp716);
                this.Manager.Comment("reaching state \'S990\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp716, "trustHandle of CreateTrustedDomain, state S990");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp717, "return of CreateTrustedDomain, state S990");
                this.Manager.Comment("reaching state \'S1146\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp718;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp718 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1302\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp718, "return of SetTrustedDomainInfo, state S1302");
                this.Manager.Comment("reaching state \'S1408\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp719;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp719 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1499\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp719, "return of DeleteTrustedDomain, state S1499");
                this.Manager.Comment("reaching state \'S1590\'");
                goto label36;
            }
            if ((temp726 == 2)) {
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S523\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp720;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp721;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp721 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp720);
                this.Manager.Comment("reaching state \'S679\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp720, "policyHandle of OpenPolicy2, state S679");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp721, "return of OpenPolicy2, state S679");
                this.Manager.Comment("reaching state \'S835\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp722;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp723;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp723 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp722);
                this.Manager.Comment("reaching state \'S991\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp722, "trustHandle of CreateTrustedDomain, state S991");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp723, "return of CreateTrustedDomain, state S991");
                this.Manager.Comment("reaching state \'S1147\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp724;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp724 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1303\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp724, "return of SetTrustedDomainInfo, state S1303");
                this.Manager.Comment("reaching state \'S1409\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp725;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp725 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1500\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp725, "return of DeleteTrustedDomain, state S1500");
                this.Manager.Comment("reaching state \'S1591\'");
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S70GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S71");
        }
        
        private void TestScenarioS12For2K8S70GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S71");
        }
        
        private void TestScenarioS12For2K8S70GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S71");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S71");
        }
        #endregion
        
        #region Test Starting in S72
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S72() {
            this.Manager.BeginTest("TestScenarioS12For2K8S72");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp727;
            bool temp728;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp728 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp727);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp727, temp728);
            this.Manager.Comment("reaching state \'S73\'");
            int temp746 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S72GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S72GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S72GetSUTOSVersionChecker2)));
            if ((temp746 == 0)) {
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S368\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S524\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp729;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp730;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp730 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp729);
                this.Manager.Comment("reaching state \'S680\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp729, "policyHandle of OpenPolicy2, state S680");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp730, "return of OpenPolicy2, state S680");
                this.Manager.Comment("reaching state \'S836\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp731;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp732;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp732 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp731);
                this.Manager.Comment("reaching state \'S992\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp731, "trustHandle of CreateTrustedDomain, state S992");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp732, "return of CreateTrustedDomain, state S992");
                this.Manager.Comment("reaching state \'S1148\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp733;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp733 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1304\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp733, "return of SetTrustedDomainInfo, state S1304");
                TestScenarioS12For2K8S1352();
                goto label37;
            }
            if ((temp746 == 1)) {
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S369\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S525\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp734;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp735;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp735 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp734);
                this.Manager.Comment("reaching state \'S681\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp734, "policyHandle of OpenPolicy2, state S681");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp735, "return of OpenPolicy2, state S681");
                this.Manager.Comment("reaching state \'S837\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp736;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp737;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp737 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp736);
                this.Manager.Comment("reaching state \'S993\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp736, "trustHandle of CreateTrustedDomain, state S993");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp737, "return of CreateTrustedDomain, state S993");
                this.Manager.Comment("reaching state \'S1149\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp738;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp738 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1305\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp738, "return of SetTrustedDomainInfo, state S1305");
                this.Manager.Comment("reaching state \'S1410\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp739;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp739 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1501\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp739, "return of DeleteTrustedDomain, state S1501");
                this.Manager.Comment("reaching state \'S1592\'");
                goto label37;
            }
            if ((temp746 == 2)) {
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S526\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp740;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp741;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp741 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp740);
                this.Manager.Comment("reaching state \'S682\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp740, "policyHandle of OpenPolicy2, state S682");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp741, "return of OpenPolicy2, state S682");
                this.Manager.Comment("reaching state \'S838\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp742;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp743;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp743 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp742);
                this.Manager.Comment("reaching state \'S994\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp742, "trustHandle of CreateTrustedDomain, state S994");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp743, "return of CreateTrustedDomain, state S994");
                this.Manager.Comment("reaching state \'S1150\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp744;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp744 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1306\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp744, "return of SetTrustedDomainInfo, state S1306");
                this.Manager.Comment("reaching state \'S1411\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp745;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp745 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1502\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp745, "return of DeleteTrustedDomain, state S1502");
                this.Manager.Comment("reaching state \'S1593\'");
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S72GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S73");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S73");
        }
        
        private void TestScenarioS12For2K8S72GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S73");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S73");
        }
        
        private void TestScenarioS12For2K8S72GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S73");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S73");
        }
        #endregion
        
        #region Test Starting in S74
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S74() {
            this.Manager.BeginTest("TestScenarioS12For2K8S74");
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp747;
            bool temp748;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp748 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp747);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp747, temp748);
            this.Manager.Comment("reaching state \'S75\'");
            int temp767 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S74GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S74GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S74GetSUTOSVersionChecker2)));
            if ((temp767 == 0)) {
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S527\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp749;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp750;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp750 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp749);
                this.Manager.Comment("reaching state \'S683\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp749, "policyHandle of OpenPolicy2, state S683");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp750, "return of OpenPolicy2, state S683");
                this.Manager.Comment("reaching state \'S839\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp751;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp752;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp752 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp751);
                this.Manager.Comment("reaching state \'S995\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp751, "trustHandle of CreateTrustedDomain, state S995");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp752, "return of CreateTrustedDomain, state S995");
                this.Manager.Comment("reaching state \'S1151\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp753;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp753 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1307\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp753, "return of SetTrustedDomainInfo, state S1307");
                this.Manager.Comment("reaching state \'S1412\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp754;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp754 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1503\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/AccessDenied\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.AccessDenied, temp754, "return of DeleteTrustedDomain, state S1503");
                this.Manager.Comment("reaching state \'S1594\'");
                goto label38;
            }
            if ((temp767 == 1)) {
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S528\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp755;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp756;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp756 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp755);
                this.Manager.Comment("reaching state \'S684\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp755, "policyHandle of OpenPolicy2, state S684");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp756, "return of OpenPolicy2, state S684");
                this.Manager.Comment("reaching state \'S840\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp757;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp758;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp758 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp757);
                this.Manager.Comment("reaching state \'S996\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp757, "trustHandle of CreateTrustedDomain, state S996");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp758, "return of CreateTrustedDomain, state S996");
                this.Manager.Comment("reaching state \'S1152\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp759;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp759 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1308\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp759, "return of SetTrustedDomainInfo, state S1308");
                this.Manager.Comment("reaching state \'S1413\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp760;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp760 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1504\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp760, "return of DeleteTrustedDomain, state S1504");
                this.Manager.Comment("reaching state \'S1595\'");
                goto label38;
            }
            if ((temp767 == 2)) {
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S529\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp761;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp762;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp762 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp761);
                this.Manager.Comment("reaching state \'S685\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp761, "policyHandle of OpenPolicy2, state S685");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp762, "return of OpenPolicy2, state S685");
                this.Manager.Comment("reaching state \'S841\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp763;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp764;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp764 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp763);
                this.Manager.Comment("reaching state \'S997\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp763, "trustHandle of CreateTrustedDomain, state S997");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp764, "return of CreateTrustedDomain, state S997");
                this.Manager.Comment("reaching state \'S1153\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp765;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp765 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1309\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp765, "return of SetTrustedDomainInfo, state S1309");
                this.Manager.Comment("reaching state \'S1414\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp766;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp766 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1505\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp766, "return of DeleteTrustedDomain, state S1505");
                this.Manager.Comment("reaching state \'S1596\'");
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S74GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S75");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S75");
        }
        
        private void TestScenarioS12For2K8S74GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S75");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S75");
        }
        
        private void TestScenarioS12For2K8S74GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S75");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S75");
        }
        #endregion
        
        #region Test Starting in S76
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S76() {
            this.Manager.BeginTest("TestScenarioS12For2K8S76");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp768;
            bool temp769;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp769 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp768);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp768, temp769);
            this.Manager.Comment("reaching state \'S77\'");
            int temp787 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S76GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S76GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S76GetSUTOSVersionChecker2)));
            if ((temp787 == 0)) {
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S530\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp770;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp771;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp771 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp770);
                this.Manager.Comment("reaching state \'S686\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp770, "policyHandle of OpenPolicy2, state S686");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp771, "return of OpenPolicy2, state S686");
                this.Manager.Comment("reaching state \'S842\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp772;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp773;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp773 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp772);
                this.Manager.Comment("reaching state \'S998\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp772, "trustHandle of CreateTrustedDomain, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp773, "return of CreateTrustedDomain, state S998");
                this.Manager.Comment("reaching state \'S1154\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp774;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp774 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1310\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp774, "return of SetTrustedDomainInfo, state S1310");
                TestScenarioS12For2K8S1352();
                goto label39;
            }
            if ((temp787 == 1)) {
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S531\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp775;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp776;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp776 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp775);
                this.Manager.Comment("reaching state \'S687\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp775, "policyHandle of OpenPolicy2, state S687");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp776, "return of OpenPolicy2, state S687");
                this.Manager.Comment("reaching state \'S843\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp777;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp778;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp778 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp777);
                this.Manager.Comment("reaching state \'S999\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp777, "trustHandle of CreateTrustedDomain, state S999");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp778, "return of CreateTrustedDomain, state S999");
                this.Manager.Comment("reaching state \'S1155\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp779;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp779 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1311\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp779, "return of SetTrustedDomainInfo, state S1311");
                this.Manager.Comment("reaching state \'S1415\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp780;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp780 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1506\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp780, "return of DeleteTrustedDomain, state S1506");
                this.Manager.Comment("reaching state \'S1597\'");
                goto label39;
            }
            if ((temp787 == 2)) {
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S532\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp781;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp782;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp782 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp781);
                this.Manager.Comment("reaching state \'S688\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp781, "policyHandle of OpenPolicy2, state S688");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp782, "return of OpenPolicy2, state S688");
                this.Manager.Comment("reaching state \'S844\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp783;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp784;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp784 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp783);
                this.Manager.Comment("reaching state \'S1000\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp783, "trustHandle of CreateTrustedDomain, state S1000");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp784, "return of CreateTrustedDomain, state S1000");
                this.Manager.Comment("reaching state \'S1156\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp785;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp785 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1312\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp785, "return of SetTrustedDomainInfo, state S1312");
                this.Manager.Comment("reaching state \'S1416\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp786;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp786 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1507\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp786, "return of DeleteTrustedDomain, state S1507");
                this.Manager.Comment("reaching state \'S1598\'");
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S76GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S77");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S77");
        }
        
        private void TestScenarioS12For2K8S76GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S77");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S77");
        }
        
        private void TestScenarioS12For2K8S76GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S77");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S77");
        }
        #endregion
        
        #region Test Starting in S78
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S78() {
            this.Manager.BeginTest("TestScenarioS12For2K8S78");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp788;
            bool temp789;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp789 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp788);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp788, temp789);
            this.Manager.Comment("reaching state \'S79\'");
            int temp807 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S78GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S78GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S78GetSUTOSVersionChecker2)));
            if ((temp807 == 0)) {
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S533\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp790;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp791;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp791 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp790);
                this.Manager.Comment("reaching state \'S689\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp790, "policyHandle of OpenPolicy2, state S689");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp791, "return of OpenPolicy2, state S689");
                this.Manager.Comment("reaching state \'S845\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp792;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp793;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp793 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp792);
                this.Manager.Comment("reaching state \'S1001\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp792, "trustHandle of CreateTrustedDomain, state S1001");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp793, "return of CreateTrustedDomain, state S1001");
                this.Manager.Comment("reaching state \'S1157\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp794;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp794 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1313\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp794, "return of SetTrustedDomainInfo, state S1313");
                TestScenarioS12For2K8S1352();
                goto label40;
            }
            if ((temp807 == 1)) {
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S378\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S534\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp795;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp796;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp796 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp795);
                this.Manager.Comment("reaching state \'S690\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp795, "policyHandle of OpenPolicy2, state S690");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp796, "return of OpenPolicy2, state S690");
                this.Manager.Comment("reaching state \'S846\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp797;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp798;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp798 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp797);
                this.Manager.Comment("reaching state \'S1002\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp797, "trustHandle of CreateTrustedDomain, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp798, "return of CreateTrustedDomain, state S1002");
                this.Manager.Comment("reaching state \'S1158\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp799;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp799 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1314\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp799, "return of SetTrustedDomainInfo, state S1314");
                this.Manager.Comment("reaching state \'S1417\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp800;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp800 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1508\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp800, "return of DeleteTrustedDomain, state S1508");
                this.Manager.Comment("reaching state \'S1599\'");
                goto label40;
            }
            if ((temp807 == 2)) {
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S379\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S535\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp801;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp802;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp802 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp801);
                this.Manager.Comment("reaching state \'S691\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp801, "policyHandle of OpenPolicy2, state S691");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp802, "return of OpenPolicy2, state S691");
                this.Manager.Comment("reaching state \'S847\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp803;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp804;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp804 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp803);
                this.Manager.Comment("reaching state \'S1003\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp803, "trustHandle of CreateTrustedDomain, state S1003");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp804, "return of CreateTrustedDomain, state S1003");
                this.Manager.Comment("reaching state \'S1159\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp805;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp805 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1315\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp805, "return of SetTrustedDomainInfo, state S1315");
                this.Manager.Comment("reaching state \'S1418\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp806;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp806 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1509\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp806, "return of DeleteTrustedDomain, state S1509");
                this.Manager.Comment("reaching state \'S1600\'");
                goto label40;
            }
            throw new InvalidOperationException("never reached");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S78GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S79");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S79");
        }
        
        private void TestScenarioS12For2K8S78GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S79");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S79");
        }
        
        private void TestScenarioS12For2K8S78GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S79");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S79");
        }
        #endregion
        
        #region Test Starting in S8
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S8() {
            this.Manager.BeginTest("TestScenarioS12For2K8S8");
            this.Manager.Comment("reaching state \'S8\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp808;
            bool temp809;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp809 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp808);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp808, temp809);
            this.Manager.Comment("reaching state \'S9\'");
            int temp826 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S8GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S8GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S8GetSUTOSVersionChecker2)));
            if ((temp826 == 0)) {
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S272\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S428\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp810;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp811;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp811 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp810);
                this.Manager.Comment("reaching state \'S584\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp810, "policyHandle of OpenPolicy2, state S584");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp811, "return of OpenPolicy2, state S584");
                this.Manager.Comment("reaching state \'S740\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp812;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp813;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp813 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp812);
                this.Manager.Comment("reaching state \'S896\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp812, "trustHandle of CreateTrustedDomain, state S896");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp813, "return of CreateTrustedDomain, state S896");
                this.Manager.Comment("reaching state \'S1052\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp814;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp814 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1208\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp814, "return of SetTrustedDomainInfo, state S1208");
                TestScenarioS12For2K8S1355();
                goto label41;
            }
            if ((temp826 == 1)) {
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S429\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp815;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp816;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp816 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp815);
                this.Manager.Comment("reaching state \'S585\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp815, "policyHandle of OpenPolicy2, state S585");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp816, "return of OpenPolicy2, state S585");
                this.Manager.Comment("reaching state \'S741\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp817;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp818;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp818 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp817);
                this.Manager.Comment("reaching state \'S897\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp817, "trustHandle of CreateTrustedDomain, state S897");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp818, "return of CreateTrustedDomain, state S897");
                this.Manager.Comment("reaching state \'S1053\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp819;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp819 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1209\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp819, "return of SetTrustedDomainInfo, state S1209");
                TestScenarioS12For2K8S1356();
                goto label41;
            }
            if ((temp826 == 2)) {
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S430\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp820;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp821;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp821 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp820);
                this.Manager.Comment("reaching state \'S586\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp820, "policyHandle of OpenPolicy2, state S586");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp821, "return of OpenPolicy2, state S586");
                this.Manager.Comment("reaching state \'S742\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp822;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp823;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp823 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp822);
                this.Manager.Comment("reaching state \'S898\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp822, "trustHandle of CreateTrustedDomain, state S898");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp823, "return of CreateTrustedDomain, state S898");
                this.Manager.Comment("reaching state \'S1054\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp824;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp824 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1210\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp824, "return of SetTrustedDomainInfo, state S1210");
                this.Manager.Comment("reaching state \'S1362\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp825;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp825 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1453\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp825, "return of DeleteTrustedDomain, state S1453");
                this.Manager.Comment("reaching state \'S1544\'");
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S8GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S9");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S9");
        }
        
        private void TestScenarioS12For2K8S8GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S9");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S9");
        }
        
        private void TestScenarioS12For2K8S8GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S9");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S9");
        }
        #endregion
        
        #region Test Starting in S80
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S80() {
            this.Manager.BeginTest("TestScenarioS12For2K8S80");
            this.Manager.Comment("reaching state \'S80\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp827;
            bool temp828;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp828 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp827);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp827, temp828);
            this.Manager.Comment("reaching state \'S81\'");
            int temp846 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S80GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S80GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S80GetSUTOSVersionChecker2)));
            if ((temp846 == 0)) {
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S380\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S536\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp829;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp830;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp830 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp829);
                this.Manager.Comment("reaching state \'S692\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp829, "policyHandle of OpenPolicy2, state S692");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp830, "return of OpenPolicy2, state S692");
                this.Manager.Comment("reaching state \'S848\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp831;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp832;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp832 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp831);
                this.Manager.Comment("reaching state \'S1004\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp831, "trustHandle of CreateTrustedDomain, state S1004");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp832, "return of CreateTrustedDomain, state S1004");
                this.Manager.Comment("reaching state \'S1160\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp833;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp833 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1316\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp833, "return of SetTrustedDomainInfo, state S1316");
                TestScenarioS12For2K8S1352();
                goto label42;
            }
            if ((temp846 == 1)) {
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S537\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp834;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp835;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp835 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp834);
                this.Manager.Comment("reaching state \'S693\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp834, "policyHandle of OpenPolicy2, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp835, "return of OpenPolicy2, state S693");
                this.Manager.Comment("reaching state \'S849\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp836;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp837;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp837 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp836);
                this.Manager.Comment("reaching state \'S1005\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp836, "trustHandle of CreateTrustedDomain, state S1005");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp837, "return of CreateTrustedDomain, state S1005");
                this.Manager.Comment("reaching state \'S1161\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp838;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp838 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1317\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp838, "return of SetTrustedDomainInfo, state S1317");
                this.Manager.Comment("reaching state \'S1419\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp839;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp839 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1510\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp839, "return of DeleteTrustedDomain, state S1510");
                this.Manager.Comment("reaching state \'S1601\'");
                goto label42;
            }
            if ((temp846 == 2)) {
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S538\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp840;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp841;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp841 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp840);
                this.Manager.Comment("reaching state \'S694\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp840, "policyHandle of OpenPolicy2, state S694");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp841, "return of OpenPolicy2, state S694");
                this.Manager.Comment("reaching state \'S850\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp842;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp843;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp843 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp842);
                this.Manager.Comment("reaching state \'S1006\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp842, "trustHandle of CreateTrustedDomain, state S1006");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp843, "return of CreateTrustedDomain, state S1006");
                this.Manager.Comment("reaching state \'S1162\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp844;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp844 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1318\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp844, "return of SetTrustedDomainInfo, state S1318");
                this.Manager.Comment("reaching state \'S1420\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp845;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp845 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1511\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp845, "return of DeleteTrustedDomain, state S1511");
                this.Manager.Comment("reaching state \'S1602\'");
                goto label42;
            }
            throw new InvalidOperationException("never reached");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S80GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S81");
        }
        
        private void TestScenarioS12For2K8S80GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S81");
        }
        
        private void TestScenarioS12For2K8S80GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S81");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S81");
        }
        #endregion
        
        #region Test Starting in S82
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S82() {
            this.Manager.BeginTest("TestScenarioS12For2K8S82");
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp847;
            bool temp848;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp848 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp847);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp847, temp848);
            this.Manager.Comment("reaching state \'S83\'");
            int temp866 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S82GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S82GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S82GetSUTOSVersionChecker2)));
            if ((temp866 == 0)) {
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S539\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp849;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp850;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp850 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp849);
                this.Manager.Comment("reaching state \'S695\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp849, "policyHandle of OpenPolicy2, state S695");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp850, "return of OpenPolicy2, state S695");
                this.Manager.Comment("reaching state \'S851\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp851;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp852;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp852 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp851);
                this.Manager.Comment("reaching state \'S1007\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp851, "trustHandle of CreateTrustedDomain, state S1007");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp852, "return of CreateTrustedDomain, state S1007");
                this.Manager.Comment("reaching state \'S1163\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp853;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp853 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1319\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp853, "return of SetTrustedDomainInfo, state S1319");
                TestScenarioS12For2K8S1352();
                goto label43;
            }
            if ((temp866 == 1)) {
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S540\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp854;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp855;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp855 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp854);
                this.Manager.Comment("reaching state \'S696\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp854, "policyHandle of OpenPolicy2, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp855, "return of OpenPolicy2, state S696");
                this.Manager.Comment("reaching state \'S852\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp856;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp857;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp857 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp856);
                this.Manager.Comment("reaching state \'S1008\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp856, "trustHandle of CreateTrustedDomain, state S1008");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp857, "return of CreateTrustedDomain, state S1008");
                this.Manager.Comment("reaching state \'S1164\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp858;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp858 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1320\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp858, "return of SetTrustedDomainInfo, state S1320");
                this.Manager.Comment("reaching state \'S1421\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp859;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp859 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1512\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp859, "return of DeleteTrustedDomain, state S1512");
                this.Manager.Comment("reaching state \'S1603\'");
                goto label43;
            }
            if ((temp866 == 2)) {
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S541\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp860;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp861;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp861 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp860);
                this.Manager.Comment("reaching state \'S697\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp860, "policyHandle of OpenPolicy2, state S697");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp861, "return of OpenPolicy2, state S697");
                this.Manager.Comment("reaching state \'S853\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp862;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp863;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp863 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp862);
                this.Manager.Comment("reaching state \'S1009\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp862, "trustHandle of CreateTrustedDomain, state S1009");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp863, "return of CreateTrustedDomain, state S1009");
                this.Manager.Comment("reaching state \'S1165\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp864;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp864 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1321\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp864, "return of SetTrustedDomainInfo, state S1321");
                this.Manager.Comment("reaching state \'S1422\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp865;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp865 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1513\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp865, "return of DeleteTrustedDomain, state S1513");
                this.Manager.Comment("reaching state \'S1604\'");
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S82GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S83");
        }
        
        private void TestScenarioS12For2K8S82GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S83");
        }
        
        private void TestScenarioS12For2K8S82GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S83");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S83");
        }
        #endregion
        
        #region Test Starting in S84
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S84() {
            this.Manager.BeginTest("TestScenarioS12For2K8S84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp867;
            bool temp868;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp868 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp867);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp867, temp868);
            this.Manager.Comment("reaching state \'S85\'");
            int temp886 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S84GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S84GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S84GetSUTOSVersionChecker2)));
            if ((temp886 == 0)) {
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S386\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S542\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp869;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp870;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp870 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp869);
                this.Manager.Comment("reaching state \'S698\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp869, "policyHandle of OpenPolicy2, state S698");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp870, "return of OpenPolicy2, state S698");
                this.Manager.Comment("reaching state \'S854\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp871;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp872;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp872 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp871);
                this.Manager.Comment("reaching state \'S1010\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp871, "trustHandle of CreateTrustedDomain, state S1010");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp872, "return of CreateTrustedDomain, state S1010");
                this.Manager.Comment("reaching state \'S1166\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp873;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp873 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1322\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp873, "return of SetTrustedDomainInfo, state S1322");
                TestScenarioS12For2K8S1352();
                goto label44;
            }
            if ((temp886 == 1)) {
                this.Manager.Comment("reaching state \'S231\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S543\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp874;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp875;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp875 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp874);
                this.Manager.Comment("reaching state \'S699\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp874, "policyHandle of OpenPolicy2, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp875, "return of OpenPolicy2, state S699");
                this.Manager.Comment("reaching state \'S855\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp876;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp877;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp877 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp876);
                this.Manager.Comment("reaching state \'S1011\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp876, "trustHandle of CreateTrustedDomain, state S1011");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp877, "return of CreateTrustedDomain, state S1011");
                this.Manager.Comment("reaching state \'S1167\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp878;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp878 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1323\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp878, "return of SetTrustedDomainInfo, state S1323");
                this.Manager.Comment("reaching state \'S1423\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp879;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp879 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1514\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp879, "return of DeleteTrustedDomain, state S1514");
                this.Manager.Comment("reaching state \'S1605\'");
                goto label44;
            }
            if ((temp886 == 2)) {
                this.Manager.Comment("reaching state \'S232\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S544\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp880;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp881;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp881 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp880);
                this.Manager.Comment("reaching state \'S700\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp880, "policyHandle of OpenPolicy2, state S700");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp881, "return of OpenPolicy2, state S700");
                this.Manager.Comment("reaching state \'S856\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp882;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp883;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp883 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp882);
                this.Manager.Comment("reaching state \'S1012\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp882, "trustHandle of CreateTrustedDomain, state S1012");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp883, "return of CreateTrustedDomain, state S1012");
                this.Manager.Comment("reaching state \'S1168\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp884;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp884 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1324\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp884, "return of SetTrustedDomainInfo, state S1324");
                this.Manager.Comment("reaching state \'S1424\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp885;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp885 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1515\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp885, "return of DeleteTrustedDomain, state S1515");
                this.Manager.Comment("reaching state \'S1606\'");
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S84GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S85");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S85");
        }
        
        private void TestScenarioS12For2K8S84GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S85");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S85");
        }
        
        private void TestScenarioS12For2K8S84GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S85");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S85");
        }
        #endregion
        
        #region Test Starting in S86
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S86() {
            this.Manager.BeginTest("TestScenarioS12For2K8S86");
            this.Manager.Comment("reaching state \'S86\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp887;
            bool temp888;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp888 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp887);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp887, temp888);
            this.Manager.Comment("reaching state \'S87\'");
            int temp906 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S86GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S86GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S86GetSUTOSVersionChecker2)));
            if ((temp906 == 0)) {
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S545\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp889;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp890;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp890 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp889);
                this.Manager.Comment("reaching state \'S701\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp889, "policyHandle of OpenPolicy2, state S701");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp890, "return of OpenPolicy2, state S701");
                this.Manager.Comment("reaching state \'S857\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp891;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp892;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp892 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp891);
                this.Manager.Comment("reaching state \'S1013\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp891, "trustHandle of CreateTrustedDomain, state S1013");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp892, "return of CreateTrustedDomain, state S1013");
                this.Manager.Comment("reaching state \'S1169\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp893;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp893 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1325\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp893, "return of SetTrustedDomainInfo, state S1325");
                TestScenarioS12For2K8S1352();
                goto label45;
            }
            if ((temp906 == 1)) {
                this.Manager.Comment("reaching state \'S234\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S546\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp894;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp895;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp895 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp894);
                this.Manager.Comment("reaching state \'S702\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp894, "policyHandle of OpenPolicy2, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp895, "return of OpenPolicy2, state S702");
                this.Manager.Comment("reaching state \'S858\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp896;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp897;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp897 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp896);
                this.Manager.Comment("reaching state \'S1014\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp896, "trustHandle of CreateTrustedDomain, state S1014");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp897, "return of CreateTrustedDomain, state S1014");
                this.Manager.Comment("reaching state \'S1170\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp898;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp898 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1326\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp898, "return of SetTrustedDomainInfo, state S1326");
                this.Manager.Comment("reaching state \'S1425\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp899;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp899 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1516\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp899, "return of DeleteTrustedDomain, state S1516");
                this.Manager.Comment("reaching state \'S1607\'");
                goto label45;
            }
            if ((temp906 == 2)) {
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S391\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S547\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp900;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp901;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp901 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp900);
                this.Manager.Comment("reaching state \'S703\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp900, "policyHandle of OpenPolicy2, state S703");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp901, "return of OpenPolicy2, state S703");
                this.Manager.Comment("reaching state \'S859\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp902;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp903;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp903 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp902);
                this.Manager.Comment("reaching state \'S1015\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp902, "trustHandle of CreateTrustedDomain, state S1015");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp903, "return of CreateTrustedDomain, state S1015");
                this.Manager.Comment("reaching state \'S1171\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp904;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp904 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1327\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp904, "return of SetTrustedDomainInfo, state S1327");
                this.Manager.Comment("reaching state \'S1426\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp905;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp905 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1517\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp905, "return of DeleteTrustedDomain, state S1517");
                this.Manager.Comment("reaching state \'S1608\'");
                goto label45;
            }
            throw new InvalidOperationException("never reached");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S86GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S87");
        }
        
        private void TestScenarioS12For2K8S86GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S87");
        }
        
        private void TestScenarioS12For2K8S86GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S87");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S87");
        }
        #endregion
        
        #region Test Starting in S88
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S88() {
            this.Manager.BeginTest("TestScenarioS12For2K8S88");
            this.Manager.Comment("reaching state \'S88\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp907;
            bool temp908;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp908 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp907);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp907, temp908);
            this.Manager.Comment("reaching state \'S89\'");
            int temp926 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S88GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S88GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S88GetSUTOSVersionChecker2)));
            if ((temp926 == 0)) {
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S548\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp909;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp910;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp910 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp909);
                this.Manager.Comment("reaching state \'S704\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp909, "policyHandle of OpenPolicy2, state S704");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp910, "return of OpenPolicy2, state S704");
                this.Manager.Comment("reaching state \'S860\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp911;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp912;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp912 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp911);
                this.Manager.Comment("reaching state \'S1016\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp911, "trustHandle of CreateTrustedDomain, state S1016");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp912, "return of CreateTrustedDomain, state S1016");
                this.Manager.Comment("reaching state \'S1172\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp913;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp913 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1328\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp913, "return of SetTrustedDomainInfo, state S1328");
                TestScenarioS12For2K8S1352();
                goto label46;
            }
            if ((temp926 == 1)) {
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S393\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S549\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp914;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp915;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp915 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp914);
                this.Manager.Comment("reaching state \'S705\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp914, "policyHandle of OpenPolicy2, state S705");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp915, "return of OpenPolicy2, state S705");
                this.Manager.Comment("reaching state \'S861\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp916;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp917;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp917 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp916);
                this.Manager.Comment("reaching state \'S1017\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp916, "trustHandle of CreateTrustedDomain, state S1017");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp917, "return of CreateTrustedDomain, state S1017");
                this.Manager.Comment("reaching state \'S1173\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp918;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp918 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1329\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp918, "return of SetTrustedDomainInfo, state S1329");
                this.Manager.Comment("reaching state \'S1427\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp919;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp919 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1518\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp919, "return of DeleteTrustedDomain, state S1518");
                this.Manager.Comment("reaching state \'S1609\'");
                goto label46;
            }
            if ((temp926 == 2)) {
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S394\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S550\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp920;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp921;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp921 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp920);
                this.Manager.Comment("reaching state \'S706\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp920, "policyHandle of OpenPolicy2, state S706");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp921, "return of OpenPolicy2, state S706");
                this.Manager.Comment("reaching state \'S862\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp922;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp923;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp923 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp922);
                this.Manager.Comment("reaching state \'S1018\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp922, "trustHandle of CreateTrustedDomain, state S1018");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp923, "return of CreateTrustedDomain, state S1018");
                this.Manager.Comment("reaching state \'S1174\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp924;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp924 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1330\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp924, "return of SetTrustedDomainInfo, state S1330");
                this.Manager.Comment("reaching state \'S1428\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp925;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp925 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1519\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp925, "return of DeleteTrustedDomain, state S1519");
                this.Manager.Comment("reaching state \'S1610\'");
                goto label46;
            }
            throw new InvalidOperationException("never reached");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S88GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S89");
        }
        
        private void TestScenarioS12For2K8S88GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S89");
        }
        
        private void TestScenarioS12For2K8S88GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S89");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S89");
        }
        #endregion
        
        #region Test Starting in S90
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S90() {
            this.Manager.BeginTest("TestScenarioS12For2K8S90");
            this.Manager.Comment("reaching state \'S90\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp927;
            bool temp928;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp928 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp927);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp927, temp928);
            this.Manager.Comment("reaching state \'S91\'");
            int temp946 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S90GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S90GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S90GetSUTOSVersionChecker2)));
            if ((temp946 == 0)) {
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S395\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S551\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp929;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp930;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp930 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp929);
                this.Manager.Comment("reaching state \'S707\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp929, "policyHandle of OpenPolicy2, state S707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp930, "return of OpenPolicy2, state S707");
                this.Manager.Comment("reaching state \'S863\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp931;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp932;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp932 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp931);
                this.Manager.Comment("reaching state \'S1019\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp931, "trustHandle of CreateTrustedDomain, state S1019");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp932, "return of CreateTrustedDomain, state S1019");
                this.Manager.Comment("reaching state \'S1175\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp933;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp933 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1331\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp933, "return of SetTrustedDomainInfo, state S1331");
                TestScenarioS12For2K8S1352();
                goto label47;
            }
            if ((temp946 == 1)) {
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S396\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S552\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp934;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp935;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp935 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp934);
                this.Manager.Comment("reaching state \'S708\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp934, "policyHandle of OpenPolicy2, state S708");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp935, "return of OpenPolicy2, state S708");
                this.Manager.Comment("reaching state \'S864\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp936;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp937;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp937 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp936);
                this.Manager.Comment("reaching state \'S1020\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp936, "trustHandle of CreateTrustedDomain, state S1020");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp937, "return of CreateTrustedDomain, state S1020");
                this.Manager.Comment("reaching state \'S1176\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp938;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp938 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1332\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp938, "return of SetTrustedDomainInfo, state S1332");
                this.Manager.Comment("reaching state \'S1429\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp939;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp939 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1520\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp939, "return of DeleteTrustedDomain, state S1520");
                this.Manager.Comment("reaching state \'S1611\'");
                goto label47;
            }
            if ((temp946 == 2)) {
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S397\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S553\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp940;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp941;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp941 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp940);
                this.Manager.Comment("reaching state \'S709\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp940, "policyHandle of OpenPolicy2, state S709");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp941, "return of OpenPolicy2, state S709");
                this.Manager.Comment("reaching state \'S865\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp942;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp943;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp943 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp942);
                this.Manager.Comment("reaching state \'S1021\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp942, "trustHandle of CreateTrustedDomain, state S1021");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp943, "return of CreateTrustedDomain, state S1021");
                this.Manager.Comment("reaching state \'S1177\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp944;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp944 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1333\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp944, "return of SetTrustedDomainInfo, state S1333");
                this.Manager.Comment("reaching state \'S1430\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp945;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp945 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1521\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp945, "return of DeleteTrustedDomain, state S1521");
                this.Manager.Comment("reaching state \'S1612\'");
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S90GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S91");
        }
        
        private void TestScenarioS12For2K8S90GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S91");
        }
        
        private void TestScenarioS12For2K8S90GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S91");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S91");
        }
        #endregion
        
        #region Test Starting in S92
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S92() {
            this.Manager.BeginTest("TestScenarioS12For2K8S92");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp947;
            bool temp948;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp948 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp947);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp947, temp948);
            this.Manager.Comment("reaching state \'S93\'");
            int temp966 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S92GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S92GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S92GetSUTOSVersionChecker2)));
            if ((temp966 == 0)) {
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S398\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S554\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp949;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp950;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp950 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp949);
                this.Manager.Comment("reaching state \'S710\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp949, "policyHandle of OpenPolicy2, state S710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp950, "return of OpenPolicy2, state S710");
                this.Manager.Comment("reaching state \'S866\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp951;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp952;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp952 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp951);
                this.Manager.Comment("reaching state \'S1022\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp951, "trustHandle of CreateTrustedDomain, state S1022");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp952, "return of CreateTrustedDomain, state S1022");
                this.Manager.Comment("reaching state \'S1178\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp953;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp953 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1334\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp953, "return of SetTrustedDomainInfo, state S1334");
                TestScenarioS12For2K8S1352();
                goto label48;
            }
            if ((temp966 == 1)) {
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S399\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S555\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp954;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp955;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp955 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp954);
                this.Manager.Comment("reaching state \'S711\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp954, "policyHandle of OpenPolicy2, state S711");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp955, "return of OpenPolicy2, state S711");
                this.Manager.Comment("reaching state \'S867\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp956;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp957;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp957 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp956);
                this.Manager.Comment("reaching state \'S1023\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp956, "trustHandle of CreateTrustedDomain, state S1023");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp957, "return of CreateTrustedDomain, state S1023");
                this.Manager.Comment("reaching state \'S1179\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp958;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp958 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1335\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp958, "return of SetTrustedDomainInfo, state S1335");
                this.Manager.Comment("reaching state \'S1431\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp959;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp959 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1522\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp959, "return of DeleteTrustedDomain, state S1522");
                this.Manager.Comment("reaching state \'S1613\'");
                goto label48;
            }
            if ((temp966 == 2)) {
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S400\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S556\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp960;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp961;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp961 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp960);
                this.Manager.Comment("reaching state \'S712\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp960, "policyHandle of OpenPolicy2, state S712");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp961, "return of OpenPolicy2, state S712");
                this.Manager.Comment("reaching state \'S868\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp962;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp963;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp963 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp962);
                this.Manager.Comment("reaching state \'S1024\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp962, "trustHandle of CreateTrustedDomain, state S1024");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp963, "return of CreateTrustedDomain, state S1024");
                this.Manager.Comment("reaching state \'S1180\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp964;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp964 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1336\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp964, "return of SetTrustedDomainInfo, state S1336");
                this.Manager.Comment("reaching state \'S1432\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp965;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp965 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1523\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp965, "return of DeleteTrustedDomain, state S1523");
                this.Manager.Comment("reaching state \'S1614\'");
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S92GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S93");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S93");
        }
        
        private void TestScenarioS12For2K8S92GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S93");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S93");
        }
        
        private void TestScenarioS12For2K8S92GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S93");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S93");
        }
        #endregion
        
        #region Test Starting in S94
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S94() {
            this.Manager.BeginTest("TestScenarioS12For2K8S94");
            this.Manager.Comment("reaching state \'S94\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp967;
            bool temp968;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp968 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp967);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp967, temp968);
            this.Manager.Comment("reaching state \'S95\'");
            int temp986 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S94GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S94GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S94GetSUTOSVersionChecker2)));
            if ((temp986 == 0)) {
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S557\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp969;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp970;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp970 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp969);
                this.Manager.Comment("reaching state \'S713\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp969, "policyHandle of OpenPolicy2, state S713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp970, "return of OpenPolicy2, state S713");
                this.Manager.Comment("reaching state \'S869\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp971;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp972;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp972 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp971);
                this.Manager.Comment("reaching state \'S1025\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp971, "trustHandle of CreateTrustedDomain, state S1025");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp972, "return of CreateTrustedDomain, state S1025");
                this.Manager.Comment("reaching state \'S1181\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp973;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp973 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1337\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp973, "return of SetTrustedDomainInfo, state S1337");
                TestScenarioS12For2K8S1352();
                goto label49;
            }
            if ((temp986 == 1)) {
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S558\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp974;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp975;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp975 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp974);
                this.Manager.Comment("reaching state \'S714\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp974, "policyHandle of OpenPolicy2, state S714");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp975, "return of OpenPolicy2, state S714");
                this.Manager.Comment("reaching state \'S870\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp976;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp977;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp977 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp976);
                this.Manager.Comment("reaching state \'S1026\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp976, "trustHandle of CreateTrustedDomain, state S1026");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp977, "return of CreateTrustedDomain, state S1026");
                this.Manager.Comment("reaching state \'S1182\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp978;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp978 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1338\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp978, "return of SetTrustedDomainInfo, state S1338");
                this.Manager.Comment("reaching state \'S1433\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp979;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp979 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1524\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp979, "return of DeleteTrustedDomain, state S1524");
                this.Manager.Comment("reaching state \'S1615\'");
                goto label49;
            }
            if ((temp986 == 2)) {
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S559\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp980;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp981;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp981 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp980);
                this.Manager.Comment("reaching state \'S715\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp980, "policyHandle of OpenPolicy2, state S715");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp981, "return of OpenPolicy2, state S715");
                this.Manager.Comment("reaching state \'S871\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp982;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp983;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp983 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp982);
                this.Manager.Comment("reaching state \'S1027\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp982, "trustHandle of CreateTrustedDomain, state S1027");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp983, "return of CreateTrustedDomain, state S1027");
                this.Manager.Comment("reaching state \'S1183\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp984;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp984 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1339\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp984, "return of SetTrustedDomainInfo, state S1339");
                this.Manager.Comment("reaching state \'S1434\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp985;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp985 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1525\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp985, "return of DeleteTrustedDomain, state S1525");
                this.Manager.Comment("reaching state \'S1616\'");
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S94GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S95");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S95");
        }
        
        private void TestScenarioS12For2K8S94GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S95");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S95");
        }
        
        private void TestScenarioS12For2K8S94GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S95");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S95");
        }
        #endregion
        
        #region Test Starting in S96
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S96() {
            this.Manager.BeginTest("TestScenarioS12For2K8S96");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp987;
            bool temp988;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp988 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp987);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp987, temp988);
            this.Manager.Comment("reaching state \'S97\'");
            int temp1006 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S96GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S96GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S96GetSUTOSVersionChecker2)));
            if ((temp1006 == 0)) {
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S560\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp989;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp990;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp990 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp989);
                this.Manager.Comment("reaching state \'S716\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp989, "policyHandle of OpenPolicy2, state S716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp990, "return of OpenPolicy2, state S716");
                this.Manager.Comment("reaching state \'S872\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp991;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp992;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp992 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp991);
                this.Manager.Comment("reaching state \'S1028\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp991, "trustHandle of CreateTrustedDomain, state S1028");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp992, "return of CreateTrustedDomain, state S1028");
                this.Manager.Comment("reaching state \'S1184\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp993;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp993 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1340\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/InvalidParameter\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp993, "return of SetTrustedDomainInfo, state S1340");
                TestScenarioS12For2K8S1352();
                goto label50;
            }
            if ((temp1006 == 1)) {
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S405\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S561\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp994;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp995;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp995 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp994);
                this.Manager.Comment("reaching state \'S717\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp994, "policyHandle of OpenPolicy2, state S717");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp995, "return of OpenPolicy2, state S717");
                this.Manager.Comment("reaching state \'S873\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp996;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp997;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp997 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp996);
                this.Manager.Comment("reaching state \'S1029\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp996, "trustHandle of CreateTrustedDomain, state S1029");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp997, "return of CreateTrustedDomain, state S1029");
                this.Manager.Comment("reaching state \'S1185\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp998;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp998 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1341\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp998, "return of SetTrustedDomainInfo, state S1341");
                this.Manager.Comment("reaching state \'S1435\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp999;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp999 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1526\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp999, "return of DeleteTrustedDomain, state S1526");
                this.Manager.Comment("reaching state \'S1617\'");
                goto label50;
            }
            if ((temp1006 == 2)) {
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S406\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S562\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1000;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1001;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp1001 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1000);
                this.Manager.Comment("reaching state \'S718\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1000, "policyHandle of OpenPolicy2, state S718");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1001, "return of OpenPolicy2, state S718");
                this.Manager.Comment("reaching state \'S874\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1002;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1003;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp1003 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1002);
                this.Manager.Comment("reaching state \'S1030\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1002, "trustHandle of CreateTrustedDomain, state S1030");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1003, "return of CreateTrustedDomain, state S1030");
                this.Manager.Comment("reaching state \'S1186\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1004;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp1004 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1342\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1004, "return of SetTrustedDomainInfo, state S1342");
                this.Manager.Comment("reaching state \'S1436\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1005;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp1005 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1527\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1005, "return of DeleteTrustedDomain, state S1527");
                this.Manager.Comment("reaching state \'S1618\'");
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S96GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S97");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S97");
        }
        
        private void TestScenarioS12For2K8S96GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S97");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S97");
        }
        
        private void TestScenarioS12For2K8S96GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S97");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S97");
        }
        #endregion
        
        #region Test Starting in S98
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS12For2K8S98() {
            this.Manager.BeginTest("TestScenarioS12For2K8S98");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server temp1007;
            bool temp1008;
            this.Manager.Comment("executing step \'call GetSUTOSVersion(out _)\'");
            temp1008 = this.ILsadManagedAdapterInstance.GetSUTOSVersion(out temp1007);
            this.Manager.AddReturn(GetSUTOSVersionInfo, null, temp1007, temp1008);
            this.Manager.Comment("reaching state \'S99\'");
            int temp1026 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S98GetSUTOSVersionChecker)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S98GetSUTOSVersionChecker1)), new ExpectedReturn(TestScenarioS12For2K8.GetSUTOSVersionInfo, null, new GetSUTOSVersionDelegate1(this.TestScenarioS12For2K8S98GetSUTOSVersionChecker2)));
            if ((temp1026 == 0)) {
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S407\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S563\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1009;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1010;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp1010 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1009);
                this.Manager.Comment("reaching state \'S719\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1009, "policyHandle of OpenPolicy2, state S719");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1010, "return of OpenPolicy2, state S719");
                this.Manager.Comment("reaching state \'S875\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1011;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1012;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp1012 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1011);
                this.Manager.Comment("reaching state \'S1031\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1011, "trustHandle of CreateTrustedDomain, state S1031");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1012, "return of CreateTrustedDomain, state S1031");
                this.Manager.Comment("reaching state \'S1187\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1013;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp1013 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1343\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/NoSuchDomain\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1013, "return of SetTrustedDomainInfo, state S1343");
                TestScenarioS12For2K8S1352();
                goto label51;
            }
            if ((temp1026 == 1)) {
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S408\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S564\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1014;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1015;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp1015 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1014);
                this.Manager.Comment("reaching state \'S720\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1014, "policyHandle of OpenPolicy2, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1015, "return of OpenPolicy2, state S720");
                this.Manager.Comment("reaching state \'S876\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1016;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1017;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp1017 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1016);
                this.Manager.Comment("reaching state \'S1032\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1016, "trustHandle of CreateTrustedDomain, state S1032");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1017, "return of CreateTrustedDomain, state S1032");
                this.Manager.Comment("reaching state \'S1188\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1018;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp1018 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1344\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1018, "return of SetTrustedDomainInfo, state S1344");
                this.Manager.Comment("reaching state \'S1437\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1019;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp1019 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1528\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1019, "return of DeleteTrustedDomain, state S1528");
                this.Manager.Comment("reaching state \'S1619\'");
                goto label51;
            }
            if ((temp1026 == 2)) {
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                        ")\'");
                this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
                this.Manager.Comment("reaching state \'S409\'");
                this.Manager.Comment("checking step \'return Initialize\'");
                this.Manager.Comment("reaching state \'S565\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1020;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1021;
                this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
                temp1021 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1020);
                this.Manager.Comment("reaching state \'S721\'");
                this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1020, "policyHandle of OpenPolicy2, state S721");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1021, "return of OpenPolicy2, state S721");
                this.Manager.Comment("reaching state \'S877\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1022;
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1023;
                this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                        "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                        "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
                temp1023 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "DomainNetBios",
                                0u,
                                0u,
                                0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1022);
                this.Manager.Comment("reaching state \'S1033\'");
                this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1022, "trustHandle of CreateTrustedDomain, state S1033");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1023, "return of CreateTrustedDomain, state S1033");
                this.Manager.Comment("reaching state \'S1189\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1024;
                this.Manager.Comment(@"executing step 'call SetTrustedDomainInfo(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""NetBiosName"",TrustType=2,TrustDir=2,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True,TRUSTED_DOMAIN_AUTH_INFORMATION(IncomingAuthInfos=0,OutgoingAuthInfos=0),65565,True)'");
                temp1024 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfo(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                                "TrustDomainName",
                                "TrustDomain_Sid",
                                "TrustDomain_NetBiosName",
                                "TrustType",
                                "TrustDir",
                                "TrustAttr"}, new object[] {
                                "Domain",
                                "DomainSid",
                                "NetBiosName",
                                2u,
                                2u,
                                8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_AUTH_INFORMATION>(new string[] {
                                "IncomingAuthInfos",
                                "OutgoingAuthInfos"}, new object[] {
                                0u,
                                0u}), 65565u, true);
                this.Manager.Comment("reaching state \'S1345\'");
                this.Manager.Comment("checking step \'return SetTrustedDomainInfo/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1024, "return of SetTrustedDomainInfo, state S1345");
                this.Manager.Comment("reaching state \'S1438\'");
                Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1025;
                this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
                temp1025 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
                this.Manager.Comment("reaching state \'S1529\'");
                this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1025, "return of DeleteTrustedDomain, state S1529");
                this.Manager.Comment("reaching state \'S1620\'");
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void TestScenarioS12For2K8S98GetSUTOSVersionChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8r2]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8r2 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S99");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S99");
        }
        
        private void TestScenarioS12For2K8S98GetSUTOSVersionChecker1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k8]:True\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8 <= sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S99");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S99");
        }
        
        private void TestScenarioS12For2K8S98GetSUTOSVersionChecker2(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server sutOSVersion, bool @return) {
            this.Manager.Comment("checking step \'return GetSUTOSVersion/[out Windows2k3]:True\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k3, sutOSVersion, "sutOSVersion of GetSUTOSVersion, state S99");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, @return, "return of GetSUTOSVersion, state S99");
        }
        #endregion
    }
}
