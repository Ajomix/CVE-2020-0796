// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.Protocols.TestTools;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Microsoft.Protocols.TestTools.Messages.Runtime;

    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TestScenarioS15 : PtfTestClassBase {
        
        public TestScenarioS15() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000");
        }
        
        #region Expect Delegates
        public delegate void DeleteTrustedDomainDelegate1(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus @return);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase DeleteTrustedDomainInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter), "DeleteTrustedDomain", typeof(int), typeof(string), typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter ILsadManagedAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ILsadManagedAdapterInstance = ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter)(this.GetAdapter(typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S0() {
            this.Manager.BeginTest("TestScenarioS15S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S864\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp0;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp0);
            this.Manager.Comment("reaching state \'S1296\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp0, "policyHandle of OpenPolicy2, state S1296");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1, "return of OpenPolicy2, state S1296");
            this.Manager.Comment("reaching state \'S1728\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp3 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2);
            this.Manager.Comment("reaching state \'S2160\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2, "trustHandle of CreateTrustedDomain, state S2160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp3, "return of CreateTrustedDomain, state S2160");
            this.Manager.Comment("reaching state \'S2592\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp4;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp5;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(2,\"Domain10\",Valid,65663,out _)\'");
            temp5 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(2, "Domain10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp4);
            this.Manager.Comment("reaching state \'S3024\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp4, "trustHandle of OpenTrustedDomainByName, state S3024");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp5, "return of OpenTrustedDomainByName, state S3024");
            this.Manager.Comment("reaching state \'S3456\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp6;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp6 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3888\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp6, "return of SetTrustedDomainInfoByName, state S3888");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        
        private void TestScenarioS15S4320() {
            this.Manager.Comment("reaching state \'S4320\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp7;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp7 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S4326\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp7, "return of DeleteTrustedDomain, state S4326");
            this.Manager.Comment("reaching state \'S4328\'");
        }
        #endregion
        
        #region Test Starting in S10
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S10() {
            this.Manager.BeginTest("TestScenarioS15S10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S869\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp8;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp9;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp9 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp8);
            this.Manager.Comment("reaching state \'S1301\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp8, "policyHandle of OpenPolicy2, state S1301");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp9, "return of OpenPolicy2, state S1301");
            this.Manager.Comment("reaching state \'S1733\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp10;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp11;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp11 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp10);
            this.Manager.Comment("reaching state \'S2165\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp10, "trustHandle of CreateTrustedDomain, state S2165");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp11, "return of CreateTrustedDomain, state S2165");
            this.Manager.Comment("reaching state \'S2597\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp12;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp13;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp13 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp12);
            this.Manager.Comment("reaching state \'S3029\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp12, "trustHandle of OpenTrustedDomainByName, state S3029");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp13, "return of OpenTrustedDomainByName, state S3029");
            this.Manager.Comment("reaching state \'S3461\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp14;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp14 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3893\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp14, "return of SetTrustedDomainInfoByName, state S3893");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        
        private void TestScenarioS15S4322() {
            this.Manager.Comment("reaching state \'S4322\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp15;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp15 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.AddReturn(DeleteTrustedDomainInfo, null, temp15);
            TestScenarioS15S4327();
        }
        
        private void TestScenarioS15S4327() {
            this.Manager.Comment("reaching state \'S4327\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(TestScenarioS15.DeleteTrustedDomainInfo, null, new DeleteTrustedDomainDelegate1(this.TestScenarioS15S10DeleteTrustedDomainChecker)));
            this.Manager.Comment("reaching state \'S4329\'");
        }
        
        private void TestScenarioS15S10DeleteTrustedDomainChecker(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus @return) {
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), @return, "return of DeleteTrustedDomain, state S4327");
        }
        #endregion
        
        #region Test Starting in S100
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S100() {
            this.Manager.BeginTest("TestScenarioS15S100");
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S914\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp16;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp17;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp17 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp16);
            this.Manager.Comment("reaching state \'S1346\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp16, "policyHandle of OpenPolicy2, state S1346");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp17, "return of OpenPolicy2, state S1346");
            this.Manager.Comment("reaching state \'S1778\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp18;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp19;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp19 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp18);
            this.Manager.Comment("reaching state \'S2210\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp18, "trustHandle of CreateTrustedDomain, state S2210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp19, "return of CreateTrustedDomain, state S2210");
            this.Manager.Comment("reaching state \'S2642\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp20;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp21;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp21 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp20);
            this.Manager.Comment("reaching state \'S3074\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp20, "trustHandle of OpenTrustedDomainByName, state S3074");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp21, "return of OpenTrustedDomainByName, state S3074");
            this.Manager.Comment("reaching state \'S3506\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp22;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp22 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3938\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp22, "return of SetTrustedDomainInfoByName, state S3938");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        
        private void TestScenarioS15S4325() {
            this.Manager.Comment("reaching state \'S4325\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp23;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp23 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.AddReturn(DeleteTrustedDomainInfo, null, temp23);
            TestScenarioS15S4327();
        }
        #endregion
        
        #region Test Starting in S102
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S102() {
            this.Manager.BeginTest("TestScenarioS15S102");
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S103\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S915\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp24;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp25;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp25 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp24);
            this.Manager.Comment("reaching state \'S1347\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp24, "policyHandle of OpenPolicy2, state S1347");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp25, "return of OpenPolicy2, state S1347");
            this.Manager.Comment("reaching state \'S1779\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp26;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp27;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp27 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp26);
            this.Manager.Comment("reaching state \'S2211\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp26, "trustHandle of CreateTrustedDomain, state S2211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp27, "return of CreateTrustedDomain, state S2211");
            this.Manager.Comment("reaching state \'S2643\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp28;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp29;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp29 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp28);
            this.Manager.Comment("reaching state \'S3075\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp28, "trustHandle of OpenTrustedDomainByName, state S3075");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp29, "return of OpenTrustedDomainByName, state S3075");
            this.Manager.Comment("reaching state \'S3507\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp30;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp30 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S3939\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp30, "return of SetTrustedDomainInfoByName, state S3939");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S104
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S104() {
            this.Manager.BeginTest("TestScenarioS15S104");
            this.Manager.Comment("reaching state \'S104\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S916\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp31;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp32;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp32 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp31);
            this.Manager.Comment("reaching state \'S1348\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp31, "policyHandle of OpenPolicy2, state S1348");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp32, "return of OpenPolicy2, state S1348");
            this.Manager.Comment("reaching state \'S1780\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp33;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp34;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp34 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp33);
            this.Manager.Comment("reaching state \'S2212\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp33, "trustHandle of CreateTrustedDomain, state S2212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp34, "return of CreateTrustedDomain, state S2212");
            this.Manager.Comment("reaching state \'S2644\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp35;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp36;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp36 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp35);
            this.Manager.Comment("reaching state \'S3076\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp35, "trustHandle of OpenTrustedDomainByName, state S3076");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp36, "return of OpenTrustedDomainByName, state S3076");
            this.Manager.Comment("reaching state \'S3508\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp37;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp37 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S3940\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp37, "return of SetTrustedDomainInfoByName, state S3940");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S106
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S106() {
            this.Manager.BeginTest("TestScenarioS15S106");
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S917\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp38;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp39;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp39 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp38);
            this.Manager.Comment("reaching state \'S1349\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp38, "policyHandle of OpenPolicy2, state S1349");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp39, "return of OpenPolicy2, state S1349");
            this.Manager.Comment("reaching state \'S1781\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp40;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp41;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp41 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp40);
            this.Manager.Comment("reaching state \'S2213\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp40, "trustHandle of CreateTrustedDomain, state S2213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp41, "return of CreateTrustedDomain, state S2213");
            this.Manager.Comment("reaching state \'S2645\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp42;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp43;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp43 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp42);
            this.Manager.Comment("reaching state \'S3077\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp42, "trustHandle of OpenTrustedDomainByName, state S3077");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp43, "return of OpenTrustedDomainByName, state S3077");
            this.Manager.Comment("reaching state \'S3509\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp44;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp44 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S3941\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp44, "return of SetTrustedDomainInfoByName, state S3941");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S108
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S108() {
            this.Manager.BeginTest("TestScenarioS15S108");
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S918\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp45;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp46;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp46 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp45);
            this.Manager.Comment("reaching state \'S1350\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp45, "policyHandle of OpenPolicy2, state S1350");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp46, "return of OpenPolicy2, state S1350");
            this.Manager.Comment("reaching state \'S1782\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp47;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp48;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp48 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp47);
            this.Manager.Comment("reaching state \'S2214\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp47, "trustHandle of CreateTrustedDomain, state S2214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp48, "return of CreateTrustedDomain, state S2214");
            this.Manager.Comment("reaching state \'S2646\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp49;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp50;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp50 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp49);
            this.Manager.Comment("reaching state \'S3078\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp49, "trustHandle of OpenTrustedDomainByName, state S3078");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp50, "return of OpenTrustedDomainByName, state S3078");
            this.Manager.Comment("reaching state \'S3510\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp51;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp51 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S3942\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp51, "return of SetTrustedDomainInfoByName, state S3942");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S110
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S110() {
            this.Manager.BeginTest("TestScenarioS15S110");
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S919\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp52;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp53;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp53 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp52);
            this.Manager.Comment("reaching state \'S1351\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp52, "policyHandle of OpenPolicy2, state S1351");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp53, "return of OpenPolicy2, state S1351");
            this.Manager.Comment("reaching state \'S1783\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp54;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp55;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp55 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp54);
            this.Manager.Comment("reaching state \'S2215\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp54, "trustHandle of CreateTrustedDomain, state S2215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp55, "return of CreateTrustedDomain, state S2215");
            this.Manager.Comment("reaching state \'S2647\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp56;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp57;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp57 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp56);
            this.Manager.Comment("reaching state \'S3079\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp56, "trustHandle of OpenTrustedDomainByName, state S3079");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp57, "return of OpenTrustedDomainByName, state S3079");
            this.Manager.Comment("reaching state \'S3511\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp58;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp58 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S3943\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp58, "return of SetTrustedDomainInfoByName, state S3943");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S112
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S112() {
            this.Manager.BeginTest("TestScenarioS15S112");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S920\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp59;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp60;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp60 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp59);
            this.Manager.Comment("reaching state \'S1352\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp59, "policyHandle of OpenPolicy2, state S1352");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp60, "return of OpenPolicy2, state S1352");
            this.Manager.Comment("reaching state \'S1784\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp61;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp62;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp62 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp61);
            this.Manager.Comment("reaching state \'S2216\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp61, "trustHandle of CreateTrustedDomain, state S2216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp62, "return of CreateTrustedDomain, state S2216");
            this.Manager.Comment("reaching state \'S2648\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp63;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp64;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp64 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp63);
            this.Manager.Comment("reaching state \'S3080\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp63, "trustHandle of OpenTrustedDomainByName, state S3080");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp64, "return of OpenTrustedDomainByName, state S3080");
            this.Manager.Comment("reaching state \'S3512\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp65;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp65 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3944\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp65, "return of SetTrustedDomainInfoByName, state S3944");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S114
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S114() {
            this.Manager.BeginTest("TestScenarioS15S114");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S921\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp66;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp67;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp67 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp66);
            this.Manager.Comment("reaching state \'S1353\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp66, "policyHandle of OpenPolicy2, state S1353");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp67, "return of OpenPolicy2, state S1353");
            this.Manager.Comment("reaching state \'S1785\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp68;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp69;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp69 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp68);
            this.Manager.Comment("reaching state \'S2217\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp68, "trustHandle of CreateTrustedDomain, state S2217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp69, "return of CreateTrustedDomain, state S2217");
            this.Manager.Comment("reaching state \'S2649\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp70;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp71;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp71 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp70);
            this.Manager.Comment("reaching state \'S3081\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp70, "trustHandle of OpenTrustedDomainByName, state S3081");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp71, "return of OpenTrustedDomainByName, state S3081");
            this.Manager.Comment("reaching state \'S3513\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp72;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp72 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3945\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp72, "return of SetTrustedDomainInfoByName, state S3945");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S116
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S116() {
            this.Manager.BeginTest("TestScenarioS15S116");
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S922\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp73;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp74;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp74 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp73);
            this.Manager.Comment("reaching state \'S1354\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp73, "policyHandle of OpenPolicy2, state S1354");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp74, "return of OpenPolicy2, state S1354");
            this.Manager.Comment("reaching state \'S1786\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp75;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp76;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp76 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp75);
            this.Manager.Comment("reaching state \'S2218\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp75, "trustHandle of CreateTrustedDomain, state S2218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp76, "return of CreateTrustedDomain, state S2218");
            this.Manager.Comment("reaching state \'S2650\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp77;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp78;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp78 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp77);
            this.Manager.Comment("reaching state \'S3082\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp77, "trustHandle of OpenTrustedDomainByName, state S3082");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp78, "return of OpenTrustedDomainByName, state S3082");
            this.Manager.Comment("reaching state \'S3514\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp79;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp79 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3946\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp79, "return of SetTrustedDomainInfoByName, state S3946");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S118
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S118() {
            this.Manager.BeginTest("TestScenarioS15S118");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S923\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp80;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp81;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp81 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp80);
            this.Manager.Comment("reaching state \'S1355\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp80, "policyHandle of OpenPolicy2, state S1355");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp81, "return of OpenPolicy2, state S1355");
            this.Manager.Comment("reaching state \'S1787\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp82;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp83;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp83 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp82);
            this.Manager.Comment("reaching state \'S2219\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp82, "trustHandle of CreateTrustedDomain, state S2219");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp83, "return of CreateTrustedDomain, state S2219");
            this.Manager.Comment("reaching state \'S2651\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp84;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp85;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp85 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp84);
            this.Manager.Comment("reaching state \'S3083\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp84, "trustHandle of OpenTrustedDomainByName, state S3083");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp85, "return of OpenTrustedDomainByName, state S3083");
            this.Manager.Comment("reaching state \'S3515\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp86;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp86 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3947\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp86, "return of SetTrustedDomainInfoByName, state S3947");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S12() {
            this.Manager.BeginTest("TestScenarioS15S12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S870\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp87;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp88;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp88 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp87);
            this.Manager.Comment("reaching state \'S1302\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp87, "policyHandle of OpenPolicy2, state S1302");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp88, "return of OpenPolicy2, state S1302");
            this.Manager.Comment("reaching state \'S1734\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp89;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp90;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp90 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp89);
            this.Manager.Comment("reaching state \'S2166\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp89, "trustHandle of CreateTrustedDomain, state S2166");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp90, "return of CreateTrustedDomain, state S2166");
            this.Manager.Comment("reaching state \'S2598\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp91;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp92;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp92 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp91);
            this.Manager.Comment("reaching state \'S3030\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp91, "trustHandle of OpenTrustedDomainByName, state S3030");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp92, "return of OpenTrustedDomainByName, state S3030");
            this.Manager.Comment("reaching state \'S3462\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp93;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp93 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3894\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp93, "return of SetTrustedDomainInfoByName, state S3894");
            TestScenarioS15S4321();
            this.Manager.EndTest();
        }
        
        private void TestScenarioS15S4321() {
            this.Manager.Comment("reaching state \'S4321\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp94;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp94 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.AddReturn(DeleteTrustedDomainInfo, null, temp94);
            TestScenarioS15S4327();
        }
        #endregion
        
        #region Test Starting in S120
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S120() {
            this.Manager.BeginTest("TestScenarioS15S120");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S924\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp95;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp96;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp96 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp95);
            this.Manager.Comment("reaching state \'S1356\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp95, "policyHandle of OpenPolicy2, state S1356");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp96, "return of OpenPolicy2, state S1356");
            this.Manager.Comment("reaching state \'S1788\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp97;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp98;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp98 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp97);
            this.Manager.Comment("reaching state \'S2220\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp97, "trustHandle of CreateTrustedDomain, state S2220");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp98, "return of CreateTrustedDomain, state S2220");
            this.Manager.Comment("reaching state \'S2652\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp99;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp100;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp100 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp99);
            this.Manager.Comment("reaching state \'S3084\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp99, "trustHandle of OpenTrustedDomainByName, state S3084");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp100, "return of OpenTrustedDomainByName, state S3084");
            this.Manager.Comment("reaching state \'S3516\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp101;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp101 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3948\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp101, "return of SetTrustedDomainInfoByName, state S3948");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S122
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S122() {
            this.Manager.BeginTest("TestScenarioS15S122");
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S925\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp102;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp103;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp103 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp102);
            this.Manager.Comment("reaching state \'S1357\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp102, "policyHandle of OpenPolicy2, state S1357");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp103, "return of OpenPolicy2, state S1357");
            this.Manager.Comment("reaching state \'S1789\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp104;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp105;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp105 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp104);
            this.Manager.Comment("reaching state \'S2221\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp104, "trustHandle of CreateTrustedDomain, state S2221");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp105, "return of CreateTrustedDomain, state S2221");
            this.Manager.Comment("reaching state \'S2653\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp106;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp107;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp107 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp106);
            this.Manager.Comment("reaching state \'S3085\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp106, "trustHandle of OpenTrustedDomainByName, state S3085");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp107, "return of OpenTrustedDomainByName, state S3085");
            this.Manager.Comment("reaching state \'S3517\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp108;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp108 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3949\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp108, "return of SetTrustedDomainInfoByName, state S3949");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S124
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S124() {
            this.Manager.BeginTest("TestScenarioS15S124");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S926\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp109;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp110;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp110 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp109);
            this.Manager.Comment("reaching state \'S1358\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp109, "policyHandle of OpenPolicy2, state S1358");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp110, "return of OpenPolicy2, state S1358");
            this.Manager.Comment("reaching state \'S1790\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp111;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp112;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp112 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp111);
            this.Manager.Comment("reaching state \'S2222\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp111, "trustHandle of CreateTrustedDomain, state S2222");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp112, "return of CreateTrustedDomain, state S2222");
            this.Manager.Comment("reaching state \'S2654\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp113;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp114;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp114 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp113);
            this.Manager.Comment("reaching state \'S3086\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp113, "trustHandle of OpenTrustedDomainByName, state S3086");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp114, "return of OpenTrustedDomainByName, state S3086");
            this.Manager.Comment("reaching state \'S3518\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp115;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,Inv" +
                    "alid,True)\'");
            temp115 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S3950\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp115, "return of SetTrustedDomainInfoByName, state S3950");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S126
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S126() {
            this.Manager.BeginTest("TestScenarioS15S126");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S927\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp116;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp117;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp117 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp116);
            this.Manager.Comment("reaching state \'S1359\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp116, "policyHandle of OpenPolicy2, state S1359");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp117, "return of OpenPolicy2, state S1359");
            this.Manager.Comment("reaching state \'S1791\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp118;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp119;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp119 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp118);
            this.Manager.Comment("reaching state \'S2223\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp118, "trustHandle of CreateTrustedDomain, state S2223");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp119, "return of CreateTrustedDomain, state S2223");
            this.Manager.Comment("reaching state \'S2655\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp120;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp121;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp121 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp120);
            this.Manager.Comment("reaching state \'S3087\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp120, "trustHandle of OpenTrustedDomainByName, state S3087");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp121, "return of OpenTrustedDomainByName, state S3087");
            this.Manager.Comment("reaching state \'S3519\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp122;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,Inval" +
                    "id,True)\'");
            temp122 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S3951\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp122, "return of SetTrustedDomainInfoByName, state S3951");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S128
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S128() {
            this.Manager.BeginTest("TestScenarioS15S128");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S928\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp123;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp124;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp124 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp123);
            this.Manager.Comment("reaching state \'S1360\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp123, "policyHandle of OpenPolicy2, state S1360");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp124, "return of OpenPolicy2, state S1360");
            this.Manager.Comment("reaching state \'S1792\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp125;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp126;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp126 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp125);
            this.Manager.Comment("reaching state \'S2224\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp125, "trustHandle of CreateTrustedDomain, state S2224");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp126, "return of CreateTrustedDomain, state S2224");
            this.Manager.Comment("reaching state \'S2656\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp127;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp128;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp128 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp127);
            this.Manager.Comment("reaching state \'S3088\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp127, "trustHandle of OpenTrustedDomainByName, state S3088");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp128, "return of OpenTrustedDomainByName, state S3088");
            this.Manager.Comment("reaching state \'S3520\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp129;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp129 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3952\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp129, "return of SetTrustedDomainInfoByName, state S3952");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S130
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S130() {
            this.Manager.BeginTest("TestScenarioS15S130");
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S929\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp130;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp131;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp131 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp130);
            this.Manager.Comment("reaching state \'S1361\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp130, "policyHandle of OpenPolicy2, state S1361");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp131, "return of OpenPolicy2, state S1361");
            this.Manager.Comment("reaching state \'S1793\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp132;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp133;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp133 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp132);
            this.Manager.Comment("reaching state \'S2225\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp132, "trustHandle of CreateTrustedDomain, state S2225");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp133, "return of CreateTrustedDomain, state S2225");
            this.Manager.Comment("reaching state \'S2657\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp134;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp135;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp135 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp134);
            this.Manager.Comment("reaching state \'S3089\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp134, "trustHandle of OpenTrustedDomainByName, state S3089");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp135, "return of OpenTrustedDomainByName, state S3089");
            this.Manager.Comment("reaching state \'S3521\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp136;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp136 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3953\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp136, "return of SetTrustedDomainInfoByName, state S3953");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S132
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S132() {
            this.Manager.BeginTest("TestScenarioS15S132");
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S930\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp137;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp138;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp138 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp137);
            this.Manager.Comment("reaching state \'S1362\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp137, "policyHandle of OpenPolicy2, state S1362");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp138, "return of OpenPolicy2, state S1362");
            this.Manager.Comment("reaching state \'S1794\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp139;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp140;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp140 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp139);
            this.Manager.Comment("reaching state \'S2226\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp139, "trustHandle of CreateTrustedDomain, state S2226");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp140, "return of CreateTrustedDomain, state S2226");
            this.Manager.Comment("reaching state \'S2658\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp141;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp142;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp142 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp141);
            this.Manager.Comment("reaching state \'S3090\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp141, "trustHandle of OpenTrustedDomainByName, state S3090");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp142, "return of OpenTrustedDomainByName, state S3090");
            this.Manager.Comment("reaching state \'S3522\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp143;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp143 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3954\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp143, "return of SetTrustedDomainInfoByName, state S3954");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S134
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S134() {
            this.Manager.BeginTest("TestScenarioS15S134");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S931\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp144;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp145;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp145 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp144);
            this.Manager.Comment("reaching state \'S1363\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp144, "policyHandle of OpenPolicy2, state S1363");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp145, "return of OpenPolicy2, state S1363");
            this.Manager.Comment("reaching state \'S1795\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp146;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp147;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp147 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp146);
            this.Manager.Comment("reaching state \'S2227\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp146, "trustHandle of CreateTrustedDomain, state S2227");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp147, "return of CreateTrustedDomain, state S2227");
            this.Manager.Comment("reaching state \'S2659\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp148;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp149;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp149 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp148);
            this.Manager.Comment("reaching state \'S3091\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp148, "trustHandle of OpenTrustedDomainByName, state S3091");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp149, "return of OpenTrustedDomainByName, state S3091");
            this.Manager.Comment("reaching state \'S3523\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp150;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp150 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3955\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp150, "return of SetTrustedDomainInfoByName, state S3955");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S136
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S136() {
            this.Manager.BeginTest("TestScenarioS15S136");
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S932\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp151;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp152;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp152 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp151);
            this.Manager.Comment("reaching state \'S1364\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp151, "policyHandle of OpenPolicy2, state S1364");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp152, "return of OpenPolicy2, state S1364");
            this.Manager.Comment("reaching state \'S1796\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp153;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp154;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp154 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp153);
            this.Manager.Comment("reaching state \'S2228\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp153, "trustHandle of CreateTrustedDomain, state S2228");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp154, "return of CreateTrustedDomain, state S2228");
            this.Manager.Comment("reaching state \'S2660\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp155;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp156;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp156 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp155);
            this.Manager.Comment("reaching state \'S3092\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp155, "trustHandle of OpenTrustedDomainByName, state S3092");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp156, "return of OpenTrustedDomainByName, state S3092");
            this.Manager.Comment("reaching state \'S3524\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp157;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp157 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3956\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp157, "return of SetTrustedDomainInfoByName, state S3956");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S138
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S138() {
            this.Manager.BeginTest("TestScenarioS15S138");
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S933\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp158;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp159;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp159 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp158);
            this.Manager.Comment("reaching state \'S1365\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp158, "policyHandle of OpenPolicy2, state S1365");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp159, "return of OpenPolicy2, state S1365");
            this.Manager.Comment("reaching state \'S1797\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp160;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp161;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp161 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp160);
            this.Manager.Comment("reaching state \'S2229\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp160, "trustHandle of CreateTrustedDomain, state S2229");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp161, "return of CreateTrustedDomain, state S2229");
            this.Manager.Comment("reaching state \'S2661\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp162;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp163;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp163 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp162);
            this.Manager.Comment("reaching state \'S3093\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp162, "trustHandle of OpenTrustedDomainByName, state S3093");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp163, "return of OpenTrustedDomainByName, state S3093");
            this.Manager.Comment("reaching state \'S3525\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp164;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp164 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3957\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp164, "return of SetTrustedDomainInfoByName, state S3957");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S14() {
            this.Manager.BeginTest("TestScenarioS15S14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S871\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp165;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp166;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp166 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp165);
            this.Manager.Comment("reaching state \'S1303\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp165, "policyHandle of OpenPolicy2, state S1303");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp166, "return of OpenPolicy2, state S1303");
            this.Manager.Comment("reaching state \'S1735\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp167;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp168;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp168 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp167);
            this.Manager.Comment("reaching state \'S2167\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp167, "trustHandle of CreateTrustedDomain, state S2167");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp168, "return of CreateTrustedDomain, state S2167");
            this.Manager.Comment("reaching state \'S2599\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp169;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp170;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp170 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp169);
            this.Manager.Comment("reaching state \'S3031\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp169, "trustHandle of OpenTrustedDomainByName, state S3031");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp170, "return of OpenTrustedDomainByName, state S3031");
            this.Manager.Comment("reaching state \'S3463\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp171;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp171 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3895\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp171, "return of SetTrustedDomainInfoByName, state S3895");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S140
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S140() {
            this.Manager.BeginTest("TestScenarioS15S140");
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S934\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp172;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp173;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp173 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp172);
            this.Manager.Comment("reaching state \'S1366\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp172, "policyHandle of OpenPolicy2, state S1366");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp173, "return of OpenPolicy2, state S1366");
            this.Manager.Comment("reaching state \'S1798\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp174;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp175;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp175 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp174);
            this.Manager.Comment("reaching state \'S2230\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp174, "trustHandle of CreateTrustedDomain, state S2230");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp175, "return of CreateTrustedDomain, state S2230");
            this.Manager.Comment("reaching state \'S2662\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp176;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp177;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp177 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp176);
            this.Manager.Comment("reaching state \'S3094\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp176, "trustHandle of OpenTrustedDomainByName, state S3094");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp177, "return of OpenTrustedDomainByName, state S3094");
            this.Manager.Comment("reaching state \'S3526\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp178;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp178 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3958\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp178, "return of SetTrustedDomainInfoByName, state S3958");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S142
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S142() {
            this.Manager.BeginTest("TestScenarioS15S142");
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S935\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp179;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp180;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp180 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp179);
            this.Manager.Comment("reaching state \'S1367\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp179, "policyHandle of OpenPolicy2, state S1367");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp180, "return of OpenPolicy2, state S1367");
            this.Manager.Comment("reaching state \'S1799\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp181;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp182;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp182 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp181);
            this.Manager.Comment("reaching state \'S2231\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp181, "trustHandle of CreateTrustedDomain, state S2231");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp182, "return of CreateTrustedDomain, state S2231");
            this.Manager.Comment("reaching state \'S2663\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp183;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp184;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp184 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp183);
            this.Manager.Comment("reaching state \'S3095\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp183, "trustHandle of OpenTrustedDomainByName, state S3095");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp184, "return of OpenTrustedDomainByName, state S3095");
            this.Manager.Comment("reaching state \'S3527\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp185;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp185 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S3959\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp185, "return of SetTrustedDomainInfoByName, state S3959");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S144
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S144() {
            this.Manager.BeginTest("TestScenarioS15S144");
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S936\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp186;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp187;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp187 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp186);
            this.Manager.Comment("reaching state \'S1368\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp186, "policyHandle of OpenPolicy2, state S1368");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp187, "return of OpenPolicy2, state S1368");
            this.Manager.Comment("reaching state \'S1800\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp188;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp189;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp189 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp188);
            this.Manager.Comment("reaching state \'S2232\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp188, "trustHandle of CreateTrustedDomain, state S2232");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp189, "return of CreateTrustedDomain, state S2232");
            this.Manager.Comment("reaching state \'S2664\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp190;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp191;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp191 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp190);
            this.Manager.Comment("reaching state \'S3096\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp190, "trustHandle of OpenTrustedDomainByName, state S3096");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp191, "return of OpenTrustedDomainByName, state S3096");
            this.Manager.Comment("reaching state \'S3528\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp192;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp192 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S3960\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp192, "return of SetTrustedDomainInfoByName, state S3960");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S146
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S146() {
            this.Manager.BeginTest("TestScenarioS15S146");
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S937\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp193;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp194;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp194 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp193);
            this.Manager.Comment("reaching state \'S1369\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp193, "policyHandle of OpenPolicy2, state S1369");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp194, "return of OpenPolicy2, state S1369");
            this.Manager.Comment("reaching state \'S1801\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp195;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp196;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp196 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp195);
            this.Manager.Comment("reaching state \'S2233\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp195, "trustHandle of CreateTrustedDomain, state S2233");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp196, "return of CreateTrustedDomain, state S2233");
            this.Manager.Comment("reaching state \'S2665\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp197;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp198;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp198 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp197);
            this.Manager.Comment("reaching state \'S3097\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp197, "trustHandle of OpenTrustedDomainByName, state S3097");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp198, "return of OpenTrustedDomainByName, state S3097");
            this.Manager.Comment("reaching state \'S3529\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp199;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp199 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S3961\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp199, "return of SetTrustedDomainInfoByName, state S3961");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S148
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S148() {
            this.Manager.BeginTest("TestScenarioS15S148");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S938\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp200;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp201;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp201 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp200);
            this.Manager.Comment("reaching state \'S1370\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp200, "policyHandle of OpenPolicy2, state S1370");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp201, "return of OpenPolicy2, state S1370");
            this.Manager.Comment("reaching state \'S1802\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp202;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp203;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp203 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp202);
            this.Manager.Comment("reaching state \'S2234\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp202, "trustHandle of CreateTrustedDomain, state S2234");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp203, "return of CreateTrustedDomain, state S2234");
            this.Manager.Comment("reaching state \'S2666\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp204;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp205;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp205 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp204);
            this.Manager.Comment("reaching state \'S3098\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp204, "trustHandle of OpenTrustedDomainByName, state S3098");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp205, "return of OpenTrustedDomainByName, state S3098");
            this.Manager.Comment("reaching state \'S3530\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp206;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp206 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S3962\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp206, "return of SetTrustedDomainInfoByName, state S3962");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S150
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S150() {
            this.Manager.BeginTest("TestScenarioS15S150");
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S939\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp207;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp208;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp208 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp207);
            this.Manager.Comment("reaching state \'S1371\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp207, "policyHandle of OpenPolicy2, state S1371");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp208, "return of OpenPolicy2, state S1371");
            this.Manager.Comment("reaching state \'S1803\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp209;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp210;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp210 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp209);
            this.Manager.Comment("reaching state \'S2235\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp209, "trustHandle of CreateTrustedDomain, state S2235");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp210, "return of CreateTrustedDomain, state S2235");
            this.Manager.Comment("reaching state \'S2667\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp211;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp212;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp212 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp211);
            this.Manager.Comment("reaching state \'S3099\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp211, "trustHandle of OpenTrustedDomainByName, state S3099");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp212, "return of OpenTrustedDomainByName, state S3099");
            this.Manager.Comment("reaching state \'S3531\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp213;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp213 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3963\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp213, "return of SetTrustedDomainInfoByName, state S3963");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S152
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S152() {
            this.Manager.BeginTest("TestScenarioS15S152");
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S940\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp214;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp215;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp215 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp214);
            this.Manager.Comment("reaching state \'S1372\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp214, "policyHandle of OpenPolicy2, state S1372");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp215, "return of OpenPolicy2, state S1372");
            this.Manager.Comment("reaching state \'S1804\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp216;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp217;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp217 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp216);
            this.Manager.Comment("reaching state \'S2236\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp216, "trustHandle of CreateTrustedDomain, state S2236");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp217, "return of CreateTrustedDomain, state S2236");
            this.Manager.Comment("reaching state \'S2668\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp218;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp219;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp219 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp218);
            this.Manager.Comment("reaching state \'S3100\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp218, "trustHandle of OpenTrustedDomainByName, state S3100");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp219, "return of OpenTrustedDomainByName, state S3100");
            this.Manager.Comment("reaching state \'S3532\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp220;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,Inva" +
                    "lid,True)\'");
            temp220 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S3964\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp220, "return of SetTrustedDomainInfoByName, state S3964");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S154
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S154() {
            this.Manager.BeginTest("TestScenarioS15S154");
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S941\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp221;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp222;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp222 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp221);
            this.Manager.Comment("reaching state \'S1373\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp221, "policyHandle of OpenPolicy2, state S1373");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp222, "return of OpenPolicy2, state S1373");
            this.Manager.Comment("reaching state \'S1805\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp223;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp224;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp224 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp223);
            this.Manager.Comment("reaching state \'S2237\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp223, "trustHandle of CreateTrustedDomain, state S2237");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp224, "return of CreateTrustedDomain, state S2237");
            this.Manager.Comment("reaching state \'S2669\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp225;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp226;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp226 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp225);
            this.Manager.Comment("reaching state \'S3101\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp225, "trustHandle of OpenTrustedDomainByName, state S3101");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp226, "return of OpenTrustedDomainByName, state S3101");
            this.Manager.Comment("reaching state \'S3533\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp227;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,Invali" +
                    "d,True)\'");
            temp227 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S3965\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp227, "return of SetTrustedDomainInfoByName, state S3965");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S156
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S156() {
            this.Manager.BeginTest("TestScenarioS15S156");
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S942\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp228;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp229;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp229 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp228);
            this.Manager.Comment("reaching state \'S1374\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp228, "policyHandle of OpenPolicy2, state S1374");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp229, "return of OpenPolicy2, state S1374");
            this.Manager.Comment("reaching state \'S1806\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp230;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp231;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp231 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp230);
            this.Manager.Comment("reaching state \'S2238\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp230, "trustHandle of CreateTrustedDomain, state S2238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp231, "return of CreateTrustedDomain, state S2238");
            this.Manager.Comment("reaching state \'S2670\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp232;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp233;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp233 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp232);
            this.Manager.Comment("reaching state \'S3102\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp232, "trustHandle of OpenTrustedDomainByName, state S3102");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp233, "return of OpenTrustedDomainByName, state S3102");
            this.Manager.Comment("reaching state \'S3534\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp234;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp234 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S3966\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp234, "return of SetTrustedDomainInfoByName, state S3966");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S158
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S158() {
            this.Manager.BeginTest("TestScenarioS15S158");
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S943\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp235;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp236;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp236 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp235);
            this.Manager.Comment("reaching state \'S1375\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp235, "policyHandle of OpenPolicy2, state S1375");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp236, "return of OpenPolicy2, state S1375");
            this.Manager.Comment("reaching state \'S1807\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp237;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp238;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp238 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp237);
            this.Manager.Comment("reaching state \'S2239\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp237, "trustHandle of CreateTrustedDomain, state S2239");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp238, "return of CreateTrustedDomain, state S2239");
            this.Manager.Comment("reaching state \'S2671\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp239;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp240;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp240 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp239);
            this.Manager.Comment("reaching state \'S3103\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp239, "trustHandle of OpenTrustedDomainByName, state S3103");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp240, "return of OpenTrustedDomainByName, state S3103");
            this.Manager.Comment("reaching state \'S3535\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp241;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp241 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S3967\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp241, "return of SetTrustedDomainInfoByName, state S3967");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S16() {
            this.Manager.BeginTest("TestScenarioS15S16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S872\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp242;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp243;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp243 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp242);
            this.Manager.Comment("reaching state \'S1304\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp242, "policyHandle of OpenPolicy2, state S1304");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp243, "return of OpenPolicy2, state S1304");
            this.Manager.Comment("reaching state \'S1736\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp244;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp245;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp245 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp244);
            this.Manager.Comment("reaching state \'S2168\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp244, "trustHandle of CreateTrustedDomain, state S2168");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp245, "return of CreateTrustedDomain, state S2168");
            this.Manager.Comment("reaching state \'S2600\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp246;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp247;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp247 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp246);
            this.Manager.Comment("reaching state \'S3032\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp246, "trustHandle of OpenTrustedDomainByName, state S3032");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp247, "return of OpenTrustedDomainByName, state S3032");
            this.Manager.Comment("reaching state \'S3464\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp248;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp248 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3896\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp248, "return of SetTrustedDomainInfoByName, state S3896");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S160
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S160() {
            this.Manager.BeginTest("TestScenarioS15S160");
            this.Manager.Comment("reaching state \'S160\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S944\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp249;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp250;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp250 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp249);
            this.Manager.Comment("reaching state \'S1376\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp249, "policyHandle of OpenPolicy2, state S1376");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp250, "return of OpenPolicy2, state S1376");
            this.Manager.Comment("reaching state \'S1808\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp251;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp252;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp252 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp251);
            this.Manager.Comment("reaching state \'S2240\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp251, "trustHandle of CreateTrustedDomain, state S2240");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp252, "return of CreateTrustedDomain, state S2240");
            this.Manager.Comment("reaching state \'S2672\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp253;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp254;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp254 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp253);
            this.Manager.Comment("reaching state \'S3104\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp253, "trustHandle of OpenTrustedDomainByName, state S3104");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp254, "return of OpenTrustedDomainByName, state S3104");
            this.Manager.Comment("reaching state \'S3536\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp255;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp255 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3968\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp255, "return of SetTrustedDomainInfoByName, state S3968");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S162
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S162() {
            this.Manager.BeginTest("TestScenarioS15S162");
            this.Manager.Comment("reaching state \'S162\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S945\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp256;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp257;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp257 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp256);
            this.Manager.Comment("reaching state \'S1377\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp256, "policyHandle of OpenPolicy2, state S1377");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp257, "return of OpenPolicy2, state S1377");
            this.Manager.Comment("reaching state \'S1809\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp258;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp259;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp259 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp258);
            this.Manager.Comment("reaching state \'S2241\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp258, "trustHandle of CreateTrustedDomain, state S2241");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp259, "return of CreateTrustedDomain, state S2241");
            this.Manager.Comment("reaching state \'S2673\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp260;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp261;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp261 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp260);
            this.Manager.Comment("reaching state \'S3105\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp260, "trustHandle of OpenTrustedDomainByName, state S3105");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp261, "return of OpenTrustedDomainByName, state S3105");
            this.Manager.Comment("reaching state \'S3537\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp262;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp262 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S3969\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp262, "return of SetTrustedDomainInfoByName, state S3969");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S164
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S164() {
            this.Manager.BeginTest("TestScenarioS15S164");
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S165\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S946\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp263;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp264;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp264 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp263);
            this.Manager.Comment("reaching state \'S1378\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp263, "policyHandle of OpenPolicy2, state S1378");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp264, "return of OpenPolicy2, state S1378");
            this.Manager.Comment("reaching state \'S1810\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp265;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp266;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp266 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp265);
            this.Manager.Comment("reaching state \'S2242\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp265, "trustHandle of CreateTrustedDomain, state S2242");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp266, "return of CreateTrustedDomain, state S2242");
            this.Manager.Comment("reaching state \'S2674\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp267;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp268;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp268 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp267);
            this.Manager.Comment("reaching state \'S3106\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp267, "trustHandle of OpenTrustedDomainByName, state S3106");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp268, "return of OpenTrustedDomainByName, state S3106");
            this.Manager.Comment("reaching state \'S3538\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp269;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp269 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3970\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp269, "return of SetTrustedDomainInfoByName, state S3970");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S166
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S166() {
            this.Manager.BeginTest("TestScenarioS15S166");
            this.Manager.Comment("reaching state \'S166\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S167\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S947\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp270;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp271;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp271 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp270);
            this.Manager.Comment("reaching state \'S1379\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp270, "policyHandle of OpenPolicy2, state S1379");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp271, "return of OpenPolicy2, state S1379");
            this.Manager.Comment("reaching state \'S1811\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp272;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp273;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp273 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp272);
            this.Manager.Comment("reaching state \'S2243\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp272, "trustHandle of CreateTrustedDomain, state S2243");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp273, "return of CreateTrustedDomain, state S2243");
            this.Manager.Comment("reaching state \'S2675\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp274;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp275;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp275 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp274);
            this.Manager.Comment("reaching state \'S3107\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp274, "trustHandle of OpenTrustedDomainByName, state S3107");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp275, "return of OpenTrustedDomainByName, state S3107");
            this.Manager.Comment("reaching state \'S3539\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp276;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp276 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3971\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp276, "return of SetTrustedDomainInfoByName, state S3971");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S168
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S168() {
            this.Manager.BeginTest("TestScenarioS15S168");
            this.Manager.Comment("reaching state \'S168\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S169\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S948\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp277;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp278;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp278 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp277);
            this.Manager.Comment("reaching state \'S1380\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp277, "policyHandle of OpenPolicy2, state S1380");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp278, "return of OpenPolicy2, state S1380");
            this.Manager.Comment("reaching state \'S1812\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp279;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp280;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp280 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp279);
            this.Manager.Comment("reaching state \'S2244\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp279, "trustHandle of CreateTrustedDomain, state S2244");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp280, "return of CreateTrustedDomain, state S2244");
            this.Manager.Comment("reaching state \'S2676\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp281;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp282;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp282 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp281);
            this.Manager.Comment("reaching state \'S3108\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp281, "trustHandle of OpenTrustedDomainByName, state S3108");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp282, "return of OpenTrustedDomainByName, state S3108");
            this.Manager.Comment("reaching state \'S3540\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp283;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp283 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S3972\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp283, "return of SetTrustedDomainInfoByName, state S3972");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S170
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S170() {
            this.Manager.BeginTest("TestScenarioS15S170");
            this.Manager.Comment("reaching state \'S170\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S949\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp284;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp285;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp285 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp284);
            this.Manager.Comment("reaching state \'S1381\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp284, "policyHandle of OpenPolicy2, state S1381");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp285, "return of OpenPolicy2, state S1381");
            this.Manager.Comment("reaching state \'S1813\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp286;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp287;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp287 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp286);
            this.Manager.Comment("reaching state \'S2245\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp286, "trustHandle of CreateTrustedDomain, state S2245");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp287, "return of CreateTrustedDomain, state S2245");
            this.Manager.Comment("reaching state \'S2677\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp288;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp289;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp289 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp288);
            this.Manager.Comment("reaching state \'S3109\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp288, "trustHandle of OpenTrustedDomainByName, state S3109");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp289, "return of OpenTrustedDomainByName, state S3109");
            this.Manager.Comment("reaching state \'S3541\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp290;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp290 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S3973\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp290, "return of SetTrustedDomainInfoByName, state S3973");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S172
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S172() {
            this.Manager.BeginTest("TestScenarioS15S172");
            this.Manager.Comment("reaching state \'S172\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S173\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S950\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp291;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp292;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp292 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp291);
            this.Manager.Comment("reaching state \'S1382\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp291, "policyHandle of OpenPolicy2, state S1382");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp292, "return of OpenPolicy2, state S1382");
            this.Manager.Comment("reaching state \'S1814\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp293;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp294;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp294 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp293);
            this.Manager.Comment("reaching state \'S2246\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp293, "trustHandle of CreateTrustedDomain, state S2246");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp294, "return of CreateTrustedDomain, state S2246");
            this.Manager.Comment("reaching state \'S2678\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp295;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp296;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp296 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp295);
            this.Manager.Comment("reaching state \'S3110\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp295, "trustHandle of OpenTrustedDomainByName, state S3110");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp296, "return of OpenTrustedDomainByName, state S3110");
            this.Manager.Comment("reaching state \'S3542\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp297;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp297 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S3974\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp297, "return of SetTrustedDomainInfoByName, state S3974");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S174
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S174() {
            this.Manager.BeginTest("TestScenarioS15S174");
            this.Manager.Comment("reaching state \'S174\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S951\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp298;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp299;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp299 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp298);
            this.Manager.Comment("reaching state \'S1383\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp298, "policyHandle of OpenPolicy2, state S1383");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp299, "return of OpenPolicy2, state S1383");
            this.Manager.Comment("reaching state \'S1815\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp300;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp301;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp301 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp300);
            this.Manager.Comment("reaching state \'S2247\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp300, "trustHandle of CreateTrustedDomain, state S2247");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp301, "return of CreateTrustedDomain, state S2247");
            this.Manager.Comment("reaching state \'S2679\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp302;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp303;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp303 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp302);
            this.Manager.Comment("reaching state \'S3111\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp302, "trustHandle of OpenTrustedDomainByName, state S3111");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp303, "return of OpenTrustedDomainByName, state S3111");
            this.Manager.Comment("reaching state \'S3543\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp304;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp304 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S3975\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp304, "return of SetTrustedDomainInfoByName, state S3975");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S176
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S176() {
            this.Manager.BeginTest("TestScenarioS15S176");
            this.Manager.Comment("reaching state \'S176\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S177\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S952\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp305;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp306;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp306 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp305);
            this.Manager.Comment("reaching state \'S1384\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp305, "policyHandle of OpenPolicy2, state S1384");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp306, "return of OpenPolicy2, state S1384");
            this.Manager.Comment("reaching state \'S1816\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp307;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp308;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp308 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp307);
            this.Manager.Comment("reaching state \'S2248\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp307, "trustHandle of CreateTrustedDomain, state S2248");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp308, "return of CreateTrustedDomain, state S2248");
            this.Manager.Comment("reaching state \'S2680\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp309;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp310;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp310 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp309);
            this.Manager.Comment("reaching state \'S3112\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp309, "trustHandle of OpenTrustedDomainByName, state S3112");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp310, "return of OpenTrustedDomainByName, state S3112");
            this.Manager.Comment("reaching state \'S3544\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp311;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp311 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S3976\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp311, "return of SetTrustedDomainInfoByName, state S3976");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S178
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S178() {
            this.Manager.BeginTest("TestScenarioS15S178");
            this.Manager.Comment("reaching state \'S178\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S953\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp312;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp313;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp313 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp312);
            this.Manager.Comment("reaching state \'S1385\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp312, "policyHandle of OpenPolicy2, state S1385");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp313, "return of OpenPolicy2, state S1385");
            this.Manager.Comment("reaching state \'S1817\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp314;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp315;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp315 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp314);
            this.Manager.Comment("reaching state \'S2249\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp314, "trustHandle of CreateTrustedDomain, state S2249");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp315, "return of CreateTrustedDomain, state S2249");
            this.Manager.Comment("reaching state \'S2681\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp316;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp317;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp317 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp316);
            this.Manager.Comment("reaching state \'S3113\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp316, "trustHandle of OpenTrustedDomainByName, state S3113");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp317, "return of OpenTrustedDomainByName, state S3113");
            this.Manager.Comment("reaching state \'S3545\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp318;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp318 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S3977\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp318, "return of SetTrustedDomainInfoByName, state S3977");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S18() {
            this.Manager.BeginTest("TestScenarioS15S18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S873\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp319;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp320;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp320 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp319);
            this.Manager.Comment("reaching state \'S1305\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp319, "policyHandle of OpenPolicy2, state S1305");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp320, "return of OpenPolicy2, state S1305");
            this.Manager.Comment("reaching state \'S1737\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp321;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp322;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp322 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp321);
            this.Manager.Comment("reaching state \'S2169\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp321, "trustHandle of CreateTrustedDomain, state S2169");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp322, "return of CreateTrustedDomain, state S2169");
            this.Manager.Comment("reaching state \'S2601\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp323;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp324;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp324 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp323);
            this.Manager.Comment("reaching state \'S3033\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp323, "trustHandle of OpenTrustedDomainByName, state S3033");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp324, "return of OpenTrustedDomainByName, state S3033");
            this.Manager.Comment("reaching state \'S3465\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp325;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp325 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3897\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp325, "return of SetTrustedDomainInfoByName, state S3897");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S180
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S180() {
            this.Manager.BeginTest("TestScenarioS15S180");
            this.Manager.Comment("reaching state \'S180\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S954\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp326;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp327;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp327 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp326);
            this.Manager.Comment("reaching state \'S1386\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp326, "policyHandle of OpenPolicy2, state S1386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp327, "return of OpenPolicy2, state S1386");
            this.Manager.Comment("reaching state \'S1818\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp328;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp329;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp329 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp328);
            this.Manager.Comment("reaching state \'S2250\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp328, "trustHandle of CreateTrustedDomain, state S2250");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp329, "return of CreateTrustedDomain, state S2250");
            this.Manager.Comment("reaching state \'S2682\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp330;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp331;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp331 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp330);
            this.Manager.Comment("reaching state \'S3114\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp330, "trustHandle of OpenTrustedDomainByName, state S3114");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp331, "return of OpenTrustedDomainByName, state S3114");
            this.Manager.Comment("reaching state \'S3546\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp332;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp332 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3978\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp332, "return of SetTrustedDomainInfoByName, state S3978");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S182
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S182() {
            this.Manager.BeginTest("TestScenarioS15S182");
            this.Manager.Comment("reaching state \'S182\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S955\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp333;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp334;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp334 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp333);
            this.Manager.Comment("reaching state \'S1387\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp333, "policyHandle of OpenPolicy2, state S1387");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp334, "return of OpenPolicy2, state S1387");
            this.Manager.Comment("reaching state \'S1819\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp335;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp336;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp336 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp335);
            this.Manager.Comment("reaching state \'S2251\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp335, "trustHandle of CreateTrustedDomain, state S2251");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp336, "return of CreateTrustedDomain, state S2251");
            this.Manager.Comment("reaching state \'S2683\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp337;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp338;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp338 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp337);
            this.Manager.Comment("reaching state \'S3115\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp337, "trustHandle of OpenTrustedDomainByName, state S3115");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp338, "return of OpenTrustedDomainByName, state S3115");
            this.Manager.Comment("reaching state \'S3547\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp339;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp339 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3979\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp339, "return of SetTrustedDomainInfoByName, state S3979");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S184
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S184() {
            this.Manager.BeginTest("TestScenarioS15S184");
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S956\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp340;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp341;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp341 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp340);
            this.Manager.Comment("reaching state \'S1388\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp340, "policyHandle of OpenPolicy2, state S1388");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp341, "return of OpenPolicy2, state S1388");
            this.Manager.Comment("reaching state \'S1820\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp342;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp343;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp343 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp342);
            this.Manager.Comment("reaching state \'S2252\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp342, "trustHandle of CreateTrustedDomain, state S2252");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp343, "return of CreateTrustedDomain, state S2252");
            this.Manager.Comment("reaching state \'S2684\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp344;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp345;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp345 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp344);
            this.Manager.Comment("reaching state \'S3116\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp344, "trustHandle of OpenTrustedDomainByName, state S3116");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp345, "return of OpenTrustedDomainByName, state S3116");
            this.Manager.Comment("reaching state \'S3548\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp346;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp346 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3980\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp346, "return of SetTrustedDomainInfoByName, state S3980");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S186
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S186() {
            this.Manager.BeginTest("TestScenarioS15S186");
            this.Manager.Comment("reaching state \'S186\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S957\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp347;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp348;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp348 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp347);
            this.Manager.Comment("reaching state \'S1389\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp347, "policyHandle of OpenPolicy2, state S1389");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp348, "return of OpenPolicy2, state S1389");
            this.Manager.Comment("reaching state \'S1821\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp349;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp350;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp350 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp349);
            this.Manager.Comment("reaching state \'S2253\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp349, "trustHandle of CreateTrustedDomain, state S2253");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp350, "return of CreateTrustedDomain, state S2253");
            this.Manager.Comment("reaching state \'S2685\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp351;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp352;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp352 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp351);
            this.Manager.Comment("reaching state \'S3117\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp351, "trustHandle of OpenTrustedDomainByName, state S3117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp352, "return of OpenTrustedDomainByName, state S3117");
            this.Manager.Comment("reaching state \'S3549\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp353;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp353 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3981\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp353, "return of SetTrustedDomainInfoByName, state S3981");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S188
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S188() {
            this.Manager.BeginTest("TestScenarioS15S188");
            this.Manager.Comment("reaching state \'S188\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S958\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp354;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp355;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp355 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp354);
            this.Manager.Comment("reaching state \'S1390\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp354, "policyHandle of OpenPolicy2, state S1390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp355, "return of OpenPolicy2, state S1390");
            this.Manager.Comment("reaching state \'S1822\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp356;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp357;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp357 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp356);
            this.Manager.Comment("reaching state \'S2254\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp356, "trustHandle of CreateTrustedDomain, state S2254");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp357, "return of CreateTrustedDomain, state S2254");
            this.Manager.Comment("reaching state \'S2686\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp358;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp359;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp359 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp358);
            this.Manager.Comment("reaching state \'S3118\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp358, "trustHandle of OpenTrustedDomainByName, state S3118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp359, "return of OpenTrustedDomainByName, state S3118");
            this.Manager.Comment("reaching state \'S3550\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp360;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp360 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3982\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp360, "return of SetTrustedDomainInfoByName, state S3982");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S190
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S190() {
            this.Manager.BeginTest("TestScenarioS15S190");
            this.Manager.Comment("reaching state \'S190\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S959\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp361;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp362;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp362 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp361);
            this.Manager.Comment("reaching state \'S1391\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp361, "policyHandle of OpenPolicy2, state S1391");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp362, "return of OpenPolicy2, state S1391");
            this.Manager.Comment("reaching state \'S1823\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp363;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp364;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp364 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp363);
            this.Manager.Comment("reaching state \'S2255\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp363, "trustHandle of CreateTrustedDomain, state S2255");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp364, "return of CreateTrustedDomain, state S2255");
            this.Manager.Comment("reaching state \'S2687\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp365;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp366;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp366 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp365);
            this.Manager.Comment("reaching state \'S3119\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp365, "trustHandle of OpenTrustedDomainByName, state S3119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp366, "return of OpenTrustedDomainByName, state S3119");
            this.Manager.Comment("reaching state \'S3551\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp367;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp367 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3983\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp367, "return of SetTrustedDomainInfoByName, state S3983");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S192
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S192() {
            this.Manager.BeginTest("TestScenarioS15S192");
            this.Manager.Comment("reaching state \'S192\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S193\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S960\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp368;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp369;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp369 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp368);
            this.Manager.Comment("reaching state \'S1392\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp368, "policyHandle of OpenPolicy2, state S1392");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp369, "return of OpenPolicy2, state S1392");
            this.Manager.Comment("reaching state \'S1824\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp370;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp371;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp371 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp370);
            this.Manager.Comment("reaching state \'S2256\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp370, "trustHandle of CreateTrustedDomain, state S2256");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp371, "return of CreateTrustedDomain, state S2256");
            this.Manager.Comment("reaching state \'S2688\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp372;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp373;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp373 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp372);
            this.Manager.Comment("reaching state \'S3120\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp372, "trustHandle of OpenTrustedDomainByName, state S3120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp373, "return of OpenTrustedDomainByName, state S3120");
            this.Manager.Comment("reaching state \'S3552\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp374;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp374 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3984\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp374, "return of SetTrustedDomainInfoByName, state S3984");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S194
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S194() {
            this.Manager.BeginTest("TestScenarioS15S194");
            this.Manager.Comment("reaching state \'S194\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S961\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp375;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp376;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp376 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp375);
            this.Manager.Comment("reaching state \'S1393\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp375, "policyHandle of OpenPolicy2, state S1393");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp376, "return of OpenPolicy2, state S1393");
            this.Manager.Comment("reaching state \'S1825\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp377;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp378;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp378 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp377);
            this.Manager.Comment("reaching state \'S2257\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp377, "trustHandle of CreateTrustedDomain, state S2257");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp378, "return of CreateTrustedDomain, state S2257");
            this.Manager.Comment("reaching state \'S2689\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp379;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp380;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp380 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp379);
            this.Manager.Comment("reaching state \'S3121\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp379, "trustHandle of OpenTrustedDomainByName, state S3121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp380, "return of OpenTrustedDomainByName, state S3121");
            this.Manager.Comment("reaching state \'S3553\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp381;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp381 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3985\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp381, "return of SetTrustedDomainInfoByName, state S3985");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S196
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S196() {
            this.Manager.BeginTest("TestScenarioS15S196");
            this.Manager.Comment("reaching state \'S196\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S962\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp382;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp383;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp383 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp382);
            this.Manager.Comment("reaching state \'S1394\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp382, "policyHandle of OpenPolicy2, state S1394");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp383, "return of OpenPolicy2, state S1394");
            this.Manager.Comment("reaching state \'S1826\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp384;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp385;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp385 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp384);
            this.Manager.Comment("reaching state \'S2258\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp384, "trustHandle of CreateTrustedDomain, state S2258");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp385, "return of CreateTrustedDomain, state S2258");
            this.Manager.Comment("reaching state \'S2690\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp386;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp387;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp387 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp386);
            this.Manager.Comment("reaching state \'S3122\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp386, "trustHandle of OpenTrustedDomainByName, state S3122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp387, "return of OpenTrustedDomainByName, state S3122");
            this.Manager.Comment("reaching state \'S3554\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp388;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp388 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3986\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp388, "return of SetTrustedDomainInfoByName, state S3986");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S198
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S198() {
            this.Manager.BeginTest("TestScenarioS15S198");
            this.Manager.Comment("reaching state \'S198\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S199\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S963\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp389;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp390;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp390 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp389);
            this.Manager.Comment("reaching state \'S1395\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp389, "policyHandle of OpenPolicy2, state S1395");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp390, "return of OpenPolicy2, state S1395");
            this.Manager.Comment("reaching state \'S1827\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp391;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp392;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp392 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp391);
            this.Manager.Comment("reaching state \'S2259\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp391, "trustHandle of CreateTrustedDomain, state S2259");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp392, "return of CreateTrustedDomain, state S2259");
            this.Manager.Comment("reaching state \'S2691\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp393;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp394;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp394 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp393);
            this.Manager.Comment("reaching state \'S3123\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp393, "trustHandle of OpenTrustedDomainByName, state S3123");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp394, "return of OpenTrustedDomainByName, state S3123");
            this.Manager.Comment("reaching state \'S3555\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp395;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp395 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3987\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp395, "return of SetTrustedDomainInfoByName, state S3987");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S2() {
            this.Manager.BeginTest("TestScenarioS15S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S865\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp396;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp397;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp397 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp396);
            this.Manager.Comment("reaching state \'S1297\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp396, "policyHandle of OpenPolicy2, state S1297");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp397, "return of OpenPolicy2, state S1297");
            this.Manager.Comment("reaching state \'S1729\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp398;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp399;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp399 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp398);
            this.Manager.Comment("reaching state \'S2161\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp398, "trustHandle of CreateTrustedDomain, state S2161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp399, "return of CreateTrustedDomain, state S2161");
            this.Manager.Comment("reaching state \'S2593\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp400;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp401;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp401 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp400);
            this.Manager.Comment("reaching state \'S3025\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp400, "trustHandle of OpenTrustedDomainByName, state S3025");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp401, "return of OpenTrustedDomainByName, state S3025");
            this.Manager.Comment("reaching state \'S3457\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp402;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp402 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3889\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp402, "return of SetTrustedDomainInfoByName, state S3889");
            TestScenarioS15S4321();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S20() {
            this.Manager.BeginTest("TestScenarioS15S20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S874\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp403;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp404;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp404 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp403);
            this.Manager.Comment("reaching state \'S1306\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp403, "policyHandle of OpenPolicy2, state S1306");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp404, "return of OpenPolicy2, state S1306");
            this.Manager.Comment("reaching state \'S1738\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp405;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp406;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp406 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp405);
            this.Manager.Comment("reaching state \'S2170\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp405, "trustHandle of CreateTrustedDomain, state S2170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp406, "return of CreateTrustedDomain, state S2170");
            this.Manager.Comment("reaching state \'S2602\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp407;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp408;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp408 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp407);
            this.Manager.Comment("reaching state \'S3034\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp407, "trustHandle of OpenTrustedDomainByName, state S3034");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp408, "return of OpenTrustedDomainByName, state S3034");
            this.Manager.Comment("reaching state \'S3466\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp409;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp409 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3898\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp409, "return of SetTrustedDomainInfoByName, state S3898");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S200
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S200() {
            this.Manager.BeginTest("TestScenarioS15S200");
            this.Manager.Comment("reaching state \'S200\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S964\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp410;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp411;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp411 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp410);
            this.Manager.Comment("reaching state \'S1396\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp410, "policyHandle of OpenPolicy2, state S1396");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp411, "return of OpenPolicy2, state S1396");
            this.Manager.Comment("reaching state \'S1828\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp412;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp413;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp413 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp412);
            this.Manager.Comment("reaching state \'S2260\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp412, "trustHandle of CreateTrustedDomain, state S2260");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp413, "return of CreateTrustedDomain, state S2260");
            this.Manager.Comment("reaching state \'S2692\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp414;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp415;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp415 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp414);
            this.Manager.Comment("reaching state \'S3124\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp414, "trustHandle of OpenTrustedDomainByName, state S3124");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp415, "return of OpenTrustedDomainByName, state S3124");
            this.Manager.Comment("reaching state \'S3556\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp416;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp416 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3988\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp416, "return of SetTrustedDomainInfoByName, state S3988");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S202
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S202() {
            this.Manager.BeginTest("TestScenarioS15S202");
            this.Manager.Comment("reaching state \'S202\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S965\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp417;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp418;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp418 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp417);
            this.Manager.Comment("reaching state \'S1397\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp417, "policyHandle of OpenPolicy2, state S1397");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp418, "return of OpenPolicy2, state S1397");
            this.Manager.Comment("reaching state \'S1829\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp419;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp420;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp420 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp419);
            this.Manager.Comment("reaching state \'S2261\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp419, "trustHandle of CreateTrustedDomain, state S2261");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp420, "return of CreateTrustedDomain, state S2261");
            this.Manager.Comment("reaching state \'S2693\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp421;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp422;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp422 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp421);
            this.Manager.Comment("reaching state \'S3125\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp421, "trustHandle of OpenTrustedDomainByName, state S3125");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp422, "return of OpenTrustedDomainByName, state S3125");
            this.Manager.Comment("reaching state \'S3557\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp423;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp423 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3989\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp423, "return of SetTrustedDomainInfoByName, state S3989");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S204
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S204() {
            this.Manager.BeginTest("TestScenarioS15S204");
            this.Manager.Comment("reaching state \'S204\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S205\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S966\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp424;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp425;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp425 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp424);
            this.Manager.Comment("reaching state \'S1398\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp424, "policyHandle of OpenPolicy2, state S1398");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp425, "return of OpenPolicy2, state S1398");
            this.Manager.Comment("reaching state \'S1830\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp426;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp427;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp427 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp426);
            this.Manager.Comment("reaching state \'S2262\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp426, "trustHandle of CreateTrustedDomain, state S2262");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp427, "return of CreateTrustedDomain, state S2262");
            this.Manager.Comment("reaching state \'S2694\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp428;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp429;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp429 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp428);
            this.Manager.Comment("reaching state \'S3126\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp428, "trustHandle of OpenTrustedDomainByName, state S3126");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp429, "return of OpenTrustedDomainByName, state S3126");
            this.Manager.Comment("reaching state \'S3558\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp430;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp430 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3990\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp430, "return of SetTrustedDomainInfoByName, state S3990");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S206
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S206() {
            this.Manager.BeginTest("TestScenarioS15S206");
            this.Manager.Comment("reaching state \'S206\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S207\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S967\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp431;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp432;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp432 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp431);
            this.Manager.Comment("reaching state \'S1399\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp431, "policyHandle of OpenPolicy2, state S1399");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp432, "return of OpenPolicy2, state S1399");
            this.Manager.Comment("reaching state \'S1831\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp433;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp434;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp434 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp433);
            this.Manager.Comment("reaching state \'S2263\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp433, "trustHandle of CreateTrustedDomain, state S2263");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp434, "return of CreateTrustedDomain, state S2263");
            this.Manager.Comment("reaching state \'S2695\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp435;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp436;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp436 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp435);
            this.Manager.Comment("reaching state \'S3127\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp435, "trustHandle of OpenTrustedDomainByName, state S3127");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp436, "return of OpenTrustedDomainByName, state S3127");
            this.Manager.Comment("reaching state \'S3559\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp437;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp437 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3991\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp437, "return of SetTrustedDomainInfoByName, state S3991");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S208
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S208() {
            this.Manager.BeginTest("TestScenarioS15S208");
            this.Manager.Comment("reaching state \'S208\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S209\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S968\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp438;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp439;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp439 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp438);
            this.Manager.Comment("reaching state \'S1400\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp438, "policyHandle of OpenPolicy2, state S1400");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp439, "return of OpenPolicy2, state S1400");
            this.Manager.Comment("reaching state \'S1832\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp440;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp441;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp441 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp440);
            this.Manager.Comment("reaching state \'S2264\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp440, "trustHandle of CreateTrustedDomain, state S2264");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp441, "return of CreateTrustedDomain, state S2264");
            this.Manager.Comment("reaching state \'S2696\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp442;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp443;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp443 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp442);
            this.Manager.Comment("reaching state \'S3128\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp442, "trustHandle of OpenTrustedDomainByName, state S3128");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp443, "return of OpenTrustedDomainByName, state S3128");
            this.Manager.Comment("reaching state \'S3560\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp444;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp444 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3992\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp444, "return of SetTrustedDomainInfoByName, state S3992");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S210
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S210() {
            this.Manager.BeginTest("TestScenarioS15S210");
            this.Manager.Comment("reaching state \'S210\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S211\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S969\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp445;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp446;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp446 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp445);
            this.Manager.Comment("reaching state \'S1401\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp445, "policyHandle of OpenPolicy2, state S1401");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp446, "return of OpenPolicy2, state S1401");
            this.Manager.Comment("reaching state \'S1833\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp447;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp448;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp448 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp447);
            this.Manager.Comment("reaching state \'S2265\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp447, "trustHandle of CreateTrustedDomain, state S2265");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp448, "return of CreateTrustedDomain, state S2265");
            this.Manager.Comment("reaching state \'S2697\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp449;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp450;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp450 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp449);
            this.Manager.Comment("reaching state \'S3129\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp449, "trustHandle of OpenTrustedDomainByName, state S3129");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp450, "return of OpenTrustedDomainByName, state S3129");
            this.Manager.Comment("reaching state \'S3561\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp451;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp451 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3993\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp451, "return of SetTrustedDomainInfoByName, state S3993");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S212
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S212() {
            this.Manager.BeginTest("TestScenarioS15S212");
            this.Manager.Comment("reaching state \'S212\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S213\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S970\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp452;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp453;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp453 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp452);
            this.Manager.Comment("reaching state \'S1402\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp452, "policyHandle of OpenPolicy2, state S1402");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp453, "return of OpenPolicy2, state S1402");
            this.Manager.Comment("reaching state \'S1834\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp454;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp455;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp455 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp454);
            this.Manager.Comment("reaching state \'S2266\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp454, "trustHandle of CreateTrustedDomain, state S2266");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp455, "return of CreateTrustedDomain, state S2266");
            this.Manager.Comment("reaching state \'S2698\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp456;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp457;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp457 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp456);
            this.Manager.Comment("reaching state \'S3130\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp456, "trustHandle of OpenTrustedDomainByName, state S3130");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp457, "return of OpenTrustedDomainByName, state S3130");
            this.Manager.Comment("reaching state \'S3562\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp458;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp458 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3994\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp458, "return of SetTrustedDomainInfoByName, state S3994");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S214
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S214() {
            this.Manager.BeginTest("TestScenarioS15S214");
            this.Manager.Comment("reaching state \'S214\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S215\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S971\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp459;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp460;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp460 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp459);
            this.Manager.Comment("reaching state \'S1403\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp459, "policyHandle of OpenPolicy2, state S1403");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp460, "return of OpenPolicy2, state S1403");
            this.Manager.Comment("reaching state \'S1835\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp461;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp462;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp462 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp461);
            this.Manager.Comment("reaching state \'S2267\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp461, "trustHandle of CreateTrustedDomain, state S2267");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp462, "return of CreateTrustedDomain, state S2267");
            this.Manager.Comment("reaching state \'S2699\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp463;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp464;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp464 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp463);
            this.Manager.Comment("reaching state \'S3131\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp463, "trustHandle of OpenTrustedDomainByName, state S3131");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp464, "return of OpenTrustedDomainByName, state S3131");
            this.Manager.Comment("reaching state \'S3563\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp465;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp465 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3995\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp465, "return of SetTrustedDomainInfoByName, state S3995");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S216
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S216() {
            this.Manager.BeginTest("TestScenarioS15S216");
            this.Manager.Comment("reaching state \'S216\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S217\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S972\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp466;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp467;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp467 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp466);
            this.Manager.Comment("reaching state \'S1404\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp466, "policyHandle of OpenPolicy2, state S1404");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp467, "return of OpenPolicy2, state S1404");
            this.Manager.Comment("reaching state \'S1836\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp468;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp469;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp469 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp468);
            this.Manager.Comment("reaching state \'S2268\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp468, "trustHandle of CreateTrustedDomain, state S2268");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp469, "return of CreateTrustedDomain, state S2268");
            this.Manager.Comment("reaching state \'S2700\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp470;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp471;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp471 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp470);
            this.Manager.Comment("reaching state \'S3132\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp470, "trustHandle of OpenTrustedDomainByName, state S3132");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp471, "return of OpenTrustedDomainByName, state S3132");
            this.Manager.Comment("reaching state \'S3564\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp472;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp472 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3996\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp472, "return of SetTrustedDomainInfoByName, state S3996");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S218
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S218() {
            this.Manager.BeginTest("TestScenarioS15S218");
            this.Manager.Comment("reaching state \'S218\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S973\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp473;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp474;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp474 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp473);
            this.Manager.Comment("reaching state \'S1405\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp473, "policyHandle of OpenPolicy2, state S1405");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp474, "return of OpenPolicy2, state S1405");
            this.Manager.Comment("reaching state \'S1837\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp475;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp476;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp476 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp475);
            this.Manager.Comment("reaching state \'S2269\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp475, "trustHandle of CreateTrustedDomain, state S2269");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp476, "return of CreateTrustedDomain, state S2269");
            this.Manager.Comment("reaching state \'S2701\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp477;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp478;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp478 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp477);
            this.Manager.Comment("reaching state \'S3133\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp477, "trustHandle of OpenTrustedDomainByName, state S3133");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp478, "return of OpenTrustedDomainByName, state S3133");
            this.Manager.Comment("reaching state \'S3565\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp479;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp479 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3997\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp479, "return of SetTrustedDomainInfoByName, state S3997");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S22() {
            this.Manager.BeginTest("TestScenarioS15S22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S875\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp480;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp481;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp481 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp480);
            this.Manager.Comment("reaching state \'S1307\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp480, "policyHandle of OpenPolicy2, state S1307");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp481, "return of OpenPolicy2, state S1307");
            this.Manager.Comment("reaching state \'S1739\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp482;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp483;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp483 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp482);
            this.Manager.Comment("reaching state \'S2171\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp482, "trustHandle of CreateTrustedDomain, state S2171");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp483, "return of CreateTrustedDomain, state S2171");
            this.Manager.Comment("reaching state \'S2603\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp484;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp485;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp485 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp484);
            this.Manager.Comment("reaching state \'S3035\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp484, "trustHandle of OpenTrustedDomainByName, state S3035");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp485, "return of OpenTrustedDomainByName, state S3035");
            this.Manager.Comment("reaching state \'S3467\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp486;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp486 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3899\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp486, "return of SetTrustedDomainInfoByName, state S3899");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S220
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S220() {
            this.Manager.BeginTest("TestScenarioS15S220");
            this.Manager.Comment("reaching state \'S220\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S221\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S974\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp487;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp488;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp488 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp487);
            this.Manager.Comment("reaching state \'S1406\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp487, "policyHandle of OpenPolicy2, state S1406");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp488, "return of OpenPolicy2, state S1406");
            this.Manager.Comment("reaching state \'S1838\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp489;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp490;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp490 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp489);
            this.Manager.Comment("reaching state \'S2270\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp489, "trustHandle of CreateTrustedDomain, state S2270");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp490, "return of CreateTrustedDomain, state S2270");
            this.Manager.Comment("reaching state \'S2702\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp491;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp492;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp492 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp491);
            this.Manager.Comment("reaching state \'S3134\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp491, "trustHandle of OpenTrustedDomainByName, state S3134");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp492, "return of OpenTrustedDomainByName, state S3134");
            this.Manager.Comment("reaching state \'S3566\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp493;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp493 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3998\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp493, "return of SetTrustedDomainInfoByName, state S3998");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S222
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S222() {
            this.Manager.BeginTest("TestScenarioS15S222");
            this.Manager.Comment("reaching state \'S222\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S975\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp494;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp495;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp495 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp494);
            this.Manager.Comment("reaching state \'S1407\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp494, "policyHandle of OpenPolicy2, state S1407");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp495, "return of OpenPolicy2, state S1407");
            this.Manager.Comment("reaching state \'S1839\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp496;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp497;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp497 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp496);
            this.Manager.Comment("reaching state \'S2271\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp496, "trustHandle of CreateTrustedDomain, state S2271");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp497, "return of CreateTrustedDomain, state S2271");
            this.Manager.Comment("reaching state \'S2703\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp498;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp499;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp499 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp498);
            this.Manager.Comment("reaching state \'S3135\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp498, "trustHandle of OpenTrustedDomainByName, state S3135");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp499, "return of OpenTrustedDomainByName, state S3135");
            this.Manager.Comment("reaching state \'S3567\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp500;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp500 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3999\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp500, "return of SetTrustedDomainInfoByName, state S3999");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S224
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S224() {
            this.Manager.BeginTest("TestScenarioS15S224");
            this.Manager.Comment("reaching state \'S224\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S976\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp501;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp502;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp502 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp501);
            this.Manager.Comment("reaching state \'S1408\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp501, "policyHandle of OpenPolicy2, state S1408");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp502, "return of OpenPolicy2, state S1408");
            this.Manager.Comment("reaching state \'S1840\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp503;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp504;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp504 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp503);
            this.Manager.Comment("reaching state \'S2272\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp503, "trustHandle of CreateTrustedDomain, state S2272");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp504, "return of CreateTrustedDomain, state S2272");
            this.Manager.Comment("reaching state \'S2704\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp505;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp506;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp506 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp505);
            this.Manager.Comment("reaching state \'S3136\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp505, "trustHandle of OpenTrustedDomainByName, state S3136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp506, "return of OpenTrustedDomainByName, state S3136");
            this.Manager.Comment("reaching state \'S3568\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp507;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp507 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4000\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp507, "return of SetTrustedDomainInfoByName, state S4000");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S226
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S226() {
            this.Manager.BeginTest("TestScenarioS15S226");
            this.Manager.Comment("reaching state \'S226\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S977\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp508;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp509;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp509 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp508);
            this.Manager.Comment("reaching state \'S1409\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp508, "policyHandle of OpenPolicy2, state S1409");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp509, "return of OpenPolicy2, state S1409");
            this.Manager.Comment("reaching state \'S1841\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp510;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp511;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp511 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp510);
            this.Manager.Comment("reaching state \'S2273\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp510, "trustHandle of CreateTrustedDomain, state S2273");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp511, "return of CreateTrustedDomain, state S2273");
            this.Manager.Comment("reaching state \'S2705\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp512;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp513;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp513 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp512);
            this.Manager.Comment("reaching state \'S3137\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp512, "trustHandle of OpenTrustedDomainByName, state S3137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp513, "return of OpenTrustedDomainByName, state S3137");
            this.Manager.Comment("reaching state \'S3569\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp514;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp514 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4001\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp514, "return of SetTrustedDomainInfoByName, state S4001");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S228
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S228() {
            this.Manager.BeginTest("TestScenarioS15S228");
            this.Manager.Comment("reaching state \'S228\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S229\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S978\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp515;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp516;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp516 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp515);
            this.Manager.Comment("reaching state \'S1410\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp515, "policyHandle of OpenPolicy2, state S1410");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp516, "return of OpenPolicy2, state S1410");
            this.Manager.Comment("reaching state \'S1842\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp517;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp518;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp518 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp517);
            this.Manager.Comment("reaching state \'S2274\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp517, "trustHandle of CreateTrustedDomain, state S2274");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp518, "return of CreateTrustedDomain, state S2274");
            this.Manager.Comment("reaching state \'S2706\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp519;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp520;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp520 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp519);
            this.Manager.Comment("reaching state \'S3138\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp519, "trustHandle of OpenTrustedDomainByName, state S3138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp520, "return of OpenTrustedDomainByName, state S3138");
            this.Manager.Comment("reaching state \'S3570\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp521;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp521 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4002\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp521, "return of SetTrustedDomainInfoByName, state S4002");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S230
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S230() {
            this.Manager.BeginTest("TestScenarioS15S230");
            this.Manager.Comment("reaching state \'S230\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S979\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp522;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp523;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp523 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp522);
            this.Manager.Comment("reaching state \'S1411\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp522, "policyHandle of OpenPolicy2, state S1411");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp523, "return of OpenPolicy2, state S1411");
            this.Manager.Comment("reaching state \'S1843\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp524;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp525;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp525 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp524);
            this.Manager.Comment("reaching state \'S2275\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp524, "trustHandle of CreateTrustedDomain, state S2275");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp525, "return of CreateTrustedDomain, state S2275");
            this.Manager.Comment("reaching state \'S2707\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp526;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp527;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp527 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp526);
            this.Manager.Comment("reaching state \'S3139\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp526, "trustHandle of OpenTrustedDomainByName, state S3139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp527, "return of OpenTrustedDomainByName, state S3139");
            this.Manager.Comment("reaching state \'S3571\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp528;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp528 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4003\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp528, "return of SetTrustedDomainInfoByName, state S4003");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S232
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S232() {
            this.Manager.BeginTest("TestScenarioS15S232");
            this.Manager.Comment("reaching state \'S232\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S980\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp529;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp530;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp530 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp529);
            this.Manager.Comment("reaching state \'S1412\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp529, "policyHandle of OpenPolicy2, state S1412");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp530, "return of OpenPolicy2, state S1412");
            this.Manager.Comment("reaching state \'S1844\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp531;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp532;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp532 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp531);
            this.Manager.Comment("reaching state \'S2276\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp531, "trustHandle of CreateTrustedDomain, state S2276");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp532, "return of CreateTrustedDomain, state S2276");
            this.Manager.Comment("reaching state \'S2708\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp533;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp534;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp534 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp533);
            this.Manager.Comment("reaching state \'S3140\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp533, "trustHandle of OpenTrustedDomainByName, state S3140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp534, "return of OpenTrustedDomainByName, state S3140");
            this.Manager.Comment("reaching state \'S3572\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp535;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp535 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4004\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp535, "return of SetTrustedDomainInfoByName, state S4004");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S234
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S234() {
            this.Manager.BeginTest("TestScenarioS15S234");
            this.Manager.Comment("reaching state \'S234\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S235\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S981\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp536;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp537;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp537 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp536);
            this.Manager.Comment("reaching state \'S1413\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp536, "policyHandle of OpenPolicy2, state S1413");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp537, "return of OpenPolicy2, state S1413");
            this.Manager.Comment("reaching state \'S1845\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp538;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp539;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp539 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp538);
            this.Manager.Comment("reaching state \'S2277\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp538, "trustHandle of CreateTrustedDomain, state S2277");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp539, "return of CreateTrustedDomain, state S2277");
            this.Manager.Comment("reaching state \'S2709\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp540;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp541;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp541 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp540);
            this.Manager.Comment("reaching state \'S3141\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp540, "trustHandle of OpenTrustedDomainByName, state S3141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp541, "return of OpenTrustedDomainByName, state S3141");
            this.Manager.Comment("reaching state \'S3573\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp542;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp542 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4005\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp542, "return of SetTrustedDomainInfoByName, state S4005");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S236
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S236() {
            this.Manager.BeginTest("TestScenarioS15S236");
            this.Manager.Comment("reaching state \'S236\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S982\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp543;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp544;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp544 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp543);
            this.Manager.Comment("reaching state \'S1414\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp543, "policyHandle of OpenPolicy2, state S1414");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp544, "return of OpenPolicy2, state S1414");
            this.Manager.Comment("reaching state \'S1846\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp545;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp546;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp546 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp545);
            this.Manager.Comment("reaching state \'S2278\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp545, "trustHandle of CreateTrustedDomain, state S2278");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp546, "return of CreateTrustedDomain, state S2278");
            this.Manager.Comment("reaching state \'S2710\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp547;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp548;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp548 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp547);
            this.Manager.Comment("reaching state \'S3142\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp547, "trustHandle of OpenTrustedDomainByName, state S3142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp548, "return of OpenTrustedDomainByName, state S3142");
            this.Manager.Comment("reaching state \'S3574\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp549;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp549 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4006\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp549, "return of SetTrustedDomainInfoByName, state S4006");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S238
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S238() {
            this.Manager.BeginTest("TestScenarioS15S238");
            this.Manager.Comment("reaching state \'S238\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S239\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S983\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp550;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp551;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp551 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp550);
            this.Manager.Comment("reaching state \'S1415\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp550, "policyHandle of OpenPolicy2, state S1415");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp551, "return of OpenPolicy2, state S1415");
            this.Manager.Comment("reaching state \'S1847\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp552;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp553;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp553 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp552);
            this.Manager.Comment("reaching state \'S2279\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp552, "trustHandle of CreateTrustedDomain, state S2279");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp553, "return of CreateTrustedDomain, state S2279");
            this.Manager.Comment("reaching state \'S2711\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp554;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp555;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp555 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp554);
            this.Manager.Comment("reaching state \'S3143\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp554, "trustHandle of OpenTrustedDomainByName, state S3143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp555, "return of OpenTrustedDomainByName, state S3143");
            this.Manager.Comment("reaching state \'S3575\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp556;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp556 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4007\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp556, "return of SetTrustedDomainInfoByName, state S4007");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S24() {
            this.Manager.BeginTest("TestScenarioS15S24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S876\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp557;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp558;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp558 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp557);
            this.Manager.Comment("reaching state \'S1308\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp557, "policyHandle of OpenPolicy2, state S1308");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp558, "return of OpenPolicy2, state S1308");
            this.Manager.Comment("reaching state \'S1740\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp559;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp560;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp560 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp559);
            this.Manager.Comment("reaching state \'S2172\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp559, "trustHandle of CreateTrustedDomain, state S2172");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp560, "return of CreateTrustedDomain, state S2172");
            this.Manager.Comment("reaching state \'S2604\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp561;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp562;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp562 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp561);
            this.Manager.Comment("reaching state \'S3036\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp561, "trustHandle of OpenTrustedDomainByName, state S3036");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp562, "return of OpenTrustedDomainByName, state S3036");
            this.Manager.Comment("reaching state \'S3468\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp563;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp563 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3900\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp563, "return of SetTrustedDomainInfoByName, state S3900");
            TestScenarioS15S4324();
            this.Manager.EndTest();
        }
        
        private void TestScenarioS15S4324() {
            this.Manager.Comment("reaching state \'S4324\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp564;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp564 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.AddReturn(DeleteTrustedDomainInfo, null, temp564);
            TestScenarioS15S4327();
        }
        #endregion
        
        #region Test Starting in S240
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S240() {
            this.Manager.BeginTest("TestScenarioS15S240");
            this.Manager.Comment("reaching state \'S240\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S984\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp565;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp566;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp566 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp565);
            this.Manager.Comment("reaching state \'S1416\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp565, "policyHandle of OpenPolicy2, state S1416");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp566, "return of OpenPolicy2, state S1416");
            this.Manager.Comment("reaching state \'S1848\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp567;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp568;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp568 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp567);
            this.Manager.Comment("reaching state \'S2280\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp567, "trustHandle of CreateTrustedDomain, state S2280");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp568, "return of CreateTrustedDomain, state S2280");
            this.Manager.Comment("reaching state \'S2712\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp569;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp570;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp570 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp569);
            this.Manager.Comment("reaching state \'S3144\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp569, "trustHandle of OpenTrustedDomainByName, state S3144");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp570, "return of OpenTrustedDomainByName, state S3144");
            this.Manager.Comment("reaching state \'S3576\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp571;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,Inval" +
                    "id,True)\'");
            temp571 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4008\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp571, "return of SetTrustedDomainInfoByName, state S4008");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S242
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S242() {
            this.Manager.BeginTest("TestScenarioS15S242");
            this.Manager.Comment("reaching state \'S242\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S985\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp572;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp573;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp573 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp572);
            this.Manager.Comment("reaching state \'S1417\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp572, "policyHandle of OpenPolicy2, state S1417");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp573, "return of OpenPolicy2, state S1417");
            this.Manager.Comment("reaching state \'S1849\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp574;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp575;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp575 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp574);
            this.Manager.Comment("reaching state \'S2281\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp574, "trustHandle of CreateTrustedDomain, state S2281");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp575, "return of CreateTrustedDomain, state S2281");
            this.Manager.Comment("reaching state \'S2713\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp576;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp577;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp577 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp576);
            this.Manager.Comment("reaching state \'S3145\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp576, "trustHandle of OpenTrustedDomainByName, state S3145");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp577, "return of OpenTrustedDomainByName, state S3145");
            this.Manager.Comment("reaching state \'S3577\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp578;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp578 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4009\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp578, "return of SetTrustedDomainInfoByName, state S4009");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S244
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S244() {
            this.Manager.BeginTest("TestScenarioS15S244");
            this.Manager.Comment("reaching state \'S244\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S245\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S986\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp579;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp580;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp580 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp579);
            this.Manager.Comment("reaching state \'S1418\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp579, "policyHandle of OpenPolicy2, state S1418");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp580, "return of OpenPolicy2, state S1418");
            this.Manager.Comment("reaching state \'S1850\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp581;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp582;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp582 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp581);
            this.Manager.Comment("reaching state \'S2282\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp581, "trustHandle of CreateTrustedDomain, state S2282");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp582, "return of CreateTrustedDomain, state S2282");
            this.Manager.Comment("reaching state \'S2714\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp583;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp584;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp584 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp583);
            this.Manager.Comment("reaching state \'S3146\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp583, "trustHandle of OpenTrustedDomainByName, state S3146");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp584, "return of OpenTrustedDomainByName, state S3146");
            this.Manager.Comment("reaching state \'S3578\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp585;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp585 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4010\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp585, "return of SetTrustedDomainInfoByName, state S4010");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S246
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S246() {
            this.Manager.BeginTest("TestScenarioS15S246");
            this.Manager.Comment("reaching state \'S246\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S247\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S987\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp586;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp587;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp587 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp586);
            this.Manager.Comment("reaching state \'S1419\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp586, "policyHandle of OpenPolicy2, state S1419");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp587, "return of OpenPolicy2, state S1419");
            this.Manager.Comment("reaching state \'S1851\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp588;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp589;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp589 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp588);
            this.Manager.Comment("reaching state \'S2283\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp588, "trustHandle of CreateTrustedDomain, state S2283");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp589, "return of CreateTrustedDomain, state S2283");
            this.Manager.Comment("reaching state \'S2715\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp590;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp591;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp591 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp590);
            this.Manager.Comment("reaching state \'S3147\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp590, "trustHandle of OpenTrustedDomainByName, state S3147");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp591, "return of OpenTrustedDomainByName, state S3147");
            this.Manager.Comment("reaching state \'S3579\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp592;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp592 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4011\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp592, "return of SetTrustedDomainInfoByName, state S4011");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S248
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S248() {
            this.Manager.BeginTest("TestScenarioS15S248");
            this.Manager.Comment("reaching state \'S248\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S988\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp593;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp594;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp594 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp593);
            this.Manager.Comment("reaching state \'S1420\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp593, "policyHandle of OpenPolicy2, state S1420");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp594, "return of OpenPolicy2, state S1420");
            this.Manager.Comment("reaching state \'S1852\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp595;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp596;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp596 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp595);
            this.Manager.Comment("reaching state \'S2284\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp595, "trustHandle of CreateTrustedDomain, state S2284");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp596, "return of CreateTrustedDomain, state S2284");
            this.Manager.Comment("reaching state \'S2716\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp597;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp598;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp598 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp597);
            this.Manager.Comment("reaching state \'S3148\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp597, "trustHandle of OpenTrustedDomainByName, state S3148");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp598, "return of OpenTrustedDomainByName, state S3148");
            this.Manager.Comment("reaching state \'S3580\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp599;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp599 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4012\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp599, "return of SetTrustedDomainInfoByName, state S4012");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S250
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S250() {
            this.Manager.BeginTest("TestScenarioS15S250");
            this.Manager.Comment("reaching state \'S250\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S251\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S989\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp600;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp601;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp601 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp600);
            this.Manager.Comment("reaching state \'S1421\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp600, "policyHandle of OpenPolicy2, state S1421");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp601, "return of OpenPolicy2, state S1421");
            this.Manager.Comment("reaching state \'S1853\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp602;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp603;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp603 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp602);
            this.Manager.Comment("reaching state \'S2285\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp602, "trustHandle of CreateTrustedDomain, state S2285");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp603, "return of CreateTrustedDomain, state S2285");
            this.Manager.Comment("reaching state \'S2717\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp604;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp605;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp605 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp604);
            this.Manager.Comment("reaching state \'S3149\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp604, "trustHandle of OpenTrustedDomainByName, state S3149");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp605, "return of OpenTrustedDomainByName, state S3149");
            this.Manager.Comment("reaching state \'S3581\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp606;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp606 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4013\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp606, "return of SetTrustedDomainInfoByName, state S4013");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S252
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S252() {
            this.Manager.BeginTest("TestScenarioS15S252");
            this.Manager.Comment("reaching state \'S252\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S253\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S990\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp607;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp608;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp608 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp607);
            this.Manager.Comment("reaching state \'S1422\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp607, "policyHandle of OpenPolicy2, state S1422");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp608, "return of OpenPolicy2, state S1422");
            this.Manager.Comment("reaching state \'S1854\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp609;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp610;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp610 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp609);
            this.Manager.Comment("reaching state \'S2286\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp609, "trustHandle of CreateTrustedDomain, state S2286");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp610, "return of CreateTrustedDomain, state S2286");
            this.Manager.Comment("reaching state \'S2718\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp611;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp612;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp612 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp611);
            this.Manager.Comment("reaching state \'S3150\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp611, "trustHandle of OpenTrustedDomainByName, state S3150");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp612, "return of OpenTrustedDomainByName, state S3150");
            this.Manager.Comment("reaching state \'S3582\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp613;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp613 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4014\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp613, "return of SetTrustedDomainInfoByName, state S4014");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S254
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S254() {
            this.Manager.BeginTest("TestScenarioS15S254");
            this.Manager.Comment("reaching state \'S254\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S255\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S991\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp614;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp615;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp615 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp614);
            this.Manager.Comment("reaching state \'S1423\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp614, "policyHandle of OpenPolicy2, state S1423");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp615, "return of OpenPolicy2, state S1423");
            this.Manager.Comment("reaching state \'S1855\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp616;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp617;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp617 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp616);
            this.Manager.Comment("reaching state \'S2287\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp616, "trustHandle of CreateTrustedDomain, state S2287");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp617, "return of CreateTrustedDomain, state S2287");
            this.Manager.Comment("reaching state \'S2719\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp618;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp619;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp619 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp618);
            this.Manager.Comment("reaching state \'S3151\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp618, "trustHandle of OpenTrustedDomainByName, state S3151");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp619, "return of OpenTrustedDomainByName, state S3151");
            this.Manager.Comment("reaching state \'S3583\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp620;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp620 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4015\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp620, "return of SetTrustedDomainInfoByName, state S4015");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S256
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S256() {
            this.Manager.BeginTest("TestScenarioS15S256");
            this.Manager.Comment("reaching state \'S256\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S257\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S992\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp621;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp622;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp622 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp621);
            this.Manager.Comment("reaching state \'S1424\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp621, "policyHandle of OpenPolicy2, state S1424");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp622, "return of OpenPolicy2, state S1424");
            this.Manager.Comment("reaching state \'S1856\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp623;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp624;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp624 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp623);
            this.Manager.Comment("reaching state \'S2288\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp623, "trustHandle of CreateTrustedDomain, state S2288");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp624, "return of CreateTrustedDomain, state S2288");
            this.Manager.Comment("reaching state \'S2720\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp625;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp626;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp626 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp625);
            this.Manager.Comment("reaching state \'S3152\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp625, "trustHandle of OpenTrustedDomainByName, state S3152");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp626, "return of OpenTrustedDomainByName, state S3152");
            this.Manager.Comment("reaching state \'S3584\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp627;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp627 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4016\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp627, "return of SetTrustedDomainInfoByName, state S4016");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S258
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S258() {
            this.Manager.BeginTest("TestScenarioS15S258");
            this.Manager.Comment("reaching state \'S258\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S259\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S993\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp628;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp629;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp629 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp628);
            this.Manager.Comment("reaching state \'S1425\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp628, "policyHandle of OpenPolicy2, state S1425");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp629, "return of OpenPolicy2, state S1425");
            this.Manager.Comment("reaching state \'S1857\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp630;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp631;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp631 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp630);
            this.Manager.Comment("reaching state \'S2289\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp630, "trustHandle of CreateTrustedDomain, state S2289");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp631, "return of CreateTrustedDomain, state S2289");
            this.Manager.Comment("reaching state \'S2721\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp632;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp633;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp633 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp632);
            this.Manager.Comment("reaching state \'S3153\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp632, "trustHandle of OpenTrustedDomainByName, state S3153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp633, "return of OpenTrustedDomainByName, state S3153");
            this.Manager.Comment("reaching state \'S3585\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp634;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp634 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4017\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp634, "return of SetTrustedDomainInfoByName, state S4017");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S26() {
            this.Manager.BeginTest("TestScenarioS15S26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S877\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp635;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp636;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp636 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp635);
            this.Manager.Comment("reaching state \'S1309\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp635, "policyHandle of OpenPolicy2, state S1309");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp636, "return of OpenPolicy2, state S1309");
            this.Manager.Comment("reaching state \'S1741\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp637;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp638;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp638 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp637);
            this.Manager.Comment("reaching state \'S2173\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp637, "trustHandle of CreateTrustedDomain, state S2173");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp638, "return of CreateTrustedDomain, state S2173");
            this.Manager.Comment("reaching state \'S2605\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp639;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp640;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp640 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp639);
            this.Manager.Comment("reaching state \'S3037\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp639, "trustHandle of OpenTrustedDomainByName, state S3037");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp640, "return of OpenTrustedDomainByName, state S3037");
            this.Manager.Comment("reaching state \'S3469\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp641;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp641 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3901\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp641, "return of SetTrustedDomainInfoByName, state S3901");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S260
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S260() {
            this.Manager.BeginTest("TestScenarioS15S260");
            this.Manager.Comment("reaching state \'S260\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S994\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp642;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp643;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp643 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp642);
            this.Manager.Comment("reaching state \'S1426\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp642, "policyHandle of OpenPolicy2, state S1426");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp643, "return of OpenPolicy2, state S1426");
            this.Manager.Comment("reaching state \'S1858\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp644;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp645;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp645 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp644);
            this.Manager.Comment("reaching state \'S2290\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp644, "trustHandle of CreateTrustedDomain, state S2290");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp645, "return of CreateTrustedDomain, state S2290");
            this.Manager.Comment("reaching state \'S2722\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp646;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp647;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp647 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp646);
            this.Manager.Comment("reaching state \'S3154\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp646, "trustHandle of OpenTrustedDomainByName, state S3154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp647, "return of OpenTrustedDomainByName, state S3154");
            this.Manager.Comment("reaching state \'S3586\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp648;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,Inv" +
                    "alid,True)\'");
            temp648 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4018\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp648, "return of SetTrustedDomainInfoByName, state S4018");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S262
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S262() {
            this.Manager.BeginTest("TestScenarioS15S262");
            this.Manager.Comment("reaching state \'S262\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S995\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp649;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp650;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp650 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp649);
            this.Manager.Comment("reaching state \'S1427\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp649, "policyHandle of OpenPolicy2, state S1427");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp650, "return of OpenPolicy2, state S1427");
            this.Manager.Comment("reaching state \'S1859\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp651;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp652;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp652 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp651);
            this.Manager.Comment("reaching state \'S2291\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp651, "trustHandle of CreateTrustedDomain, state S2291");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp652, "return of CreateTrustedDomain, state S2291");
            this.Manager.Comment("reaching state \'S2723\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp653;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp654;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp654 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp653);
            this.Manager.Comment("reaching state \'S3155\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp653, "trustHandle of OpenTrustedDomainByName, state S3155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp654, "return of OpenTrustedDomainByName, state S3155");
            this.Manager.Comment("reaching state \'S3587\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp655;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp655 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4019\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp655, "return of SetTrustedDomainInfoByName, state S4019");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S264
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S264() {
            this.Manager.BeginTest("TestScenarioS15S264");
            this.Manager.Comment("reaching state \'S264\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S265\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S996\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp656;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp657;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp657 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp656);
            this.Manager.Comment("reaching state \'S1428\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp656, "policyHandle of OpenPolicy2, state S1428");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp657, "return of OpenPolicy2, state S1428");
            this.Manager.Comment("reaching state \'S1860\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp658;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp659;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp659 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp658);
            this.Manager.Comment("reaching state \'S2292\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp658, "trustHandle of CreateTrustedDomain, state S2292");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp659, "return of CreateTrustedDomain, state S2292");
            this.Manager.Comment("reaching state \'S2724\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp660;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp661;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp661 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp660);
            this.Manager.Comment("reaching state \'S3156\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp660, "trustHandle of OpenTrustedDomainByName, state S3156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp661, "return of OpenTrustedDomainByName, state S3156");
            this.Manager.Comment("reaching state \'S3588\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp662;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp662 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4020\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp662, "return of SetTrustedDomainInfoByName, state S4020");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S266
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S266() {
            this.Manager.BeginTest("TestScenarioS15S266");
            this.Manager.Comment("reaching state \'S266\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S267\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S997\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp663;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp664;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp664 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp663);
            this.Manager.Comment("reaching state \'S1429\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp663, "policyHandle of OpenPolicy2, state S1429");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp664, "return of OpenPolicy2, state S1429");
            this.Manager.Comment("reaching state \'S1861\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp665;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp666;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp666 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp665);
            this.Manager.Comment("reaching state \'S2293\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp665, "trustHandle of CreateTrustedDomain, state S2293");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp666, "return of CreateTrustedDomain, state S2293");
            this.Manager.Comment("reaching state \'S2725\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp667;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp668;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp668 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp667);
            this.Manager.Comment("reaching state \'S3157\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp667, "trustHandle of OpenTrustedDomainByName, state S3157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp668, "return of OpenTrustedDomainByName, state S3157");
            this.Manager.Comment("reaching state \'S3589\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp669;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp669 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4021\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp669, "return of SetTrustedDomainInfoByName, state S4021");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S268
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S268() {
            this.Manager.BeginTest("TestScenarioS15S268");
            this.Manager.Comment("reaching state \'S268\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S269\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S998\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp670;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp671;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp671 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp670);
            this.Manager.Comment("reaching state \'S1430\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp670, "policyHandle of OpenPolicy2, state S1430");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp671, "return of OpenPolicy2, state S1430");
            this.Manager.Comment("reaching state \'S1862\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp672;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp673;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp673 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp672);
            this.Manager.Comment("reaching state \'S2294\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp672, "trustHandle of CreateTrustedDomain, state S2294");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp673, "return of CreateTrustedDomain, state S2294");
            this.Manager.Comment("reaching state \'S2726\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp674;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp675;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp675 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp674);
            this.Manager.Comment("reaching state \'S3158\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp674, "trustHandle of OpenTrustedDomainByName, state S3158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp675, "return of OpenTrustedDomainByName, state S3158");
            this.Manager.Comment("reaching state \'S3590\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp676;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp676 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4022\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp676, "return of SetTrustedDomainInfoByName, state S4022");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S270
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S270() {
            this.Manager.BeginTest("TestScenarioS15S270");
            this.Manager.Comment("reaching state \'S270\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S271\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S999\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp677;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp678;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp678 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp677);
            this.Manager.Comment("reaching state \'S1431\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp677, "policyHandle of OpenPolicy2, state S1431");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp678, "return of OpenPolicy2, state S1431");
            this.Manager.Comment("reaching state \'S1863\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp679;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp680;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp680 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp679);
            this.Manager.Comment("reaching state \'S2295\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp679, "trustHandle of CreateTrustedDomain, state S2295");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp680, "return of CreateTrustedDomain, state S2295");
            this.Manager.Comment("reaching state \'S2727\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp681;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp682;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp682 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp681);
            this.Manager.Comment("reaching state \'S3159\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp681, "trustHandle of OpenTrustedDomainByName, state S3159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp682, "return of OpenTrustedDomainByName, state S3159");
            this.Manager.Comment("reaching state \'S3591\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp683;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp683 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4023\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp683, "return of SetTrustedDomainInfoByName, state S4023");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S272
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S272() {
            this.Manager.BeginTest("TestScenarioS15S272");
            this.Manager.Comment("reaching state \'S272\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S273\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1000\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp684;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp685;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp685 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp684);
            this.Manager.Comment("reaching state \'S1432\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp684, "policyHandle of OpenPolicy2, state S1432");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp685, "return of OpenPolicy2, state S1432");
            this.Manager.Comment("reaching state \'S1864\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp686;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp687;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp687 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp686);
            this.Manager.Comment("reaching state \'S2296\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp686, "trustHandle of CreateTrustedDomain, state S2296");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp687, "return of CreateTrustedDomain, state S2296");
            this.Manager.Comment("reaching state \'S2728\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp688;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp689;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp689 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp688);
            this.Manager.Comment("reaching state \'S3160\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp688, "trustHandle of OpenTrustedDomainByName, state S3160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp689, "return of OpenTrustedDomainByName, state S3160");
            this.Manager.Comment("reaching state \'S3592\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp690;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp690 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4024\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp690, "return of SetTrustedDomainInfoByName, state S4024");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S274
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S274() {
            this.Manager.BeginTest("TestScenarioS15S274");
            this.Manager.Comment("reaching state \'S274\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S275\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1001\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp691;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp692;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp692 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp691);
            this.Manager.Comment("reaching state \'S1433\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp691, "policyHandle of OpenPolicy2, state S1433");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp692, "return of OpenPolicy2, state S1433");
            this.Manager.Comment("reaching state \'S1865\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp693;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp694;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp694 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp693);
            this.Manager.Comment("reaching state \'S2297\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp693, "trustHandle of CreateTrustedDomain, state S2297");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp694, "return of CreateTrustedDomain, state S2297");
            this.Manager.Comment("reaching state \'S2729\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp695;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp696;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp696 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp695);
            this.Manager.Comment("reaching state \'S3161\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp695, "trustHandle of OpenTrustedDomainByName, state S3161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp696, "return of OpenTrustedDomainByName, state S3161");
            this.Manager.Comment("reaching state \'S3593\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp697;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp697 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4025\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp697, "return of SetTrustedDomainInfoByName, state S4025");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S276
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S276() {
            this.Manager.BeginTest("TestScenarioS15S276");
            this.Manager.Comment("reaching state \'S276\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S277\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1002\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp698;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp699;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp699 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp698);
            this.Manager.Comment("reaching state \'S1434\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp698, "policyHandle of OpenPolicy2, state S1434");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp699, "return of OpenPolicy2, state S1434");
            this.Manager.Comment("reaching state \'S1866\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp700;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp701;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp701 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp700);
            this.Manager.Comment("reaching state \'S2298\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp700, "trustHandle of CreateTrustedDomain, state S2298");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp701, "return of CreateTrustedDomain, state S2298");
            this.Manager.Comment("reaching state \'S2730\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp702;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp703;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp703 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp702);
            this.Manager.Comment("reaching state \'S3162\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp702, "trustHandle of OpenTrustedDomainByName, state S3162");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp703, "return of OpenTrustedDomainByName, state S3162");
            this.Manager.Comment("reaching state \'S3594\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp704;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp704 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4026\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp704, "return of SetTrustedDomainInfoByName, state S4026");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S278
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S278() {
            this.Manager.BeginTest("TestScenarioS15S278");
            this.Manager.Comment("reaching state \'S278\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S279\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1003\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp705;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp706;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp706 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp705);
            this.Manager.Comment("reaching state \'S1435\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp705, "policyHandle of OpenPolicy2, state S1435");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp706, "return of OpenPolicy2, state S1435");
            this.Manager.Comment("reaching state \'S1867\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp707;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp708;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp708 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp707);
            this.Manager.Comment("reaching state \'S2299\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp707, "trustHandle of CreateTrustedDomain, state S2299");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp708, "return of CreateTrustedDomain, state S2299");
            this.Manager.Comment("reaching state \'S2731\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp709;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp710;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp710 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp709);
            this.Manager.Comment("reaching state \'S3163\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp709, "trustHandle of OpenTrustedDomainByName, state S3163");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp710, "return of OpenTrustedDomainByName, state S3163");
            this.Manager.Comment("reaching state \'S3595\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp711;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp711 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4027\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp711, "return of SetTrustedDomainInfoByName, state S4027");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S28() {
            this.Manager.BeginTest("TestScenarioS15S28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S878\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp712;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp713;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp713 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp712);
            this.Manager.Comment("reaching state \'S1310\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp712, "policyHandle of OpenPolicy2, state S1310");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp713, "return of OpenPolicy2, state S1310");
            this.Manager.Comment("reaching state \'S1742\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp714;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp715;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp715 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp714);
            this.Manager.Comment("reaching state \'S2174\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp714, "trustHandle of CreateTrustedDomain, state S2174");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp715, "return of CreateTrustedDomain, state S2174");
            this.Manager.Comment("reaching state \'S2606\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp716;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp717;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp717 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp716);
            this.Manager.Comment("reaching state \'S3038\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp716, "trustHandle of OpenTrustedDomainByName, state S3038");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp717, "return of OpenTrustedDomainByName, state S3038");
            this.Manager.Comment("reaching state \'S3470\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp718;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp718 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3902\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp718, "return of SetTrustedDomainInfoByName, state S3902");
            TestScenarioS15S4324();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S280
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S280() {
            this.Manager.BeginTest("TestScenarioS15S280");
            this.Manager.Comment("reaching state \'S280\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S281\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1004\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp719;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp720;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp720 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp719);
            this.Manager.Comment("reaching state \'S1436\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp719, "policyHandle of OpenPolicy2, state S1436");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp720, "return of OpenPolicy2, state S1436");
            this.Manager.Comment("reaching state \'S1868\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp721;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp722;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp722 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp721);
            this.Manager.Comment("reaching state \'S2300\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp721, "trustHandle of CreateTrustedDomain, state S2300");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp722, "return of CreateTrustedDomain, state S2300");
            this.Manager.Comment("reaching state \'S2732\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp723;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp724;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp724 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp723);
            this.Manager.Comment("reaching state \'S3164\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp723, "trustHandle of OpenTrustedDomainByName, state S3164");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp724, "return of OpenTrustedDomainByName, state S3164");
            this.Manager.Comment("reaching state \'S3596\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp725;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp725 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4028\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp725, "return of SetTrustedDomainInfoByName, state S4028");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S282
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S282() {
            this.Manager.BeginTest("TestScenarioS15S282");
            this.Manager.Comment("reaching state \'S282\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1005\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp726;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp727;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp727 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp726);
            this.Manager.Comment("reaching state \'S1437\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp726, "policyHandle of OpenPolicy2, state S1437");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp727, "return of OpenPolicy2, state S1437");
            this.Manager.Comment("reaching state \'S1869\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp728;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp729;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp729 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp728);
            this.Manager.Comment("reaching state \'S2301\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp728, "trustHandle of CreateTrustedDomain, state S2301");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp729, "return of CreateTrustedDomain, state S2301");
            this.Manager.Comment("reaching state \'S2733\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp730;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp731;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp731 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp730);
            this.Manager.Comment("reaching state \'S3165\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp730, "trustHandle of OpenTrustedDomainByName, state S3165");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp731, "return of OpenTrustedDomainByName, state S3165");
            this.Manager.Comment("reaching state \'S3597\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp732;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,Invali" +
                    "d,True)\'");
            temp732 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4029\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp732, "return of SetTrustedDomainInfoByName, state S4029");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S284
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S284() {
            this.Manager.BeginTest("TestScenarioS15S284");
            this.Manager.Comment("reaching state \'S284\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S285\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1006\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp733;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp734;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp734 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp733);
            this.Manager.Comment("reaching state \'S1438\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp733, "policyHandle of OpenPolicy2, state S1438");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp734, "return of OpenPolicy2, state S1438");
            this.Manager.Comment("reaching state \'S1870\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp735;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp736;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp736 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp735);
            this.Manager.Comment("reaching state \'S2302\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp735, "trustHandle of CreateTrustedDomain, state S2302");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp736, "return of CreateTrustedDomain, state S2302");
            this.Manager.Comment("reaching state \'S2734\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp737;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp738;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp738 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp737);
            this.Manager.Comment("reaching state \'S3166\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp737, "trustHandle of OpenTrustedDomainByName, state S3166");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp738, "return of OpenTrustedDomainByName, state S3166");
            this.Manager.Comment("reaching state \'S3598\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp739;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp739 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4030\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp739, "return of SetTrustedDomainInfoByName, state S4030");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S286
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S286() {
            this.Manager.BeginTest("TestScenarioS15S286");
            this.Manager.Comment("reaching state \'S286\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S287\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1007\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp740;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp741;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp741 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp740);
            this.Manager.Comment("reaching state \'S1439\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp740, "policyHandle of OpenPolicy2, state S1439");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp741, "return of OpenPolicy2, state S1439");
            this.Manager.Comment("reaching state \'S1871\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp742;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp743;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp743 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp742);
            this.Manager.Comment("reaching state \'S2303\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp742, "trustHandle of CreateTrustedDomain, state S2303");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp743, "return of CreateTrustedDomain, state S2303");
            this.Manager.Comment("reaching state \'S2735\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp744;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp745;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp745 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp744);
            this.Manager.Comment("reaching state \'S3167\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp744, "trustHandle of OpenTrustedDomainByName, state S3167");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp745, "return of OpenTrustedDomainByName, state S3167");
            this.Manager.Comment("reaching state \'S3599\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp746;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp746 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4031\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp746, "return of SetTrustedDomainInfoByName, state S4031");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S288
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S288() {
            this.Manager.BeginTest("TestScenarioS15S288");
            this.Manager.Comment("reaching state \'S288\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S289\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1008\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp747;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp748;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp748 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp747);
            this.Manager.Comment("reaching state \'S1440\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp747, "policyHandle of OpenPolicy2, state S1440");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp748, "return of OpenPolicy2, state S1440");
            this.Manager.Comment("reaching state \'S1872\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp749;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp750;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp750 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp749);
            this.Manager.Comment("reaching state \'S2304\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp749, "trustHandle of CreateTrustedDomain, state S2304");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp750, "return of CreateTrustedDomain, state S2304");
            this.Manager.Comment("reaching state \'S2736\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp751;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp752;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp752 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp751);
            this.Manager.Comment("reaching state \'S3168\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp751, "trustHandle of OpenTrustedDomainByName, state S3168");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp752, "return of OpenTrustedDomainByName, state S3168");
            this.Manager.Comment("reaching state \'S3600\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp753;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp753 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4032\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp753, "return of SetTrustedDomainInfoByName, state S4032");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S290
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S290() {
            this.Manager.BeginTest("TestScenarioS15S290");
            this.Manager.Comment("reaching state \'S290\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S291\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1009\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp754;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp755;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp755 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp754);
            this.Manager.Comment("reaching state \'S1441\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp754, "policyHandle of OpenPolicy2, state S1441");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp755, "return of OpenPolicy2, state S1441");
            this.Manager.Comment("reaching state \'S1873\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp756;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp757;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp757 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp756);
            this.Manager.Comment("reaching state \'S2305\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp756, "trustHandle of CreateTrustedDomain, state S2305");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp757, "return of CreateTrustedDomain, state S2305");
            this.Manager.Comment("reaching state \'S2737\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp758;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp759;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp759 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp758);
            this.Manager.Comment("reaching state \'S3169\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp758, "trustHandle of OpenTrustedDomainByName, state S3169");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp759, "return of OpenTrustedDomainByName, state S3169");
            this.Manager.Comment("reaching state \'S3601\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp760;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp760 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4033\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp760, "return of SetTrustedDomainInfoByName, state S4033");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S292
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S292() {
            this.Manager.BeginTest("TestScenarioS15S292");
            this.Manager.Comment("reaching state \'S292\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S293\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1010\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp761;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp762;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp762 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp761);
            this.Manager.Comment("reaching state \'S1442\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp761, "policyHandle of OpenPolicy2, state S1442");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp762, "return of OpenPolicy2, state S1442");
            this.Manager.Comment("reaching state \'S1874\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp763;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp764;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp764 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp763);
            this.Manager.Comment("reaching state \'S2306\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp763, "trustHandle of CreateTrustedDomain, state S2306");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp764, "return of CreateTrustedDomain, state S2306");
            this.Manager.Comment("reaching state \'S2738\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp765;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp766;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp766 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp765);
            this.Manager.Comment("reaching state \'S3170\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp765, "trustHandle of OpenTrustedDomainByName, state S3170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp766, "return of OpenTrustedDomainByName, state S3170");
            this.Manager.Comment("reaching state \'S3602\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp767;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp767 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4034\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp767, "return of SetTrustedDomainInfoByName, state S4034");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S294
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S294() {
            this.Manager.BeginTest("TestScenarioS15S294");
            this.Manager.Comment("reaching state \'S294\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S295\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1011\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp768;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp769;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp769 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp768);
            this.Manager.Comment("reaching state \'S1443\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp768, "policyHandle of OpenPolicy2, state S1443");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp769, "return of OpenPolicy2, state S1443");
            this.Manager.Comment("reaching state \'S1875\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp770;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp771;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp771 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp770);
            this.Manager.Comment("reaching state \'S2307\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp770, "trustHandle of CreateTrustedDomain, state S2307");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp771, "return of CreateTrustedDomain, state S2307");
            this.Manager.Comment("reaching state \'S2739\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp772;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp773;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp773 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp772);
            this.Manager.Comment("reaching state \'S3171\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp772, "trustHandle of OpenTrustedDomainByName, state S3171");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp773, "return of OpenTrustedDomainByName, state S3171");
            this.Manager.Comment("reaching state \'S3603\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp774;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp774 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4035\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp774, "return of SetTrustedDomainInfoByName, state S4035");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S296
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S296() {
            this.Manager.BeginTest("TestScenarioS15S296");
            this.Manager.Comment("reaching state \'S296\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S297\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1012\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp775;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp776;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp776 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp775);
            this.Manager.Comment("reaching state \'S1444\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp775, "policyHandle of OpenPolicy2, state S1444");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp776, "return of OpenPolicy2, state S1444");
            this.Manager.Comment("reaching state \'S1876\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp777;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp778;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp778 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp777);
            this.Manager.Comment("reaching state \'S2308\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp777, "trustHandle of CreateTrustedDomain, state S2308");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp778, "return of CreateTrustedDomain, state S2308");
            this.Manager.Comment("reaching state \'S2740\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp779;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp780;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp780 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp779);
            this.Manager.Comment("reaching state \'S3172\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp779, "trustHandle of OpenTrustedDomainByName, state S3172");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp780, "return of OpenTrustedDomainByName, state S3172");
            this.Manager.Comment("reaching state \'S3604\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp781;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp781 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4036\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp781, "return of SetTrustedDomainInfoByName, state S4036");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S298
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S298() {
            this.Manager.BeginTest("TestScenarioS15S298");
            this.Manager.Comment("reaching state \'S298\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S299\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1013\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp782;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp783;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp783 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp782);
            this.Manager.Comment("reaching state \'S1445\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp782, "policyHandle of OpenPolicy2, state S1445");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp783, "return of OpenPolicy2, state S1445");
            this.Manager.Comment("reaching state \'S1877\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp784;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp785;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp785 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp784);
            this.Manager.Comment("reaching state \'S2309\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp784, "trustHandle of CreateTrustedDomain, state S2309");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp785, "return of CreateTrustedDomain, state S2309");
            this.Manager.Comment("reaching state \'S2741\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp786;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp787;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp787 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp786);
            this.Manager.Comment("reaching state \'S3173\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp786, "trustHandle of OpenTrustedDomainByName, state S3173");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp787, "return of OpenTrustedDomainByName, state S3173");
            this.Manager.Comment("reaching state \'S3605\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp788;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp788 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4037\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp788, "return of SetTrustedDomainInfoByName, state S4037");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S30() {
            this.Manager.BeginTest("TestScenarioS15S30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S879\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp789;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp790;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp790 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp789);
            this.Manager.Comment("reaching state \'S1311\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp789, "policyHandle of OpenPolicy2, state S1311");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp790, "return of OpenPolicy2, state S1311");
            this.Manager.Comment("reaching state \'S1743\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp791;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp792;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp792 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp791);
            this.Manager.Comment("reaching state \'S2175\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp791, "trustHandle of CreateTrustedDomain, state S2175");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp792, "return of CreateTrustedDomain, state S2175");
            this.Manager.Comment("reaching state \'S2607\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp793;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp794;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp794 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp793);
            this.Manager.Comment("reaching state \'S3039\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp793, "trustHandle of OpenTrustedDomainByName, state S3039");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp794, "return of OpenTrustedDomainByName, state S3039");
            this.Manager.Comment("reaching state \'S3471\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp795;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp795 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3903\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp795, "return of SetTrustedDomainInfoByName, state S3903");
            TestScenarioS15S4321();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S300
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S300() {
            this.Manager.BeginTest("TestScenarioS15S300");
            this.Manager.Comment("reaching state \'S300\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S301\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1014\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp796;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp797;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp797 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp796);
            this.Manager.Comment("reaching state \'S1446\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp796, "policyHandle of OpenPolicy2, state S1446");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp797, "return of OpenPolicy2, state S1446");
            this.Manager.Comment("reaching state \'S1878\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp798;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp799;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp799 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp798);
            this.Manager.Comment("reaching state \'S2310\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp798, "trustHandle of CreateTrustedDomain, state S2310");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp799, "return of CreateTrustedDomain, state S2310");
            this.Manager.Comment("reaching state \'S2742\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp800;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp801;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp801 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp800);
            this.Manager.Comment("reaching state \'S3174\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp800, "trustHandle of OpenTrustedDomainByName, state S3174");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp801, "return of OpenTrustedDomainByName, state S3174");
            this.Manager.Comment("reaching state \'S3606\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp802;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp802 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4038\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp802, "return of SetTrustedDomainInfoByName, state S4038");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S302
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S302() {
            this.Manager.BeginTest("TestScenarioS15S302");
            this.Manager.Comment("reaching state \'S302\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S303\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1015\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp803;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp804;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp804 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp803);
            this.Manager.Comment("reaching state \'S1447\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp803, "policyHandle of OpenPolicy2, state S1447");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp804, "return of OpenPolicy2, state S1447");
            this.Manager.Comment("reaching state \'S1879\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp805;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp806;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp806 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp805);
            this.Manager.Comment("reaching state \'S2311\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp805, "trustHandle of CreateTrustedDomain, state S2311");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp806, "return of CreateTrustedDomain, state S2311");
            this.Manager.Comment("reaching state \'S2743\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp807;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp808;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp808 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp807);
            this.Manager.Comment("reaching state \'S3175\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp807, "trustHandle of OpenTrustedDomainByName, state S3175");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp808, "return of OpenTrustedDomainByName, state S3175");
            this.Manager.Comment("reaching state \'S3607\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp809;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp809 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4039\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp809, "return of SetTrustedDomainInfoByName, state S4039");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S304
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S304() {
            this.Manager.BeginTest("TestScenarioS15S304");
            this.Manager.Comment("reaching state \'S304\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S305\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1016\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp810;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp811;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp811 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp810);
            this.Manager.Comment("reaching state \'S1448\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp810, "policyHandle of OpenPolicy2, state S1448");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp811, "return of OpenPolicy2, state S1448");
            this.Manager.Comment("reaching state \'S1880\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp812;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp813;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp813 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp812);
            this.Manager.Comment("reaching state \'S2312\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp812, "trustHandle of CreateTrustedDomain, state S2312");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp813, "return of CreateTrustedDomain, state S2312");
            this.Manager.Comment("reaching state \'S2744\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp814;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp815;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp815 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp814);
            this.Manager.Comment("reaching state \'S3176\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp814, "trustHandle of OpenTrustedDomainByName, state S3176");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp815, "return of OpenTrustedDomainByName, state S3176");
            this.Manager.Comment("reaching state \'S3608\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp816;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp816 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4040\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp816, "return of SetTrustedDomainInfoByName, state S4040");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S306
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S306() {
            this.Manager.BeginTest("TestScenarioS15S306");
            this.Manager.Comment("reaching state \'S306\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1017\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp817;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp818;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp818 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp817);
            this.Manager.Comment("reaching state \'S1449\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp817, "policyHandle of OpenPolicy2, state S1449");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp818, "return of OpenPolicy2, state S1449");
            this.Manager.Comment("reaching state \'S1881\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp819;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp820;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp820 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp819);
            this.Manager.Comment("reaching state \'S2313\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp819, "trustHandle of CreateTrustedDomain, state S2313");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp820, "return of CreateTrustedDomain, state S2313");
            this.Manager.Comment("reaching state \'S2745\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp821;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp822;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp822 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp821);
            this.Manager.Comment("reaching state \'S3177\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp821, "trustHandle of OpenTrustedDomainByName, state S3177");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp822, "return of OpenTrustedDomainByName, state S3177");
            this.Manager.Comment("reaching state \'S3609\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp823;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp823 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4041\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp823, "return of SetTrustedDomainInfoByName, state S4041");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S308
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S308() {
            this.Manager.BeginTest("TestScenarioS15S308");
            this.Manager.Comment("reaching state \'S308\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S309\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1018\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp824;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp825;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp825 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp824);
            this.Manager.Comment("reaching state \'S1450\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp824, "policyHandle of OpenPolicy2, state S1450");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp825, "return of OpenPolicy2, state S1450");
            this.Manager.Comment("reaching state \'S1882\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp826;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp827;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp827 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp826);
            this.Manager.Comment("reaching state \'S2314\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp826, "trustHandle of CreateTrustedDomain, state S2314");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp827, "return of CreateTrustedDomain, state S2314");
            this.Manager.Comment("reaching state \'S2746\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp828;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp829;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp829 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp828);
            this.Manager.Comment("reaching state \'S3178\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp828, "trustHandle of OpenTrustedDomainByName, state S3178");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp829, "return of OpenTrustedDomainByName, state S3178");
            this.Manager.Comment("reaching state \'S3610\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp830;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp830 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4042\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp830, "return of SetTrustedDomainInfoByName, state S4042");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S310
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S310() {
            this.Manager.BeginTest("TestScenarioS15S310");
            this.Manager.Comment("reaching state \'S310\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S311\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1019\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp831;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp832;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp832 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp831);
            this.Manager.Comment("reaching state \'S1451\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp831, "policyHandle of OpenPolicy2, state S1451");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp832, "return of OpenPolicy2, state S1451");
            this.Manager.Comment("reaching state \'S1883\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp833;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp834;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp834 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp833);
            this.Manager.Comment("reaching state \'S2315\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp833, "trustHandle of CreateTrustedDomain, state S2315");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp834, "return of CreateTrustedDomain, state S2315");
            this.Manager.Comment("reaching state \'S2747\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp835;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp836;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp836 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp835);
            this.Manager.Comment("reaching state \'S3179\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp835, "trustHandle of OpenTrustedDomainByName, state S3179");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp836, "return of OpenTrustedDomainByName, state S3179");
            this.Manager.Comment("reaching state \'S3611\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp837;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp837 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4043\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp837, "return of SetTrustedDomainInfoByName, state S4043");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S312
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S312() {
            this.Manager.BeginTest("TestScenarioS15S312");
            this.Manager.Comment("reaching state \'S312\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S313\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1020\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp838;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp839;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp839 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp838);
            this.Manager.Comment("reaching state \'S1452\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp838, "policyHandle of OpenPolicy2, state S1452");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp839, "return of OpenPolicy2, state S1452");
            this.Manager.Comment("reaching state \'S1884\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp840;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp841;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp841 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp840);
            this.Manager.Comment("reaching state \'S2316\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp840, "trustHandle of CreateTrustedDomain, state S2316");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp841, "return of CreateTrustedDomain, state S2316");
            this.Manager.Comment("reaching state \'S2748\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp842;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp843;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp843 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp842);
            this.Manager.Comment("reaching state \'S3180\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp842, "trustHandle of OpenTrustedDomainByName, state S3180");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp843, "return of OpenTrustedDomainByName, state S3180");
            this.Manager.Comment("reaching state \'S3612\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp844;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp844 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4044\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp844, "return of SetTrustedDomainInfoByName, state S4044");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S314
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S314() {
            this.Manager.BeginTest("TestScenarioS15S314");
            this.Manager.Comment("reaching state \'S314\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S315\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1021\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp845;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp846;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp846 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp845);
            this.Manager.Comment("reaching state \'S1453\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp845, "policyHandle of OpenPolicy2, state S1453");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp846, "return of OpenPolicy2, state S1453");
            this.Manager.Comment("reaching state \'S1885\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp847;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp848;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp848 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp847);
            this.Manager.Comment("reaching state \'S2317\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp847, "trustHandle of CreateTrustedDomain, state S2317");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp848, "return of CreateTrustedDomain, state S2317");
            this.Manager.Comment("reaching state \'S2749\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp849;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp850;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp850 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp849);
            this.Manager.Comment("reaching state \'S3181\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp849, "trustHandle of OpenTrustedDomainByName, state S3181");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp850, "return of OpenTrustedDomainByName, state S3181");
            this.Manager.Comment("reaching state \'S3613\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp851;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp851 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4045\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp851, "return of SetTrustedDomainInfoByName, state S4045");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S316
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S316() {
            this.Manager.BeginTest("TestScenarioS15S316");
            this.Manager.Comment("reaching state \'S316\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S317\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1022\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp852;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp853;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp853 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp852);
            this.Manager.Comment("reaching state \'S1454\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp852, "policyHandle of OpenPolicy2, state S1454");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp853, "return of OpenPolicy2, state S1454");
            this.Manager.Comment("reaching state \'S1886\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp854;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp855;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp855 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp854);
            this.Manager.Comment("reaching state \'S2318\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp854, "trustHandle of CreateTrustedDomain, state S2318");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp855, "return of CreateTrustedDomain, state S2318");
            this.Manager.Comment("reaching state \'S2750\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp856;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp857;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp857 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp856);
            this.Manager.Comment("reaching state \'S3182\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp856, "trustHandle of OpenTrustedDomainByName, state S3182");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp857, "return of OpenTrustedDomainByName, state S3182");
            this.Manager.Comment("reaching state \'S3614\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp858;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp858 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4046\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp858, "return of SetTrustedDomainInfoByName, state S4046");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S318
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S318() {
            this.Manager.BeginTest("TestScenarioS15S318");
            this.Manager.Comment("reaching state \'S318\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S319\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1023\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp859;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp860;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp860 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp859);
            this.Manager.Comment("reaching state \'S1455\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp859, "policyHandle of OpenPolicy2, state S1455");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp860, "return of OpenPolicy2, state S1455");
            this.Manager.Comment("reaching state \'S1887\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp861;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp862;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp862 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp861);
            this.Manager.Comment("reaching state \'S2319\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp861, "trustHandle of CreateTrustedDomain, state S2319");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp862, "return of CreateTrustedDomain, state S2319");
            this.Manager.Comment("reaching state \'S2751\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp863;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp864;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp864 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp863);
            this.Manager.Comment("reaching state \'S3183\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp863, "trustHandle of OpenTrustedDomainByName, state S3183");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp864, "return of OpenTrustedDomainByName, state S3183");
            this.Manager.Comment("reaching state \'S3615\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp865;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp865 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4047\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp865, "return of SetTrustedDomainInfoByName, state S4047");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S32() {
            this.Manager.BeginTest("TestScenarioS15S32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S880\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp866;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp867;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp867 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp866);
            this.Manager.Comment("reaching state \'S1312\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp866, "policyHandle of OpenPolicy2, state S1312");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp867, "return of OpenPolicy2, state S1312");
            this.Manager.Comment("reaching state \'S1744\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp868;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp869;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp869 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp868);
            this.Manager.Comment("reaching state \'S2176\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp868, "trustHandle of CreateTrustedDomain, state S2176");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp869, "return of CreateTrustedDomain, state S2176");
            this.Manager.Comment("reaching state \'S2608\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp870;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp871;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp871 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp870);
            this.Manager.Comment("reaching state \'S3040\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp870, "trustHandle of OpenTrustedDomainByName, state S3040");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp871, "return of OpenTrustedDomainByName, state S3040");
            this.Manager.Comment("reaching state \'S3472\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp872;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp872 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3904\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp872, "return of SetTrustedDomainInfoByName, state S3904");
            TestScenarioS15S4323();
            this.Manager.EndTest();
        }
        
        private void TestScenarioS15S4323() {
            this.Manager.Comment("reaching state \'S4323\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp873;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp873 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.AddReturn(DeleteTrustedDomainInfo, null, temp873);
            TestScenarioS15S4327();
        }
        #endregion
        
        #region Test Starting in S320
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S320() {
            this.Manager.BeginTest("TestScenarioS15S320");
            this.Manager.Comment("reaching state \'S320\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S321\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1024\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp874;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp875;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp875 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp874);
            this.Manager.Comment("reaching state \'S1456\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp874, "policyHandle of OpenPolicy2, state S1456");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp875, "return of OpenPolicy2, state S1456");
            this.Manager.Comment("reaching state \'S1888\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp876;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp877;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp877 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp876);
            this.Manager.Comment("reaching state \'S2320\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp876, "trustHandle of CreateTrustedDomain, state S2320");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp877, "return of CreateTrustedDomain, state S2320");
            this.Manager.Comment("reaching state \'S2752\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp878;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp879;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp879 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp878);
            this.Manager.Comment("reaching state \'S3184\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp878, "trustHandle of OpenTrustedDomainByName, state S3184");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp879, "return of OpenTrustedDomainByName, state S3184");
            this.Manager.Comment("reaching state \'S3616\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp880;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp880 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4048\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp880, "return of SetTrustedDomainInfoByName, state S4048");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S322
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S322() {
            this.Manager.BeginTest("TestScenarioS15S322");
            this.Manager.Comment("reaching state \'S322\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1025\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp881;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp882;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp882 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp881);
            this.Manager.Comment("reaching state \'S1457\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp881, "policyHandle of OpenPolicy2, state S1457");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp882, "return of OpenPolicy2, state S1457");
            this.Manager.Comment("reaching state \'S1889\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp883;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp884;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp884 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp883);
            this.Manager.Comment("reaching state \'S2321\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp883, "trustHandle of CreateTrustedDomain, state S2321");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp884, "return of CreateTrustedDomain, state S2321");
            this.Manager.Comment("reaching state \'S2753\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp885;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp886;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp886 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp885);
            this.Manager.Comment("reaching state \'S3185\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp885, "trustHandle of OpenTrustedDomainByName, state S3185");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp886, "return of OpenTrustedDomainByName, state S3185");
            this.Manager.Comment("reaching state \'S3617\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp887;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp887 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4049\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp887, "return of SetTrustedDomainInfoByName, state S4049");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S324
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S324() {
            this.Manager.BeginTest("TestScenarioS15S324");
            this.Manager.Comment("reaching state \'S324\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S325\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1026\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp888;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp889;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp889 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp888);
            this.Manager.Comment("reaching state \'S1458\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp888, "policyHandle of OpenPolicy2, state S1458");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp889, "return of OpenPolicy2, state S1458");
            this.Manager.Comment("reaching state \'S1890\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp890;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp891;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp891 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp890);
            this.Manager.Comment("reaching state \'S2322\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp890, "trustHandle of CreateTrustedDomain, state S2322");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp891, "return of CreateTrustedDomain, state S2322");
            this.Manager.Comment("reaching state \'S2754\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp892;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp893;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp893 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp892);
            this.Manager.Comment("reaching state \'S3186\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp892, "trustHandle of OpenTrustedDomainByName, state S3186");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp893, "return of OpenTrustedDomainByName, state S3186");
            this.Manager.Comment("reaching state \'S3618\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp894;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp894 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4050\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp894, "return of SetTrustedDomainInfoByName, state S4050");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S326
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S326() {
            this.Manager.BeginTest("TestScenarioS15S326");
            this.Manager.Comment("reaching state \'S326\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S327\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1027\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp895;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp896;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp896 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp895);
            this.Manager.Comment("reaching state \'S1459\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp895, "policyHandle of OpenPolicy2, state S1459");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp896, "return of OpenPolicy2, state S1459");
            this.Manager.Comment("reaching state \'S1891\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp897;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp898;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp898 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp897);
            this.Manager.Comment("reaching state \'S2323\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp897, "trustHandle of CreateTrustedDomain, state S2323");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp898, "return of CreateTrustedDomain, state S2323");
            this.Manager.Comment("reaching state \'S2755\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp899;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp900;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp900 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp899);
            this.Manager.Comment("reaching state \'S3187\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp899, "trustHandle of OpenTrustedDomainByName, state S3187");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp900, "return of OpenTrustedDomainByName, state S3187");
            this.Manager.Comment("reaching state \'S3619\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp901;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,Inval" +
                    "id,True)\'");
            temp901 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4051\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp901, "return of SetTrustedDomainInfoByName, state S4051");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S328
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S328() {
            this.Manager.BeginTest("TestScenarioS15S328");
            this.Manager.Comment("reaching state \'S328\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S329\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1028\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp902;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp903;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp903 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp902);
            this.Manager.Comment("reaching state \'S1460\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp902, "policyHandle of OpenPolicy2, state S1460");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp903, "return of OpenPolicy2, state S1460");
            this.Manager.Comment("reaching state \'S1892\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp904;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp905;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp905 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp904);
            this.Manager.Comment("reaching state \'S2324\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp904, "trustHandle of CreateTrustedDomain, state S2324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp905, "return of CreateTrustedDomain, state S2324");
            this.Manager.Comment("reaching state \'S2756\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp906;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp907;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp907 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp906);
            this.Manager.Comment("reaching state \'S3188\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp906, "trustHandle of OpenTrustedDomainByName, state S3188");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp907, "return of OpenTrustedDomainByName, state S3188");
            this.Manager.Comment("reaching state \'S3620\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp908;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp908 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4052\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp908, "return of SetTrustedDomainInfoByName, state S4052");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S330
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S330() {
            this.Manager.BeginTest("TestScenarioS15S330");
            this.Manager.Comment("reaching state \'S330\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S331\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1029\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp909;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp910;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp910 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp909);
            this.Manager.Comment("reaching state \'S1461\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp909, "policyHandle of OpenPolicy2, state S1461");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp910, "return of OpenPolicy2, state S1461");
            this.Manager.Comment("reaching state \'S1893\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp911;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp912;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp912 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp911);
            this.Manager.Comment("reaching state \'S2325\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp911, "trustHandle of CreateTrustedDomain, state S2325");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp912, "return of CreateTrustedDomain, state S2325");
            this.Manager.Comment("reaching state \'S2757\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp913;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp914;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp914 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp913);
            this.Manager.Comment("reaching state \'S3189\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp913, "trustHandle of OpenTrustedDomainByName, state S3189");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp914, "return of OpenTrustedDomainByName, state S3189");
            this.Manager.Comment("reaching state \'S3621\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp915;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp915 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4053\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp915, "return of SetTrustedDomainInfoByName, state S4053");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S332
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S332() {
            this.Manager.BeginTest("TestScenarioS15S332");
            this.Manager.Comment("reaching state \'S332\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S333\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1030\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp916;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp917;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp917 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp916);
            this.Manager.Comment("reaching state \'S1462\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp916, "policyHandle of OpenPolicy2, state S1462");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp917, "return of OpenPolicy2, state S1462");
            this.Manager.Comment("reaching state \'S1894\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp918;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp919;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp919 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp918);
            this.Manager.Comment("reaching state \'S2326\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp918, "trustHandle of CreateTrustedDomain, state S2326");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp919, "return of CreateTrustedDomain, state S2326");
            this.Manager.Comment("reaching state \'S2758\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp920;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp921;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp921 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp920);
            this.Manager.Comment("reaching state \'S3190\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp920, "trustHandle of OpenTrustedDomainByName, state S3190");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp921, "return of OpenTrustedDomainByName, state S3190");
            this.Manager.Comment("reaching state \'S3622\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp922;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp922 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4054\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp922, "return of SetTrustedDomainInfoByName, state S4054");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S334
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S334() {
            this.Manager.BeginTest("TestScenarioS15S334");
            this.Manager.Comment("reaching state \'S334\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S335\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1031\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp923;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp924;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp924 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp923);
            this.Manager.Comment("reaching state \'S1463\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp923, "policyHandle of OpenPolicy2, state S1463");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp924, "return of OpenPolicy2, state S1463");
            this.Manager.Comment("reaching state \'S1895\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp925;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp926;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp926 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp925);
            this.Manager.Comment("reaching state \'S2327\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp925, "trustHandle of CreateTrustedDomain, state S2327");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp926, "return of CreateTrustedDomain, state S2327");
            this.Manager.Comment("reaching state \'S2759\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp927;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp928;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp928 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp927);
            this.Manager.Comment("reaching state \'S3191\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp927, "trustHandle of OpenTrustedDomainByName, state S3191");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp928, "return of OpenTrustedDomainByName, state S3191");
            this.Manager.Comment("reaching state \'S3623\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp929;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp929 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4055\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp929, "return of SetTrustedDomainInfoByName, state S4055");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S336
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S336() {
            this.Manager.BeginTest("TestScenarioS15S336");
            this.Manager.Comment("reaching state \'S336\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S337\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1032\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp930;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp931;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp931 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp930);
            this.Manager.Comment("reaching state \'S1464\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp930, "policyHandle of OpenPolicy2, state S1464");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp931, "return of OpenPolicy2, state S1464");
            this.Manager.Comment("reaching state \'S1896\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp932;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp933;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp933 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp932);
            this.Manager.Comment("reaching state \'S2328\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp932, "trustHandle of CreateTrustedDomain, state S2328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp933, "return of CreateTrustedDomain, state S2328");
            this.Manager.Comment("reaching state \'S2760\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp934;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp935;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp935 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp934);
            this.Manager.Comment("reaching state \'S3192\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp934, "trustHandle of OpenTrustedDomainByName, state S3192");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp935, "return of OpenTrustedDomainByName, state S3192");
            this.Manager.Comment("reaching state \'S3624\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp936;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp936 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4056\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp936, "return of SetTrustedDomainInfoByName, state S4056");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S338
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S338() {
            this.Manager.BeginTest("TestScenarioS15S338");
            this.Manager.Comment("reaching state \'S338\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S339\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1033\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp937;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp938;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp938 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp937);
            this.Manager.Comment("reaching state \'S1465\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp937, "policyHandle of OpenPolicy2, state S1465");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp938, "return of OpenPolicy2, state S1465");
            this.Manager.Comment("reaching state \'S1897\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp939;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp940;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp940 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp939);
            this.Manager.Comment("reaching state \'S2329\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp939, "trustHandle of CreateTrustedDomain, state S2329");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp940, "return of CreateTrustedDomain, state S2329");
            this.Manager.Comment("reaching state \'S2761\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp941;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp942;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp942 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp941);
            this.Manager.Comment("reaching state \'S3193\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp941, "trustHandle of OpenTrustedDomainByName, state S3193");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp942, "return of OpenTrustedDomainByName, state S3193");
            this.Manager.Comment("reaching state \'S3625\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp943;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp943 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4057\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp943, "return of SetTrustedDomainInfoByName, state S4057");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S34
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S34() {
            this.Manager.BeginTest("TestScenarioS15S34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S881\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp944;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp945;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp945 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp944);
            this.Manager.Comment("reaching state \'S1313\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp944, "policyHandle of OpenPolicy2, state S1313");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp945, "return of OpenPolicy2, state S1313");
            this.Manager.Comment("reaching state \'S1745\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp946;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp947;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp947 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp946);
            this.Manager.Comment("reaching state \'S2177\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp946, "trustHandle of CreateTrustedDomain, state S2177");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp947, "return of CreateTrustedDomain, state S2177");
            this.Manager.Comment("reaching state \'S2609\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp948;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp949;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp949 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp948);
            this.Manager.Comment("reaching state \'S3041\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp948, "trustHandle of OpenTrustedDomainByName, state S3041");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp949, "return of OpenTrustedDomainByName, state S3041");
            this.Manager.Comment("reaching state \'S3473\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp950;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp950 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3905\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp950, "return of SetTrustedDomainInfoByName, state S3905");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S340
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S340() {
            this.Manager.BeginTest("TestScenarioS15S340");
            this.Manager.Comment("reaching state \'S340\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S341\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1034\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp951;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp952;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp952 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp951);
            this.Manager.Comment("reaching state \'S1466\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp951, "policyHandle of OpenPolicy2, state S1466");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp952, "return of OpenPolicy2, state S1466");
            this.Manager.Comment("reaching state \'S1898\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp953;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp954;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp954 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp953);
            this.Manager.Comment("reaching state \'S2330\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp953, "trustHandle of CreateTrustedDomain, state S2330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp954, "return of CreateTrustedDomain, state S2330");
            this.Manager.Comment("reaching state \'S2762\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp955;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp956;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp956 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp955);
            this.Manager.Comment("reaching state \'S3194\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp955, "trustHandle of OpenTrustedDomainByName, state S3194");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp956, "return of OpenTrustedDomainByName, state S3194");
            this.Manager.Comment("reaching state \'S3626\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp957;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp957 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4058\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp957, "return of SetTrustedDomainInfoByName, state S4058");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S342
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S342() {
            this.Manager.BeginTest("TestScenarioS15S342");
            this.Manager.Comment("reaching state \'S342\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S343\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1035\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp958;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp959;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp959 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp958);
            this.Manager.Comment("reaching state \'S1467\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp958, "policyHandle of OpenPolicy2, state S1467");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp959, "return of OpenPolicy2, state S1467");
            this.Manager.Comment("reaching state \'S1899\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp960;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp961;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp961 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp960);
            this.Manager.Comment("reaching state \'S2331\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp960, "trustHandle of CreateTrustedDomain, state S2331");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp961, "return of CreateTrustedDomain, state S2331");
            this.Manager.Comment("reaching state \'S2763\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp962;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp963;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp963 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp962);
            this.Manager.Comment("reaching state \'S3195\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp962, "trustHandle of OpenTrustedDomainByName, state S3195");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp963, "return of OpenTrustedDomainByName, state S3195");
            this.Manager.Comment("reaching state \'S3627\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp964;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp964 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4059\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp964, "return of SetTrustedDomainInfoByName, state S4059");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S344
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S344() {
            this.Manager.BeginTest("TestScenarioS15S344");
            this.Manager.Comment("reaching state \'S344\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S345\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1036\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp965;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp966;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp966 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp965);
            this.Manager.Comment("reaching state \'S1468\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp965, "policyHandle of OpenPolicy2, state S1468");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp966, "return of OpenPolicy2, state S1468");
            this.Manager.Comment("reaching state \'S1900\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp967;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp968;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp968 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp967);
            this.Manager.Comment("reaching state \'S2332\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp967, "trustHandle of CreateTrustedDomain, state S2332");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp968, "return of CreateTrustedDomain, state S2332");
            this.Manager.Comment("reaching state \'S2764\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp969;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp970;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp970 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp969);
            this.Manager.Comment("reaching state \'S3196\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp969, "trustHandle of OpenTrustedDomainByName, state S3196");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp970, "return of OpenTrustedDomainByName, state S3196");
            this.Manager.Comment("reaching state \'S3628\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp971;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp971 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4060\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp971, "return of SetTrustedDomainInfoByName, state S4060");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S346
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S346() {
            this.Manager.BeginTest("TestScenarioS15S346");
            this.Manager.Comment("reaching state \'S346\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S347\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1037\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp972;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp973;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp973 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp972);
            this.Manager.Comment("reaching state \'S1469\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp972, "policyHandle of OpenPolicy2, state S1469");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp973, "return of OpenPolicy2, state S1469");
            this.Manager.Comment("reaching state \'S1901\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp974;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp975;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp975 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp974);
            this.Manager.Comment("reaching state \'S2333\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp974, "trustHandle of CreateTrustedDomain, state S2333");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp975, "return of CreateTrustedDomain, state S2333");
            this.Manager.Comment("reaching state \'S2765\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp976;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp977;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp977 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp976);
            this.Manager.Comment("reaching state \'S3197\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp976, "trustHandle of OpenTrustedDomainByName, state S3197");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp977, "return of OpenTrustedDomainByName, state S3197");
            this.Manager.Comment("reaching state \'S3629\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp978;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp978 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4061\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp978, "return of SetTrustedDomainInfoByName, state S4061");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S348
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S348() {
            this.Manager.BeginTest("TestScenarioS15S348");
            this.Manager.Comment("reaching state \'S348\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S349\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1038\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp979;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp980;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp980 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp979);
            this.Manager.Comment("reaching state \'S1470\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp979, "policyHandle of OpenPolicy2, state S1470");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp980, "return of OpenPolicy2, state S1470");
            this.Manager.Comment("reaching state \'S1902\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp981;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp982;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp982 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp981);
            this.Manager.Comment("reaching state \'S2334\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp981, "trustHandle of CreateTrustedDomain, state S2334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp982, "return of CreateTrustedDomain, state S2334");
            this.Manager.Comment("reaching state \'S2766\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp983;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp984;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp984 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp983);
            this.Manager.Comment("reaching state \'S3198\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp983, "trustHandle of OpenTrustedDomainByName, state S3198");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp984, "return of OpenTrustedDomainByName, state S3198");
            this.Manager.Comment("reaching state \'S3630\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp985;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,Invali" +
                    "d,True)\'");
            temp985 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4062\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp985, "return of SetTrustedDomainInfoByName, state S4062");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S350
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S350() {
            this.Manager.BeginTest("TestScenarioS15S350");
            this.Manager.Comment("reaching state \'S350\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S351\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1039\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp986;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp987;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp987 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp986);
            this.Manager.Comment("reaching state \'S1471\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp986, "policyHandle of OpenPolicy2, state S1471");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp987, "return of OpenPolicy2, state S1471");
            this.Manager.Comment("reaching state \'S1903\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp988;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp989;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp989 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp988);
            this.Manager.Comment("reaching state \'S2335\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp988, "trustHandle of CreateTrustedDomain, state S2335");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp989, "return of CreateTrustedDomain, state S2335");
            this.Manager.Comment("reaching state \'S2767\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp990;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp991;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp991 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp990);
            this.Manager.Comment("reaching state \'S3199\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp990, "trustHandle of OpenTrustedDomainByName, state S3199");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp991, "return of OpenTrustedDomainByName, state S3199");
            this.Manager.Comment("reaching state \'S3631\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp992;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp992 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4063\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp992, "return of SetTrustedDomainInfoByName, state S4063");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S352
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S352() {
            this.Manager.BeginTest("TestScenarioS15S352");
            this.Manager.Comment("reaching state \'S352\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S353\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1040\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp993;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp994;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp994 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp993);
            this.Manager.Comment("reaching state \'S1472\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp993, "policyHandle of OpenPolicy2, state S1472");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp994, "return of OpenPolicy2, state S1472");
            this.Manager.Comment("reaching state \'S1904\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp995;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp996;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp996 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp995);
            this.Manager.Comment("reaching state \'S2336\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp995, "trustHandle of CreateTrustedDomain, state S2336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp996, "return of CreateTrustedDomain, state S2336");
            this.Manager.Comment("reaching state \'S2768\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp997;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp998;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp998 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp997);
            this.Manager.Comment("reaching state \'S3200\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp997, "trustHandle of OpenTrustedDomainByName, state S3200");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp998, "return of OpenTrustedDomainByName, state S3200");
            this.Manager.Comment("reaching state \'S3632\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp999;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp999 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4064\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp999, "return of SetTrustedDomainInfoByName, state S4064");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S354
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S354() {
            this.Manager.BeginTest("TestScenarioS15S354");
            this.Manager.Comment("reaching state \'S354\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S355\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1041\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1000;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1001;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1001 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1000);
            this.Manager.Comment("reaching state \'S1473\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1000, "policyHandle of OpenPolicy2, state S1473");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1001, "return of OpenPolicy2, state S1473");
            this.Manager.Comment("reaching state \'S1905\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1002;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1003;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1003 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1002);
            this.Manager.Comment("reaching state \'S2337\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1002, "trustHandle of CreateTrustedDomain, state S2337");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1003, "return of CreateTrustedDomain, state S2337");
            this.Manager.Comment("reaching state \'S2769\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1004;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1005;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1005 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1004);
            this.Manager.Comment("reaching state \'S3201\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1004, "trustHandle of OpenTrustedDomainByName, state S3201");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1005, "return of OpenTrustedDomainByName, state S3201");
            this.Manager.Comment("reaching state \'S3633\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1006;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1006 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4065\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1006, "return of SetTrustedDomainInfoByName, state S4065");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S356
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S356() {
            this.Manager.BeginTest("TestScenarioS15S356");
            this.Manager.Comment("reaching state \'S356\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S357\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1042\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1007;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1008;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1008 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1007);
            this.Manager.Comment("reaching state \'S1474\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1007, "policyHandle of OpenPolicy2, state S1474");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1008, "return of OpenPolicy2, state S1474");
            this.Manager.Comment("reaching state \'S1906\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1009;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1010;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1010 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1009);
            this.Manager.Comment("reaching state \'S2338\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1009, "trustHandle of CreateTrustedDomain, state S2338");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1010, "return of CreateTrustedDomain, state S2338");
            this.Manager.Comment("reaching state \'S2770\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1011;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1012;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1012 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1011);
            this.Manager.Comment("reaching state \'S3202\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1011, "trustHandle of OpenTrustedDomainByName, state S3202");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1012, "return of OpenTrustedDomainByName, state S3202");
            this.Manager.Comment("reaching state \'S3634\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1013;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1013 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4066\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1013, "return of SetTrustedDomainInfoByName, state S4066");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S358
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S358() {
            this.Manager.BeginTest("TestScenarioS15S358");
            this.Manager.Comment("reaching state \'S358\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1043\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1014;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1015;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1015 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1014);
            this.Manager.Comment("reaching state \'S1475\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1014, "policyHandle of OpenPolicy2, state S1475");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1015, "return of OpenPolicy2, state S1475");
            this.Manager.Comment("reaching state \'S1907\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1016;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1017;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1017 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1016);
            this.Manager.Comment("reaching state \'S2339\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1016, "trustHandle of CreateTrustedDomain, state S2339");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1017, "return of CreateTrustedDomain, state S2339");
            this.Manager.Comment("reaching state \'S2771\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1018;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1019;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1019 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1018);
            this.Manager.Comment("reaching state \'S3203\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1018, "trustHandle of OpenTrustedDomainByName, state S3203");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1019, "return of OpenTrustedDomainByName, state S3203");
            this.Manager.Comment("reaching state \'S3635\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1020;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp1020 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4067\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1020, "return of SetTrustedDomainInfoByName, state S4067");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S36
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S36() {
            this.Manager.BeginTest("TestScenarioS15S36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S882\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1021;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1022;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1022 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1021);
            this.Manager.Comment("reaching state \'S1314\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1021, "policyHandle of OpenPolicy2, state S1314");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1022, "return of OpenPolicy2, state S1314");
            this.Manager.Comment("reaching state \'S1746\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1023;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1024;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1024 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1023);
            this.Manager.Comment("reaching state \'S2178\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1023, "trustHandle of CreateTrustedDomain, state S2178");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1024, "return of CreateTrustedDomain, state S2178");
            this.Manager.Comment("reaching state \'S2610\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1025;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1026;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1026 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1025);
            this.Manager.Comment("reaching state \'S3042\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1025, "trustHandle of OpenTrustedDomainByName, state S3042");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1026, "return of OpenTrustedDomainByName, state S3042");
            this.Manager.Comment("reaching state \'S3474\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1027;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1027 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3906\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1027, "return of SetTrustedDomainInfoByName, state S3906");
            TestScenarioS15S4323();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S360
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S360() {
            this.Manager.BeginTest("TestScenarioS15S360");
            this.Manager.Comment("reaching state \'S360\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S361\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1044\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1028;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1029;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1029 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1028);
            this.Manager.Comment("reaching state \'S1476\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1028, "policyHandle of OpenPolicy2, state S1476");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1029, "return of OpenPolicy2, state S1476");
            this.Manager.Comment("reaching state \'S1908\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1030;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1031;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1031 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1030);
            this.Manager.Comment("reaching state \'S2340\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1030, "trustHandle of CreateTrustedDomain, state S2340");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1031, "return of CreateTrustedDomain, state S2340");
            this.Manager.Comment("reaching state \'S2772\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1032;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1033;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1033 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1032);
            this.Manager.Comment("reaching state \'S3204\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1032, "trustHandle of OpenTrustedDomainByName, state S3204");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1033, "return of OpenTrustedDomainByName, state S3204");
            this.Manager.Comment("reaching state \'S3636\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1034;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1034 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4068\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1034, "return of SetTrustedDomainInfoByName, state S4068");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S362
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S362() {
            this.Manager.BeginTest("TestScenarioS15S362");
            this.Manager.Comment("reaching state \'S362\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S363\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1045\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1035;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1036;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1036 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1035);
            this.Manager.Comment("reaching state \'S1477\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1035, "policyHandle of OpenPolicy2, state S1477");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1036, "return of OpenPolicy2, state S1477");
            this.Manager.Comment("reaching state \'S1909\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1037;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1038;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1038 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1037);
            this.Manager.Comment("reaching state \'S2341\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1037, "trustHandle of CreateTrustedDomain, state S2341");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1038, "return of CreateTrustedDomain, state S2341");
            this.Manager.Comment("reaching state \'S2773\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1039;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1040;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1040 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1039);
            this.Manager.Comment("reaching state \'S3205\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1039, "trustHandle of OpenTrustedDomainByName, state S3205");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1040, "return of OpenTrustedDomainByName, state S3205");
            this.Manager.Comment("reaching state \'S3637\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1041;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp1041 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4069\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1041, "return of SetTrustedDomainInfoByName, state S4069");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S364
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S364() {
            this.Manager.BeginTest("TestScenarioS15S364");
            this.Manager.Comment("reaching state \'S364\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S365\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1046\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1042;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1043;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1043 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1042);
            this.Manager.Comment("reaching state \'S1478\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1042, "policyHandle of OpenPolicy2, state S1478");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1043, "return of OpenPolicy2, state S1478");
            this.Manager.Comment("reaching state \'S1910\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1044;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1045;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1045 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1044);
            this.Manager.Comment("reaching state \'S2342\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1044, "trustHandle of CreateTrustedDomain, state S2342");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1045, "return of CreateTrustedDomain, state S2342");
            this.Manager.Comment("reaching state \'S2774\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1046;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1047;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1047 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1046);
            this.Manager.Comment("reaching state \'S3206\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1046, "trustHandle of OpenTrustedDomainByName, state S3206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1047, "return of OpenTrustedDomainByName, state S3206");
            this.Manager.Comment("reaching state \'S3638\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1048;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1048 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4070\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1048, "return of SetTrustedDomainInfoByName, state S4070");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S366
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S366() {
            this.Manager.BeginTest("TestScenarioS15S366");
            this.Manager.Comment("reaching state \'S366\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S367\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1047\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1049;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1050;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1050 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1049);
            this.Manager.Comment("reaching state \'S1479\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1049, "policyHandle of OpenPolicy2, state S1479");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1050, "return of OpenPolicy2, state S1479");
            this.Manager.Comment("reaching state \'S1911\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1051;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1052;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1052 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1051);
            this.Manager.Comment("reaching state \'S2343\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1051, "trustHandle of CreateTrustedDomain, state S2343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1052, "return of CreateTrustedDomain, state S2343");
            this.Manager.Comment("reaching state \'S2775\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1053;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1054;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1054 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1053);
            this.Manager.Comment("reaching state \'S3207\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1053, "trustHandle of OpenTrustedDomainByName, state S3207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1054, "return of OpenTrustedDomainByName, state S3207");
            this.Manager.Comment("reaching state \'S3639\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1055;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1055 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4071\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1055, "return of SetTrustedDomainInfoByName, state S4071");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S368
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S368() {
            this.Manager.BeginTest("TestScenarioS15S368");
            this.Manager.Comment("reaching state \'S368\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S369\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1048\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1056;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1057;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1057 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1056);
            this.Manager.Comment("reaching state \'S1480\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1056, "policyHandle of OpenPolicy2, state S1480");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1057, "return of OpenPolicy2, state S1480");
            this.Manager.Comment("reaching state \'S1912\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1058;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1059;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1059 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1058);
            this.Manager.Comment("reaching state \'S2344\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1058, "trustHandle of CreateTrustedDomain, state S2344");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1059, "return of CreateTrustedDomain, state S2344");
            this.Manager.Comment("reaching state \'S2776\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1060;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1061;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1061 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1060);
            this.Manager.Comment("reaching state \'S3208\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1060, "trustHandle of OpenTrustedDomainByName, state S3208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1061, "return of OpenTrustedDomainByName, state S3208");
            this.Manager.Comment("reaching state \'S3640\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1062;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,Inva" +
                    "lid,True)\'");
            temp1062 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4072\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1062, "return of SetTrustedDomainInfoByName, state S4072");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S370
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S370() {
            this.Manager.BeginTest("TestScenarioS15S370");
            this.Manager.Comment("reaching state \'S370\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S371\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1049\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1063;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1064;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1064 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1063);
            this.Manager.Comment("reaching state \'S1481\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1063, "policyHandle of OpenPolicy2, state S1481");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1064, "return of OpenPolicy2, state S1481");
            this.Manager.Comment("reaching state \'S1913\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1065;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1066;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1066 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1065);
            this.Manager.Comment("reaching state \'S2345\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1065, "trustHandle of CreateTrustedDomain, state S2345");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1066, "return of CreateTrustedDomain, state S2345");
            this.Manager.Comment("reaching state \'S2777\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1067;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1068;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1068 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1067);
            this.Manager.Comment("reaching state \'S3209\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1067, "trustHandle of OpenTrustedDomainByName, state S3209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1068, "return of OpenTrustedDomainByName, state S3209");
            this.Manager.Comment("reaching state \'S3641\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1069;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp1069 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4073\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1069, "return of SetTrustedDomainInfoByName, state S4073");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S372
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S372() {
            this.Manager.BeginTest("TestScenarioS15S372");
            this.Manager.Comment("reaching state \'S372\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S373\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1050\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1070;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1071;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1071 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1070);
            this.Manager.Comment("reaching state \'S1482\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1070, "policyHandle of OpenPolicy2, state S1482");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1071, "return of OpenPolicy2, state S1482");
            this.Manager.Comment("reaching state \'S1914\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1072;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1073;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1073 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1072);
            this.Manager.Comment("reaching state \'S2346\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1072, "trustHandle of CreateTrustedDomain, state S2346");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1073, "return of CreateTrustedDomain, state S2346");
            this.Manager.Comment("reaching state \'S2778\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1074;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1075;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1075 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1074);
            this.Manager.Comment("reaching state \'S3210\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1074, "trustHandle of OpenTrustedDomainByName, state S3210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1075, "return of OpenTrustedDomainByName, state S3210");
            this.Manager.Comment("reaching state \'S3642\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1076;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1076 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4074\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1076, "return of SetTrustedDomainInfoByName, state S4074");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S374
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S374() {
            this.Manager.BeginTest("TestScenarioS15S374");
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S375\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1051\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1077;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1078;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1078 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1077);
            this.Manager.Comment("reaching state \'S1483\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1077, "policyHandle of OpenPolicy2, state S1483");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1078, "return of OpenPolicy2, state S1483");
            this.Manager.Comment("reaching state \'S1915\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1079;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1080;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1080 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1079);
            this.Manager.Comment("reaching state \'S2347\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1079, "trustHandle of CreateTrustedDomain, state S2347");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1080, "return of CreateTrustedDomain, state S2347");
            this.Manager.Comment("reaching state \'S2779\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1081;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1082;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1082 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1081);
            this.Manager.Comment("reaching state \'S3211\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1081, "trustHandle of OpenTrustedDomainByName, state S3211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1082, "return of OpenTrustedDomainByName, state S3211");
            this.Manager.Comment("reaching state \'S3643\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1083;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1083 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4075\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1083, "return of SetTrustedDomainInfoByName, state S4075");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S376
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S376() {
            this.Manager.BeginTest("TestScenarioS15S376");
            this.Manager.Comment("reaching state \'S376\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S377\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1052\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1084;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1085;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1085 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1084);
            this.Manager.Comment("reaching state \'S1484\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1084, "policyHandle of OpenPolicy2, state S1484");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1085, "return of OpenPolicy2, state S1484");
            this.Manager.Comment("reaching state \'S1916\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1086;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1087;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1087 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1086);
            this.Manager.Comment("reaching state \'S2348\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1086, "trustHandle of CreateTrustedDomain, state S2348");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1087, "return of CreateTrustedDomain, state S2348");
            this.Manager.Comment("reaching state \'S2780\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1088;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1089;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1089 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1088);
            this.Manager.Comment("reaching state \'S3212\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1088, "trustHandle of OpenTrustedDomainByName, state S3212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1089, "return of OpenTrustedDomainByName, state S3212");
            this.Manager.Comment("reaching state \'S3644\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1090;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1090 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4076\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1090, "return of SetTrustedDomainInfoByName, state S4076");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S378
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S378() {
            this.Manager.BeginTest("TestScenarioS15S378");
            this.Manager.Comment("reaching state \'S378\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S379\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1053\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1091;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1092;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1092 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1091);
            this.Manager.Comment("reaching state \'S1485\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1091, "policyHandle of OpenPolicy2, state S1485");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1092, "return of OpenPolicy2, state S1485");
            this.Manager.Comment("reaching state \'S1917\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1093;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1094;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1094 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1093);
            this.Manager.Comment("reaching state \'S2349\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1093, "trustHandle of CreateTrustedDomain, state S2349");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1094, "return of CreateTrustedDomain, state S2349");
            this.Manager.Comment("reaching state \'S2781\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1095;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1096;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1096 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1095);
            this.Manager.Comment("reaching state \'S3213\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1095, "trustHandle of OpenTrustedDomainByName, state S3213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1096, "return of OpenTrustedDomainByName, state S3213");
            this.Manager.Comment("reaching state \'S3645\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1097;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1097 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4077\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1097, "return of SetTrustedDomainInfoByName, state S4077");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S38() {
            this.Manager.BeginTest("TestScenarioS15S38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S883\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1098;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1099;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1099 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1098);
            this.Manager.Comment("reaching state \'S1315\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1098, "policyHandle of OpenPolicy2, state S1315");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1099, "return of OpenPolicy2, state S1315");
            this.Manager.Comment("reaching state \'S1747\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1100;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1101;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1101 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1100);
            this.Manager.Comment("reaching state \'S2179\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1100, "trustHandle of CreateTrustedDomain, state S2179");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1101, "return of CreateTrustedDomain, state S2179");
            this.Manager.Comment("reaching state \'S2611\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1102;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1103;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1103 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1102);
            this.Manager.Comment("reaching state \'S3043\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1102, "trustHandle of OpenTrustedDomainByName, state S3043");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1103, "return of OpenTrustedDomainByName, state S3043");
            this.Manager.Comment("reaching state \'S3475\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1104;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1104 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3907\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1104, "return of SetTrustedDomainInfoByName, state S3907");
            TestScenarioS15S4321();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S380
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S380() {
            this.Manager.BeginTest("TestScenarioS15S380");
            this.Manager.Comment("reaching state \'S380\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S381\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1054\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1105;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1106;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1106 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1105);
            this.Manager.Comment("reaching state \'S1486\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1105, "policyHandle of OpenPolicy2, state S1486");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1106, "return of OpenPolicy2, state S1486");
            this.Manager.Comment("reaching state \'S1918\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1107;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1108;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1108 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1107);
            this.Manager.Comment("reaching state \'S2350\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1107, "trustHandle of CreateTrustedDomain, state S2350");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1108, "return of CreateTrustedDomain, state S2350");
            this.Manager.Comment("reaching state \'S2782\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1109;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1110;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1110 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1109);
            this.Manager.Comment("reaching state \'S3214\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1109, "trustHandle of OpenTrustedDomainByName, state S3214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1110, "return of OpenTrustedDomainByName, state S3214");
            this.Manager.Comment("reaching state \'S3646\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1111;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1111 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4078\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1111, "return of SetTrustedDomainInfoByName, state S4078");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S382
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S382() {
            this.Manager.BeginTest("TestScenarioS15S382");
            this.Manager.Comment("reaching state \'S382\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S383\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1055\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1112;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1113;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1113 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1112);
            this.Manager.Comment("reaching state \'S1487\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1112, "policyHandle of OpenPolicy2, state S1487");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1113, "return of OpenPolicy2, state S1487");
            this.Manager.Comment("reaching state \'S1919\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1114;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1115;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1115 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1114);
            this.Manager.Comment("reaching state \'S2351\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1114, "trustHandle of CreateTrustedDomain, state S2351");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1115, "return of CreateTrustedDomain, state S2351");
            this.Manager.Comment("reaching state \'S2783\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1116;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1117;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1117 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1116);
            this.Manager.Comment("reaching state \'S3215\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1116, "trustHandle of OpenTrustedDomainByName, state S3215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1117, "return of OpenTrustedDomainByName, state S3215");
            this.Manager.Comment("reaching state \'S3647\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1118;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1118 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4079\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1118, "return of SetTrustedDomainInfoByName, state S4079");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S384
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S384() {
            this.Manager.BeginTest("TestScenarioS15S384");
            this.Manager.Comment("reaching state \'S384\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S385\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1056\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1119;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1120;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1120 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1119);
            this.Manager.Comment("reaching state \'S1488\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1119, "policyHandle of OpenPolicy2, state S1488");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1120, "return of OpenPolicy2, state S1488");
            this.Manager.Comment("reaching state \'S1920\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1121;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1122;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1122 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1121);
            this.Manager.Comment("reaching state \'S2352\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1121, "trustHandle of CreateTrustedDomain, state S2352");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1122, "return of CreateTrustedDomain, state S2352");
            this.Manager.Comment("reaching state \'S2784\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1123;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1124;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1124 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1123);
            this.Manager.Comment("reaching state \'S3216\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1123, "trustHandle of OpenTrustedDomainByName, state S3216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1124, "return of OpenTrustedDomainByName, state S3216");
            this.Manager.Comment("reaching state \'S3648\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1125;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp1125 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4080\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1125, "return of SetTrustedDomainInfoByName, state S4080");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S386
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S386() {
            this.Manager.BeginTest("TestScenarioS15S386");
            this.Manager.Comment("reaching state \'S386\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S387\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1057\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1126;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1127;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1127 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1126);
            this.Manager.Comment("reaching state \'S1489\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1126, "policyHandle of OpenPolicy2, state S1489");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1127, "return of OpenPolicy2, state S1489");
            this.Manager.Comment("reaching state \'S1921\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1128;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1129;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1129 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1128);
            this.Manager.Comment("reaching state \'S2353\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1128, "trustHandle of CreateTrustedDomain, state S2353");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1129, "return of CreateTrustedDomain, state S2353");
            this.Manager.Comment("reaching state \'S2785\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1130;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1131;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1131 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1130);
            this.Manager.Comment("reaching state \'S3217\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1130, "trustHandle of OpenTrustedDomainByName, state S3217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1131, "return of OpenTrustedDomainByName, state S3217");
            this.Manager.Comment("reaching state \'S3649\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1132;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,Inv" +
                    "alid,True)\'");
            temp1132 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4081\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1132, "return of SetTrustedDomainInfoByName, state S4081");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S388
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S388() {
            this.Manager.BeginTest("TestScenarioS15S388");
            this.Manager.Comment("reaching state \'S388\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S389\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1058\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1133;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1134;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1134 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1133);
            this.Manager.Comment("reaching state \'S1490\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1133, "policyHandle of OpenPolicy2, state S1490");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1134, "return of OpenPolicy2, state S1490");
            this.Manager.Comment("reaching state \'S1922\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1135;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1136;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1136 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1135);
            this.Manager.Comment("reaching state \'S2354\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1135, "trustHandle of CreateTrustedDomain, state S2354");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1136, "return of CreateTrustedDomain, state S2354");
            this.Manager.Comment("reaching state \'S2786\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1137;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1138;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1138 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1137);
            this.Manager.Comment("reaching state \'S3218\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1137, "trustHandle of OpenTrustedDomainByName, state S3218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1138, "return of OpenTrustedDomainByName, state S3218");
            this.Manager.Comment("reaching state \'S3650\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1139;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1139 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4082\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1139, "return of SetTrustedDomainInfoByName, state S4082");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S390
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S390() {
            this.Manager.BeginTest("TestScenarioS15S390");
            this.Manager.Comment("reaching state \'S390\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S391\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1059\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1140;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1141;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1141 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1140);
            this.Manager.Comment("reaching state \'S1491\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1140, "policyHandle of OpenPolicy2, state S1491");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1141, "return of OpenPolicy2, state S1491");
            this.Manager.Comment("reaching state \'S1923\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1142;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1143;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1143 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1142);
            this.Manager.Comment("reaching state \'S2355\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1142, "trustHandle of CreateTrustedDomain, state S2355");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1143, "return of CreateTrustedDomain, state S2355");
            this.Manager.Comment("reaching state \'S2787\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1144;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1145;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1145 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1144);
            this.Manager.Comment("reaching state \'S3219\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1144, "trustHandle of OpenTrustedDomainByName, state S3219");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1145, "return of OpenTrustedDomainByName, state S3219");
            this.Manager.Comment("reaching state \'S3651\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1146;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1146 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4083\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1146, "return of SetTrustedDomainInfoByName, state S4083");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S392
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S392() {
            this.Manager.BeginTest("TestScenarioS15S392");
            this.Manager.Comment("reaching state \'S392\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S393\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1060\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1147;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1148;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1148 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1147);
            this.Manager.Comment("reaching state \'S1492\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1147, "policyHandle of OpenPolicy2, state S1492");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1148, "return of OpenPolicy2, state S1492");
            this.Manager.Comment("reaching state \'S1924\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1149;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1150;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1150 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1149);
            this.Manager.Comment("reaching state \'S2356\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1149, "trustHandle of CreateTrustedDomain, state S2356");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1150, "return of CreateTrustedDomain, state S2356");
            this.Manager.Comment("reaching state \'S2788\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1151;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1152;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1152 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1151);
            this.Manager.Comment("reaching state \'S3220\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1151, "trustHandle of OpenTrustedDomainByName, state S3220");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1152, "return of OpenTrustedDomainByName, state S3220");
            this.Manager.Comment("reaching state \'S3652\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1153;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp1153 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4084\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1153, "return of SetTrustedDomainInfoByName, state S4084");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S394
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S394() {
            this.Manager.BeginTest("TestScenarioS15S394");
            this.Manager.Comment("reaching state \'S394\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1061\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1154;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1155;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1155 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1154);
            this.Manager.Comment("reaching state \'S1493\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1154, "policyHandle of OpenPolicy2, state S1493");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1155, "return of OpenPolicy2, state S1493");
            this.Manager.Comment("reaching state \'S1925\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1156;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1157;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1157 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1156);
            this.Manager.Comment("reaching state \'S2357\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1156, "trustHandle of CreateTrustedDomain, state S2357");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1157, "return of CreateTrustedDomain, state S2357");
            this.Manager.Comment("reaching state \'S2789\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1158;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1159;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1159 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1158);
            this.Manager.Comment("reaching state \'S3221\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1158, "trustHandle of OpenTrustedDomainByName, state S3221");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1159, "return of OpenTrustedDomainByName, state S3221");
            this.Manager.Comment("reaching state \'S3653\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1160;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1160 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4085\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1160, "return of SetTrustedDomainInfoByName, state S4085");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S396
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S396() {
            this.Manager.BeginTest("TestScenarioS15S396");
            this.Manager.Comment("reaching state \'S396\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S397\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1062\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1161;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1162;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1162 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1161);
            this.Manager.Comment("reaching state \'S1494\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1161, "policyHandle of OpenPolicy2, state S1494");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1162, "return of OpenPolicy2, state S1494");
            this.Manager.Comment("reaching state \'S1926\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1163;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1164;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1164 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1163);
            this.Manager.Comment("reaching state \'S2358\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1163, "trustHandle of CreateTrustedDomain, state S2358");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1164, "return of CreateTrustedDomain, state S2358");
            this.Manager.Comment("reaching state \'S2790\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1165;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1166;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1166 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1165);
            this.Manager.Comment("reaching state \'S3222\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1165, "trustHandle of OpenTrustedDomainByName, state S3222");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1166, "return of OpenTrustedDomainByName, state S3222");
            this.Manager.Comment("reaching state \'S3654\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1167;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1167 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4086\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1167, "return of SetTrustedDomainInfoByName, state S4086");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S398
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S398() {
            this.Manager.BeginTest("TestScenarioS15S398");
            this.Manager.Comment("reaching state \'S398\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S399\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1063\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1168;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1169;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1169 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1168);
            this.Manager.Comment("reaching state \'S1495\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1168, "policyHandle of OpenPolicy2, state S1495");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1169, "return of OpenPolicy2, state S1495");
            this.Manager.Comment("reaching state \'S1927\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1170;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1171;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1171 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1170);
            this.Manager.Comment("reaching state \'S2359\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1170, "trustHandle of CreateTrustedDomain, state S2359");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1171, "return of CreateTrustedDomain, state S2359");
            this.Manager.Comment("reaching state \'S2791\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1172;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1173;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1173 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1172);
            this.Manager.Comment("reaching state \'S3223\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1172, "trustHandle of OpenTrustedDomainByName, state S3223");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1173, "return of OpenTrustedDomainByName, state S3223");
            this.Manager.Comment("reaching state \'S3655\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1174;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1174 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4087\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1174, "return of SetTrustedDomainInfoByName, state S4087");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S4() {
            this.Manager.BeginTest("TestScenarioS15S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S866\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1175;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1176;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1176 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1175);
            this.Manager.Comment("reaching state \'S1298\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1175, "policyHandle of OpenPolicy2, state S1298");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1176, "return of OpenPolicy2, state S1298");
            this.Manager.Comment("reaching state \'S1730\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1177;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1178;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1178 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1177);
            this.Manager.Comment("reaching state \'S2162\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1177, "trustHandle of CreateTrustedDomain, state S2162");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1178, "return of CreateTrustedDomain, state S2162");
            this.Manager.Comment("reaching state \'S2594\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1179;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1180;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1180 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1179);
            this.Manager.Comment("reaching state \'S3026\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1179, "trustHandle of OpenTrustedDomainByName, state S3026");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1180, "return of OpenTrustedDomainByName, state S3026");
            this.Manager.Comment("reaching state \'S3458\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1181;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp1181 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3890\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1181, "return of SetTrustedDomainInfoByName, state S3890");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S40
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S40() {
            this.Manager.BeginTest("TestScenarioS15S40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S884\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1182;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1183;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1183 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1182);
            this.Manager.Comment("reaching state \'S1316\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1182, "policyHandle of OpenPolicy2, state S1316");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1183, "return of OpenPolicy2, state S1316");
            this.Manager.Comment("reaching state \'S1748\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1184;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1185;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1185 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1184);
            this.Manager.Comment("reaching state \'S2180\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1184, "trustHandle of CreateTrustedDomain, state S2180");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1185, "return of CreateTrustedDomain, state S2180");
            this.Manager.Comment("reaching state \'S2612\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1186;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1187;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1187 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1186);
            this.Manager.Comment("reaching state \'S3044\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1186, "trustHandle of OpenTrustedDomainByName, state S3044");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1187, "return of OpenTrustedDomainByName, state S3044");
            this.Manager.Comment("reaching state \'S3476\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1188;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1188 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3908\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1188, "return of SetTrustedDomainInfoByName, state S3908");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S400
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S400() {
            this.Manager.BeginTest("TestScenarioS15S400");
            this.Manager.Comment("reaching state \'S400\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S401\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1064\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1189;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1190;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1190 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1189);
            this.Manager.Comment("reaching state \'S1496\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1189, "policyHandle of OpenPolicy2, state S1496");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1190, "return of OpenPolicy2, state S1496");
            this.Manager.Comment("reaching state \'S1928\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1191;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1192;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1192 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1191);
            this.Manager.Comment("reaching state \'S2360\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1191, "trustHandle of CreateTrustedDomain, state S2360");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1192, "return of CreateTrustedDomain, state S2360");
            this.Manager.Comment("reaching state \'S2792\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1193;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1194;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1194 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1193);
            this.Manager.Comment("reaching state \'S3224\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1193, "trustHandle of OpenTrustedDomainByName, state S3224");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1194, "return of OpenTrustedDomainByName, state S3224");
            this.Manager.Comment("reaching state \'S3656\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1195;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1195 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4088\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1195, "return of SetTrustedDomainInfoByName, state S4088");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S402
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S402() {
            this.Manager.BeginTest("TestScenarioS15S402");
            this.Manager.Comment("reaching state \'S402\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S403\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1065\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1196;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1197;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1197 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1196);
            this.Manager.Comment("reaching state \'S1497\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1196, "policyHandle of OpenPolicy2, state S1497");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1197, "return of OpenPolicy2, state S1497");
            this.Manager.Comment("reaching state \'S1929\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1198;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1199;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1199 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1198);
            this.Manager.Comment("reaching state \'S2361\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1198, "trustHandle of CreateTrustedDomain, state S2361");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1199, "return of CreateTrustedDomain, state S2361");
            this.Manager.Comment("reaching state \'S2793\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1200;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1201;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Invalid,65663,out _)\'");
            temp1201 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 65663u, out temp1200);
            this.Manager.Comment("reaching state \'S3225\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1200, "trustHandle of OpenTrustedDomainByName, state S3225");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1201, "return of OpenTrustedDomainByName, state S3225");
            this.Manager.Comment("reaching state \'S3657\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1202;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1202 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4089\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1202, "return of SetTrustedDomainInfoByName, state S4089");
            TestScenarioS15S4324();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S404
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S404() {
            this.Manager.BeginTest("TestScenarioS15S404");
            this.Manager.Comment("reaching state \'S404\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S405\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1066\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1203;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1204;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1204 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1203);
            this.Manager.Comment("reaching state \'S1498\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1203, "policyHandle of OpenPolicy2, state S1498");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1204, "return of OpenPolicy2, state S1498");
            this.Manager.Comment("reaching state \'S1930\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1205;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1206;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1206 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1205);
            this.Manager.Comment("reaching state \'S2362\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1205, "trustHandle of CreateTrustedDomain, state S2362");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1206, "return of CreateTrustedDomain, state S2362");
            this.Manager.Comment("reaching state \'S2794\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1207;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1208;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain10\",Valid,65663,out _)\'");
            temp1208 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1207);
            this.Manager.Comment("reaching state \'S3226\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1207, "trustHandle of OpenTrustedDomainByName, state S3226");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1208, "return of OpenTrustedDomainByName, state S3226");
            this.Manager.Comment("reaching state \'S3658\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1209;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1209 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4090\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1209, "return of SetTrustedDomainInfoByName, state S4090");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S406
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S406() {
            this.Manager.BeginTest("TestScenarioS15S406");
            this.Manager.Comment("reaching state \'S406\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S407\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1067\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1210;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1211;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1211 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1210);
            this.Manager.Comment("reaching state \'S1499\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1210, "policyHandle of OpenPolicy2, state S1499");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1211, "return of OpenPolicy2, state S1499");
            this.Manager.Comment("reaching state \'S1931\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1212;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1213;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1213 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1212);
            this.Manager.Comment("reaching state \'S2363\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1212, "trustHandle of CreateTrustedDomain, state S2363");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1213, "return of CreateTrustedDomain, state S2363");
            this.Manager.Comment("reaching state \'S2795\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1214;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1215;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(2,\"Domain\",Valid,65663,out _)\'");
            temp1215 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(2, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1214);
            this.Manager.Comment("reaching state \'S3227\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1214, "trustHandle of OpenTrustedDomainByName, state S3227");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1215, "return of OpenTrustedDomainByName, state S3227");
            this.Manager.Comment("reaching state \'S3659\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1216;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1216 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4091\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1216, "return of SetTrustedDomainInfoByName, state S4091");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S408
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S408() {
            this.Manager.BeginTest("TestScenarioS15S408");
            this.Manager.Comment("reaching state \'S408\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S409\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1068\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1217;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1218;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1218 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1217);
            this.Manager.Comment("reaching state \'S1500\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1217, "policyHandle of OpenPolicy2, state S1500");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1218, "return of OpenPolicy2, state S1500");
            this.Manager.Comment("reaching state \'S1932\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1219;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1220;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1220 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1219);
            this.Manager.Comment("reaching state \'S2364\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1219, "trustHandle of CreateTrustedDomain, state S2364");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1220, "return of CreateTrustedDomain, state S2364");
            this.Manager.Comment("reaching state \'S2796\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1221;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1222;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(2,\"Domain\",Invalid,65663,out _)\'");
            temp1222 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(2, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 65663u, out temp1221);
            this.Manager.Comment("reaching state \'S3228\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1221, "trustHandle of OpenTrustedDomainByName, state S3228");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1222, "return of OpenTrustedDomainByName, state S3228");
            this.Manager.Comment("reaching state \'S3660\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1223;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1223 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4092\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1223, "return of SetTrustedDomainInfoByName, state S4092");
            TestScenarioS15S4321();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S410
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S410() {
            this.Manager.BeginTest("TestScenarioS15S410");
            this.Manager.Comment("reaching state \'S410\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S411\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1069\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1224;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1225;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1225 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1224);
            this.Manager.Comment("reaching state \'S1501\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1224, "policyHandle of OpenPolicy2, state S1501");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1225, "return of OpenPolicy2, state S1501");
            this.Manager.Comment("reaching state \'S1933\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1226;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1227;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1227 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1226);
            this.Manager.Comment("reaching state \'S2365\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1226, "trustHandle of CreateTrustedDomain, state S2365");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1227, "return of CreateTrustedDomain, state S2365");
            this.Manager.Comment("reaching state \'S2797\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1228;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1229;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(2,\"Domain10\",Valid,65663,out _)\'");
            temp1229 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(2, "Domain10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1228);
            this.Manager.Comment("reaching state \'S3229\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1228, "trustHandle of OpenTrustedDomainByName, state S3229");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1229, "return of OpenTrustedDomainByName, state S3229");
            this.Manager.Comment("reaching state \'S3661\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1230;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1230 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4093\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1230, "return of SetTrustedDomainInfoByName, state S4093");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S412
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S412() {
            this.Manager.BeginTest("TestScenarioS15S412");
            this.Manager.Comment("reaching state \'S412\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S413\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1070\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1231;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1232;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1232 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1231);
            this.Manager.Comment("reaching state \'S1502\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1231, "policyHandle of OpenPolicy2, state S1502");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1232, "return of OpenPolicy2, state S1502");
            this.Manager.Comment("reaching state \'S1934\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1233;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1234;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1234 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1233);
            this.Manager.Comment("reaching state \'S2366\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1233, "trustHandle of CreateTrustedDomain, state S2366");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1234, "return of CreateTrustedDomain, state S2366");
            this.Manager.Comment("reaching state \'S2798\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1235;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1236;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain10\",Invalid,65663,out _)\'");
            temp1236 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 65663u, out temp1235);
            this.Manager.Comment("reaching state \'S3230\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1235, "trustHandle of OpenTrustedDomainByName, state S3230");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1236, "return of OpenTrustedDomainByName, state S3230");
            this.Manager.Comment("reaching state \'S3662\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1237;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp1237 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4094\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1237, "return of SetTrustedDomainInfoByName, state S4094");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S414
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S414() {
            this.Manager.BeginTest("TestScenarioS15S414");
            this.Manager.Comment("reaching state \'S414\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1071\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1238;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1239;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1239 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1238);
            this.Manager.Comment("reaching state \'S1503\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1238, "policyHandle of OpenPolicy2, state S1503");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1239, "return of OpenPolicy2, state S1503");
            this.Manager.Comment("reaching state \'S1935\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1240;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1241;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1241 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1240);
            this.Manager.Comment("reaching state \'S2367\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1240, "trustHandle of CreateTrustedDomain, state S2367");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1241, "return of CreateTrustedDomain, state S2367");
            this.Manager.Comment("reaching state \'S2799\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1242;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1243;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(2,\"Domain10\",Invalid,65663,out _)\'");
            temp1243 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(2, "Domain10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 65663u, out temp1242);
            this.Manager.Comment("reaching state \'S3231\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1242, "trustHandle of OpenTrustedDomainByName, state S3231");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1243, "return of OpenTrustedDomainByName, state S3231");
            this.Manager.Comment("reaching state \'S3663\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1244;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1244 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4095\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1244, "return of SetTrustedDomainInfoByName, state S4095");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S416
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S416() {
            this.Manager.BeginTest("TestScenarioS15S416");
            this.Manager.Comment("reaching state \'S416\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S417\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1072\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1245;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1246;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1246 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1245);
            this.Manager.Comment("reaching state \'S1504\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1245, "policyHandle of OpenPolicy2, state S1504");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1246, "return of OpenPolicy2, state S1504");
            this.Manager.Comment("reaching state \'S1936\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1247;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1248;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1248 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1247);
            this.Manager.Comment("reaching state \'S2368\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1247, "trustHandle of CreateTrustedDomain, state S2368");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1248, "return of CreateTrustedDomain, state S2368");
            this.Manager.Comment("reaching state \'S2800\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1249;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1250;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1250 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1249);
            this.Manager.Comment("reaching state \'S3232\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1249, "trustHandle of OpenTrustedDomainByName, state S3232");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1250, "return of OpenTrustedDomainByName, state S3232");
            this.Manager.Comment("reaching state \'S3664\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1251;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1251 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4096\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1251, "return of SetTrustedDomainInfoByName, state S4096");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S418
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S418() {
            this.Manager.BeginTest("TestScenarioS15S418");
            this.Manager.Comment("reaching state \'S418\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S419\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1073\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1252;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1253;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1253 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1252);
            this.Manager.Comment("reaching state \'S1505\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1252, "policyHandle of OpenPolicy2, state S1505");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1253, "return of OpenPolicy2, state S1505");
            this.Manager.Comment("reaching state \'S1937\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1254;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1255;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1255 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1254);
            this.Manager.Comment("reaching state \'S2369\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1254, "trustHandle of CreateTrustedDomain, state S2369");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1255, "return of CreateTrustedDomain, state S2369");
            this.Manager.Comment("reaching state \'S2801\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1256;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1257;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1257 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1256);
            this.Manager.Comment("reaching state \'S3233\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1256, "trustHandle of OpenTrustedDomainByName, state S3233");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1257, "return of OpenTrustedDomainByName, state S3233");
            this.Manager.Comment("reaching state \'S3665\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1258;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1258 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4097\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1258, "return of SetTrustedDomainInfoByName, state S4097");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S42
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S42() {
            this.Manager.BeginTest("TestScenarioS15S42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S885\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1259;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1260;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1260 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1259);
            this.Manager.Comment("reaching state \'S1317\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1259, "policyHandle of OpenPolicy2, state S1317");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1260, "return of OpenPolicy2, state S1317");
            this.Manager.Comment("reaching state \'S1749\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1261;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1262;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1262 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1261);
            this.Manager.Comment("reaching state \'S2181\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1261, "trustHandle of CreateTrustedDomain, state S2181");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1262, "return of CreateTrustedDomain, state S2181");
            this.Manager.Comment("reaching state \'S2613\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1263;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1264;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1264 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1263);
            this.Manager.Comment("reaching state \'S3045\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1263, "trustHandle of OpenTrustedDomainByName, state S3045");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1264, "return of OpenTrustedDomainByName, state S3045");
            this.Manager.Comment("reaching state \'S3477\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1265;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1265 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3909\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1265, "return of SetTrustedDomainInfoByName, state S3909");
            TestScenarioS15S4321();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S420
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S420() {
            this.Manager.BeginTest("TestScenarioS15S420");
            this.Manager.Comment("reaching state \'S420\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S421\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1074\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1266;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1267;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1267 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1266);
            this.Manager.Comment("reaching state \'S1506\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1266, "policyHandle of OpenPolicy2, state S1506");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1267, "return of OpenPolicy2, state S1506");
            this.Manager.Comment("reaching state \'S1938\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1268;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1269;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1269 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1268);
            this.Manager.Comment("reaching state \'S2370\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1268, "trustHandle of CreateTrustedDomain, state S2370");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1269, "return of CreateTrustedDomain, state S2370");
            this.Manager.Comment("reaching state \'S2802\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1270;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1271;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1271 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1270);
            this.Manager.Comment("reaching state \'S3234\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1270, "trustHandle of OpenTrustedDomainByName, state S3234");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1271, "return of OpenTrustedDomainByName, state S3234");
            this.Manager.Comment("reaching state \'S3666\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1272;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1272 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4098\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1272, "return of SetTrustedDomainInfoByName, state S4098");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S422
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S422() {
            this.Manager.BeginTest("TestScenarioS15S422");
            this.Manager.Comment("reaching state \'S422\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S423\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1075\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1273;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1274;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1274 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1273);
            this.Manager.Comment("reaching state \'S1507\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1273, "policyHandle of OpenPolicy2, state S1507");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1274, "return of OpenPolicy2, state S1507");
            this.Manager.Comment("reaching state \'S1939\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1275;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1276;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1276 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1275);
            this.Manager.Comment("reaching state \'S2371\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1275, "trustHandle of CreateTrustedDomain, state S2371");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1276, "return of CreateTrustedDomain, state S2371");
            this.Manager.Comment("reaching state \'S2803\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1277;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1278;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1278 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1277);
            this.Manager.Comment("reaching state \'S3235\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1277, "trustHandle of OpenTrustedDomainByName, state S3235");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1278, "return of OpenTrustedDomainByName, state S3235");
            this.Manager.Comment("reaching state \'S3667\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1279;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1279 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4099\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1279, "return of SetTrustedDomainInfoByName, state S4099");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S424
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S424() {
            this.Manager.BeginTest("TestScenarioS15S424");
            this.Manager.Comment("reaching state \'S424\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S425\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1076\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1280;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1281;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1281 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1280);
            this.Manager.Comment("reaching state \'S1508\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1280, "policyHandle of OpenPolicy2, state S1508");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1281, "return of OpenPolicy2, state S1508");
            this.Manager.Comment("reaching state \'S1940\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1282;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1283;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1283 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1282);
            this.Manager.Comment("reaching state \'S2372\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1282, "trustHandle of CreateTrustedDomain, state S2372");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1283, "return of CreateTrustedDomain, state S2372");
            this.Manager.Comment("reaching state \'S2804\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1284;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1285;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1285 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1284);
            this.Manager.Comment("reaching state \'S3236\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1284, "trustHandle of OpenTrustedDomainByName, state S3236");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1285, "return of OpenTrustedDomainByName, state S3236");
            this.Manager.Comment("reaching state \'S3668\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1286;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1286 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4100\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1286, "return of SetTrustedDomainInfoByName, state S4100");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S426
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S426() {
            this.Manager.BeginTest("TestScenarioS15S426");
            this.Manager.Comment("reaching state \'S426\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S427\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1077\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1287;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1288;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1288 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1287);
            this.Manager.Comment("reaching state \'S1509\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1287, "policyHandle of OpenPolicy2, state S1509");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1288, "return of OpenPolicy2, state S1509");
            this.Manager.Comment("reaching state \'S1941\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1289;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1290;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1290 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1289);
            this.Manager.Comment("reaching state \'S2373\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1289, "trustHandle of CreateTrustedDomain, state S2373");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1290, "return of CreateTrustedDomain, state S2373");
            this.Manager.Comment("reaching state \'S2805\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1291;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1292;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1292 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1291);
            this.Manager.Comment("reaching state \'S3237\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1291, "trustHandle of OpenTrustedDomainByName, state S3237");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1292, "return of OpenTrustedDomainByName, state S3237");
            this.Manager.Comment("reaching state \'S3669\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1293;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1293 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4101\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1293, "return of SetTrustedDomainInfoByName, state S4101");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S428
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S428() {
            this.Manager.BeginTest("TestScenarioS15S428");
            this.Manager.Comment("reaching state \'S428\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S429\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1078\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1294;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1295;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1295 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1294);
            this.Manager.Comment("reaching state \'S1510\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1294, "policyHandle of OpenPolicy2, state S1510");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1295, "return of OpenPolicy2, state S1510");
            this.Manager.Comment("reaching state \'S1942\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1296;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1297;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1297 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1296);
            this.Manager.Comment("reaching state \'S2374\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1296, "trustHandle of CreateTrustedDomain, state S2374");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1297, "return of CreateTrustedDomain, state S2374");
            this.Manager.Comment("reaching state \'S2806\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1298;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1299;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1299 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1298);
            this.Manager.Comment("reaching state \'S3238\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1298, "trustHandle of OpenTrustedDomainByName, state S3238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1299, "return of OpenTrustedDomainByName, state S3238");
            this.Manager.Comment("reaching state \'S3670\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1300;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1300 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4102\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1300, "return of SetTrustedDomainInfoByName, state S4102");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S430
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S430() {
            this.Manager.BeginTest("TestScenarioS15S430");
            this.Manager.Comment("reaching state \'S430\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S431\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1079\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1301;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1302;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1302 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1301);
            this.Manager.Comment("reaching state \'S1511\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1301, "policyHandle of OpenPolicy2, state S1511");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1302, "return of OpenPolicy2, state S1511");
            this.Manager.Comment("reaching state \'S1943\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1303;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1304;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1304 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1303);
            this.Manager.Comment("reaching state \'S2375\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1303, "trustHandle of CreateTrustedDomain, state S2375");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1304, "return of CreateTrustedDomain, state S2375");
            this.Manager.Comment("reaching state \'S2807\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1305;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1306;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1306 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1305);
            this.Manager.Comment("reaching state \'S3239\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1305, "trustHandle of OpenTrustedDomainByName, state S3239");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1306, "return of OpenTrustedDomainByName, state S3239");
            this.Manager.Comment("reaching state \'S3671\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1307;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1307 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4103\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1307, "return of SetTrustedDomainInfoByName, state S4103");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S432
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S432() {
            this.Manager.BeginTest("TestScenarioS15S432");
            this.Manager.Comment("reaching state \'S432\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S433\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1080\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1308;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1309;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1309 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1308);
            this.Manager.Comment("reaching state \'S1512\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1308, "policyHandle of OpenPolicy2, state S1512");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1309, "return of OpenPolicy2, state S1512");
            this.Manager.Comment("reaching state \'S1944\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1310;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1311;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1311 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1310);
            this.Manager.Comment("reaching state \'S2376\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1310, "trustHandle of CreateTrustedDomain, state S2376");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1311, "return of CreateTrustedDomain, state S2376");
            this.Manager.Comment("reaching state \'S2808\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1312;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1313;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1313 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1312);
            this.Manager.Comment("reaching state \'S3240\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1312, "trustHandle of OpenTrustedDomainByName, state S3240");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1313, "return of OpenTrustedDomainByName, state S3240");
            this.Manager.Comment("reaching state \'S3672\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1314;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1314 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4104\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1314, "return of SetTrustedDomainInfoByName, state S4104");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S434
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S434() {
            this.Manager.BeginTest("TestScenarioS15S434");
            this.Manager.Comment("reaching state \'S434\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S435\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1081\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1315;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1316;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1316 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1315);
            this.Manager.Comment("reaching state \'S1513\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1315, "policyHandle of OpenPolicy2, state S1513");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1316, "return of OpenPolicy2, state S1513");
            this.Manager.Comment("reaching state \'S1945\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1317;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1318;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1318 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1317);
            this.Manager.Comment("reaching state \'S2377\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1317, "trustHandle of CreateTrustedDomain, state S2377");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1318, "return of CreateTrustedDomain, state S2377");
            this.Manager.Comment("reaching state \'S2809\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1319;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1320;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1320 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1319);
            this.Manager.Comment("reaching state \'S3241\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1319, "trustHandle of OpenTrustedDomainByName, state S3241");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1320, "return of OpenTrustedDomainByName, state S3241");
            this.Manager.Comment("reaching state \'S3673\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1321;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1321 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4105\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1321, "return of SetTrustedDomainInfoByName, state S4105");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S436
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S436() {
            this.Manager.BeginTest("TestScenarioS15S436");
            this.Manager.Comment("reaching state \'S436\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S437\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1082\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1322;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1323;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1323 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1322);
            this.Manager.Comment("reaching state \'S1514\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1322, "policyHandle of OpenPolicy2, state S1514");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1323, "return of OpenPolicy2, state S1514");
            this.Manager.Comment("reaching state \'S1946\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1324;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1325;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1325 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1324);
            this.Manager.Comment("reaching state \'S2378\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1324, "trustHandle of CreateTrustedDomain, state S2378");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1325, "return of CreateTrustedDomain, state S2378");
            this.Manager.Comment("reaching state \'S2810\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1326;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1327;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1327 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1326);
            this.Manager.Comment("reaching state \'S3242\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1326, "trustHandle of OpenTrustedDomainByName, state S3242");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1327, "return of OpenTrustedDomainByName, state S3242");
            this.Manager.Comment("reaching state \'S3674\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1328;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1328 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4106\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1328, "return of SetTrustedDomainInfoByName, state S4106");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S438
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S438() {
            this.Manager.BeginTest("TestScenarioS15S438");
            this.Manager.Comment("reaching state \'S438\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S439\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1083\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1329;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1330;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1330 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1329);
            this.Manager.Comment("reaching state \'S1515\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1329, "policyHandle of OpenPolicy2, state S1515");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1330, "return of OpenPolicy2, state S1515");
            this.Manager.Comment("reaching state \'S1947\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1331;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1332;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1332 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1331);
            this.Manager.Comment("reaching state \'S2379\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1331, "trustHandle of CreateTrustedDomain, state S2379");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1332, "return of CreateTrustedDomain, state S2379");
            this.Manager.Comment("reaching state \'S2811\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1333;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1334;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1334 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1333);
            this.Manager.Comment("reaching state \'S3243\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1333, "trustHandle of OpenTrustedDomainByName, state S3243");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1334, "return of OpenTrustedDomainByName, state S3243");
            this.Manager.Comment("reaching state \'S3675\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1335;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1335 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4107\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1335, "return of SetTrustedDomainInfoByName, state S4107");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S44
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S44() {
            this.Manager.BeginTest("TestScenarioS15S44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S886\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1336;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1337;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1337 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1336);
            this.Manager.Comment("reaching state \'S1318\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1336, "policyHandle of OpenPolicy2, state S1318");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1337, "return of OpenPolicy2, state S1318");
            this.Manager.Comment("reaching state \'S1750\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1338;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1339;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1339 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1338);
            this.Manager.Comment("reaching state \'S2182\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1338, "trustHandle of CreateTrustedDomain, state S2182");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1339, "return of CreateTrustedDomain, state S2182");
            this.Manager.Comment("reaching state \'S2614\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1340;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1341;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1341 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1340);
            this.Manager.Comment("reaching state \'S3046\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1340, "trustHandle of OpenTrustedDomainByName, state S3046");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1341, "return of OpenTrustedDomainByName, state S3046");
            this.Manager.Comment("reaching state \'S3478\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1342;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,Inval" +
                    "id,True)\'");
            temp1342 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S3910\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1342, "return of SetTrustedDomainInfoByName, state S3910");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S440
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S440() {
            this.Manager.BeginTest("TestScenarioS15S440");
            this.Manager.Comment("reaching state \'S440\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S441\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1084\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1343;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1344;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1344 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1343);
            this.Manager.Comment("reaching state \'S1516\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1343, "policyHandle of OpenPolicy2, state S1516");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1344, "return of OpenPolicy2, state S1516");
            this.Manager.Comment("reaching state \'S1948\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1345;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1346;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1346 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1345);
            this.Manager.Comment("reaching state \'S2380\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1345, "trustHandle of CreateTrustedDomain, state S2380");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1346, "return of CreateTrustedDomain, state S2380");
            this.Manager.Comment("reaching state \'S2812\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1347;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1348;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1348 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1347);
            this.Manager.Comment("reaching state \'S3244\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1347, "trustHandle of OpenTrustedDomainByName, state S3244");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1348, "return of OpenTrustedDomainByName, state S3244");
            this.Manager.Comment("reaching state \'S3676\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1349;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1349 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4108\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1349, "return of SetTrustedDomainInfoByName, state S4108");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S442
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S442() {
            this.Manager.BeginTest("TestScenarioS15S442");
            this.Manager.Comment("reaching state \'S442\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S443\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1085\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1350;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1351;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1351 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1350);
            this.Manager.Comment("reaching state \'S1517\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1350, "policyHandle of OpenPolicy2, state S1517");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1351, "return of OpenPolicy2, state S1517");
            this.Manager.Comment("reaching state \'S1949\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1352;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1353;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1353 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1352);
            this.Manager.Comment("reaching state \'S2381\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1352, "trustHandle of CreateTrustedDomain, state S2381");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1353, "return of CreateTrustedDomain, state S2381");
            this.Manager.Comment("reaching state \'S2813\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1354;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1355;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1355 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1354);
            this.Manager.Comment("reaching state \'S3245\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1354, "trustHandle of OpenTrustedDomainByName, state S3245");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1355, "return of OpenTrustedDomainByName, state S3245");
            this.Manager.Comment("reaching state \'S3677\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1356;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1356 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4109\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1356, "return of SetTrustedDomainInfoByName, state S4109");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S444
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S444() {
            this.Manager.BeginTest("TestScenarioS15S444");
            this.Manager.Comment("reaching state \'S444\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S445\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1086\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1357;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1358;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1358 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1357);
            this.Manager.Comment("reaching state \'S1518\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1357, "policyHandle of OpenPolicy2, state S1518");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1358, "return of OpenPolicy2, state S1518");
            this.Manager.Comment("reaching state \'S1950\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1359;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1360;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1360 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1359);
            this.Manager.Comment("reaching state \'S2382\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1359, "trustHandle of CreateTrustedDomain, state S2382");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1360, "return of CreateTrustedDomain, state S2382");
            this.Manager.Comment("reaching state \'S2814\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1361;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1362;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1362 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1361);
            this.Manager.Comment("reaching state \'S3246\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1361, "trustHandle of OpenTrustedDomainByName, state S3246");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1362, "return of OpenTrustedDomainByName, state S3246");
            this.Manager.Comment("reaching state \'S3678\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1363;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1363 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4110\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1363, "return of SetTrustedDomainInfoByName, state S4110");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S446
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S446() {
            this.Manager.BeginTest("TestScenarioS15S446");
            this.Manager.Comment("reaching state \'S446\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S447\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1087\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1364;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1365;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1365 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1364);
            this.Manager.Comment("reaching state \'S1519\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1364, "policyHandle of OpenPolicy2, state S1519");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1365, "return of OpenPolicy2, state S1519");
            this.Manager.Comment("reaching state \'S1951\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1366;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1367;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1367 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1366);
            this.Manager.Comment("reaching state \'S2383\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1366, "trustHandle of CreateTrustedDomain, state S2383");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1367, "return of CreateTrustedDomain, state S2383");
            this.Manager.Comment("reaching state \'S2815\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1368;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1369;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1369 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1368);
            this.Manager.Comment("reaching state \'S3247\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1368, "trustHandle of OpenTrustedDomainByName, state S3247");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1369, "return of OpenTrustedDomainByName, state S3247");
            this.Manager.Comment("reaching state \'S3679\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1370;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1370 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4111\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1370, "return of SetTrustedDomainInfoByName, state S4111");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S448
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S448() {
            this.Manager.BeginTest("TestScenarioS15S448");
            this.Manager.Comment("reaching state \'S448\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S449\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1088\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1371;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1372;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1372 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1371);
            this.Manager.Comment("reaching state \'S1520\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1371, "policyHandle of OpenPolicy2, state S1520");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1372, "return of OpenPolicy2, state S1520");
            this.Manager.Comment("reaching state \'S1952\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1373;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1374;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1374 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1373);
            this.Manager.Comment("reaching state \'S2384\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1373, "trustHandle of CreateTrustedDomain, state S2384");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1374, "return of CreateTrustedDomain, state S2384");
            this.Manager.Comment("reaching state \'S2816\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1375;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1376;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1376 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1375);
            this.Manager.Comment("reaching state \'S3248\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1375, "trustHandle of OpenTrustedDomainByName, state S3248");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1376, "return of OpenTrustedDomainByName, state S3248");
            this.Manager.Comment("reaching state \'S3680\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1377;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1377 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4112\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1377, "return of SetTrustedDomainInfoByName, state S4112");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S450
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S450() {
            this.Manager.BeginTest("TestScenarioS15S450");
            this.Manager.Comment("reaching state \'S450\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S451\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1089\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1378;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1379;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1379 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1378);
            this.Manager.Comment("reaching state \'S1521\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1378, "policyHandle of OpenPolicy2, state S1521");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1379, "return of OpenPolicy2, state S1521");
            this.Manager.Comment("reaching state \'S1953\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1380;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1381;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1381 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1380);
            this.Manager.Comment("reaching state \'S2385\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1380, "trustHandle of CreateTrustedDomain, state S2385");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1381, "return of CreateTrustedDomain, state S2385");
            this.Manager.Comment("reaching state \'S2817\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1382;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1383;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1383 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1382);
            this.Manager.Comment("reaching state \'S3249\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1382, "trustHandle of OpenTrustedDomainByName, state S3249");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1383, "return of OpenTrustedDomainByName, state S3249");
            this.Manager.Comment("reaching state \'S3681\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1384;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1384 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4113\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1384, "return of SetTrustedDomainInfoByName, state S4113");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S452
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S452() {
            this.Manager.BeginTest("TestScenarioS15S452");
            this.Manager.Comment("reaching state \'S452\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S453\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1090\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1385;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1386;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1386 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1385);
            this.Manager.Comment("reaching state \'S1522\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1385, "policyHandle of OpenPolicy2, state S1522");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1386, "return of OpenPolicy2, state S1522");
            this.Manager.Comment("reaching state \'S1954\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1387;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1388;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1388 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1387);
            this.Manager.Comment("reaching state \'S2386\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1387, "trustHandle of CreateTrustedDomain, state S2386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1388, "return of CreateTrustedDomain, state S2386");
            this.Manager.Comment("reaching state \'S2818\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1389;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1390;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1390 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1389);
            this.Manager.Comment("reaching state \'S3250\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1389, "trustHandle of OpenTrustedDomainByName, state S3250");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1390, "return of OpenTrustedDomainByName, state S3250");
            this.Manager.Comment("reaching state \'S3682\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1391;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1391 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4114\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1391, "return of SetTrustedDomainInfoByName, state S4114");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S454
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S454() {
            this.Manager.BeginTest("TestScenarioS15S454");
            this.Manager.Comment("reaching state \'S454\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S455\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1091\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1392;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1393;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1393 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1392);
            this.Manager.Comment("reaching state \'S1523\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1392, "policyHandle of OpenPolicy2, state S1523");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1393, "return of OpenPolicy2, state S1523");
            this.Manager.Comment("reaching state \'S1955\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1394;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1395;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1395 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1394);
            this.Manager.Comment("reaching state \'S2387\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1394, "trustHandle of CreateTrustedDomain, state S2387");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1395, "return of CreateTrustedDomain, state S2387");
            this.Manager.Comment("reaching state \'S2819\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1396;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1397;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1397 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1396);
            this.Manager.Comment("reaching state \'S3251\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1396, "trustHandle of OpenTrustedDomainByName, state S3251");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1397, "return of OpenTrustedDomainByName, state S3251");
            this.Manager.Comment("reaching state \'S3683\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1398;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1398 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4115\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1398, "return of SetTrustedDomainInfoByName, state S4115");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S456
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S456() {
            this.Manager.BeginTest("TestScenarioS15S456");
            this.Manager.Comment("reaching state \'S456\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S457\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1092\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1399;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1400;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1400 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1399);
            this.Manager.Comment("reaching state \'S1524\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1399, "policyHandle of OpenPolicy2, state S1524");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1400, "return of OpenPolicy2, state S1524");
            this.Manager.Comment("reaching state \'S1956\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1401;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1402;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1402 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1401);
            this.Manager.Comment("reaching state \'S2388\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1401, "trustHandle of CreateTrustedDomain, state S2388");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1402, "return of CreateTrustedDomain, state S2388");
            this.Manager.Comment("reaching state \'S2820\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1403;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1404;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1404 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1403);
            this.Manager.Comment("reaching state \'S3252\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1403, "trustHandle of OpenTrustedDomainByName, state S3252");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1404, "return of OpenTrustedDomainByName, state S3252");
            this.Manager.Comment("reaching state \'S3684\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1405;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1405 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4116\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1405, "return of SetTrustedDomainInfoByName, state S4116");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S458
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S458() {
            this.Manager.BeginTest("TestScenarioS15S458");
            this.Manager.Comment("reaching state \'S458\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S459\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1093\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1406;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1407;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1407 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1406);
            this.Manager.Comment("reaching state \'S1525\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1406, "policyHandle of OpenPolicy2, state S1525");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1407, "return of OpenPolicy2, state S1525");
            this.Manager.Comment("reaching state \'S1957\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1408;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1409;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1409 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1408);
            this.Manager.Comment("reaching state \'S2389\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1408, "trustHandle of CreateTrustedDomain, state S2389");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1409, "return of CreateTrustedDomain, state S2389");
            this.Manager.Comment("reaching state \'S2821\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1410;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1411;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1411 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1410);
            this.Manager.Comment("reaching state \'S3253\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1410, "trustHandle of OpenTrustedDomainByName, state S3253");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1411, "return of OpenTrustedDomainByName, state S3253");
            this.Manager.Comment("reaching state \'S3685\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1412;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1412 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4117\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1412, "return of SetTrustedDomainInfoByName, state S4117");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S46
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S46() {
            this.Manager.BeginTest("TestScenarioS15S46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S887\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1413;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1414;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1414 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1413);
            this.Manager.Comment("reaching state \'S1319\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1413, "policyHandle of OpenPolicy2, state S1319");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1414, "return of OpenPolicy2, state S1319");
            this.Manager.Comment("reaching state \'S1751\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1415;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1416;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1416 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1415);
            this.Manager.Comment("reaching state \'S2183\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1415, "trustHandle of CreateTrustedDomain, state S2183");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1416, "return of CreateTrustedDomain, state S2183");
            this.Manager.Comment("reaching state \'S2615\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1417;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1418;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1418 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1417);
            this.Manager.Comment("reaching state \'S3047\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1417, "trustHandle of OpenTrustedDomainByName, state S3047");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1418, "return of OpenTrustedDomainByName, state S3047");
            this.Manager.Comment("reaching state \'S3479\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1419;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,Inv" +
                    "alid,True)\'");
            temp1419 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S3911\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1419, "return of SetTrustedDomainInfoByName, state S3911");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S460
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S460() {
            this.Manager.BeginTest("TestScenarioS15S460");
            this.Manager.Comment("reaching state \'S460\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S461\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1094\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1420;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1421;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1421 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1420);
            this.Manager.Comment("reaching state \'S1526\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1420, "policyHandle of OpenPolicy2, state S1526");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1421, "return of OpenPolicy2, state S1526");
            this.Manager.Comment("reaching state \'S1958\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1422;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1423;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1423 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1422);
            this.Manager.Comment("reaching state \'S2390\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1422, "trustHandle of CreateTrustedDomain, state S2390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1423, "return of CreateTrustedDomain, state S2390");
            this.Manager.Comment("reaching state \'S2822\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1424;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1425;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1425 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1424);
            this.Manager.Comment("reaching state \'S3254\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1424, "trustHandle of OpenTrustedDomainByName, state S3254");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1425, "return of OpenTrustedDomainByName, state S3254");
            this.Manager.Comment("reaching state \'S3686\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1426;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp1426 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4118\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1426, "return of SetTrustedDomainInfoByName, state S4118");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S462
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S462() {
            this.Manager.BeginTest("TestScenarioS15S462");
            this.Manager.Comment("reaching state \'S462\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S463\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1095\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1427;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1428;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1428 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1427);
            this.Manager.Comment("reaching state \'S1527\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1427, "policyHandle of OpenPolicy2, state S1527");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1428, "return of OpenPolicy2, state S1527");
            this.Manager.Comment("reaching state \'S1959\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1429;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1430;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1430 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1429);
            this.Manager.Comment("reaching state \'S2391\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1429, "trustHandle of CreateTrustedDomain, state S2391");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1430, "return of CreateTrustedDomain, state S2391");
            this.Manager.Comment("reaching state \'S2823\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1431;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1432;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1432 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1431);
            this.Manager.Comment("reaching state \'S3255\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1431, "trustHandle of OpenTrustedDomainByName, state S3255");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1432, "return of OpenTrustedDomainByName, state S3255");
            this.Manager.Comment("reaching state \'S3687\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1433;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1433 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4119\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1433, "return of SetTrustedDomainInfoByName, state S4119");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S464
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S464() {
            this.Manager.BeginTest("TestScenarioS15S464");
            this.Manager.Comment("reaching state \'S464\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S465\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1096\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1434;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1435;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1435 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1434);
            this.Manager.Comment("reaching state \'S1528\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1434, "policyHandle of OpenPolicy2, state S1528");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1435, "return of OpenPolicy2, state S1528");
            this.Manager.Comment("reaching state \'S1960\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1436;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1437;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1437 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1436);
            this.Manager.Comment("reaching state \'S2392\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1436, "trustHandle of CreateTrustedDomain, state S2392");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1437, "return of CreateTrustedDomain, state S2392");
            this.Manager.Comment("reaching state \'S2824\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1438;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1439;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1439 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1438);
            this.Manager.Comment("reaching state \'S3256\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1438, "trustHandle of OpenTrustedDomainByName, state S3256");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1439, "return of OpenTrustedDomainByName, state S3256");
            this.Manager.Comment("reaching state \'S3688\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1440;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1440 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4120\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1440, "return of SetTrustedDomainInfoByName, state S4120");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S466
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S466() {
            this.Manager.BeginTest("TestScenarioS15S466");
            this.Manager.Comment("reaching state \'S466\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S467\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1097\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1441;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1442;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1442 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1441);
            this.Manager.Comment("reaching state \'S1529\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1441, "policyHandle of OpenPolicy2, state S1529");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1442, "return of OpenPolicy2, state S1529");
            this.Manager.Comment("reaching state \'S1961\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1443;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1444;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1444 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1443);
            this.Manager.Comment("reaching state \'S2393\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1443, "trustHandle of CreateTrustedDomain, state S2393");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1444, "return of CreateTrustedDomain, state S2393");
            this.Manager.Comment("reaching state \'S2825\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1445;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1446;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1446 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1445);
            this.Manager.Comment("reaching state \'S3257\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1445, "trustHandle of OpenTrustedDomainByName, state S3257");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1446, "return of OpenTrustedDomainByName, state S3257");
            this.Manager.Comment("reaching state \'S3689\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1447;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1447 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4121\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1447, "return of SetTrustedDomainInfoByName, state S4121");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S468
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S468() {
            this.Manager.BeginTest("TestScenarioS15S468");
            this.Manager.Comment("reaching state \'S468\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S469\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1098\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1448;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1449;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1449 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1448);
            this.Manager.Comment("reaching state \'S1530\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1448, "policyHandle of OpenPolicy2, state S1530");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1449, "return of OpenPolicy2, state S1530");
            this.Manager.Comment("reaching state \'S1962\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1450;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1451;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1451 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1450);
            this.Manager.Comment("reaching state \'S2394\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1450, "trustHandle of CreateTrustedDomain, state S2394");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1451, "return of CreateTrustedDomain, state S2394");
            this.Manager.Comment("reaching state \'S2826\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1452;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1453;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1453 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1452);
            this.Manager.Comment("reaching state \'S3258\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1452, "trustHandle of OpenTrustedDomainByName, state S3258");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1453, "return of OpenTrustedDomainByName, state S3258");
            this.Manager.Comment("reaching state \'S3690\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1454;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1454 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4122\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1454, "return of SetTrustedDomainInfoByName, state S4122");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S470
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S470() {
            this.Manager.BeginTest("TestScenarioS15S470");
            this.Manager.Comment("reaching state \'S470\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S471\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1099\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1455;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1456;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1456 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1455);
            this.Manager.Comment("reaching state \'S1531\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1455, "policyHandle of OpenPolicy2, state S1531");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1456, "return of OpenPolicy2, state S1531");
            this.Manager.Comment("reaching state \'S1963\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1457;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1458;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1458 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1457);
            this.Manager.Comment("reaching state \'S2395\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1457, "trustHandle of CreateTrustedDomain, state S2395");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1458, "return of CreateTrustedDomain, state S2395");
            this.Manager.Comment("reaching state \'S2827\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1459;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1460;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1460 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1459);
            this.Manager.Comment("reaching state \'S3259\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1459, "trustHandle of OpenTrustedDomainByName, state S3259");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1460, "return of OpenTrustedDomainByName, state S3259");
            this.Manager.Comment("reaching state \'S3691\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1461;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1461 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4123\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1461, "return of SetTrustedDomainInfoByName, state S4123");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S472
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S472() {
            this.Manager.BeginTest("TestScenarioS15S472");
            this.Manager.Comment("reaching state \'S472\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S473\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1100\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1462;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1463;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1463 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1462);
            this.Manager.Comment("reaching state \'S1532\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1462, "policyHandle of OpenPolicy2, state S1532");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1463, "return of OpenPolicy2, state S1532");
            this.Manager.Comment("reaching state \'S1964\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1464;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1465;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1465 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1464);
            this.Manager.Comment("reaching state \'S2396\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1464, "trustHandle of CreateTrustedDomain, state S2396");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1465, "return of CreateTrustedDomain, state S2396");
            this.Manager.Comment("reaching state \'S2828\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1466;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1467;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1467 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1466);
            this.Manager.Comment("reaching state \'S3260\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1466, "trustHandle of OpenTrustedDomainByName, state S3260");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1467, "return of OpenTrustedDomainByName, state S3260");
            this.Manager.Comment("reaching state \'S3692\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1468;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1468 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4124\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1468, "return of SetTrustedDomainInfoByName, state S4124");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S474
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S474() {
            this.Manager.BeginTest("TestScenarioS15S474");
            this.Manager.Comment("reaching state \'S474\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S475\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1101\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1469;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1470;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1470 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1469);
            this.Manager.Comment("reaching state \'S1533\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1469, "policyHandle of OpenPolicy2, state S1533");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1470, "return of OpenPolicy2, state S1533");
            this.Manager.Comment("reaching state \'S1965\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1471;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1472;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1472 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1471);
            this.Manager.Comment("reaching state \'S2397\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1471, "trustHandle of CreateTrustedDomain, state S2397");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1472, "return of CreateTrustedDomain, state S2397");
            this.Manager.Comment("reaching state \'S2829\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1473;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1474;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1474 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1473);
            this.Manager.Comment("reaching state \'S3261\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1473, "trustHandle of OpenTrustedDomainByName, state S3261");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1474, "return of OpenTrustedDomainByName, state S3261");
            this.Manager.Comment("reaching state \'S3693\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1475;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1475 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4125\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1475, "return of SetTrustedDomainInfoByName, state S4125");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S476
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S476() {
            this.Manager.BeginTest("TestScenarioS15S476");
            this.Manager.Comment("reaching state \'S476\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S477\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1102\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1476;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1477;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1477 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1476);
            this.Manager.Comment("reaching state \'S1534\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1476, "policyHandle of OpenPolicy2, state S1534");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1477, "return of OpenPolicy2, state S1534");
            this.Manager.Comment("reaching state \'S1966\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1478;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1479;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1479 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1478);
            this.Manager.Comment("reaching state \'S2398\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1478, "trustHandle of CreateTrustedDomain, state S2398");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1479, "return of CreateTrustedDomain, state S2398");
            this.Manager.Comment("reaching state \'S2830\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1480;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1481;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1481 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1480);
            this.Manager.Comment("reaching state \'S3262\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1480, "trustHandle of OpenTrustedDomainByName, state S3262");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1481, "return of OpenTrustedDomainByName, state S3262");
            this.Manager.Comment("reaching state \'S3694\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1482;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp1482 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4126\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1482, "return of SetTrustedDomainInfoByName, state S4126");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S478
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S478() {
            this.Manager.BeginTest("TestScenarioS15S478");
            this.Manager.Comment("reaching state \'S478\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S479\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1103\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1483;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1484;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1484 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1483);
            this.Manager.Comment("reaching state \'S1535\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1483, "policyHandle of OpenPolicy2, state S1535");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1484, "return of OpenPolicy2, state S1535");
            this.Manager.Comment("reaching state \'S1967\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1485;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1486;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1486 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1485);
            this.Manager.Comment("reaching state \'S2399\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1485, "trustHandle of CreateTrustedDomain, state S2399");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1486, "return of CreateTrustedDomain, state S2399");
            this.Manager.Comment("reaching state \'S2831\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1487;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1488;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1488 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1487);
            this.Manager.Comment("reaching state \'S3263\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1487, "trustHandle of OpenTrustedDomainByName, state S3263");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1488, "return of OpenTrustedDomainByName, state S3263");
            this.Manager.Comment("reaching state \'S3695\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1489;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1489 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4127\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1489, "return of SetTrustedDomainInfoByName, state S4127");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S48
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S48() {
            this.Manager.BeginTest("TestScenarioS15S48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S888\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1490;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1491;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1491 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1490);
            this.Manager.Comment("reaching state \'S1320\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1490, "policyHandle of OpenPolicy2, state S1320");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1491, "return of OpenPolicy2, state S1320");
            this.Manager.Comment("reaching state \'S1752\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1492;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1493;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1493 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1492);
            this.Manager.Comment("reaching state \'S2184\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1492, "trustHandle of CreateTrustedDomain, state S2184");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1493, "return of CreateTrustedDomain, state S2184");
            this.Manager.Comment("reaching state \'S2616\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1494;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1495;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1495 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1494);
            this.Manager.Comment("reaching state \'S3048\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1494, "trustHandle of OpenTrustedDomainByName, state S3048");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1495, "return of OpenTrustedDomainByName, state S3048");
            this.Manager.Comment("reaching state \'S3480\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1496;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1496 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S3912\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1496, "return of SetTrustedDomainInfoByName, state S3912");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S480
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S480() {
            this.Manager.BeginTest("TestScenarioS15S480");
            this.Manager.Comment("reaching state \'S480\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S481\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1104\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1497;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1498;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1498 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1497);
            this.Manager.Comment("reaching state \'S1536\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1497, "policyHandle of OpenPolicy2, state S1536");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1498, "return of OpenPolicy2, state S1536");
            this.Manager.Comment("reaching state \'S1968\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1499;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1500;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1500 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1499);
            this.Manager.Comment("reaching state \'S2400\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1499, "trustHandle of CreateTrustedDomain, state S2400");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1500, "return of CreateTrustedDomain, state S2400");
            this.Manager.Comment("reaching state \'S2832\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1501;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1502;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1502 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1501);
            this.Manager.Comment("reaching state \'S3264\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1501, "trustHandle of OpenTrustedDomainByName, state S3264");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1502, "return of OpenTrustedDomainByName, state S3264");
            this.Manager.Comment("reaching state \'S3696\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1503;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1503 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4128\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1503, "return of SetTrustedDomainInfoByName, state S4128");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S482
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S482() {
            this.Manager.BeginTest("TestScenarioS15S482");
            this.Manager.Comment("reaching state \'S482\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S483\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1105\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1504;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1505;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1505 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1504);
            this.Manager.Comment("reaching state \'S1537\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1504, "policyHandle of OpenPolicy2, state S1537");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1505, "return of OpenPolicy2, state S1537");
            this.Manager.Comment("reaching state \'S1969\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1506;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1507;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1507 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1506);
            this.Manager.Comment("reaching state \'S2401\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1506, "trustHandle of CreateTrustedDomain, state S2401");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1507, "return of CreateTrustedDomain, state S2401");
            this.Manager.Comment("reaching state \'S2833\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1508;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1509;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1509 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1508);
            this.Manager.Comment("reaching state \'S3265\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1508, "trustHandle of OpenTrustedDomainByName, state S3265");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1509, "return of OpenTrustedDomainByName, state S3265");
            this.Manager.Comment("reaching state \'S3697\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1510;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp1510 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4129\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1510, "return of SetTrustedDomainInfoByName, state S4129");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S484
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S484() {
            this.Manager.BeginTest("TestScenarioS15S484");
            this.Manager.Comment("reaching state \'S484\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S485\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1106\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1511;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1512;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1512 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1511);
            this.Manager.Comment("reaching state \'S1538\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1511, "policyHandle of OpenPolicy2, state S1538");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1512, "return of OpenPolicy2, state S1538");
            this.Manager.Comment("reaching state \'S1970\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1513;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1514;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1514 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1513);
            this.Manager.Comment("reaching state \'S2402\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1513, "trustHandle of CreateTrustedDomain, state S2402");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1514, "return of CreateTrustedDomain, state S2402");
            this.Manager.Comment("reaching state \'S2834\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1515;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1516;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1516 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1515);
            this.Manager.Comment("reaching state \'S3266\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1515, "trustHandle of OpenTrustedDomainByName, state S3266");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1516, "return of OpenTrustedDomainByName, state S3266");
            this.Manager.Comment("reaching state \'S3698\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1517;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp1517 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4130\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1517, "return of SetTrustedDomainInfoByName, state S4130");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S486
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S486() {
            this.Manager.BeginTest("TestScenarioS15S486");
            this.Manager.Comment("reaching state \'S486\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S487\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1107\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1518;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1519;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1519 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1518);
            this.Manager.Comment("reaching state \'S1539\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1518, "policyHandle of OpenPolicy2, state S1539");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1519, "return of OpenPolicy2, state S1539");
            this.Manager.Comment("reaching state \'S1971\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1520;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1521;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1521 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1520);
            this.Manager.Comment("reaching state \'S2403\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1520, "trustHandle of CreateTrustedDomain, state S2403");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1521, "return of CreateTrustedDomain, state S2403");
            this.Manager.Comment("reaching state \'S2835\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1522;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1523;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1523 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1522);
            this.Manager.Comment("reaching state \'S3267\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1522, "trustHandle of OpenTrustedDomainByName, state S3267");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1523, "return of OpenTrustedDomainByName, state S3267");
            this.Manager.Comment("reaching state \'S3699\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1524;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,Inv" +
                    "alid,True)\'");
            temp1524 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4131\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1524, "return of SetTrustedDomainInfoByName, state S4131");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S488
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S488() {
            this.Manager.BeginTest("TestScenarioS15S488");
            this.Manager.Comment("reaching state \'S488\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S489\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1108\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1525;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1526;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1526 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1525);
            this.Manager.Comment("reaching state \'S1540\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1525, "policyHandle of OpenPolicy2, state S1540");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1526, "return of OpenPolicy2, state S1540");
            this.Manager.Comment("reaching state \'S1972\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1527;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1528;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1528 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1527);
            this.Manager.Comment("reaching state \'S2404\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1527, "trustHandle of CreateTrustedDomain, state S2404");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1528, "return of CreateTrustedDomain, state S2404");
            this.Manager.Comment("reaching state \'S2836\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1529;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1530;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1530 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1529);
            this.Manager.Comment("reaching state \'S3268\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1529, "trustHandle of OpenTrustedDomainByName, state S3268");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1530, "return of OpenTrustedDomainByName, state S3268");
            this.Manager.Comment("reaching state \'S3700\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1531;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1531 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4132\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1531, "return of SetTrustedDomainInfoByName, state S4132");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S490
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S490() {
            this.Manager.BeginTest("TestScenarioS15S490");
            this.Manager.Comment("reaching state \'S490\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S491\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1109\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1532;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1533;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1533 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1532);
            this.Manager.Comment("reaching state \'S1541\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1532, "policyHandle of OpenPolicy2, state S1541");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1533, "return of OpenPolicy2, state S1541");
            this.Manager.Comment("reaching state \'S1973\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1534;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1535;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1535 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1534);
            this.Manager.Comment("reaching state \'S2405\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1534, "trustHandle of CreateTrustedDomain, state S2405");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1535, "return of CreateTrustedDomain, state S2405");
            this.Manager.Comment("reaching state \'S2837\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1536;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1537;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1537 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1536);
            this.Manager.Comment("reaching state \'S3269\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1536, "trustHandle of OpenTrustedDomainByName, state S3269");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1537, "return of OpenTrustedDomainByName, state S3269");
            this.Manager.Comment("reaching state \'S3701\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1538;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp1538 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4133\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1538, "return of SetTrustedDomainInfoByName, state S4133");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S492
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S492() {
            this.Manager.BeginTest("TestScenarioS15S492");
            this.Manager.Comment("reaching state \'S492\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S493\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1110\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1539;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1540;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1540 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1539);
            this.Manager.Comment("reaching state \'S1542\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1539, "policyHandle of OpenPolicy2, state S1542");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1540, "return of OpenPolicy2, state S1542");
            this.Manager.Comment("reaching state \'S1974\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1541;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1542;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1542 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1541);
            this.Manager.Comment("reaching state \'S2406\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1541, "trustHandle of CreateTrustedDomain, state S2406");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1542, "return of CreateTrustedDomain, state S2406");
            this.Manager.Comment("reaching state \'S2838\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1543;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1544;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1544 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1543);
            this.Manager.Comment("reaching state \'S3270\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1543, "trustHandle of OpenTrustedDomainByName, state S3270");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1544, "return of OpenTrustedDomainByName, state S3270");
            this.Manager.Comment("reaching state \'S3702\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1545;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp1545 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4134\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1545, "return of SetTrustedDomainInfoByName, state S4134");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S494
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S494() {
            this.Manager.BeginTest("TestScenarioS15S494");
            this.Manager.Comment("reaching state \'S494\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S495\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1111\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1546;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1547;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1547 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1546);
            this.Manager.Comment("reaching state \'S1543\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1546, "policyHandle of OpenPolicy2, state S1543");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1547, "return of OpenPolicy2, state S1543");
            this.Manager.Comment("reaching state \'S1975\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1548;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1549;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1549 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1548);
            this.Manager.Comment("reaching state \'S2407\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1548, "trustHandle of CreateTrustedDomain, state S2407");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1549, "return of CreateTrustedDomain, state S2407");
            this.Manager.Comment("reaching state \'S2839\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1550;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1551;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1551 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1550);
            this.Manager.Comment("reaching state \'S3271\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1550, "trustHandle of OpenTrustedDomainByName, state S3271");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1551, "return of OpenTrustedDomainByName, state S3271");
            this.Manager.Comment("reaching state \'S3703\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1552;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1552 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4135\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1552, "return of SetTrustedDomainInfoByName, state S4135");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S496
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S496() {
            this.Manager.BeginTest("TestScenarioS15S496");
            this.Manager.Comment("reaching state \'S496\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1112\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1553;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1554;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1554 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1553);
            this.Manager.Comment("reaching state \'S1544\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1553, "policyHandle of OpenPolicy2, state S1544");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1554, "return of OpenPolicy2, state S1544");
            this.Manager.Comment("reaching state \'S1976\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1555;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1556;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1556 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1555);
            this.Manager.Comment("reaching state \'S2408\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1555, "trustHandle of CreateTrustedDomain, state S2408");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1556, "return of CreateTrustedDomain, state S2408");
            this.Manager.Comment("reaching state \'S2840\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1557;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1558;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1558 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1557);
            this.Manager.Comment("reaching state \'S3272\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1557, "trustHandle of OpenTrustedDomainByName, state S3272");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1558, "return of OpenTrustedDomainByName, state S3272");
            this.Manager.Comment("reaching state \'S3704\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1559;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1559 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4136\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1559, "return of SetTrustedDomainInfoByName, state S4136");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S498
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S498() {
            this.Manager.BeginTest("TestScenarioS15S498");
            this.Manager.Comment("reaching state \'S498\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S499\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1113\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1560;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1561;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1561 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1560);
            this.Manager.Comment("reaching state \'S1545\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1560, "policyHandle of OpenPolicy2, state S1545");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1561, "return of OpenPolicy2, state S1545");
            this.Manager.Comment("reaching state \'S1977\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1562;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1563;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1563 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1562);
            this.Manager.Comment("reaching state \'S2409\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1562, "trustHandle of CreateTrustedDomain, state S2409");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1563, "return of CreateTrustedDomain, state S2409");
            this.Manager.Comment("reaching state \'S2841\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1564;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1565;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1565 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1564);
            this.Manager.Comment("reaching state \'S3273\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1564, "trustHandle of OpenTrustedDomainByName, state S3273");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1565, "return of OpenTrustedDomainByName, state S3273");
            this.Manager.Comment("reaching state \'S3705\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1566;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1566 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4137\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1566, "return of SetTrustedDomainInfoByName, state S4137");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S50
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S50() {
            this.Manager.BeginTest("TestScenarioS15S50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S889\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1567;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1568;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1568 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1567);
            this.Manager.Comment("reaching state \'S1321\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1567, "policyHandle of OpenPolicy2, state S1321");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1568, "return of OpenPolicy2, state S1321");
            this.Manager.Comment("reaching state \'S1753\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1569;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1570;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1570 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1569);
            this.Manager.Comment("reaching state \'S2185\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1569, "trustHandle of CreateTrustedDomain, state S2185");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1570, "return of CreateTrustedDomain, state S2185");
            this.Manager.Comment("reaching state \'S2617\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1571;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1572;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1572 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1571);
            this.Manager.Comment("reaching state \'S3049\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1571, "trustHandle of OpenTrustedDomainByName, state S3049");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1572, "return of OpenTrustedDomainByName, state S3049");
            this.Manager.Comment("reaching state \'S3481\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1573;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1573 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S3913\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1573, "return of SetTrustedDomainInfoByName, state S3913");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S500
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S500() {
            this.Manager.BeginTest("TestScenarioS15S500");
            this.Manager.Comment("reaching state \'S500\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S501\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1114\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1574;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1575;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1575 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1574);
            this.Manager.Comment("reaching state \'S1546\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1574, "policyHandle of OpenPolicy2, state S1546");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1575, "return of OpenPolicy2, state S1546");
            this.Manager.Comment("reaching state \'S1978\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1576;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1577;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1577 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1576);
            this.Manager.Comment("reaching state \'S2410\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1576, "trustHandle of CreateTrustedDomain, state S2410");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1577, "return of CreateTrustedDomain, state S2410");
            this.Manager.Comment("reaching state \'S2842\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1578;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1579;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1579 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1578);
            this.Manager.Comment("reaching state \'S3274\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1578, "trustHandle of OpenTrustedDomainByName, state S3274");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1579, "return of OpenTrustedDomainByName, state S3274");
            this.Manager.Comment("reaching state \'S3706\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1580;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1580 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4138\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1580, "return of SetTrustedDomainInfoByName, state S4138");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S502
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S502() {
            this.Manager.BeginTest("TestScenarioS15S502");
            this.Manager.Comment("reaching state \'S502\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S503\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1115\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1581;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1582;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1582 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1581);
            this.Manager.Comment("reaching state \'S1547\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1581, "policyHandle of OpenPolicy2, state S1547");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1582, "return of OpenPolicy2, state S1547");
            this.Manager.Comment("reaching state \'S1979\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1583;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1584;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1584 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1583);
            this.Manager.Comment("reaching state \'S2411\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1583, "trustHandle of CreateTrustedDomain, state S2411");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1584, "return of CreateTrustedDomain, state S2411");
            this.Manager.Comment("reaching state \'S2843\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1585;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1586;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1586 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1585);
            this.Manager.Comment("reaching state \'S3275\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1585, "trustHandle of OpenTrustedDomainByName, state S3275");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1586, "return of OpenTrustedDomainByName, state S3275");
            this.Manager.Comment("reaching state \'S3707\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1587;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1587 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4139\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1587, "return of SetTrustedDomainInfoByName, state S4139");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S504
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S504() {
            this.Manager.BeginTest("TestScenarioS15S504");
            this.Manager.Comment("reaching state \'S504\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S505\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1116\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1588;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1589;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1589 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1588);
            this.Manager.Comment("reaching state \'S1548\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1588, "policyHandle of OpenPolicy2, state S1548");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1589, "return of OpenPolicy2, state S1548");
            this.Manager.Comment("reaching state \'S1980\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1590;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1591;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1591 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1590);
            this.Manager.Comment("reaching state \'S2412\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1590, "trustHandle of CreateTrustedDomain, state S2412");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1591, "return of CreateTrustedDomain, state S2412");
            this.Manager.Comment("reaching state \'S2844\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1592;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1593;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1593 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1592);
            this.Manager.Comment("reaching state \'S3276\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1592, "trustHandle of OpenTrustedDomainByName, state S3276");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1593, "return of OpenTrustedDomainByName, state S3276");
            this.Manager.Comment("reaching state \'S3708\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1594;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1594 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4140\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1594, "return of SetTrustedDomainInfoByName, state S4140");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S506
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S506() {
            this.Manager.BeginTest("TestScenarioS15S506");
            this.Manager.Comment("reaching state \'S506\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S507\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1117\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1595;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1596;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1596 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1595);
            this.Manager.Comment("reaching state \'S1549\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1595, "policyHandle of OpenPolicy2, state S1549");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1596, "return of OpenPolicy2, state S1549");
            this.Manager.Comment("reaching state \'S1981\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1597;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1598;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1598 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1597);
            this.Manager.Comment("reaching state \'S2413\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1597, "trustHandle of CreateTrustedDomain, state S2413");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1598, "return of CreateTrustedDomain, state S2413");
            this.Manager.Comment("reaching state \'S2845\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1599;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1600;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1600 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1599);
            this.Manager.Comment("reaching state \'S3277\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1599, "trustHandle of OpenTrustedDomainByName, state S3277");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1600, "return of OpenTrustedDomainByName, state S3277");
            this.Manager.Comment("reaching state \'S3709\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1601;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1601 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4141\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1601, "return of SetTrustedDomainInfoByName, state S4141");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S508
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S508() {
            this.Manager.BeginTest("TestScenarioS15S508");
            this.Manager.Comment("reaching state \'S508\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S509\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1118\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1602;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1603;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1603 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1602);
            this.Manager.Comment("reaching state \'S1550\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1602, "policyHandle of OpenPolicy2, state S1550");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1603, "return of OpenPolicy2, state S1550");
            this.Manager.Comment("reaching state \'S1982\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1604;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1605;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1605 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1604);
            this.Manager.Comment("reaching state \'S2414\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1604, "trustHandle of CreateTrustedDomain, state S2414");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1605, "return of CreateTrustedDomain, state S2414");
            this.Manager.Comment("reaching state \'S2846\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1606;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1607;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1607 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1606);
            this.Manager.Comment("reaching state \'S3278\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1606, "trustHandle of OpenTrustedDomainByName, state S3278");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1607, "return of OpenTrustedDomainByName, state S3278");
            this.Manager.Comment("reaching state \'S3710\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1608;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp1608 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4142\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1608, "return of SetTrustedDomainInfoByName, state S4142");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S510
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S510() {
            this.Manager.BeginTest("TestScenarioS15S510");
            this.Manager.Comment("reaching state \'S510\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S511\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1119\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1609;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1610;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1610 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1609);
            this.Manager.Comment("reaching state \'S1551\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1609, "policyHandle of OpenPolicy2, state S1551");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1610, "return of OpenPolicy2, state S1551");
            this.Manager.Comment("reaching state \'S1983\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1611;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1612;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1612 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1611);
            this.Manager.Comment("reaching state \'S2415\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1611, "trustHandle of CreateTrustedDomain, state S2415");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1612, "return of CreateTrustedDomain, state S2415");
            this.Manager.Comment("reaching state \'S2847\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1613;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1614;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1614 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1613);
            this.Manager.Comment("reaching state \'S3279\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1613, "trustHandle of OpenTrustedDomainByName, state S3279");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1614, "return of OpenTrustedDomainByName, state S3279");
            this.Manager.Comment("reaching state \'S3711\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1615;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1615 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4143\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1615, "return of SetTrustedDomainInfoByName, state S4143");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S512
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S512() {
            this.Manager.BeginTest("TestScenarioS15S512");
            this.Manager.Comment("reaching state \'S512\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S513\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1120\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1616;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1617;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1617 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1616);
            this.Manager.Comment("reaching state \'S1552\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1616, "policyHandle of OpenPolicy2, state S1552");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1617, "return of OpenPolicy2, state S1552");
            this.Manager.Comment("reaching state \'S1984\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1618;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1619;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1619 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1618);
            this.Manager.Comment("reaching state \'S2416\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1618, "trustHandle of CreateTrustedDomain, state S2416");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1619, "return of CreateTrustedDomain, state S2416");
            this.Manager.Comment("reaching state \'S2848\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1620;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1621;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1621 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1620);
            this.Manager.Comment("reaching state \'S3280\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1620, "trustHandle of OpenTrustedDomainByName, state S3280");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1621, "return of OpenTrustedDomainByName, state S3280");
            this.Manager.Comment("reaching state \'S3712\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1622;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1622 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4144\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1622, "return of SetTrustedDomainInfoByName, state S4144");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S514
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S514() {
            this.Manager.BeginTest("TestScenarioS15S514");
            this.Manager.Comment("reaching state \'S514\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S515\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1121\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1623;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1624;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1624 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1623);
            this.Manager.Comment("reaching state \'S1553\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1623, "policyHandle of OpenPolicy2, state S1553");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1624, "return of OpenPolicy2, state S1553");
            this.Manager.Comment("reaching state \'S1985\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1625;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1626;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1626 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1625);
            this.Manager.Comment("reaching state \'S2417\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1625, "trustHandle of CreateTrustedDomain, state S2417");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1626, "return of CreateTrustedDomain, state S2417");
            this.Manager.Comment("reaching state \'S2849\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1627;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1628;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1628 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1627);
            this.Manager.Comment("reaching state \'S3281\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1627, "trustHandle of OpenTrustedDomainByName, state S3281");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1628, "return of OpenTrustedDomainByName, state S3281");
            this.Manager.Comment("reaching state \'S3713\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1629;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1629 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4145\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1629, "return of SetTrustedDomainInfoByName, state S4145");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S516
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S516() {
            this.Manager.BeginTest("TestScenarioS15S516");
            this.Manager.Comment("reaching state \'S516\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S517\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1122\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1630;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1631;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1631 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1630);
            this.Manager.Comment("reaching state \'S1554\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1630, "policyHandle of OpenPolicy2, state S1554");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1631, "return of OpenPolicy2, state S1554");
            this.Manager.Comment("reaching state \'S1986\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1632;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1633;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1633 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1632);
            this.Manager.Comment("reaching state \'S2418\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1632, "trustHandle of CreateTrustedDomain, state S2418");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1633, "return of CreateTrustedDomain, state S2418");
            this.Manager.Comment("reaching state \'S2850\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1634;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1635;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1635 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1634);
            this.Manager.Comment("reaching state \'S3282\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1634, "trustHandle of OpenTrustedDomainByName, state S3282");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1635, "return of OpenTrustedDomainByName, state S3282");
            this.Manager.Comment("reaching state \'S3714\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1636;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp1636 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4146\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1636, "return of SetTrustedDomainInfoByName, state S4146");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S518
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S518() {
            this.Manager.BeginTest("TestScenarioS15S518");
            this.Manager.Comment("reaching state \'S518\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S519\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1123\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1637;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1638;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1638 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1637);
            this.Manager.Comment("reaching state \'S1555\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1637, "policyHandle of OpenPolicy2, state S1555");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1638, "return of OpenPolicy2, state S1555");
            this.Manager.Comment("reaching state \'S1987\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1639;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1640;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1640 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1639);
            this.Manager.Comment("reaching state \'S2419\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1639, "trustHandle of CreateTrustedDomain, state S2419");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1640, "return of CreateTrustedDomain, state S2419");
            this.Manager.Comment("reaching state \'S2851\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1641;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1642;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1642 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1641);
            this.Manager.Comment("reaching state \'S3283\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1641, "trustHandle of OpenTrustedDomainByName, state S3283");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1642, "return of OpenTrustedDomainByName, state S3283");
            this.Manager.Comment("reaching state \'S3715\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1643;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp1643 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4147\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1643, "return of SetTrustedDomainInfoByName, state S4147");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S52
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S52() {
            this.Manager.BeginTest("TestScenarioS15S52");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S890\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1644;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1645;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1645 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1644);
            this.Manager.Comment("reaching state \'S1322\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1644, "policyHandle of OpenPolicy2, state S1322");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1645, "return of OpenPolicy2, state S1322");
            this.Manager.Comment("reaching state \'S1754\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1646;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1647;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1647 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1646);
            this.Manager.Comment("reaching state \'S2186\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1646, "trustHandle of CreateTrustedDomain, state S2186");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1647, "return of CreateTrustedDomain, state S2186");
            this.Manager.Comment("reaching state \'S2618\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1648;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1649;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1649 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1648);
            this.Manager.Comment("reaching state \'S3050\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1648, "trustHandle of OpenTrustedDomainByName, state S3050");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1649, "return of OpenTrustedDomainByName, state S3050");
            this.Manager.Comment("reaching state \'S3482\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1650;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp1650 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S3914\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1650, "return of SetTrustedDomainInfoByName, state S3914");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S520
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S520() {
            this.Manager.BeginTest("TestScenarioS15S520");
            this.Manager.Comment("reaching state \'S520\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S521\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1124\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1651;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1652;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1652 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1651);
            this.Manager.Comment("reaching state \'S1556\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1651, "policyHandle of OpenPolicy2, state S1556");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1652, "return of OpenPolicy2, state S1556");
            this.Manager.Comment("reaching state \'S1988\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1653;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1654;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1654 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1653);
            this.Manager.Comment("reaching state \'S2420\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1653, "trustHandle of CreateTrustedDomain, state S2420");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1654, "return of CreateTrustedDomain, state S2420");
            this.Manager.Comment("reaching state \'S2852\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1655;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1656;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1656 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1655);
            this.Manager.Comment("reaching state \'S3284\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1655, "trustHandle of OpenTrustedDomainByName, state S3284");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1656, "return of OpenTrustedDomainByName, state S3284");
            this.Manager.Comment("reaching state \'S3716\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1657;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1657 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4148\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1657, "return of SetTrustedDomainInfoByName, state S4148");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S522
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S522() {
            this.Manager.BeginTest("TestScenarioS15S522");
            this.Manager.Comment("reaching state \'S522\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S523\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1125\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1658;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1659;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1659 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1658);
            this.Manager.Comment("reaching state \'S1557\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1658, "policyHandle of OpenPolicy2, state S1557");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1659, "return of OpenPolicy2, state S1557");
            this.Manager.Comment("reaching state \'S1989\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1660;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1661;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1661 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1660);
            this.Manager.Comment("reaching state \'S2421\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1660, "trustHandle of CreateTrustedDomain, state S2421");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1661, "return of CreateTrustedDomain, state S2421");
            this.Manager.Comment("reaching state \'S2853\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1662;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1663;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1663 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1662);
            this.Manager.Comment("reaching state \'S3285\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1662, "trustHandle of OpenTrustedDomainByName, state S3285");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1663, "return of OpenTrustedDomainByName, state S3285");
            this.Manager.Comment("reaching state \'S3717\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1664;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1664 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4149\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1664, "return of SetTrustedDomainInfoByName, state S4149");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S524
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S524() {
            this.Manager.BeginTest("TestScenarioS15S524");
            this.Manager.Comment("reaching state \'S524\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S525\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1126\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1665;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1666;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1666 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1665);
            this.Manager.Comment("reaching state \'S1558\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1665, "policyHandle of OpenPolicy2, state S1558");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1666, "return of OpenPolicy2, state S1558");
            this.Manager.Comment("reaching state \'S1990\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1667;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1668;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1668 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1667);
            this.Manager.Comment("reaching state \'S2422\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1667, "trustHandle of CreateTrustedDomain, state S2422");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1668, "return of CreateTrustedDomain, state S2422");
            this.Manager.Comment("reaching state \'S2854\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1669;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1670;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1670 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1669);
            this.Manager.Comment("reaching state \'S3286\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1669, "trustHandle of OpenTrustedDomainByName, state S3286");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1670, "return of OpenTrustedDomainByName, state S3286");
            this.Manager.Comment("reaching state \'S3718\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1671;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1671 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4150\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1671, "return of SetTrustedDomainInfoByName, state S4150");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S526
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S526() {
            this.Manager.BeginTest("TestScenarioS15S526");
            this.Manager.Comment("reaching state \'S526\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S527\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1127\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1672;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1673;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1673 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1672);
            this.Manager.Comment("reaching state \'S1559\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1672, "policyHandle of OpenPolicy2, state S1559");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1673, "return of OpenPolicy2, state S1559");
            this.Manager.Comment("reaching state \'S1991\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1674;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1675;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1675 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1674);
            this.Manager.Comment("reaching state \'S2423\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1674, "trustHandle of CreateTrustedDomain, state S2423");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1675, "return of CreateTrustedDomain, state S2423");
            this.Manager.Comment("reaching state \'S2855\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1676;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1677;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1677 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1676);
            this.Manager.Comment("reaching state \'S3287\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1676, "trustHandle of OpenTrustedDomainByName, state S3287");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1677, "return of OpenTrustedDomainByName, state S3287");
            this.Manager.Comment("reaching state \'S3719\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1678;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1678 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4151\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1678, "return of SetTrustedDomainInfoByName, state S4151");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S528
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S528() {
            this.Manager.BeginTest("TestScenarioS15S528");
            this.Manager.Comment("reaching state \'S528\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S529\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1128\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1679;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1680;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1680 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1679);
            this.Manager.Comment("reaching state \'S1560\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1679, "policyHandle of OpenPolicy2, state S1560");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1680, "return of OpenPolicy2, state S1560");
            this.Manager.Comment("reaching state \'S1992\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1681;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1682;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1682 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1681);
            this.Manager.Comment("reaching state \'S2424\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1681, "trustHandle of CreateTrustedDomain, state S2424");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1682, "return of CreateTrustedDomain, state S2424");
            this.Manager.Comment("reaching state \'S2856\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1683;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1684;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1684 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1683);
            this.Manager.Comment("reaching state \'S3288\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1683, "trustHandle of OpenTrustedDomainByName, state S3288");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1684, "return of OpenTrustedDomainByName, state S3288");
            this.Manager.Comment("reaching state \'S3720\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1685;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp1685 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4152\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1685, "return of SetTrustedDomainInfoByName, state S4152");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S530
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S530() {
            this.Manager.BeginTest("TestScenarioS15S530");
            this.Manager.Comment("reaching state \'S530\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S531\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1129\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1686;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1687;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1687 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1686);
            this.Manager.Comment("reaching state \'S1561\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1686, "policyHandle of OpenPolicy2, state S1561");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1687, "return of OpenPolicy2, state S1561");
            this.Manager.Comment("reaching state \'S1993\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1688;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1689;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1689 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1688);
            this.Manager.Comment("reaching state \'S2425\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1688, "trustHandle of CreateTrustedDomain, state S2425");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1689, "return of CreateTrustedDomain, state S2425");
            this.Manager.Comment("reaching state \'S2857\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1690;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1691;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1691 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1690);
            this.Manager.Comment("reaching state \'S3289\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1690, "trustHandle of OpenTrustedDomainByName, state S3289");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1691, "return of OpenTrustedDomainByName, state S3289");
            this.Manager.Comment("reaching state \'S3721\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1692;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1692 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4153\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1692, "return of SetTrustedDomainInfoByName, state S4153");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S532
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S532() {
            this.Manager.BeginTest("TestScenarioS15S532");
            this.Manager.Comment("reaching state \'S532\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S533\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1130\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1693;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1694;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1694 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1693);
            this.Manager.Comment("reaching state \'S1562\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1693, "policyHandle of OpenPolicy2, state S1562");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1694, "return of OpenPolicy2, state S1562");
            this.Manager.Comment("reaching state \'S1994\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1695;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1696;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1696 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1695);
            this.Manager.Comment("reaching state \'S2426\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1695, "trustHandle of CreateTrustedDomain, state S2426");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1696, "return of CreateTrustedDomain, state S2426");
            this.Manager.Comment("reaching state \'S2858\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1697;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1698;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1698 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1697);
            this.Manager.Comment("reaching state \'S3290\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1697, "trustHandle of OpenTrustedDomainByName, state S3290");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1698, "return of OpenTrustedDomainByName, state S3290");
            this.Manager.Comment("reaching state \'S3722\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1699;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1699 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4154\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1699, "return of SetTrustedDomainInfoByName, state S4154");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S534
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S534() {
            this.Manager.BeginTest("TestScenarioS15S534");
            this.Manager.Comment("reaching state \'S534\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S535\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1131\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1700;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1701;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1701 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1700);
            this.Manager.Comment("reaching state \'S1563\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1700, "policyHandle of OpenPolicy2, state S1563");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1701, "return of OpenPolicy2, state S1563");
            this.Manager.Comment("reaching state \'S1995\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1702;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1703;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1703 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1702);
            this.Manager.Comment("reaching state \'S2427\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1702, "trustHandle of CreateTrustedDomain, state S2427");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1703, "return of CreateTrustedDomain, state S2427");
            this.Manager.Comment("reaching state \'S2859\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1704;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1705;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1705 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1704);
            this.Manager.Comment("reaching state \'S3291\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1704, "trustHandle of OpenTrustedDomainByName, state S3291");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1705, "return of OpenTrustedDomainByName, state S3291");
            this.Manager.Comment("reaching state \'S3723\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1706;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1706 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4155\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1706, "return of SetTrustedDomainInfoByName, state S4155");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S536
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S536() {
            this.Manager.BeginTest("TestScenarioS15S536");
            this.Manager.Comment("reaching state \'S536\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S537\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1132\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1707;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1708;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1708 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1707);
            this.Manager.Comment("reaching state \'S1564\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1707, "policyHandle of OpenPolicy2, state S1564");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1708, "return of OpenPolicy2, state S1564");
            this.Manager.Comment("reaching state \'S1996\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1709;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1710;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1710 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1709);
            this.Manager.Comment("reaching state \'S2428\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1709, "trustHandle of CreateTrustedDomain, state S2428");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1710, "return of CreateTrustedDomain, state S2428");
            this.Manager.Comment("reaching state \'S2860\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1711;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1712;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1712 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1711);
            this.Manager.Comment("reaching state \'S3292\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1711, "trustHandle of OpenTrustedDomainByName, state S3292");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1712, "return of OpenTrustedDomainByName, state S3292");
            this.Manager.Comment("reaching state \'S3724\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1713;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1713 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4156\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1713, "return of SetTrustedDomainInfoByName, state S4156");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S538
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S538() {
            this.Manager.BeginTest("TestScenarioS15S538");
            this.Manager.Comment("reaching state \'S538\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S539\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1133\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1714;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1715;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1715 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1714);
            this.Manager.Comment("reaching state \'S1565\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1714, "policyHandle of OpenPolicy2, state S1565");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1715, "return of OpenPolicy2, state S1565");
            this.Manager.Comment("reaching state \'S1997\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1716;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1717;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1717 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1716);
            this.Manager.Comment("reaching state \'S2429\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1716, "trustHandle of CreateTrustedDomain, state S2429");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1717, "return of CreateTrustedDomain, state S2429");
            this.Manager.Comment("reaching state \'S2861\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1718;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1719;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1719 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1718);
            this.Manager.Comment("reaching state \'S3293\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1718, "trustHandle of OpenTrustedDomainByName, state S3293");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1719, "return of OpenTrustedDomainByName, state S3293");
            this.Manager.Comment("reaching state \'S3725\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1720;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp1720 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4157\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1720, "return of SetTrustedDomainInfoByName, state S4157");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S54
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S54() {
            this.Manager.BeginTest("TestScenarioS15S54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S891\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1721;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1722;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1722 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1721);
            this.Manager.Comment("reaching state \'S1323\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1721, "policyHandle of OpenPolicy2, state S1323");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1722, "return of OpenPolicy2, state S1323");
            this.Manager.Comment("reaching state \'S1755\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1723;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1724;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1724 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1723);
            this.Manager.Comment("reaching state \'S2187\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1723, "trustHandle of CreateTrustedDomain, state S2187");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1724, "return of CreateTrustedDomain, state S2187");
            this.Manager.Comment("reaching state \'S2619\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1725;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1726;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1726 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1725);
            this.Manager.Comment("reaching state \'S3051\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1725, "trustHandle of OpenTrustedDomainByName, state S3051");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1726, "return of OpenTrustedDomainByName, state S3051");
            this.Manager.Comment("reaching state \'S3483\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1727;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp1727 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3915\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1727, "return of SetTrustedDomainInfoByName, state S3915");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S540
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S540() {
            this.Manager.BeginTest("TestScenarioS15S540");
            this.Manager.Comment("reaching state \'S540\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S541\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1134\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1728;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1729;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1729 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1728);
            this.Manager.Comment("reaching state \'S1566\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1728, "policyHandle of OpenPolicy2, state S1566");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1729, "return of OpenPolicy2, state S1566");
            this.Manager.Comment("reaching state \'S1998\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1730;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1731;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1731 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1730);
            this.Manager.Comment("reaching state \'S2430\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1730, "trustHandle of CreateTrustedDomain, state S2430");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1731, "return of CreateTrustedDomain, state S2430");
            this.Manager.Comment("reaching state \'S2862\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1732;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1733;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1733 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1732);
            this.Manager.Comment("reaching state \'S3294\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1732, "trustHandle of OpenTrustedDomainByName, state S3294");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1733, "return of OpenTrustedDomainByName, state S3294");
            this.Manager.Comment("reaching state \'S3726\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1734;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,Inva" +
                    "lid,True)\'");
            temp1734 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4158\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1734, "return of SetTrustedDomainInfoByName, state S4158");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S542
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S542() {
            this.Manager.BeginTest("TestScenarioS15S542");
            this.Manager.Comment("reaching state \'S542\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S543\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1135\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1735;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1736;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1736 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1735);
            this.Manager.Comment("reaching state \'S1567\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1735, "policyHandle of OpenPolicy2, state S1567");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1736, "return of OpenPolicy2, state S1567");
            this.Manager.Comment("reaching state \'S1999\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1737;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1738;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1738 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1737);
            this.Manager.Comment("reaching state \'S2431\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1737, "trustHandle of CreateTrustedDomain, state S2431");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1738, "return of CreateTrustedDomain, state S2431");
            this.Manager.Comment("reaching state \'S2863\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1739;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1740;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1740 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1739);
            this.Manager.Comment("reaching state \'S3295\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1739, "trustHandle of OpenTrustedDomainByName, state S3295");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1740, "return of OpenTrustedDomainByName, state S3295");
            this.Manager.Comment("reaching state \'S3727\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1741;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1741 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4159\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1741, "return of SetTrustedDomainInfoByName, state S4159");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S544
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S544() {
            this.Manager.BeginTest("TestScenarioS15S544");
            this.Manager.Comment("reaching state \'S544\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S545\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1136\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1742;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1743;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1743 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1742);
            this.Manager.Comment("reaching state \'S1568\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1742, "policyHandle of OpenPolicy2, state S1568");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1743, "return of OpenPolicy2, state S1568");
            this.Manager.Comment("reaching state \'S2000\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1744;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1745;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1745 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1744);
            this.Manager.Comment("reaching state \'S2432\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1744, "trustHandle of CreateTrustedDomain, state S2432");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1745, "return of CreateTrustedDomain, state S2432");
            this.Manager.Comment("reaching state \'S2864\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1746;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1747;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1747 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1746);
            this.Manager.Comment("reaching state \'S3296\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1746, "trustHandle of OpenTrustedDomainByName, state S3296");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1747, "return of OpenTrustedDomainByName, state S3296");
            this.Manager.Comment("reaching state \'S3728\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1748;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1748 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4160\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1748, "return of SetTrustedDomainInfoByName, state S4160");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S546
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S546() {
            this.Manager.BeginTest("TestScenarioS15S546");
            this.Manager.Comment("reaching state \'S546\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S547\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1137\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1749;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1750;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1750 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1749);
            this.Manager.Comment("reaching state \'S1569\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1749, "policyHandle of OpenPolicy2, state S1569");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1750, "return of OpenPolicy2, state S1569");
            this.Manager.Comment("reaching state \'S2001\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1751;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1752;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1752 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1751);
            this.Manager.Comment("reaching state \'S2433\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1751, "trustHandle of CreateTrustedDomain, state S2433");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1752, "return of CreateTrustedDomain, state S2433");
            this.Manager.Comment("reaching state \'S2865\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1753;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1754;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1754 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1753);
            this.Manager.Comment("reaching state \'S3297\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1753, "trustHandle of OpenTrustedDomainByName, state S3297");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1754, "return of OpenTrustedDomainByName, state S3297");
            this.Manager.Comment("reaching state \'S3729\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1755;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1755 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4161\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1755, "return of SetTrustedDomainInfoByName, state S4161");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S548
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S548() {
            this.Manager.BeginTest("TestScenarioS15S548");
            this.Manager.Comment("reaching state \'S548\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S549\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1138\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1756;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1757;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1757 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1756);
            this.Manager.Comment("reaching state \'S1570\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1756, "policyHandle of OpenPolicy2, state S1570");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1757, "return of OpenPolicy2, state S1570");
            this.Manager.Comment("reaching state \'S2002\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1758;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1759;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1759 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1758);
            this.Manager.Comment("reaching state \'S2434\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1758, "trustHandle of CreateTrustedDomain, state S2434");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1759, "return of CreateTrustedDomain, state S2434");
            this.Manager.Comment("reaching state \'S2866\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1760;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1761;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1761 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1760);
            this.Manager.Comment("reaching state \'S3298\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1760, "trustHandle of OpenTrustedDomainByName, state S3298");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1761, "return of OpenTrustedDomainByName, state S3298");
            this.Manager.Comment("reaching state \'S3730\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1762;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1762 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4162\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1762, "return of SetTrustedDomainInfoByName, state S4162");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S550
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S550() {
            this.Manager.BeginTest("TestScenarioS15S550");
            this.Manager.Comment("reaching state \'S550\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S551\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1139\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1763;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1764;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1764 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1763);
            this.Manager.Comment("reaching state \'S1571\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1763, "policyHandle of OpenPolicy2, state S1571");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1764, "return of OpenPolicy2, state S1571");
            this.Manager.Comment("reaching state \'S2003\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1765;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1766;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1766 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1765);
            this.Manager.Comment("reaching state \'S2435\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1765, "trustHandle of CreateTrustedDomain, state S2435");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1766, "return of CreateTrustedDomain, state S2435");
            this.Manager.Comment("reaching state \'S2867\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1767;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1768;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1768 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1767);
            this.Manager.Comment("reaching state \'S3299\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1767, "trustHandle of OpenTrustedDomainByName, state S3299");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1768, "return of OpenTrustedDomainByName, state S3299");
            this.Manager.Comment("reaching state \'S3731\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1769;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1769 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4163\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1769, "return of SetTrustedDomainInfoByName, state S4163");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S552
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S552() {
            this.Manager.BeginTest("TestScenarioS15S552");
            this.Manager.Comment("reaching state \'S552\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S553\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1140\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1770;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1771;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1771 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1770);
            this.Manager.Comment("reaching state \'S1572\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1770, "policyHandle of OpenPolicy2, state S1572");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1771, "return of OpenPolicy2, state S1572");
            this.Manager.Comment("reaching state \'S2004\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1772;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1773;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1773 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1772);
            this.Manager.Comment("reaching state \'S2436\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1772, "trustHandle of CreateTrustedDomain, state S2436");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1773, "return of CreateTrustedDomain, state S2436");
            this.Manager.Comment("reaching state \'S2868\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1774;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1775;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1775 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1774);
            this.Manager.Comment("reaching state \'S3300\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1774, "trustHandle of OpenTrustedDomainByName, state S3300");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1775, "return of OpenTrustedDomainByName, state S3300");
            this.Manager.Comment("reaching state \'S3732\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1776;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1776 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4164\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1776, "return of SetTrustedDomainInfoByName, state S4164");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S554
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S554() {
            this.Manager.BeginTest("TestScenarioS15S554");
            this.Manager.Comment("reaching state \'S554\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S555\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1141\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1777;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1778;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1778 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1777);
            this.Manager.Comment("reaching state \'S1573\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1777, "policyHandle of OpenPolicy2, state S1573");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1778, "return of OpenPolicy2, state S1573");
            this.Manager.Comment("reaching state \'S2005\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1779;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1780;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1780 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1779);
            this.Manager.Comment("reaching state \'S2437\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1779, "trustHandle of CreateTrustedDomain, state S2437");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1780, "return of CreateTrustedDomain, state S2437");
            this.Manager.Comment("reaching state \'S2869\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1781;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1782;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1782 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1781);
            this.Manager.Comment("reaching state \'S3301\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1781, "trustHandle of OpenTrustedDomainByName, state S3301");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1782, "return of OpenTrustedDomainByName, state S3301");
            this.Manager.Comment("reaching state \'S3733\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1783;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1783 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4165\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1783, "return of SetTrustedDomainInfoByName, state S4165");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S556
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S556() {
            this.Manager.BeginTest("TestScenarioS15S556");
            this.Manager.Comment("reaching state \'S556\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S557\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1142\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1784;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1785;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1785 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1784);
            this.Manager.Comment("reaching state \'S1574\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1784, "policyHandle of OpenPolicy2, state S1574");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1785, "return of OpenPolicy2, state S1574");
            this.Manager.Comment("reaching state \'S2006\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1786;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1787;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1787 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1786);
            this.Manager.Comment("reaching state \'S2438\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1786, "trustHandle of CreateTrustedDomain, state S2438");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1787, "return of CreateTrustedDomain, state S2438");
            this.Manager.Comment("reaching state \'S2870\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1788;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1789;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1789 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1788);
            this.Manager.Comment("reaching state \'S3302\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1788, "trustHandle of OpenTrustedDomainByName, state S3302");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1789, "return of OpenTrustedDomainByName, state S3302");
            this.Manager.Comment("reaching state \'S3734\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1790;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp1790 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4166\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1790, "return of SetTrustedDomainInfoByName, state S4166");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S558
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S558() {
            this.Manager.BeginTest("TestScenarioS15S558");
            this.Manager.Comment("reaching state \'S558\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S559\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1143\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1791;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1792;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1792 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1791);
            this.Manager.Comment("reaching state \'S1575\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1791, "policyHandle of OpenPolicy2, state S1575");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1792, "return of OpenPolicy2, state S1575");
            this.Manager.Comment("reaching state \'S2007\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1793;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1794;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1794 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1793);
            this.Manager.Comment("reaching state \'S2439\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1793, "trustHandle of CreateTrustedDomain, state S2439");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1794, "return of CreateTrustedDomain, state S2439");
            this.Manager.Comment("reaching state \'S2871\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1795;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1796;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1796 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1795);
            this.Manager.Comment("reaching state \'S3303\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1795, "trustHandle of OpenTrustedDomainByName, state S3303");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1796, "return of OpenTrustedDomainByName, state S3303");
            this.Manager.Comment("reaching state \'S3735\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1797;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp1797 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4167\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1797, "return of SetTrustedDomainInfoByName, state S4167");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S56
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S56() {
            this.Manager.BeginTest("TestScenarioS15S56");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S892\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1798;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1799;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1799 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1798);
            this.Manager.Comment("reaching state \'S1324\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1798, "policyHandle of OpenPolicy2, state S1324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1799, "return of OpenPolicy2, state S1324");
            this.Manager.Comment("reaching state \'S1756\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1800;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1801;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1801 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1800);
            this.Manager.Comment("reaching state \'S2188\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1800, "trustHandle of CreateTrustedDomain, state S2188");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1801, "return of CreateTrustedDomain, state S2188");
            this.Manager.Comment("reaching state \'S2620\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1802;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1803;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1803 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1802);
            this.Manager.Comment("reaching state \'S3052\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1802, "trustHandle of OpenTrustedDomainByName, state S3052");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1803, "return of OpenTrustedDomainByName, state S3052");
            this.Manager.Comment("reaching state \'S3484\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1804;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1804 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S3916\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1804, "return of SetTrustedDomainInfoByName, state S3916");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S560
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S560() {
            this.Manager.BeginTest("TestScenarioS15S560");
            this.Manager.Comment("reaching state \'S560\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S561\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1144\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1805;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1806;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1806 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1805);
            this.Manager.Comment("reaching state \'S1576\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1805, "policyHandle of OpenPolicy2, state S1576");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1806, "return of OpenPolicy2, state S1576");
            this.Manager.Comment("reaching state \'S2008\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1807;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1808;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1808 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1807);
            this.Manager.Comment("reaching state \'S2440\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1807, "trustHandle of CreateTrustedDomain, state S2440");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1808, "return of CreateTrustedDomain, state S2440");
            this.Manager.Comment("reaching state \'S2872\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1809;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1810;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1810 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1809);
            this.Manager.Comment("reaching state \'S3304\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1809, "trustHandle of OpenTrustedDomainByName, state S3304");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1810, "return of OpenTrustedDomainByName, state S3304");
            this.Manager.Comment("reaching state \'S3736\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1811;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp1811 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4168\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1811, "return of SetTrustedDomainInfoByName, state S4168");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S562
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S562() {
            this.Manager.BeginTest("TestScenarioS15S562");
            this.Manager.Comment("reaching state \'S562\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S563\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1145\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1812;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1813;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1813 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1812);
            this.Manager.Comment("reaching state \'S1577\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1812, "policyHandle of OpenPolicy2, state S1577");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1813, "return of OpenPolicy2, state S1577");
            this.Manager.Comment("reaching state \'S2009\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1814;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1815;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1815 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1814);
            this.Manager.Comment("reaching state \'S2441\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1814, "trustHandle of CreateTrustedDomain, state S2441");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1815, "return of CreateTrustedDomain, state S2441");
            this.Manager.Comment("reaching state \'S2873\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1816;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1817;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1817 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1816);
            this.Manager.Comment("reaching state \'S3305\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1816, "trustHandle of OpenTrustedDomainByName, state S3305");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1817, "return of OpenTrustedDomainByName, state S3305");
            this.Manager.Comment("reaching state \'S3737\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1818;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1818 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4169\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1818, "return of SetTrustedDomainInfoByName, state S4169");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S564
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S564() {
            this.Manager.BeginTest("TestScenarioS15S564");
            this.Manager.Comment("reaching state \'S564\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S565\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1146\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1819;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1820;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1820 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1819);
            this.Manager.Comment("reaching state \'S1578\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1819, "policyHandle of OpenPolicy2, state S1578");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1820, "return of OpenPolicy2, state S1578");
            this.Manager.Comment("reaching state \'S2010\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1821;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1822;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1822 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1821);
            this.Manager.Comment("reaching state \'S2442\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1821, "trustHandle of CreateTrustedDomain, state S2442");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1822, "return of CreateTrustedDomain, state S2442");
            this.Manager.Comment("reaching state \'S2874\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1823;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1824;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1824 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1823);
            this.Manager.Comment("reaching state \'S3306\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1823, "trustHandle of OpenTrustedDomainByName, state S3306");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1824, "return of OpenTrustedDomainByName, state S3306");
            this.Manager.Comment("reaching state \'S3738\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1825;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp1825 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4170\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1825, "return of SetTrustedDomainInfoByName, state S4170");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S566
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S566() {
            this.Manager.BeginTest("TestScenarioS15S566");
            this.Manager.Comment("reaching state \'S566\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S567\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1147\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1826;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1827;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1827 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1826);
            this.Manager.Comment("reaching state \'S1579\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1826, "policyHandle of OpenPolicy2, state S1579");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1827, "return of OpenPolicy2, state S1579");
            this.Manager.Comment("reaching state \'S2011\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1828;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1829;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1829 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1828);
            this.Manager.Comment("reaching state \'S2443\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1828, "trustHandle of CreateTrustedDomain, state S2443");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1829, "return of CreateTrustedDomain, state S2443");
            this.Manager.Comment("reaching state \'S2875\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1830;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1831;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1831 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1830);
            this.Manager.Comment("reaching state \'S3307\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1830, "trustHandle of OpenTrustedDomainByName, state S3307");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1831, "return of OpenTrustedDomainByName, state S3307");
            this.Manager.Comment("reaching state \'S3739\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1832;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp1832 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4171\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1832, "return of SetTrustedDomainInfoByName, state S4171");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S568
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S568() {
            this.Manager.BeginTest("TestScenarioS15S568");
            this.Manager.Comment("reaching state \'S568\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S569\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1148\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1833;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1834;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1834 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1833);
            this.Manager.Comment("reaching state \'S1580\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1833, "policyHandle of OpenPolicy2, state S1580");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1834, "return of OpenPolicy2, state S1580");
            this.Manager.Comment("reaching state \'S2012\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1835;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1836;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1836 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1835);
            this.Manager.Comment("reaching state \'S2444\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1835, "trustHandle of CreateTrustedDomain, state S2444");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1836, "return of CreateTrustedDomain, state S2444");
            this.Manager.Comment("reaching state \'S2876\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1837;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1838;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1838 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1837);
            this.Manager.Comment("reaching state \'S3308\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1837, "trustHandle of OpenTrustedDomainByName, state S3308");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1838, "return of OpenTrustedDomainByName, state S3308");
            this.Manager.Comment("reaching state \'S3740\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1839;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp1839 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4172\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1839, "return of SetTrustedDomainInfoByName, state S4172");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S570
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S570() {
            this.Manager.BeginTest("TestScenarioS15S570");
            this.Manager.Comment("reaching state \'S570\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S571\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1149\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1840;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1841;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1841 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1840);
            this.Manager.Comment("reaching state \'S1581\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1840, "policyHandle of OpenPolicy2, state S1581");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1841, "return of OpenPolicy2, state S1581");
            this.Manager.Comment("reaching state \'S2013\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1842;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1843;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1843 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1842);
            this.Manager.Comment("reaching state \'S2445\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1842, "trustHandle of CreateTrustedDomain, state S2445");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1843, "return of CreateTrustedDomain, state S2445");
            this.Manager.Comment("reaching state \'S2877\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1844;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1845;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1845 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1844);
            this.Manager.Comment("reaching state \'S3309\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1844, "trustHandle of OpenTrustedDomainByName, state S3309");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1845, "return of OpenTrustedDomainByName, state S3309");
            this.Manager.Comment("reaching state \'S3741\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1846;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,Inva" +
                    "lid,True)\'");
            temp1846 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4173\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1846, "return of SetTrustedDomainInfoByName, state S4173");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S572
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S572() {
            this.Manager.BeginTest("TestScenarioS15S572");
            this.Manager.Comment("reaching state \'S572\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S573\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1150\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1847;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1848;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1848 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1847);
            this.Manager.Comment("reaching state \'S1582\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1847, "policyHandle of OpenPolicy2, state S1582");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1848, "return of OpenPolicy2, state S1582");
            this.Manager.Comment("reaching state \'S2014\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1849;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1850;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1850 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1849);
            this.Manager.Comment("reaching state \'S2446\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1849, "trustHandle of CreateTrustedDomain, state S2446");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1850, "return of CreateTrustedDomain, state S2446");
            this.Manager.Comment("reaching state \'S2878\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1851;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1852;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1852 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1851);
            this.Manager.Comment("reaching state \'S3310\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1851, "trustHandle of OpenTrustedDomainByName, state S3310");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1852, "return of OpenTrustedDomainByName, state S3310");
            this.Manager.Comment("reaching state \'S3742\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1853;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1853 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4174\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1853, "return of SetTrustedDomainInfoByName, state S4174");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S574
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S574() {
            this.Manager.BeginTest("TestScenarioS15S574");
            this.Manager.Comment("reaching state \'S574\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S575\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1151\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1854;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1855;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1855 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1854);
            this.Manager.Comment("reaching state \'S1583\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1854, "policyHandle of OpenPolicy2, state S1583");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1855, "return of OpenPolicy2, state S1583");
            this.Manager.Comment("reaching state \'S2015\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1856;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1857;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1857 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1856);
            this.Manager.Comment("reaching state \'S2447\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1856, "trustHandle of CreateTrustedDomain, state S2447");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1857, "return of CreateTrustedDomain, state S2447");
            this.Manager.Comment("reaching state \'S2879\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1858;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1859;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1859 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1858);
            this.Manager.Comment("reaching state \'S3311\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1858, "trustHandle of OpenTrustedDomainByName, state S3311");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1859, "return of OpenTrustedDomainByName, state S3311");
            this.Manager.Comment("reaching state \'S3743\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1860;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1860 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4175\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1860, "return of SetTrustedDomainInfoByName, state S4175");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S576
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S576() {
            this.Manager.BeginTest("TestScenarioS15S576");
            this.Manager.Comment("reaching state \'S576\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S577\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1152\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1861;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1862;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1862 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1861);
            this.Manager.Comment("reaching state \'S1584\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1861, "policyHandle of OpenPolicy2, state S1584");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1862, "return of OpenPolicy2, state S1584");
            this.Manager.Comment("reaching state \'S2016\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1863;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1864;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1864 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1863);
            this.Manager.Comment("reaching state \'S2448\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1863, "trustHandle of CreateTrustedDomain, state S2448");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1864, "return of CreateTrustedDomain, state S2448");
            this.Manager.Comment("reaching state \'S2880\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1865;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1866;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1866 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1865);
            this.Manager.Comment("reaching state \'S3312\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1865, "trustHandle of OpenTrustedDomainByName, state S3312");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1866, "return of OpenTrustedDomainByName, state S3312");
            this.Manager.Comment("reaching state \'S3744\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1867;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1867 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4176\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1867, "return of SetTrustedDomainInfoByName, state S4176");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S578
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S578() {
            this.Manager.BeginTest("TestScenarioS15S578");
            this.Manager.Comment("reaching state \'S578\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S579\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1153\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1868;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1869;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1869 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1868);
            this.Manager.Comment("reaching state \'S1585\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1868, "policyHandle of OpenPolicy2, state S1585");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1869, "return of OpenPolicy2, state S1585");
            this.Manager.Comment("reaching state \'S2017\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1870;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1871;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1871 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1870);
            this.Manager.Comment("reaching state \'S2449\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1870, "trustHandle of CreateTrustedDomain, state S2449");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1871, "return of CreateTrustedDomain, state S2449");
            this.Manager.Comment("reaching state \'S2881\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1872;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1873;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1873 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1872);
            this.Manager.Comment("reaching state \'S3313\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1872, "trustHandle of OpenTrustedDomainByName, state S3313");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1873, "return of OpenTrustedDomainByName, state S3313");
            this.Manager.Comment("reaching state \'S3745\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1874;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1874 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4177\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1874, "return of SetTrustedDomainInfoByName, state S4177");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S58
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S58() {
            this.Manager.BeginTest("TestScenarioS15S58");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S893\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1875;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1876;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1876 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1875);
            this.Manager.Comment("reaching state \'S1325\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1875, "policyHandle of OpenPolicy2, state S1325");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1876, "return of OpenPolicy2, state S1325");
            this.Manager.Comment("reaching state \'S1757\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1877;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1878;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1878 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1877);
            this.Manager.Comment("reaching state \'S2189\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1877, "trustHandle of CreateTrustedDomain, state S2189");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1878, "return of CreateTrustedDomain, state S2189");
            this.Manager.Comment("reaching state \'S2621\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1879;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1880;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1880 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1879);
            this.Manager.Comment("reaching state \'S3053\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1879, "trustHandle of OpenTrustedDomainByName, state S3053");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1880, "return of OpenTrustedDomainByName, state S3053");
            this.Manager.Comment("reaching state \'S3485\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1881;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp1881 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S3917\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1881, "return of SetTrustedDomainInfoByName, state S3917");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S580
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S580() {
            this.Manager.BeginTest("TestScenarioS15S580");
            this.Manager.Comment("reaching state \'S580\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S581\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1154\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1882;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1883;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1883 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1882);
            this.Manager.Comment("reaching state \'S1586\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1882, "policyHandle of OpenPolicy2, state S1586");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1883, "return of OpenPolicy2, state S1586");
            this.Manager.Comment("reaching state \'S2018\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1884;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1885;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1885 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1884);
            this.Manager.Comment("reaching state \'S2450\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1884, "trustHandle of CreateTrustedDomain, state S2450");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1885, "return of CreateTrustedDomain, state S2450");
            this.Manager.Comment("reaching state \'S2882\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1886;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1887;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1887 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1886);
            this.Manager.Comment("reaching state \'S3314\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1886, "trustHandle of OpenTrustedDomainByName, state S3314");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1887, "return of OpenTrustedDomainByName, state S3314");
            this.Manager.Comment("reaching state \'S3746\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1888;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp1888 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4178\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1888, "return of SetTrustedDomainInfoByName, state S4178");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S582
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S582() {
            this.Manager.BeginTest("TestScenarioS15S582");
            this.Manager.Comment("reaching state \'S582\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S583\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1155\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1889;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1890;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1890 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1889);
            this.Manager.Comment("reaching state \'S1587\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1889, "policyHandle of OpenPolicy2, state S1587");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1890, "return of OpenPolicy2, state S1587");
            this.Manager.Comment("reaching state \'S2019\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1891;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1892;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1892 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1891);
            this.Manager.Comment("reaching state \'S2451\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1891, "trustHandle of CreateTrustedDomain, state S2451");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1892, "return of CreateTrustedDomain, state S2451");
            this.Manager.Comment("reaching state \'S2883\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1893;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1894;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1894 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1893);
            this.Manager.Comment("reaching state \'S3315\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1893, "trustHandle of OpenTrustedDomainByName, state S3315");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1894, "return of OpenTrustedDomainByName, state S3315");
            this.Manager.Comment("reaching state \'S3747\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1895;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1895 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4179\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1895, "return of SetTrustedDomainInfoByName, state S4179");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S584
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S584() {
            this.Manager.BeginTest("TestScenarioS15S584");
            this.Manager.Comment("reaching state \'S584\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S585\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1156\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1896;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1897;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1897 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1896);
            this.Manager.Comment("reaching state \'S1588\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1896, "policyHandle of OpenPolicy2, state S1588");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1897, "return of OpenPolicy2, state S1588");
            this.Manager.Comment("reaching state \'S2020\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1898;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1899;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1899 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1898);
            this.Manager.Comment("reaching state \'S2452\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1898, "trustHandle of CreateTrustedDomain, state S2452");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1899, "return of CreateTrustedDomain, state S2452");
            this.Manager.Comment("reaching state \'S2884\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1900;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1901;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1901 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1900);
            this.Manager.Comment("reaching state \'S3316\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1900, "trustHandle of OpenTrustedDomainByName, state S3316");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1901, "return of OpenTrustedDomainByName, state S3316");
            this.Manager.Comment("reaching state \'S3748\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1902;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1902 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4180\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1902, "return of SetTrustedDomainInfoByName, state S4180");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S586
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S586() {
            this.Manager.BeginTest("TestScenarioS15S586");
            this.Manager.Comment("reaching state \'S586\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S587\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1157\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1903;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1904;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1904 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1903);
            this.Manager.Comment("reaching state \'S1589\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1903, "policyHandle of OpenPolicy2, state S1589");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1904, "return of OpenPolicy2, state S1589");
            this.Manager.Comment("reaching state \'S2021\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1905;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1906;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1906 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1905);
            this.Manager.Comment("reaching state \'S2453\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1905, "trustHandle of CreateTrustedDomain, state S2453");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1906, "return of CreateTrustedDomain, state S2453");
            this.Manager.Comment("reaching state \'S2885\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1907;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1908;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1908 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1907);
            this.Manager.Comment("reaching state \'S3317\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1907, "trustHandle of OpenTrustedDomainByName, state S3317");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1908, "return of OpenTrustedDomainByName, state S3317");
            this.Manager.Comment("reaching state \'S3749\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1909;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp1909 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4181\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1909, "return of SetTrustedDomainInfoByName, state S4181");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S588
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S588() {
            this.Manager.BeginTest("TestScenarioS15S588");
            this.Manager.Comment("reaching state \'S588\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S589\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1158\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1910;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1911;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1911 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1910);
            this.Manager.Comment("reaching state \'S1590\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1910, "policyHandle of OpenPolicy2, state S1590");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1911, "return of OpenPolicy2, state S1590");
            this.Manager.Comment("reaching state \'S2022\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1912;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1913;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1913 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1912);
            this.Manager.Comment("reaching state \'S2454\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1912, "trustHandle of CreateTrustedDomain, state S2454");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1913, "return of CreateTrustedDomain, state S2454");
            this.Manager.Comment("reaching state \'S2886\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1914;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1915;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1915 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1914);
            this.Manager.Comment("reaching state \'S3318\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1914, "trustHandle of OpenTrustedDomainByName, state S3318");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1915, "return of OpenTrustedDomainByName, state S3318");
            this.Manager.Comment("reaching state \'S3750\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1916;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp1916 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4182\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1916, "return of SetTrustedDomainInfoByName, state S4182");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S590
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S590() {
            this.Manager.BeginTest("TestScenarioS15S590");
            this.Manager.Comment("reaching state \'S590\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S591\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1159\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1917;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1918;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1918 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1917);
            this.Manager.Comment("reaching state \'S1591\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1917, "policyHandle of OpenPolicy2, state S1591");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1918, "return of OpenPolicy2, state S1591");
            this.Manager.Comment("reaching state \'S2023\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1919;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1920;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1920 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1919);
            this.Manager.Comment("reaching state \'S2455\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1919, "trustHandle of CreateTrustedDomain, state S2455");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1920, "return of CreateTrustedDomain, state S2455");
            this.Manager.Comment("reaching state \'S2887\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1921;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1922;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1922 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1921);
            this.Manager.Comment("reaching state \'S3319\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1921, "trustHandle of OpenTrustedDomainByName, state S3319");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1922, "return of OpenTrustedDomainByName, state S3319");
            this.Manager.Comment("reaching state \'S3751\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1923;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp1923 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4183\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1923, "return of SetTrustedDomainInfoByName, state S4183");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S592
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S592() {
            this.Manager.BeginTest("TestScenarioS15S592");
            this.Manager.Comment("reaching state \'S592\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S593\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1160\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1924;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1925;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1925 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1924);
            this.Manager.Comment("reaching state \'S1592\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1924, "policyHandle of OpenPolicy2, state S1592");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1925, "return of OpenPolicy2, state S1592");
            this.Manager.Comment("reaching state \'S2024\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1926;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1927;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1927 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1926);
            this.Manager.Comment("reaching state \'S2456\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1926, "trustHandle of CreateTrustedDomain, state S2456");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1927, "return of CreateTrustedDomain, state S2456");
            this.Manager.Comment("reaching state \'S2888\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1928;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1929;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1929 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1928);
            this.Manager.Comment("reaching state \'S3320\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1928, "trustHandle of OpenTrustedDomainByName, state S3320");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1929, "return of OpenTrustedDomainByName, state S3320");
            this.Manager.Comment("reaching state \'S3752\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1930;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp1930 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4184\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1930, "return of SetTrustedDomainInfoByName, state S4184");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S594
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S594() {
            this.Manager.BeginTest("TestScenarioS15S594");
            this.Manager.Comment("reaching state \'S594\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S595\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1161\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1931;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1932;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1932 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1931);
            this.Manager.Comment("reaching state \'S1593\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1931, "policyHandle of OpenPolicy2, state S1593");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1932, "return of OpenPolicy2, state S1593");
            this.Manager.Comment("reaching state \'S2025\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1933;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1934;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1934 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1933);
            this.Manager.Comment("reaching state \'S2457\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1933, "trustHandle of CreateTrustedDomain, state S2457");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1934, "return of CreateTrustedDomain, state S2457");
            this.Manager.Comment("reaching state \'S2889\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1935;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1936;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1936 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1935);
            this.Manager.Comment("reaching state \'S3321\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1935, "trustHandle of OpenTrustedDomainByName, state S3321");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1936, "return of OpenTrustedDomainByName, state S3321");
            this.Manager.Comment("reaching state \'S3753\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1937;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp1937 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4185\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1937, "return of SetTrustedDomainInfoByName, state S4185");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S596
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S596() {
            this.Manager.BeginTest("TestScenarioS15S596");
            this.Manager.Comment("reaching state \'S596\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S597\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1162\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1938;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1939;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1939 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1938);
            this.Manager.Comment("reaching state \'S1594\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1938, "policyHandle of OpenPolicy2, state S1594");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1939, "return of OpenPolicy2, state S1594");
            this.Manager.Comment("reaching state \'S2026\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1940;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1941;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1941 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1940);
            this.Manager.Comment("reaching state \'S2458\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1940, "trustHandle of CreateTrustedDomain, state S2458");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1941, "return of CreateTrustedDomain, state S2458");
            this.Manager.Comment("reaching state \'S2890\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1942;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1943;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1943 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1942);
            this.Manager.Comment("reaching state \'S3322\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1942, "trustHandle of OpenTrustedDomainByName, state S3322");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1943, "return of OpenTrustedDomainByName, state S3322");
            this.Manager.Comment("reaching state \'S3754\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1944;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp1944 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4186\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1944, "return of SetTrustedDomainInfoByName, state S4186");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S598
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S598() {
            this.Manager.BeginTest("TestScenarioS15S598");
            this.Manager.Comment("reaching state \'S598\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S599\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1163\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1945;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1946;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1946 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1945);
            this.Manager.Comment("reaching state \'S1595\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1945, "policyHandle of OpenPolicy2, state S1595");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1946, "return of OpenPolicy2, state S1595");
            this.Manager.Comment("reaching state \'S2027\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1947;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1948;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1948 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1947);
            this.Manager.Comment("reaching state \'S2459\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1947, "trustHandle of CreateTrustedDomain, state S2459");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1948, "return of CreateTrustedDomain, state S2459");
            this.Manager.Comment("reaching state \'S2891\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1949;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1950;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1950 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1949);
            this.Manager.Comment("reaching state \'S3323\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1949, "trustHandle of OpenTrustedDomainByName, state S3323");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1950, "return of OpenTrustedDomainByName, state S3323");
            this.Manager.Comment("reaching state \'S3755\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1951;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,Inv" +
                    "alid,True)\'");
            temp1951 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4187\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1951, "return of SetTrustedDomainInfoByName, state S4187");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S6
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S6() {
            this.Manager.BeginTest("TestScenarioS15S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S867\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1952;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1953;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1953 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1952);
            this.Manager.Comment("reaching state \'S1299\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1952, "policyHandle of OpenPolicy2, state S1299");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1953, "return of OpenPolicy2, state S1299");
            this.Manager.Comment("reaching state \'S1731\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1954;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1955;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1955 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1954);
            this.Manager.Comment("reaching state \'S2163\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1954, "trustHandle of CreateTrustedDomain, state S2163");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1955, "return of CreateTrustedDomain, state S2163");
            this.Manager.Comment("reaching state \'S2595\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1956;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1957;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1957 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1956);
            this.Manager.Comment("reaching state \'S3027\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1956, "trustHandle of OpenTrustedDomainByName, state S3027");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1957, "return of OpenTrustedDomainByName, state S3027");
            this.Manager.Comment("reaching state \'S3459\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1958;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp1958 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3891\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1958, "return of SetTrustedDomainInfoByName, state S3891");
            TestScenarioS15S4322();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S60
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S60() {
            this.Manager.BeginTest("TestScenarioS15S60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S894\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1959;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1960;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1960 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1959);
            this.Manager.Comment("reaching state \'S1326\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1959, "policyHandle of OpenPolicy2, state S1326");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1960, "return of OpenPolicy2, state S1326");
            this.Manager.Comment("reaching state \'S1758\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1961;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1962;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1962 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1961);
            this.Manager.Comment("reaching state \'S2190\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1961, "trustHandle of CreateTrustedDomain, state S2190");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1962, "return of CreateTrustedDomain, state S2190");
            this.Manager.Comment("reaching state \'S2622\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1963;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1964;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1964 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1963);
            this.Manager.Comment("reaching state \'S3054\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1963, "trustHandle of OpenTrustedDomainByName, state S3054");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1964, "return of OpenTrustedDomainByName, state S3054");
            this.Manager.Comment("reaching state \'S3486\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1965;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp1965 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3918\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1965, "return of SetTrustedDomainInfoByName, state S3918");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S600
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S600() {
            this.Manager.BeginTest("TestScenarioS15S600");
            this.Manager.Comment("reaching state \'S600\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S601\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1164\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1966;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1967;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1967 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1966);
            this.Manager.Comment("reaching state \'S1596\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1966, "policyHandle of OpenPolicy2, state S1596");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1967, "return of OpenPolicy2, state S1596");
            this.Manager.Comment("reaching state \'S2028\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1968;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1969;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1969 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1968);
            this.Manager.Comment("reaching state \'S2460\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1968, "trustHandle of CreateTrustedDomain, state S2460");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1969, "return of CreateTrustedDomain, state S2460");
            this.Manager.Comment("reaching state \'S2892\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1970;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1971;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1971 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1970);
            this.Manager.Comment("reaching state \'S3324\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1970, "trustHandle of OpenTrustedDomainByName, state S3324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1971, "return of OpenTrustedDomainByName, state S3324");
            this.Manager.Comment("reaching state \'S3756\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1972;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp1972 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4188\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1972, "return of SetTrustedDomainInfoByName, state S4188");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S602
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S602() {
            this.Manager.BeginTest("TestScenarioS15S602");
            this.Manager.Comment("reaching state \'S602\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S603\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1165\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1973;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1974;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1974 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1973);
            this.Manager.Comment("reaching state \'S1597\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1973, "policyHandle of OpenPolicy2, state S1597");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1974, "return of OpenPolicy2, state S1597");
            this.Manager.Comment("reaching state \'S2029\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1975;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1976;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1976 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1975);
            this.Manager.Comment("reaching state \'S2461\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1975, "trustHandle of CreateTrustedDomain, state S2461");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1976, "return of CreateTrustedDomain, state S2461");
            this.Manager.Comment("reaching state \'S2893\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1977;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1978;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1978 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1977);
            this.Manager.Comment("reaching state \'S3325\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1977, "trustHandle of OpenTrustedDomainByName, state S3325");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1978, "return of OpenTrustedDomainByName, state S3325");
            this.Manager.Comment("reaching state \'S3757\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1979;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp1979 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4189\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1979, "return of SetTrustedDomainInfoByName, state S4189");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S604
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S604() {
            this.Manager.BeginTest("TestScenarioS15S604");
            this.Manager.Comment("reaching state \'S604\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S605\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1166\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1980;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1981;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1981 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1980);
            this.Manager.Comment("reaching state \'S1598\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1980, "policyHandle of OpenPolicy2, state S1598");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1981, "return of OpenPolicy2, state S1598");
            this.Manager.Comment("reaching state \'S2030\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1982;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1983;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1983 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1982);
            this.Manager.Comment("reaching state \'S2462\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1982, "trustHandle of CreateTrustedDomain, state S2462");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1983, "return of CreateTrustedDomain, state S2462");
            this.Manager.Comment("reaching state \'S2894\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1984;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1985;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1985 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1984);
            this.Manager.Comment("reaching state \'S3326\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1984, "trustHandle of OpenTrustedDomainByName, state S3326");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1985, "return of OpenTrustedDomainByName, state S3326");
            this.Manager.Comment("reaching state \'S3758\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1986;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,Inva" +
                    "lid,True)\'");
            temp1986 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4190\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1986, "return of SetTrustedDomainInfoByName, state S4190");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S606
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S606() {
            this.Manager.BeginTest("TestScenarioS15S606");
            this.Manager.Comment("reaching state \'S606\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S607\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1167\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1987;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1988;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1988 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1987);
            this.Manager.Comment("reaching state \'S1599\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1987, "policyHandle of OpenPolicy2, state S1599");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1988, "return of OpenPolicy2, state S1599");
            this.Manager.Comment("reaching state \'S2031\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1989;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1990;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1990 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1989);
            this.Manager.Comment("reaching state \'S2463\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1989, "trustHandle of CreateTrustedDomain, state S2463");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1990, "return of CreateTrustedDomain, state S2463");
            this.Manager.Comment("reaching state \'S2895\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1991;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1992;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1992 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1991);
            this.Manager.Comment("reaching state \'S3327\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1991, "trustHandle of OpenTrustedDomainByName, state S3327");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1992, "return of OpenTrustedDomainByName, state S3327");
            this.Manager.Comment("reaching state \'S3759\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1993;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,Inv" +
                    "alid,True)\'");
            temp1993 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4191\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1993, "return of SetTrustedDomainInfoByName, state S4191");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S608
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S608() {
            this.Manager.BeginTest("TestScenarioS15S608");
            this.Manager.Comment("reaching state \'S608\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S609\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1168\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1994;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1995;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1995 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1994);
            this.Manager.Comment("reaching state \'S1600\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1994, "policyHandle of OpenPolicy2, state S1600");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1995, "return of OpenPolicy2, state S1600");
            this.Manager.Comment("reaching state \'S2032\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1996;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1997;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp1997 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1996);
            this.Manager.Comment("reaching state \'S2464\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1996, "trustHandle of CreateTrustedDomain, state S2464");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1997, "return of CreateTrustedDomain, state S2464");
            this.Manager.Comment("reaching state \'S2896\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1998;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1999;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp1999 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp1998);
            this.Manager.Comment("reaching state \'S3328\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1998, "trustHandle of OpenTrustedDomainByName, state S3328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp1999, "return of OpenTrustedDomainByName, state S3328");
            this.Manager.Comment("reaching state \'S3760\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2000;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2000 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4192\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2000, "return of SetTrustedDomainInfoByName, state S4192");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S610
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S610() {
            this.Manager.BeginTest("TestScenarioS15S610");
            this.Manager.Comment("reaching state \'S610\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S611\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1169\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2001;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2002;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2002 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2001);
            this.Manager.Comment("reaching state \'S1601\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2001, "policyHandle of OpenPolicy2, state S1601");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2002, "return of OpenPolicy2, state S1601");
            this.Manager.Comment("reaching state \'S2033\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2003;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2004;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2004 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2003);
            this.Manager.Comment("reaching state \'S2465\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2003, "trustHandle of CreateTrustedDomain, state S2465");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2004, "return of CreateTrustedDomain, state S2465");
            this.Manager.Comment("reaching state \'S2897\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2005;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2006;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2006 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2005);
            this.Manager.Comment("reaching state \'S3329\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2005, "trustHandle of OpenTrustedDomainByName, state S3329");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2006, "return of OpenTrustedDomainByName, state S3329");
            this.Manager.Comment("reaching state \'S3761\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2007;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2007 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4193\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2007, "return of SetTrustedDomainInfoByName, state S4193");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S612
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S612() {
            this.Manager.BeginTest("TestScenarioS15S612");
            this.Manager.Comment("reaching state \'S612\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S613\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1170\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2008;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2009;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2009 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2008);
            this.Manager.Comment("reaching state \'S1602\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2008, "policyHandle of OpenPolicy2, state S1602");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2009, "return of OpenPolicy2, state S1602");
            this.Manager.Comment("reaching state \'S2034\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2010;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2011;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2011 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2010);
            this.Manager.Comment("reaching state \'S2466\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2010, "trustHandle of CreateTrustedDomain, state S2466");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2011, "return of CreateTrustedDomain, state S2466");
            this.Manager.Comment("reaching state \'S2898\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2012;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2013;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2013 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2012);
            this.Manager.Comment("reaching state \'S3330\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2012, "trustHandle of OpenTrustedDomainByName, state S3330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2013, "return of OpenTrustedDomainByName, state S3330");
            this.Manager.Comment("reaching state \'S3762\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2014;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2014 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4194\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2014, "return of SetTrustedDomainInfoByName, state S4194");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S614
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S614() {
            this.Manager.BeginTest("TestScenarioS15S614");
            this.Manager.Comment("reaching state \'S614\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S615\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1171\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2015;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2016;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2016 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2015);
            this.Manager.Comment("reaching state \'S1603\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2015, "policyHandle of OpenPolicy2, state S1603");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2016, "return of OpenPolicy2, state S1603");
            this.Manager.Comment("reaching state \'S2035\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2017;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2018;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2018 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2017);
            this.Manager.Comment("reaching state \'S2467\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2017, "trustHandle of CreateTrustedDomain, state S2467");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2018, "return of CreateTrustedDomain, state S2467");
            this.Manager.Comment("reaching state \'S2899\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2019;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2020;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2020 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2019);
            this.Manager.Comment("reaching state \'S3331\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2019, "trustHandle of OpenTrustedDomainByName, state S3331");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2020, "return of OpenTrustedDomainByName, state S3331");
            this.Manager.Comment("reaching state \'S3763\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2021;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2021 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4195\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2021, "return of SetTrustedDomainInfoByName, state S4195");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S616
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S616() {
            this.Manager.BeginTest("TestScenarioS15S616");
            this.Manager.Comment("reaching state \'S616\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S617\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1172\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2022;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2023;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2023 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2022);
            this.Manager.Comment("reaching state \'S1604\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2022, "policyHandle of OpenPolicy2, state S1604");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2023, "return of OpenPolicy2, state S1604");
            this.Manager.Comment("reaching state \'S2036\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2024;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2025;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2025 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2024);
            this.Manager.Comment("reaching state \'S2468\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2024, "trustHandle of CreateTrustedDomain, state S2468");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2025, "return of CreateTrustedDomain, state S2468");
            this.Manager.Comment("reaching state \'S2900\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2026;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2027;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2027 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2026);
            this.Manager.Comment("reaching state \'S3332\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2026, "trustHandle of OpenTrustedDomainByName, state S3332");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2027, "return of OpenTrustedDomainByName, state S3332");
            this.Manager.Comment("reaching state \'S3764\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2028;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2028 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4196\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2028, "return of SetTrustedDomainInfoByName, state S4196");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S618
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S618() {
            this.Manager.BeginTest("TestScenarioS15S618");
            this.Manager.Comment("reaching state \'S618\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S619\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1173\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2029;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2030;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2030 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2029);
            this.Manager.Comment("reaching state \'S1605\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2029, "policyHandle of OpenPolicy2, state S1605");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2030, "return of OpenPolicy2, state S1605");
            this.Manager.Comment("reaching state \'S2037\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2031;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2032;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2032 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2031);
            this.Manager.Comment("reaching state \'S2469\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2031, "trustHandle of CreateTrustedDomain, state S2469");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2032, "return of CreateTrustedDomain, state S2469");
            this.Manager.Comment("reaching state \'S2901\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2033;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2034;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2034 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2033);
            this.Manager.Comment("reaching state \'S3333\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2033, "trustHandle of OpenTrustedDomainByName, state S3333");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2034, "return of OpenTrustedDomainByName, state S3333");
            this.Manager.Comment("reaching state \'S3765\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2035;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2035 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4197\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2035, "return of SetTrustedDomainInfoByName, state S4197");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S62
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S62() {
            this.Manager.BeginTest("TestScenarioS15S62");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S895\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2036;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2037;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2037 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2036);
            this.Manager.Comment("reaching state \'S1327\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2036, "policyHandle of OpenPolicy2, state S1327");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2037, "return of OpenPolicy2, state S1327");
            this.Manager.Comment("reaching state \'S1759\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2038;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2039;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2039 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2038);
            this.Manager.Comment("reaching state \'S2191\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2038, "trustHandle of CreateTrustedDomain, state S2191");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2039, "return of CreateTrustedDomain, state S2191");
            this.Manager.Comment("reaching state \'S2623\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2040;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2041;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2041 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2040);
            this.Manager.Comment("reaching state \'S3055\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2040, "trustHandle of OpenTrustedDomainByName, state S3055");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2041, "return of OpenTrustedDomainByName, state S3055");
            this.Manager.Comment("reaching state \'S3487\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2042;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2042 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3919\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2042, "return of SetTrustedDomainInfoByName, state S3919");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S620
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S620() {
            this.Manager.BeginTest("TestScenarioS15S620");
            this.Manager.Comment("reaching state \'S620\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S621\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1174\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2043;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2044;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2044 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2043);
            this.Manager.Comment("reaching state \'S1606\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2043, "policyHandle of OpenPolicy2, state S1606");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2044, "return of OpenPolicy2, state S1606");
            this.Manager.Comment("reaching state \'S2038\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2045;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2046;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2046 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2045);
            this.Manager.Comment("reaching state \'S2470\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2045, "trustHandle of CreateTrustedDomain, state S2470");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2046, "return of CreateTrustedDomain, state S2470");
            this.Manager.Comment("reaching state \'S2902\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2047;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2048;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2048 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2047);
            this.Manager.Comment("reaching state \'S3334\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2047, "trustHandle of OpenTrustedDomainByName, state S3334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2048, "return of OpenTrustedDomainByName, state S3334");
            this.Manager.Comment("reaching state \'S3766\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2049;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2049 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4198\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2049, "return of SetTrustedDomainInfoByName, state S4198");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S622
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S622() {
            this.Manager.BeginTest("TestScenarioS15S622");
            this.Manager.Comment("reaching state \'S622\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S623\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1175\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2050;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2051;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2051 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2050);
            this.Manager.Comment("reaching state \'S1607\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2050, "policyHandle of OpenPolicy2, state S1607");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2051, "return of OpenPolicy2, state S1607");
            this.Manager.Comment("reaching state \'S2039\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2052;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2053;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2053 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2052);
            this.Manager.Comment("reaching state \'S2471\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2052, "trustHandle of CreateTrustedDomain, state S2471");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2053, "return of CreateTrustedDomain, state S2471");
            this.Manager.Comment("reaching state \'S2903\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2054;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2055;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2055 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2054);
            this.Manager.Comment("reaching state \'S3335\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2054, "trustHandle of OpenTrustedDomainByName, state S3335");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2055, "return of OpenTrustedDomainByName, state S3335");
            this.Manager.Comment("reaching state \'S3767\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2056;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2056 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4199\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2056, "return of SetTrustedDomainInfoByName, state S4199");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S624
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S624() {
            this.Manager.BeginTest("TestScenarioS15S624");
            this.Manager.Comment("reaching state \'S624\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S625\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1176\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2057;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2058;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2058 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2057);
            this.Manager.Comment("reaching state \'S1608\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2057, "policyHandle of OpenPolicy2, state S1608");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2058, "return of OpenPolicy2, state S1608");
            this.Manager.Comment("reaching state \'S2040\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2059;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2060;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2060 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2059);
            this.Manager.Comment("reaching state \'S2472\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2059, "trustHandle of CreateTrustedDomain, state S2472");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2060, "return of CreateTrustedDomain, state S2472");
            this.Manager.Comment("reaching state \'S2904\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2061;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2062;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2062 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2061);
            this.Manager.Comment("reaching state \'S3336\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2061, "trustHandle of OpenTrustedDomainByName, state S3336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2062, "return of OpenTrustedDomainByName, state S3336");
            this.Manager.Comment("reaching state \'S3768\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2063;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp2063 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4200\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2063, "return of SetTrustedDomainInfoByName, state S4200");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S626
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S626() {
            this.Manager.BeginTest("TestScenarioS15S626");
            this.Manager.Comment("reaching state \'S626\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S627\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1177\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2064;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2065;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2065 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2064);
            this.Manager.Comment("reaching state \'S1609\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2064, "policyHandle of OpenPolicy2, state S1609");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2065, "return of OpenPolicy2, state S1609");
            this.Manager.Comment("reaching state \'S2041\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2066;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2067;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2067 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2066);
            this.Manager.Comment("reaching state \'S2473\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2066, "trustHandle of CreateTrustedDomain, state S2473");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2067, "return of CreateTrustedDomain, state S2473");
            this.Manager.Comment("reaching state \'S2905\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2068;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2069;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2069 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2068);
            this.Manager.Comment("reaching state \'S3337\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2068, "trustHandle of OpenTrustedDomainByName, state S3337");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2069, "return of OpenTrustedDomainByName, state S3337");
            this.Manager.Comment("reaching state \'S3769\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2070;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp2070 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4201\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2070, "return of SetTrustedDomainInfoByName, state S4201");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S628
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S628() {
            this.Manager.BeginTest("TestScenarioS15S628");
            this.Manager.Comment("reaching state \'S628\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S629\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1178\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2071;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2072;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2072 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2071);
            this.Manager.Comment("reaching state \'S1610\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2071, "policyHandle of OpenPolicy2, state S1610");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2072, "return of OpenPolicy2, state S1610");
            this.Manager.Comment("reaching state \'S2042\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2073;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2074;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2074 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2073);
            this.Manager.Comment("reaching state \'S2474\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2073, "trustHandle of CreateTrustedDomain, state S2474");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2074, "return of CreateTrustedDomain, state S2474");
            this.Manager.Comment("reaching state \'S2906\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2075;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2076;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2076 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2075);
            this.Manager.Comment("reaching state \'S3338\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2075, "trustHandle of OpenTrustedDomainByName, state S3338");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2076, "return of OpenTrustedDomainByName, state S3338");
            this.Manager.Comment("reaching state \'S3770\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2077;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp2077 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4202\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2077, "return of SetTrustedDomainInfoByName, state S4202");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S630
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S630() {
            this.Manager.BeginTest("TestScenarioS15S630");
            this.Manager.Comment("reaching state \'S630\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S631\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1179\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2078;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2079;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2079 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2078);
            this.Manager.Comment("reaching state \'S1611\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2078, "policyHandle of OpenPolicy2, state S1611");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2079, "return of OpenPolicy2, state S1611");
            this.Manager.Comment("reaching state \'S2043\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2080;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2081;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2081 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2080);
            this.Manager.Comment("reaching state \'S2475\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2080, "trustHandle of CreateTrustedDomain, state S2475");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2081, "return of CreateTrustedDomain, state S2475");
            this.Manager.Comment("reaching state \'S2907\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2082;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2083;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2083 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2082);
            this.Manager.Comment("reaching state \'S3339\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2082, "trustHandle of OpenTrustedDomainByName, state S3339");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2083, "return of OpenTrustedDomainByName, state S3339");
            this.Manager.Comment("reaching state \'S3771\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2084;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp2084 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4203\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2084, "return of SetTrustedDomainInfoByName, state S4203");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S632
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S632() {
            this.Manager.BeginTest("TestScenarioS15S632");
            this.Manager.Comment("reaching state \'S632\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S633\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1180\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2085;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2086;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2086 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2085);
            this.Manager.Comment("reaching state \'S1612\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2085, "policyHandle of OpenPolicy2, state S1612");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2086, "return of OpenPolicy2, state S1612");
            this.Manager.Comment("reaching state \'S2044\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2087;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2088;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2088 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2087);
            this.Manager.Comment("reaching state \'S2476\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2087, "trustHandle of CreateTrustedDomain, state S2476");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2088, "return of CreateTrustedDomain, state S2476");
            this.Manager.Comment("reaching state \'S2908\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2089;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2090;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2090 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2089);
            this.Manager.Comment("reaching state \'S3340\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2089, "trustHandle of OpenTrustedDomainByName, state S3340");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2090, "return of OpenTrustedDomainByName, state S3340");
            this.Manager.Comment("reaching state \'S3772\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2091;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2091 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4204\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2091, "return of SetTrustedDomainInfoByName, state S4204");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S634
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S634() {
            this.Manager.BeginTest("TestScenarioS15S634");
            this.Manager.Comment("reaching state \'S634\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S635\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1181\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2092;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2093;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2093 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2092);
            this.Manager.Comment("reaching state \'S1613\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2092, "policyHandle of OpenPolicy2, state S1613");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2093, "return of OpenPolicy2, state S1613");
            this.Manager.Comment("reaching state \'S2045\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2094;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2095;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2095 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2094);
            this.Manager.Comment("reaching state \'S2477\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2094, "trustHandle of CreateTrustedDomain, state S2477");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2095, "return of CreateTrustedDomain, state S2477");
            this.Manager.Comment("reaching state \'S2909\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2096;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2097;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2097 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2096);
            this.Manager.Comment("reaching state \'S3341\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2096, "trustHandle of OpenTrustedDomainByName, state S3341");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2097, "return of OpenTrustedDomainByName, state S3341");
            this.Manager.Comment("reaching state \'S3773\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2098;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2098 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4205\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2098, "return of SetTrustedDomainInfoByName, state S4205");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S636
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S636() {
            this.Manager.BeginTest("TestScenarioS15S636");
            this.Manager.Comment("reaching state \'S636\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S637\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1182\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2099;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2100;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2100 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2099);
            this.Manager.Comment("reaching state \'S1614\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2099, "policyHandle of OpenPolicy2, state S1614");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2100, "return of OpenPolicy2, state S1614");
            this.Manager.Comment("reaching state \'S2046\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2101;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2102;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2102 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2101);
            this.Manager.Comment("reaching state \'S2478\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2101, "trustHandle of CreateTrustedDomain, state S2478");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2102, "return of CreateTrustedDomain, state S2478");
            this.Manager.Comment("reaching state \'S2910\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2103;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2104;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2104 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2103);
            this.Manager.Comment("reaching state \'S3342\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2103, "trustHandle of OpenTrustedDomainByName, state S3342");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2104, "return of OpenTrustedDomainByName, state S3342");
            this.Manager.Comment("reaching state \'S3774\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2105;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2105 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4206\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2105, "return of SetTrustedDomainInfoByName, state S4206");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S638
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S638() {
            this.Manager.BeginTest("TestScenarioS15S638");
            this.Manager.Comment("reaching state \'S638\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S639\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1183\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2106;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2107;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2107 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2106);
            this.Manager.Comment("reaching state \'S1615\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2106, "policyHandle of OpenPolicy2, state S1615");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2107, "return of OpenPolicy2, state S1615");
            this.Manager.Comment("reaching state \'S2047\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2108;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2109;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2109 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2108);
            this.Manager.Comment("reaching state \'S2479\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2108, "trustHandle of CreateTrustedDomain, state S2479");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2109, "return of CreateTrustedDomain, state S2479");
            this.Manager.Comment("reaching state \'S2911\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2110;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2111;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2111 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2110);
            this.Manager.Comment("reaching state \'S3343\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2110, "trustHandle of OpenTrustedDomainByName, state S3343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2111, "return of OpenTrustedDomainByName, state S3343");
            this.Manager.Comment("reaching state \'S3775\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2112;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2112 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4207\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2112, "return of SetTrustedDomainInfoByName, state S4207");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S64
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S64() {
            this.Manager.BeginTest("TestScenarioS15S64");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S896\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2113;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2114;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2114 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2113);
            this.Manager.Comment("reaching state \'S1328\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2113, "policyHandle of OpenPolicy2, state S1328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2114, "return of OpenPolicy2, state S1328");
            this.Manager.Comment("reaching state \'S1760\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2115;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2116;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2116 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2115);
            this.Manager.Comment("reaching state \'S2192\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2115, "trustHandle of CreateTrustedDomain, state S2192");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2116, "return of CreateTrustedDomain, state S2192");
            this.Manager.Comment("reaching state \'S2624\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2117;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2118;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2118 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2117);
            this.Manager.Comment("reaching state \'S3056\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2117, "trustHandle of OpenTrustedDomainByName, state S3056");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2118, "return of OpenTrustedDomainByName, state S3056");
            this.Manager.Comment("reaching state \'S3488\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2119;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2119 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3920\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2119, "return of SetTrustedDomainInfoByName, state S3920");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S640
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S640() {
            this.Manager.BeginTest("TestScenarioS15S640");
            this.Manager.Comment("reaching state \'S640\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S641\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1184\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2120;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2121;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2121 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2120);
            this.Manager.Comment("reaching state \'S1616\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2120, "policyHandle of OpenPolicy2, state S1616");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2121, "return of OpenPolicy2, state S1616");
            this.Manager.Comment("reaching state \'S2048\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2122;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2123;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2123 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2122);
            this.Manager.Comment("reaching state \'S2480\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2122, "trustHandle of CreateTrustedDomain, state S2480");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2123, "return of CreateTrustedDomain, state S2480");
            this.Manager.Comment("reaching state \'S2912\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2124;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2125;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2125 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2124);
            this.Manager.Comment("reaching state \'S3344\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2124, "trustHandle of OpenTrustedDomainByName, state S3344");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2125, "return of OpenTrustedDomainByName, state S3344");
            this.Manager.Comment("reaching state \'S3776\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2126;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2126 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4208\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2126, "return of SetTrustedDomainInfoByName, state S4208");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S642
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S642() {
            this.Manager.BeginTest("TestScenarioS15S642");
            this.Manager.Comment("reaching state \'S642\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S643\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1185\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2127;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2128;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2128 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2127);
            this.Manager.Comment("reaching state \'S1617\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2127, "policyHandle of OpenPolicy2, state S1617");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2128, "return of OpenPolicy2, state S1617");
            this.Manager.Comment("reaching state \'S2049\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2129;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2130;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2130 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2129);
            this.Manager.Comment("reaching state \'S2481\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2129, "trustHandle of CreateTrustedDomain, state S2481");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2130, "return of CreateTrustedDomain, state S2481");
            this.Manager.Comment("reaching state \'S2913\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2131;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2132;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2132 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2131);
            this.Manager.Comment("reaching state \'S3345\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2131, "trustHandle of OpenTrustedDomainByName, state S3345");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2132, "return of OpenTrustedDomainByName, state S3345");
            this.Manager.Comment("reaching state \'S3777\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2133;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2133 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4209\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2133, "return of SetTrustedDomainInfoByName, state S4209");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S644
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S644() {
            this.Manager.BeginTest("TestScenarioS15S644");
            this.Manager.Comment("reaching state \'S644\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S645\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1186\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2134;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2135;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2135 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2134);
            this.Manager.Comment("reaching state \'S1618\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2134, "policyHandle of OpenPolicy2, state S1618");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2135, "return of OpenPolicy2, state S1618");
            this.Manager.Comment("reaching state \'S2050\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2136;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2137;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2137 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2136);
            this.Manager.Comment("reaching state \'S2482\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2136, "trustHandle of CreateTrustedDomain, state S2482");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2137, "return of CreateTrustedDomain, state S2482");
            this.Manager.Comment("reaching state \'S2914\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2138;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2139;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2139 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2138);
            this.Manager.Comment("reaching state \'S3346\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2138, "trustHandle of OpenTrustedDomainByName, state S3346");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2139, "return of OpenTrustedDomainByName, state S3346");
            this.Manager.Comment("reaching state \'S3778\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2140;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,Inva" +
                    "lid,True)\'");
            temp2140 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4210\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2140, "return of SetTrustedDomainInfoByName, state S4210");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S646
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S646() {
            this.Manager.BeginTest("TestScenarioS15S646");
            this.Manager.Comment("reaching state \'S646\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S647\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1187\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2141;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2142;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2142 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2141);
            this.Manager.Comment("reaching state \'S1619\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2141, "policyHandle of OpenPolicy2, state S1619");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2142, "return of OpenPolicy2, state S1619");
            this.Manager.Comment("reaching state \'S2051\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2143;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2144;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2144 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2143);
            this.Manager.Comment("reaching state \'S2483\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2143, "trustHandle of CreateTrustedDomain, state S2483");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2144, "return of CreateTrustedDomain, state S2483");
            this.Manager.Comment("reaching state \'S2915\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2145;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2146;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2146 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2145);
            this.Manager.Comment("reaching state \'S3347\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2145, "trustHandle of OpenTrustedDomainByName, state S3347");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2146, "return of OpenTrustedDomainByName, state S3347");
            this.Manager.Comment("reaching state \'S3779\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2147;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2147 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4211\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2147, "return of SetTrustedDomainInfoByName, state S4211");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S648
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S648() {
            this.Manager.BeginTest("TestScenarioS15S648");
            this.Manager.Comment("reaching state \'S648\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S649\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1188\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2148;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2149;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2149 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2148);
            this.Manager.Comment("reaching state \'S1620\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2148, "policyHandle of OpenPolicy2, state S1620");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2149, "return of OpenPolicy2, state S1620");
            this.Manager.Comment("reaching state \'S2052\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2150;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2151;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2151 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2150);
            this.Manager.Comment("reaching state \'S2484\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2150, "trustHandle of CreateTrustedDomain, state S2484");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2151, "return of CreateTrustedDomain, state S2484");
            this.Manager.Comment("reaching state \'S2916\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2152;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2153;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2153 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2152);
            this.Manager.Comment("reaching state \'S3348\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2152, "trustHandle of OpenTrustedDomainByName, state S3348");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2153, "return of OpenTrustedDomainByName, state S3348");
            this.Manager.Comment("reaching state \'S3780\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2154;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp2154 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4212\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2154, "return of SetTrustedDomainInfoByName, state S4212");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S650
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S650() {
            this.Manager.BeginTest("TestScenarioS15S650");
            this.Manager.Comment("reaching state \'S650\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S651\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1189\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2155;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2156;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2156 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2155);
            this.Manager.Comment("reaching state \'S1621\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2155, "policyHandle of OpenPolicy2, state S1621");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2156, "return of OpenPolicy2, state S1621");
            this.Manager.Comment("reaching state \'S2053\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2157;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2158;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2158 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2157);
            this.Manager.Comment("reaching state \'S2485\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2157, "trustHandle of CreateTrustedDomain, state S2485");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2158, "return of CreateTrustedDomain, state S2485");
            this.Manager.Comment("reaching state \'S2917\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2159;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2160;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2160 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2159);
            this.Manager.Comment("reaching state \'S3349\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2159, "trustHandle of OpenTrustedDomainByName, state S3349");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2160, "return of OpenTrustedDomainByName, state S3349");
            this.Manager.Comment("reaching state \'S3781\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2161;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp2161 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4213\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2161, "return of SetTrustedDomainInfoByName, state S4213");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S652
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S652() {
            this.Manager.BeginTest("TestScenarioS15S652");
            this.Manager.Comment("reaching state \'S652\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S653\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1190\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2162;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2163;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2163 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2162);
            this.Manager.Comment("reaching state \'S1622\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2162, "policyHandle of OpenPolicy2, state S1622");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2163, "return of OpenPolicy2, state S1622");
            this.Manager.Comment("reaching state \'S2054\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2164;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2165;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2165 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2164);
            this.Manager.Comment("reaching state \'S2486\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2164, "trustHandle of CreateTrustedDomain, state S2486");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2165, "return of CreateTrustedDomain, state S2486");
            this.Manager.Comment("reaching state \'S2918\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2166;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2167;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2167 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2166);
            this.Manager.Comment("reaching state \'S3350\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2166, "trustHandle of OpenTrustedDomainByName, state S3350");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2167, "return of OpenTrustedDomainByName, state S3350");
            this.Manager.Comment("reaching state \'S3782\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2168;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2168 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4214\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2168, "return of SetTrustedDomainInfoByName, state S4214");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S654
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S654() {
            this.Manager.BeginTest("TestScenarioS15S654");
            this.Manager.Comment("reaching state \'S654\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S655\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1191\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2169;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2170;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2170 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2169);
            this.Manager.Comment("reaching state \'S1623\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2169, "policyHandle of OpenPolicy2, state S1623");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2170, "return of OpenPolicy2, state S1623");
            this.Manager.Comment("reaching state \'S2055\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2171;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2172;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2172 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2171);
            this.Manager.Comment("reaching state \'S2487\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2171, "trustHandle of CreateTrustedDomain, state S2487");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2172, "return of CreateTrustedDomain, state S2487");
            this.Manager.Comment("reaching state \'S2919\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2173;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2174;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2174 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2173);
            this.Manager.Comment("reaching state \'S3351\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2173, "trustHandle of OpenTrustedDomainByName, state S3351");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2174, "return of OpenTrustedDomainByName, state S3351");
            this.Manager.Comment("reaching state \'S3783\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2175;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2175 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4215\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2175, "return of SetTrustedDomainInfoByName, state S4215");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S656
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S656() {
            this.Manager.BeginTest("TestScenarioS15S656");
            this.Manager.Comment("reaching state \'S656\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S657\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1192\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2176;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2177;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2177 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2176);
            this.Manager.Comment("reaching state \'S1624\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2176, "policyHandle of OpenPolicy2, state S1624");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2177, "return of OpenPolicy2, state S1624");
            this.Manager.Comment("reaching state \'S2056\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2178;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2179;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2179 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2178);
            this.Manager.Comment("reaching state \'S2488\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2178, "trustHandle of CreateTrustedDomain, state S2488");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2179, "return of CreateTrustedDomain, state S2488");
            this.Manager.Comment("reaching state \'S2920\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2180;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2181;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2181 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2180);
            this.Manager.Comment("reaching state \'S3352\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2180, "trustHandle of OpenTrustedDomainByName, state S3352");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2181, "return of OpenTrustedDomainByName, state S3352");
            this.Manager.Comment("reaching state \'S3784\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2182;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,Inv" +
                    "alid,True)\'");
            temp2182 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4216\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2182, "return of SetTrustedDomainInfoByName, state S4216");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S658
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S658() {
            this.Manager.BeginTest("TestScenarioS15S658");
            this.Manager.Comment("reaching state \'S658\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S659\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1193\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2183;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2184;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2184 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2183);
            this.Manager.Comment("reaching state \'S1625\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2183, "policyHandle of OpenPolicy2, state S1625");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2184, "return of OpenPolicy2, state S1625");
            this.Manager.Comment("reaching state \'S2057\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2185;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2186;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2186 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2185);
            this.Manager.Comment("reaching state \'S2489\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2185, "trustHandle of CreateTrustedDomain, state S2489");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2186, "return of CreateTrustedDomain, state S2489");
            this.Manager.Comment("reaching state \'S2921\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2187;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2188;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2188 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2187);
            this.Manager.Comment("reaching state \'S3353\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2187, "trustHandle of OpenTrustedDomainByName, state S3353");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2188, "return of OpenTrustedDomainByName, state S3353");
            this.Manager.Comment("reaching state \'S3785\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2189;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp2189 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4217\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2189, "return of SetTrustedDomainInfoByName, state S4217");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S66
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S66() {
            this.Manager.BeginTest("TestScenarioS15S66");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S897\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2190;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2191;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2191 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2190);
            this.Manager.Comment("reaching state \'S1329\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2190, "policyHandle of OpenPolicy2, state S1329");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2191, "return of OpenPolicy2, state S1329");
            this.Manager.Comment("reaching state \'S1761\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2192;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2193;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2193 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2192);
            this.Manager.Comment("reaching state \'S2193\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2192, "trustHandle of CreateTrustedDomain, state S2193");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2193, "return of CreateTrustedDomain, state S2193");
            this.Manager.Comment("reaching state \'S2625\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2194;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2195;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2195 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2194);
            this.Manager.Comment("reaching state \'S3057\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2194, "trustHandle of OpenTrustedDomainByName, state S3057");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2195, "return of OpenTrustedDomainByName, state S3057");
            this.Manager.Comment("reaching state \'S3489\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2196;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp2196 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3921\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2196, "return of SetTrustedDomainInfoByName, state S3921");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S660
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S660() {
            this.Manager.BeginTest("TestScenarioS15S660");
            this.Manager.Comment("reaching state \'S660\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S661\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1194\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2197;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2198;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2198 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2197);
            this.Manager.Comment("reaching state \'S1626\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2197, "policyHandle of OpenPolicy2, state S1626");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2198, "return of OpenPolicy2, state S1626");
            this.Manager.Comment("reaching state \'S2058\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2199;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2200;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2200 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2199);
            this.Manager.Comment("reaching state \'S2490\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2199, "trustHandle of CreateTrustedDomain, state S2490");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2200, "return of CreateTrustedDomain, state S2490");
            this.Manager.Comment("reaching state \'S2922\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2201;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2202;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2202 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2201);
            this.Manager.Comment("reaching state \'S3354\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2201, "trustHandle of OpenTrustedDomainByName, state S3354");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2202, "return of OpenTrustedDomainByName, state S3354");
            this.Manager.Comment("reaching state \'S3786\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2203;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2203 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4218\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2203, "return of SetTrustedDomainInfoByName, state S4218");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S662
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S662() {
            this.Manager.BeginTest("TestScenarioS15S662");
            this.Manager.Comment("reaching state \'S662\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S663\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1195\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2204;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2205;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2205 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2204);
            this.Manager.Comment("reaching state \'S1627\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2204, "policyHandle of OpenPolicy2, state S1627");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2205, "return of OpenPolicy2, state S1627");
            this.Manager.Comment("reaching state \'S2059\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2206;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2207;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2207 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2206);
            this.Manager.Comment("reaching state \'S2491\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2206, "trustHandle of CreateTrustedDomain, state S2491");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2207, "return of CreateTrustedDomain, state S2491");
            this.Manager.Comment("reaching state \'S2923\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2208;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2209;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2209 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2208);
            this.Manager.Comment("reaching state \'S3355\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2208, "trustHandle of OpenTrustedDomainByName, state S3355");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2209, "return of OpenTrustedDomainByName, state S3355");
            this.Manager.Comment("reaching state \'S3787\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2210;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp2210 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4219\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2210, "return of SetTrustedDomainInfoByName, state S4219");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S664
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S664() {
            this.Manager.BeginTest("TestScenarioS15S664");
            this.Manager.Comment("reaching state \'S664\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S665\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1196\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2211;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2212;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2212 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2211);
            this.Manager.Comment("reaching state \'S1628\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2211, "policyHandle of OpenPolicy2, state S1628");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2212, "return of OpenPolicy2, state S1628");
            this.Manager.Comment("reaching state \'S2060\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2213;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2214;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2214 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2213);
            this.Manager.Comment("reaching state \'S2492\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2213, "trustHandle of CreateTrustedDomain, state S2492");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2214, "return of CreateTrustedDomain, state S2492");
            this.Manager.Comment("reaching state \'S2924\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2215;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2216;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2216 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2215);
            this.Manager.Comment("reaching state \'S3356\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2215, "trustHandle of OpenTrustedDomainByName, state S3356");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2216, "return of OpenTrustedDomainByName, state S3356");
            this.Manager.Comment("reaching state \'S3788\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2217;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2217 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4220\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2217, "return of SetTrustedDomainInfoByName, state S4220");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S666
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S666() {
            this.Manager.BeginTest("TestScenarioS15S666");
            this.Manager.Comment("reaching state \'S666\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S667\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1197\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2218;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2219;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2219 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2218);
            this.Manager.Comment("reaching state \'S1629\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2218, "policyHandle of OpenPolicy2, state S1629");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2219, "return of OpenPolicy2, state S1629");
            this.Manager.Comment("reaching state \'S2061\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2220;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2221;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2221 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2220);
            this.Manager.Comment("reaching state \'S2493\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2220, "trustHandle of CreateTrustedDomain, state S2493");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2221, "return of CreateTrustedDomain, state S2493");
            this.Manager.Comment("reaching state \'S2925\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2222;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2223;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2223 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2222);
            this.Manager.Comment("reaching state \'S3357\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2222, "trustHandle of OpenTrustedDomainByName, state S3357");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2223, "return of OpenTrustedDomainByName, state S3357");
            this.Manager.Comment("reaching state \'S3789\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2224;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2224 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4221\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2224, "return of SetTrustedDomainInfoByName, state S4221");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S668
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S668() {
            this.Manager.BeginTest("TestScenarioS15S668");
            this.Manager.Comment("reaching state \'S668\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S669\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1198\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2225;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2226;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2226 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2225);
            this.Manager.Comment("reaching state \'S1630\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2225, "policyHandle of OpenPolicy2, state S1630");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2226, "return of OpenPolicy2, state S1630");
            this.Manager.Comment("reaching state \'S2062\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2227;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2228;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2228 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2227);
            this.Manager.Comment("reaching state \'S2494\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2227, "trustHandle of CreateTrustedDomain, state S2494");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2228, "return of CreateTrustedDomain, state S2494");
            this.Manager.Comment("reaching state \'S2926\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2229;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2230;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2230 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2229);
            this.Manager.Comment("reaching state \'S3358\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2229, "trustHandle of OpenTrustedDomainByName, state S3358");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2230, "return of OpenTrustedDomainByName, state S3358");
            this.Manager.Comment("reaching state \'S3790\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2231;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2231 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4222\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2231, "return of SetTrustedDomainInfoByName, state S4222");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S670
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S670() {
            this.Manager.BeginTest("TestScenarioS15S670");
            this.Manager.Comment("reaching state \'S670\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S671\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1199\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2232;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2233;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2233 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2232);
            this.Manager.Comment("reaching state \'S1631\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2232, "policyHandle of OpenPolicy2, state S1631");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2233, "return of OpenPolicy2, state S1631");
            this.Manager.Comment("reaching state \'S2063\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2234;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2235;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2235 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2234);
            this.Manager.Comment("reaching state \'S2495\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2234, "trustHandle of CreateTrustedDomain, state S2495");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2235, "return of CreateTrustedDomain, state S2495");
            this.Manager.Comment("reaching state \'S2927\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2236;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2237;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2237 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2236);
            this.Manager.Comment("reaching state \'S3359\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2236, "trustHandle of OpenTrustedDomainByName, state S3359");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2237, "return of OpenTrustedDomainByName, state S3359");
            this.Manager.Comment("reaching state \'S3791\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2238;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2238 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4223\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2238, "return of SetTrustedDomainInfoByName, state S4223");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S672
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S672() {
            this.Manager.BeginTest("TestScenarioS15S672");
            this.Manager.Comment("reaching state \'S672\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S673\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1200\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2239;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2240;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2240 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2239);
            this.Manager.Comment("reaching state \'S1632\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2239, "policyHandle of OpenPolicy2, state S1632");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2240, "return of OpenPolicy2, state S1632");
            this.Manager.Comment("reaching state \'S2064\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2241;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2242;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2242 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2241);
            this.Manager.Comment("reaching state \'S2496\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2241, "trustHandle of CreateTrustedDomain, state S2496");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2242, "return of CreateTrustedDomain, state S2496");
            this.Manager.Comment("reaching state \'S2928\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2243;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2244;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2244 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2243);
            this.Manager.Comment("reaching state \'S3360\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2243, "trustHandle of OpenTrustedDomainByName, state S3360");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2244, "return of OpenTrustedDomainByName, state S3360");
            this.Manager.Comment("reaching state \'S3792\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2245;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2245 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4224\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2245, "return of SetTrustedDomainInfoByName, state S4224");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S674
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S674() {
            this.Manager.BeginTest("TestScenarioS15S674");
            this.Manager.Comment("reaching state \'S674\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S675\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1201\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2246;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2247;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2247 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2246);
            this.Manager.Comment("reaching state \'S1633\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2246, "policyHandle of OpenPolicy2, state S1633");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2247, "return of OpenPolicy2, state S1633");
            this.Manager.Comment("reaching state \'S2065\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2248;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2249;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2249 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2248);
            this.Manager.Comment("reaching state \'S2497\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2248, "trustHandle of CreateTrustedDomain, state S2497");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2249, "return of CreateTrustedDomain, state S2497");
            this.Manager.Comment("reaching state \'S2929\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2250;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2251;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2251 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2250);
            this.Manager.Comment("reaching state \'S3361\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2250, "trustHandle of OpenTrustedDomainByName, state S3361");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2251, "return of OpenTrustedDomainByName, state S3361");
            this.Manager.Comment("reaching state \'S3793\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2252;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp2252 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4225\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2252, "return of SetTrustedDomainInfoByName, state S4225");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S676
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S676() {
            this.Manager.BeginTest("TestScenarioS15S676");
            this.Manager.Comment("reaching state \'S676\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S677\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1202\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2253;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2254;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2254 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2253);
            this.Manager.Comment("reaching state \'S1634\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2253, "policyHandle of OpenPolicy2, state S1634");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2254, "return of OpenPolicy2, state S1634");
            this.Manager.Comment("reaching state \'S2066\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2255;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2256;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2256 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2255);
            this.Manager.Comment("reaching state \'S2498\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2255, "trustHandle of CreateTrustedDomain, state S2498");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2256, "return of CreateTrustedDomain, state S2498");
            this.Manager.Comment("reaching state \'S2930\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2257;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2258;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2258 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2257);
            this.Manager.Comment("reaching state \'S3362\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2257, "trustHandle of OpenTrustedDomainByName, state S3362");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2258, "return of OpenTrustedDomainByName, state S3362");
            this.Manager.Comment("reaching state \'S3794\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2259;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2259 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4226\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2259, "return of SetTrustedDomainInfoByName, state S4226");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S678
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S678() {
            this.Manager.BeginTest("TestScenarioS15S678");
            this.Manager.Comment("reaching state \'S678\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S679\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1203\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2260;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2261;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2261 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2260);
            this.Manager.Comment("reaching state \'S1635\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2260, "policyHandle of OpenPolicy2, state S1635");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2261, "return of OpenPolicy2, state S1635");
            this.Manager.Comment("reaching state \'S2067\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2262;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2263;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2263 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2262);
            this.Manager.Comment("reaching state \'S2499\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2262, "trustHandle of CreateTrustedDomain, state S2499");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2263, "return of CreateTrustedDomain, state S2499");
            this.Manager.Comment("reaching state \'S2931\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2264;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2265;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2265 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2264);
            this.Manager.Comment("reaching state \'S3363\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2264, "trustHandle of OpenTrustedDomainByName, state S3363");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2265, "return of OpenTrustedDomainByName, state S3363");
            this.Manager.Comment("reaching state \'S3795\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2266;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2266 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4227\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2266, "return of SetTrustedDomainInfoByName, state S4227");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S68
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S68() {
            this.Manager.BeginTest("TestScenarioS15S68");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S898\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2267;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2268;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2268 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2267);
            this.Manager.Comment("reaching state \'S1330\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2267, "policyHandle of OpenPolicy2, state S1330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2268, "return of OpenPolicy2, state S1330");
            this.Manager.Comment("reaching state \'S1762\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2269;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2270;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2270 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2269);
            this.Manager.Comment("reaching state \'S2194\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2269, "trustHandle of CreateTrustedDomain, state S2194");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2270, "return of CreateTrustedDomain, state S2194");
            this.Manager.Comment("reaching state \'S2626\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2271;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2272;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2272 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2271);
            this.Manager.Comment("reaching state \'S3058\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2271, "trustHandle of OpenTrustedDomainByName, state S3058");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2272, "return of OpenTrustedDomainByName, state S3058");
            this.Manager.Comment("reaching state \'S3490\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2273;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp2273 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3922\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2273, "return of SetTrustedDomainInfoByName, state S3922");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S680
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S680() {
            this.Manager.BeginTest("TestScenarioS15S680");
            this.Manager.Comment("reaching state \'S680\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S681\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1204\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2274;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2275;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2275 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2274);
            this.Manager.Comment("reaching state \'S1636\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2274, "policyHandle of OpenPolicy2, state S1636");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2275, "return of OpenPolicy2, state S1636");
            this.Manager.Comment("reaching state \'S2068\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2276;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2277;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2277 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2276);
            this.Manager.Comment("reaching state \'S2500\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2276, "trustHandle of CreateTrustedDomain, state S2500");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2277, "return of CreateTrustedDomain, state S2500");
            this.Manager.Comment("reaching state \'S2932\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2278;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2279;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2279 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2278);
            this.Manager.Comment("reaching state \'S3364\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2278, "trustHandle of OpenTrustedDomainByName, state S3364");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2279, "return of OpenTrustedDomainByName, state S3364");
            this.Manager.Comment("reaching state \'S3796\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2280;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2280 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4228\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2280, "return of SetTrustedDomainInfoByName, state S4228");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S682
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S682() {
            this.Manager.BeginTest("TestScenarioS15S682");
            this.Manager.Comment("reaching state \'S682\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S683\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1205\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2281;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2282;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2282 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2281);
            this.Manager.Comment("reaching state \'S1637\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2281, "policyHandle of OpenPolicy2, state S1637");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2282, "return of OpenPolicy2, state S1637");
            this.Manager.Comment("reaching state \'S2069\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2283;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2284;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2284 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2283);
            this.Manager.Comment("reaching state \'S2501\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2283, "trustHandle of CreateTrustedDomain, state S2501");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2284, "return of CreateTrustedDomain, state S2501");
            this.Manager.Comment("reaching state \'S2933\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2285;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2286;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2286 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2285);
            this.Manager.Comment("reaching state \'S3365\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2285, "trustHandle of OpenTrustedDomainByName, state S3365");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2286, "return of OpenTrustedDomainByName, state S3365");
            this.Manager.Comment("reaching state \'S3797\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2287;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp2287 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4229\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2287, "return of SetTrustedDomainInfoByName, state S4229");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S684
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S684() {
            this.Manager.BeginTest("TestScenarioS15S684");
            this.Manager.Comment("reaching state \'S684\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S685\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1206\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2288;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2289;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2289 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2288);
            this.Manager.Comment("reaching state \'S1638\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2288, "policyHandle of OpenPolicy2, state S1638");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2289, "return of OpenPolicy2, state S1638");
            this.Manager.Comment("reaching state \'S2070\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2290;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2291;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2291 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2290);
            this.Manager.Comment("reaching state \'S2502\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2290, "trustHandle of CreateTrustedDomain, state S2502");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2291, "return of CreateTrustedDomain, state S2502");
            this.Manager.Comment("reaching state \'S2934\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2292;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2293;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2293 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2292);
            this.Manager.Comment("reaching state \'S3366\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2292, "trustHandle of OpenTrustedDomainByName, state S3366");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2293, "return of OpenTrustedDomainByName, state S3366");
            this.Manager.Comment("reaching state \'S3798\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2294;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2294 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4230\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2294, "return of SetTrustedDomainInfoByName, state S4230");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S686
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S686() {
            this.Manager.BeginTest("TestScenarioS15S686");
            this.Manager.Comment("reaching state \'S686\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S687\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1207\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2295;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2296;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2296 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2295);
            this.Manager.Comment("reaching state \'S1639\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2295, "policyHandle of OpenPolicy2, state S1639");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2296, "return of OpenPolicy2, state S1639");
            this.Manager.Comment("reaching state \'S2071\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2297;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2298;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2298 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2297);
            this.Manager.Comment("reaching state \'S2503\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2297, "trustHandle of CreateTrustedDomain, state S2503");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2298, "return of CreateTrustedDomain, state S2503");
            this.Manager.Comment("reaching state \'S2935\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2299;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2300;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2300 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2299);
            this.Manager.Comment("reaching state \'S3367\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2299, "trustHandle of OpenTrustedDomainByName, state S3367");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2300, "return of OpenTrustedDomainByName, state S3367");
            this.Manager.Comment("reaching state \'S3799\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2301;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2301 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4231\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2301, "return of SetTrustedDomainInfoByName, state S4231");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S688
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S688() {
            this.Manager.BeginTest("TestScenarioS15S688");
            this.Manager.Comment("reaching state \'S688\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S689\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1208\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2302;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2303;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2303 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2302);
            this.Manager.Comment("reaching state \'S1640\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2302, "policyHandle of OpenPolicy2, state S1640");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2303, "return of OpenPolicy2, state S1640");
            this.Manager.Comment("reaching state \'S2072\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2304;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2305;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2305 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2304);
            this.Manager.Comment("reaching state \'S2504\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2304, "trustHandle of CreateTrustedDomain, state S2504");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2305, "return of CreateTrustedDomain, state S2504");
            this.Manager.Comment("reaching state \'S2936\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2306;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2307;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2307 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2306);
            this.Manager.Comment("reaching state \'S3368\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2306, "trustHandle of OpenTrustedDomainByName, state S3368");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2307, "return of OpenTrustedDomainByName, state S3368");
            this.Manager.Comment("reaching state \'S3800\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2308;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2308 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4232\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2308, "return of SetTrustedDomainInfoByName, state S4232");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S690
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S690() {
            this.Manager.BeginTest("TestScenarioS15S690");
            this.Manager.Comment("reaching state \'S690\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S691\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1209\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2309;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2310;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2310 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2309);
            this.Manager.Comment("reaching state \'S1641\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2309, "policyHandle of OpenPolicy2, state S1641");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2310, "return of OpenPolicy2, state S1641");
            this.Manager.Comment("reaching state \'S2073\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2311;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2312;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2312 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2311);
            this.Manager.Comment("reaching state \'S2505\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2311, "trustHandle of CreateTrustedDomain, state S2505");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2312, "return of CreateTrustedDomain, state S2505");
            this.Manager.Comment("reaching state \'S2937\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2313;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2314;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2314 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2313);
            this.Manager.Comment("reaching state \'S3369\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2313, "trustHandle of OpenTrustedDomainByName, state S3369");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2314, "return of OpenTrustedDomainByName, state S3369");
            this.Manager.Comment("reaching state \'S3801\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2315;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2315 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4233\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2315, "return of SetTrustedDomainInfoByName, state S4233");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S692
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S692() {
            this.Manager.BeginTest("TestScenarioS15S692");
            this.Manager.Comment("reaching state \'S692\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S693\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1210\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2316;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2317;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2317 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2316);
            this.Manager.Comment("reaching state \'S1642\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2316, "policyHandle of OpenPolicy2, state S1642");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2317, "return of OpenPolicy2, state S1642");
            this.Manager.Comment("reaching state \'S2074\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2318;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2319;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2319 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2318);
            this.Manager.Comment("reaching state \'S2506\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2318, "trustHandle of CreateTrustedDomain, state S2506");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2319, "return of CreateTrustedDomain, state S2506");
            this.Manager.Comment("reaching state \'S2938\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2320;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2321;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2321 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2320);
            this.Manager.Comment("reaching state \'S3370\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2320, "trustHandle of OpenTrustedDomainByName, state S3370");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2321, "return of OpenTrustedDomainByName, state S3370");
            this.Manager.Comment("reaching state \'S3802\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2322;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2322 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4234\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2322, "return of SetTrustedDomainInfoByName, state S4234");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S694
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S694() {
            this.Manager.BeginTest("TestScenarioS15S694");
            this.Manager.Comment("reaching state \'S694\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S695\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1211\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2323;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2324;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2324 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2323);
            this.Manager.Comment("reaching state \'S1643\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2323, "policyHandle of OpenPolicy2, state S1643");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2324, "return of OpenPolicy2, state S1643");
            this.Manager.Comment("reaching state \'S2075\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2325;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2326;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2326 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2325);
            this.Manager.Comment("reaching state \'S2507\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2325, "trustHandle of CreateTrustedDomain, state S2507");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2326, "return of CreateTrustedDomain, state S2507");
            this.Manager.Comment("reaching state \'S2939\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2327;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2328;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2328 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2327);
            this.Manager.Comment("reaching state \'S3371\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2327, "trustHandle of OpenTrustedDomainByName, state S3371");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2328, "return of OpenTrustedDomainByName, state S3371");
            this.Manager.Comment("reaching state \'S3803\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2329;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2329 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4235\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2329, "return of SetTrustedDomainInfoByName, state S4235");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S696
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S696() {
            this.Manager.BeginTest("TestScenarioS15S696");
            this.Manager.Comment("reaching state \'S696\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S697\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1212\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2330;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2331;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2331 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2330);
            this.Manager.Comment("reaching state \'S1644\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2330, "policyHandle of OpenPolicy2, state S1644");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2331, "return of OpenPolicy2, state S1644");
            this.Manager.Comment("reaching state \'S2076\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2332;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2333;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2333 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2332);
            this.Manager.Comment("reaching state \'S2508\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2332, "trustHandle of CreateTrustedDomain, state S2508");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2333, "return of CreateTrustedDomain, state S2508");
            this.Manager.Comment("reaching state \'S2940\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2334;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2335;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2335 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2334);
            this.Manager.Comment("reaching state \'S3372\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2334, "trustHandle of OpenTrustedDomainByName, state S3372");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2335, "return of OpenTrustedDomainByName, state S3372");
            this.Manager.Comment("reaching state \'S3804\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2336;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,Invali" +
                    "d,True)\'");
            temp2336 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4236\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2336, "return of SetTrustedDomainInfoByName, state S4236");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S698
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S698() {
            this.Manager.BeginTest("TestScenarioS15S698");
            this.Manager.Comment("reaching state \'S698\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S699\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1213\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2337;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2338;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2338 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2337);
            this.Manager.Comment("reaching state \'S1645\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2337, "policyHandle of OpenPolicy2, state S1645");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2338, "return of OpenPolicy2, state S1645");
            this.Manager.Comment("reaching state \'S2077\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2339;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2340;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2340 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2339);
            this.Manager.Comment("reaching state \'S2509\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2339, "trustHandle of CreateTrustedDomain, state S2509");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2340, "return of CreateTrustedDomain, state S2509");
            this.Manager.Comment("reaching state \'S2941\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2341;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2342;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2342 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2341);
            this.Manager.Comment("reaching state \'S3373\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2341, "trustHandle of OpenTrustedDomainByName, state S3373");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2342, "return of OpenTrustedDomainByName, state S3373");
            this.Manager.Comment("reaching state \'S3805\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2343;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2343 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4237\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2343, "return of SetTrustedDomainInfoByName, state S4237");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S70
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S70() {
            this.Manager.BeginTest("TestScenarioS15S70");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S899\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2344;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2345;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2345 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2344);
            this.Manager.Comment("reaching state \'S1331\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2344, "policyHandle of OpenPolicy2, state S1331");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2345, "return of OpenPolicy2, state S1331");
            this.Manager.Comment("reaching state \'S1763\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2346;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2347;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2347 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2346);
            this.Manager.Comment("reaching state \'S2195\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2346, "trustHandle of CreateTrustedDomain, state S2195");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2347, "return of CreateTrustedDomain, state S2195");
            this.Manager.Comment("reaching state \'S2627\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2348;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2349;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2349 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2348);
            this.Manager.Comment("reaching state \'S3059\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2348, "trustHandle of OpenTrustedDomainByName, state S3059");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2349, "return of OpenTrustedDomainByName, state S3059");
            this.Manager.Comment("reaching state \'S3491\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2350;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2350 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3923\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2350, "return of SetTrustedDomainInfoByName, state S3923");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S700
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S700() {
            this.Manager.BeginTest("TestScenarioS15S700");
            this.Manager.Comment("reaching state \'S700\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S701\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1214\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2351;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2352;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2352 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2351);
            this.Manager.Comment("reaching state \'S1646\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2351, "policyHandle of OpenPolicy2, state S1646");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2352, "return of OpenPolicy2, state S1646");
            this.Manager.Comment("reaching state \'S2078\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2353;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2354;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2354 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2353);
            this.Manager.Comment("reaching state \'S2510\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2353, "trustHandle of CreateTrustedDomain, state S2510");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2354, "return of CreateTrustedDomain, state S2510");
            this.Manager.Comment("reaching state \'S2942\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2355;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2356;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2356 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2355);
            this.Manager.Comment("reaching state \'S3374\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2355, "trustHandle of OpenTrustedDomainByName, state S3374");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2356, "return of OpenTrustedDomainByName, state S3374");
            this.Manager.Comment("reaching state \'S3806\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2357;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2357 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4238\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2357, "return of SetTrustedDomainInfoByName, state S4238");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S702
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S702() {
            this.Manager.BeginTest("TestScenarioS15S702");
            this.Manager.Comment("reaching state \'S702\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1215\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2358;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2359;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2359 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2358);
            this.Manager.Comment("reaching state \'S1647\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2358, "policyHandle of OpenPolicy2, state S1647");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2359, "return of OpenPolicy2, state S1647");
            this.Manager.Comment("reaching state \'S2079\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2360;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2361;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2361 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2360);
            this.Manager.Comment("reaching state \'S2511\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2360, "trustHandle of CreateTrustedDomain, state S2511");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2361, "return of CreateTrustedDomain, state S2511");
            this.Manager.Comment("reaching state \'S2943\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2362;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2363;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2363 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2362);
            this.Manager.Comment("reaching state \'S3375\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2362, "trustHandle of OpenTrustedDomainByName, state S3375");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2363, "return of OpenTrustedDomainByName, state S3375");
            this.Manager.Comment("reaching state \'S3807\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2364;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2364 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4239\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2364, "return of SetTrustedDomainInfoByName, state S4239");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S704
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S704() {
            this.Manager.BeginTest("TestScenarioS15S704");
            this.Manager.Comment("reaching state \'S704\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S705\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1216\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2365;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2366;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2366 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2365);
            this.Manager.Comment("reaching state \'S1648\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2365, "policyHandle of OpenPolicy2, state S1648");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2366, "return of OpenPolicy2, state S1648");
            this.Manager.Comment("reaching state \'S2080\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2367;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2368;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2368 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2367);
            this.Manager.Comment("reaching state \'S2512\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2367, "trustHandle of CreateTrustedDomain, state S2512");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2368, "return of CreateTrustedDomain, state S2512");
            this.Manager.Comment("reaching state \'S2944\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2369;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2370;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2370 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2369);
            this.Manager.Comment("reaching state \'S3376\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2369, "trustHandle of OpenTrustedDomainByName, state S3376");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2370, "return of OpenTrustedDomainByName, state S3376");
            this.Manager.Comment("reaching state \'S3808\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2371;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2371 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4240\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2371, "return of SetTrustedDomainInfoByName, state S4240");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S706
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S706() {
            this.Manager.BeginTest("TestScenarioS15S706");
            this.Manager.Comment("reaching state \'S706\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S707\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1217\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2372;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2373;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2373 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2372);
            this.Manager.Comment("reaching state \'S1649\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2372, "policyHandle of OpenPolicy2, state S1649");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2373, "return of OpenPolicy2, state S1649");
            this.Manager.Comment("reaching state \'S2081\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2374;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2375;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2375 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2374);
            this.Manager.Comment("reaching state \'S2513\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2374, "trustHandle of CreateTrustedDomain, state S2513");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2375, "return of CreateTrustedDomain, state S2513");
            this.Manager.Comment("reaching state \'S2945\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2376;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2377;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2377 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2376);
            this.Manager.Comment("reaching state \'S3377\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2376, "trustHandle of OpenTrustedDomainByName, state S3377");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2377, "return of OpenTrustedDomainByName, state S3377");
            this.Manager.Comment("reaching state \'S3809\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2378;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2378 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4241\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2378, "return of SetTrustedDomainInfoByName, state S4241");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S708
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S708() {
            this.Manager.BeginTest("TestScenarioS15S708");
            this.Manager.Comment("reaching state \'S708\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S709\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1218\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2379;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2380;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2380 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2379);
            this.Manager.Comment("reaching state \'S1650\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2379, "policyHandle of OpenPolicy2, state S1650");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2380, "return of OpenPolicy2, state S1650");
            this.Manager.Comment("reaching state \'S2082\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2381;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2382;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2382 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2381);
            this.Manager.Comment("reaching state \'S2514\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2381, "trustHandle of CreateTrustedDomain, state S2514");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2382, "return of CreateTrustedDomain, state S2514");
            this.Manager.Comment("reaching state \'S2946\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2383;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2384;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2384 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2383);
            this.Manager.Comment("reaching state \'S3378\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2383, "trustHandle of OpenTrustedDomainByName, state S3378");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2384, "return of OpenTrustedDomainByName, state S3378");
            this.Manager.Comment("reaching state \'S3810\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2385;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2385 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4242\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2385, "return of SetTrustedDomainInfoByName, state S4242");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S710
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S710() {
            this.Manager.BeginTest("TestScenarioS15S710");
            this.Manager.Comment("reaching state \'S710\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S711\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1219\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2386;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2387;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2387 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2386);
            this.Manager.Comment("reaching state \'S1651\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2386, "policyHandle of OpenPolicy2, state S1651");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2387, "return of OpenPolicy2, state S1651");
            this.Manager.Comment("reaching state \'S2083\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2388;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2389;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2389 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2388);
            this.Manager.Comment("reaching state \'S2515\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2388, "trustHandle of CreateTrustedDomain, state S2515");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2389, "return of CreateTrustedDomain, state S2515");
            this.Manager.Comment("reaching state \'S2947\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2390;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2391;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2391 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2390);
            this.Manager.Comment("reaching state \'S3379\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2390, "trustHandle of OpenTrustedDomainByName, state S3379");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2391, "return of OpenTrustedDomainByName, state S3379");
            this.Manager.Comment("reaching state \'S3811\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2392;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp2392 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4243\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2392, "return of SetTrustedDomainInfoByName, state S4243");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S712
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S712() {
            this.Manager.BeginTest("TestScenarioS15S712");
            this.Manager.Comment("reaching state \'S712\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S713\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1220\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2393;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2394;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2394 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2393);
            this.Manager.Comment("reaching state \'S1652\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2393, "policyHandle of OpenPolicy2, state S1652");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2394, "return of OpenPolicy2, state S1652");
            this.Manager.Comment("reaching state \'S2084\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2395;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2396;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2396 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2395);
            this.Manager.Comment("reaching state \'S2516\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2395, "trustHandle of CreateTrustedDomain, state S2516");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2396, "return of CreateTrustedDomain, state S2516");
            this.Manager.Comment("reaching state \'S2948\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2397;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2398;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2398 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2397);
            this.Manager.Comment("reaching state \'S3380\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2397, "trustHandle of OpenTrustedDomainByName, state S3380");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2398, "return of OpenTrustedDomainByName, state S3380");
            this.Manager.Comment("reaching state \'S3812\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2399;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp2399 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4244\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2399, "return of SetTrustedDomainInfoByName, state S4244");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S714
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S714() {
            this.Manager.BeginTest("TestScenarioS15S714");
            this.Manager.Comment("reaching state \'S714\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S715\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1221\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2400;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2401;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2401 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2400);
            this.Manager.Comment("reaching state \'S1653\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2400, "policyHandle of OpenPolicy2, state S1653");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2401, "return of OpenPolicy2, state S1653");
            this.Manager.Comment("reaching state \'S2085\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2402;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2403;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2403 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2402);
            this.Manager.Comment("reaching state \'S2517\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2402, "trustHandle of CreateTrustedDomain, state S2517");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2403, "return of CreateTrustedDomain, state S2517");
            this.Manager.Comment("reaching state \'S2949\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2404;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2405;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2405 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2404);
            this.Manager.Comment("reaching state \'S3381\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2404, "trustHandle of OpenTrustedDomainByName, state S3381");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2405, "return of OpenTrustedDomainByName, state S3381");
            this.Manager.Comment("reaching state \'S3813\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2406;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2406 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4245\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2406, "return of SetTrustedDomainInfoByName, state S4245");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S716
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S716() {
            this.Manager.BeginTest("TestScenarioS15S716");
            this.Manager.Comment("reaching state \'S716\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S717\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1222\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2407;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2408;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2408 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2407);
            this.Manager.Comment("reaching state \'S1654\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2407, "policyHandle of OpenPolicy2, state S1654");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2408, "return of OpenPolicy2, state S1654");
            this.Manager.Comment("reaching state \'S2086\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2409;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2410;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2410 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2409);
            this.Manager.Comment("reaching state \'S2518\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2409, "trustHandle of CreateTrustedDomain, state S2518");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2410, "return of CreateTrustedDomain, state S2518");
            this.Manager.Comment("reaching state \'S2950\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2411;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2412;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2412 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2411);
            this.Manager.Comment("reaching state \'S3382\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2411, "trustHandle of OpenTrustedDomainByName, state S3382");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2412, "return of OpenTrustedDomainByName, state S3382");
            this.Manager.Comment("reaching state \'S3814\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2413;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,Invali" +
                    "d,True)\'");
            temp2413 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4246\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2413, "return of SetTrustedDomainInfoByName, state S4246");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S718
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S718() {
            this.Manager.BeginTest("TestScenarioS15S718");
            this.Manager.Comment("reaching state \'S718\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S719\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1223\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2414;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2415;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2415 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2414);
            this.Manager.Comment("reaching state \'S1655\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2414, "policyHandle of OpenPolicy2, state S1655");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2415, "return of OpenPolicy2, state S1655");
            this.Manager.Comment("reaching state \'S2087\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2416;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2417;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2417 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2416);
            this.Manager.Comment("reaching state \'S2519\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2416, "trustHandle of CreateTrustedDomain, state S2519");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2417, "return of CreateTrustedDomain, state S2519");
            this.Manager.Comment("reaching state \'S2951\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2418;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2419;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2419 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2418);
            this.Manager.Comment("reaching state \'S3383\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2418, "trustHandle of OpenTrustedDomainByName, state S3383");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2419, "return of OpenTrustedDomainByName, state S3383");
            this.Manager.Comment("reaching state \'S3815\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2420;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2420 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4247\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2420, "return of SetTrustedDomainInfoByName, state S4247");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S72
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S72() {
            this.Manager.BeginTest("TestScenarioS15S72");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S900\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2421;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2422;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2422 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2421);
            this.Manager.Comment("reaching state \'S1332\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2421, "policyHandle of OpenPolicy2, state S1332");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2422, "return of OpenPolicy2, state S1332");
            this.Manager.Comment("reaching state \'S1764\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2423;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2424;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2424 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2423);
            this.Manager.Comment("reaching state \'S2196\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2423, "trustHandle of CreateTrustedDomain, state S2196");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2424, "return of CreateTrustedDomain, state S2196");
            this.Manager.Comment("reaching state \'S2628\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2425;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2426;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2426 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2425);
            this.Manager.Comment("reaching state \'S3060\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2425, "trustHandle of OpenTrustedDomainByName, state S3060");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2426, "return of OpenTrustedDomainByName, state S3060");
            this.Manager.Comment("reaching state \'S3492\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2427;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2427 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S3924\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2427, "return of SetTrustedDomainInfoByName, state S3924");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S720
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S720() {
            this.Manager.BeginTest("TestScenarioS15S720");
            this.Manager.Comment("reaching state \'S720\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S721\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1224\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2428;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2429;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2429 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2428);
            this.Manager.Comment("reaching state \'S1656\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2428, "policyHandle of OpenPolicy2, state S1656");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2429, "return of OpenPolicy2, state S1656");
            this.Manager.Comment("reaching state \'S2088\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2430;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2431;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2431 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2430);
            this.Manager.Comment("reaching state \'S2520\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2430, "trustHandle of CreateTrustedDomain, state S2520");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2431, "return of CreateTrustedDomain, state S2520");
            this.Manager.Comment("reaching state \'S2952\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2432;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2433;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2433 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2432);
            this.Manager.Comment("reaching state \'S3384\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2432, "trustHandle of OpenTrustedDomainByName, state S3384");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2433, "return of OpenTrustedDomainByName, state S3384");
            this.Manager.Comment("reaching state \'S3816\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2434;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2434 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4248\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2434, "return of SetTrustedDomainInfoByName, state S4248");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S722
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S722() {
            this.Manager.BeginTest("TestScenarioS15S722");
            this.Manager.Comment("reaching state \'S722\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S723\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1225\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2435;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2436;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2436 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2435);
            this.Manager.Comment("reaching state \'S1657\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2435, "policyHandle of OpenPolicy2, state S1657");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2436, "return of OpenPolicy2, state S1657");
            this.Manager.Comment("reaching state \'S2089\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2437;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2438;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2438 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2437);
            this.Manager.Comment("reaching state \'S2521\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2437, "trustHandle of CreateTrustedDomain, state S2521");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2438, "return of CreateTrustedDomain, state S2521");
            this.Manager.Comment("reaching state \'S2953\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2439;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2440;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2440 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2439);
            this.Manager.Comment("reaching state \'S3385\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2439, "trustHandle of OpenTrustedDomainByName, state S3385");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2440, "return of OpenTrustedDomainByName, state S3385");
            this.Manager.Comment("reaching state \'S3817\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2441;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp2441 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4249\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2441, "return of SetTrustedDomainInfoByName, state S4249");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S724
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S724() {
            this.Manager.BeginTest("TestScenarioS15S724");
            this.Manager.Comment("reaching state \'S724\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S725\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1226\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2442;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2443;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2443 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2442);
            this.Manager.Comment("reaching state \'S1658\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2442, "policyHandle of OpenPolicy2, state S1658");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2443, "return of OpenPolicy2, state S1658");
            this.Manager.Comment("reaching state \'S2090\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2444;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2445;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2445 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2444);
            this.Manager.Comment("reaching state \'S2522\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2444, "trustHandle of CreateTrustedDomain, state S2522");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2445, "return of CreateTrustedDomain, state S2522");
            this.Manager.Comment("reaching state \'S2954\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2446;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2447;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2447 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2446);
            this.Manager.Comment("reaching state \'S3386\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2446, "trustHandle of OpenTrustedDomainByName, state S3386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2447, "return of OpenTrustedDomainByName, state S3386");
            this.Manager.Comment("reaching state \'S3818\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2448;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp2448 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4250\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2448, "return of SetTrustedDomainInfoByName, state S4250");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S726
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S726() {
            this.Manager.BeginTest("TestScenarioS15S726");
            this.Manager.Comment("reaching state \'S726\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S727\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1227\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2449;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2450;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2450 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2449);
            this.Manager.Comment("reaching state \'S1659\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2449, "policyHandle of OpenPolicy2, state S1659");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2450, "return of OpenPolicy2, state S1659");
            this.Manager.Comment("reaching state \'S2091\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2451;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2452;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2452 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2451);
            this.Manager.Comment("reaching state \'S2523\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2451, "trustHandle of CreateTrustedDomain, state S2523");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2452, "return of CreateTrustedDomain, state S2523");
            this.Manager.Comment("reaching state \'S2955\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2453;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2454;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2454 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2453);
            this.Manager.Comment("reaching state \'S3387\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2453, "trustHandle of OpenTrustedDomainByName, state S3387");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2454, "return of OpenTrustedDomainByName, state S3387");
            this.Manager.Comment("reaching state \'S3819\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2455;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2455 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4251\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2455, "return of SetTrustedDomainInfoByName, state S4251");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S728
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S728() {
            this.Manager.BeginTest("TestScenarioS15S728");
            this.Manager.Comment("reaching state \'S728\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S729\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1228\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2456;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2457;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2457 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2456);
            this.Manager.Comment("reaching state \'S1660\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2456, "policyHandle of OpenPolicy2, state S1660");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2457, "return of OpenPolicy2, state S1660");
            this.Manager.Comment("reaching state \'S2092\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2458;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2459;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2459 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2458);
            this.Manager.Comment("reaching state \'S2524\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2458, "trustHandle of CreateTrustedDomain, state S2524");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2459, "return of CreateTrustedDomain, state S2524");
            this.Manager.Comment("reaching state \'S2956\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2460;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2461;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2461 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2460);
            this.Manager.Comment("reaching state \'S3388\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2460, "trustHandle of OpenTrustedDomainByName, state S3388");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2461, "return of OpenTrustedDomainByName, state S3388");
            this.Manager.Comment("reaching state \'S3820\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2462;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2462 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4252\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2462, "return of SetTrustedDomainInfoByName, state S4252");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S730
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S730() {
            this.Manager.BeginTest("TestScenarioS15S730");
            this.Manager.Comment("reaching state \'S730\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S731\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1229\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2463;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2464;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2464 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2463);
            this.Manager.Comment("reaching state \'S1661\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2463, "policyHandle of OpenPolicy2, state S1661");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2464, "return of OpenPolicy2, state S1661");
            this.Manager.Comment("reaching state \'S2093\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2465;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2466;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2466 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2465);
            this.Manager.Comment("reaching state \'S2525\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2465, "trustHandle of CreateTrustedDomain, state S2525");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2466, "return of CreateTrustedDomain, state S2525");
            this.Manager.Comment("reaching state \'S2957\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2467;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2468;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2468 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2467);
            this.Manager.Comment("reaching state \'S3389\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2467, "trustHandle of OpenTrustedDomainByName, state S3389");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2468, "return of OpenTrustedDomainByName, state S3389");
            this.Manager.Comment("reaching state \'S3821\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2469;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2469 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4253\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2469, "return of SetTrustedDomainInfoByName, state S4253");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S732
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S732() {
            this.Manager.BeginTest("TestScenarioS15S732");
            this.Manager.Comment("reaching state \'S732\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S733\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1230\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2470;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2471;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2471 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2470);
            this.Manager.Comment("reaching state \'S1662\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2470, "policyHandle of OpenPolicy2, state S1662");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2471, "return of OpenPolicy2, state S1662");
            this.Manager.Comment("reaching state \'S2094\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2472;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2473;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2473 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2472);
            this.Manager.Comment("reaching state \'S2526\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2472, "trustHandle of CreateTrustedDomain, state S2526");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2473, "return of CreateTrustedDomain, state S2526");
            this.Manager.Comment("reaching state \'S2958\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2474;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2475;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2475 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2474);
            this.Manager.Comment("reaching state \'S3390\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2474, "trustHandle of OpenTrustedDomainByName, state S3390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2475, "return of OpenTrustedDomainByName, state S3390");
            this.Manager.Comment("reaching state \'S3822\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2476;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2476 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4254\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2476, "return of SetTrustedDomainInfoByName, state S4254");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S734
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S734() {
            this.Manager.BeginTest("TestScenarioS15S734");
            this.Manager.Comment("reaching state \'S734\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S735\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1231\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2477;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2478;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2478 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2477);
            this.Manager.Comment("reaching state \'S1663\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2477, "policyHandle of OpenPolicy2, state S1663");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2478, "return of OpenPolicy2, state S1663");
            this.Manager.Comment("reaching state \'S2095\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2479;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2480;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2480 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2479);
            this.Manager.Comment("reaching state \'S2527\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2479, "trustHandle of CreateTrustedDomain, state S2527");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2480, "return of CreateTrustedDomain, state S2527");
            this.Manager.Comment("reaching state \'S2959\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2481;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2482;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2482 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2481);
            this.Manager.Comment("reaching state \'S3391\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2481, "trustHandle of OpenTrustedDomainByName, state S3391");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2482, "return of OpenTrustedDomainByName, state S3391");
            this.Manager.Comment("reaching state \'S3823\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2483;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2483 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4255\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2483, "return of SetTrustedDomainInfoByName, state S4255");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S736
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S736() {
            this.Manager.BeginTest("TestScenarioS15S736");
            this.Manager.Comment("reaching state \'S736\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S737\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1232\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2484;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2485;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2485 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2484);
            this.Manager.Comment("reaching state \'S1664\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2484, "policyHandle of OpenPolicy2, state S1664");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2485, "return of OpenPolicy2, state S1664");
            this.Manager.Comment("reaching state \'S2096\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2486;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2487;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2487 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2486);
            this.Manager.Comment("reaching state \'S2528\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2486, "trustHandle of CreateTrustedDomain, state S2528");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2487, "return of CreateTrustedDomain, state S2528");
            this.Manager.Comment("reaching state \'S2960\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2488;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2489;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2489 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2488);
            this.Manager.Comment("reaching state \'S3392\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2488, "trustHandle of OpenTrustedDomainByName, state S3392");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2489, "return of OpenTrustedDomainByName, state S3392");
            this.Manager.Comment("reaching state \'S3824\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2490;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp2490 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4256\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2490, "return of SetTrustedDomainInfoByName, state S4256");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S738
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S738() {
            this.Manager.BeginTest("TestScenarioS15S738");
            this.Manager.Comment("reaching state \'S738\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1233\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2491;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2492;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2492 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2491);
            this.Manager.Comment("reaching state \'S1665\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2491, "policyHandle of OpenPolicy2, state S1665");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2492, "return of OpenPolicy2, state S1665");
            this.Manager.Comment("reaching state \'S2097\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2493;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2494;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2494 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2493);
            this.Manager.Comment("reaching state \'S2529\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2493, "trustHandle of CreateTrustedDomain, state S2529");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2494, "return of CreateTrustedDomain, state S2529");
            this.Manager.Comment("reaching state \'S2961\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2495;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2496;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2496 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2495);
            this.Manager.Comment("reaching state \'S3393\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2495, "trustHandle of OpenTrustedDomainByName, state S3393");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2496, "return of OpenTrustedDomainByName, state S3393");
            this.Manager.Comment("reaching state \'S3825\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2497;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2497 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4257\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2497, "return of SetTrustedDomainInfoByName, state S4257");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S74
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S74() {
            this.Manager.BeginTest("TestScenarioS15S74");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S901\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2498;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2499;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2499 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2498);
            this.Manager.Comment("reaching state \'S1333\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2498, "policyHandle of OpenPolicy2, state S1333");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2499, "return of OpenPolicy2, state S1333");
            this.Manager.Comment("reaching state \'S1765\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2500;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2501;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2501 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2500);
            this.Manager.Comment("reaching state \'S2197\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2500, "trustHandle of CreateTrustedDomain, state S2197");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2501, "return of CreateTrustedDomain, state S2197");
            this.Manager.Comment("reaching state \'S2629\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2502;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2503;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2503 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2502);
            this.Manager.Comment("reaching state \'S3061\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2502, "trustHandle of OpenTrustedDomainByName, state S3061");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2503, "return of OpenTrustedDomainByName, state S3061");
            this.Manager.Comment("reaching state \'S3493\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2504;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2504 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S3925\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2504, "return of SetTrustedDomainInfoByName, state S3925");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S740
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S740() {
            this.Manager.BeginTest("TestScenarioS15S740");
            this.Manager.Comment("reaching state \'S740\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S741\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1234\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2505;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2506;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2506 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2505);
            this.Manager.Comment("reaching state \'S1666\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2505, "policyHandle of OpenPolicy2, state S1666");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2506, "return of OpenPolicy2, state S1666");
            this.Manager.Comment("reaching state \'S2098\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2507;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2508;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2508 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2507);
            this.Manager.Comment("reaching state \'S2530\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2507, "trustHandle of CreateTrustedDomain, state S2530");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2508, "return of CreateTrustedDomain, state S2530");
            this.Manager.Comment("reaching state \'S2962\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2509;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2510;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2510 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2509);
            this.Manager.Comment("reaching state \'S3394\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2509, "trustHandle of OpenTrustedDomainByName, state S3394");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2510, "return of OpenTrustedDomainByName, state S3394");
            this.Manager.Comment("reaching state \'S3826\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2511;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2511 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4258\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2511, "return of SetTrustedDomainInfoByName, state S4258");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S742
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S742() {
            this.Manager.BeginTest("TestScenarioS15S742");
            this.Manager.Comment("reaching state \'S742\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S743\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1235\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2512;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2513;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2513 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2512);
            this.Manager.Comment("reaching state \'S1667\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2512, "policyHandle of OpenPolicy2, state S1667");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2513, "return of OpenPolicy2, state S1667");
            this.Manager.Comment("reaching state \'S2099\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2514;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2515;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2515 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2514);
            this.Manager.Comment("reaching state \'S2531\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2514, "trustHandle of CreateTrustedDomain, state S2531");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2515, "return of CreateTrustedDomain, state S2531");
            this.Manager.Comment("reaching state \'S2963\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2516;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2517;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2517 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2516);
            this.Manager.Comment("reaching state \'S3395\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2516, "trustHandle of OpenTrustedDomainByName, state S3395");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2517, "return of OpenTrustedDomainByName, state S3395");
            this.Manager.Comment("reaching state \'S3827\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2518;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp2518 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4259\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2518, "return of SetTrustedDomainInfoByName, state S4259");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S744
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S744() {
            this.Manager.BeginTest("TestScenarioS15S744");
            this.Manager.Comment("reaching state \'S744\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S745\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1236\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2519;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2520;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2520 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2519);
            this.Manager.Comment("reaching state \'S1668\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2519, "policyHandle of OpenPolicy2, state S1668");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2520, "return of OpenPolicy2, state S1668");
            this.Manager.Comment("reaching state \'S2100\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2521;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2522;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2522 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2521);
            this.Manager.Comment("reaching state \'S2532\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2521, "trustHandle of CreateTrustedDomain, state S2532");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2522, "return of CreateTrustedDomain, state S2532");
            this.Manager.Comment("reaching state \'S2964\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2523;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2524;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2524 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2523);
            this.Manager.Comment("reaching state \'S3396\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2523, "trustHandle of OpenTrustedDomainByName, state S3396");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2524, "return of OpenTrustedDomainByName, state S3396");
            this.Manager.Comment("reaching state \'S3828\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2525;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp2525 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4260\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2525, "return of SetTrustedDomainInfoByName, state S4260");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S746
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S746() {
            this.Manager.BeginTest("TestScenarioS15S746");
            this.Manager.Comment("reaching state \'S746\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S747\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1237\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2526;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2527;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2527 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2526);
            this.Manager.Comment("reaching state \'S1669\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2526, "policyHandle of OpenPolicy2, state S1669");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2527, "return of OpenPolicy2, state S1669");
            this.Manager.Comment("reaching state \'S2101\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2528;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2529;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2529 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2528);
            this.Manager.Comment("reaching state \'S2533\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2528, "trustHandle of CreateTrustedDomain, state S2533");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2529, "return of CreateTrustedDomain, state S2533");
            this.Manager.Comment("reaching state \'S2965\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2530;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2531;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2531 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2530);
            this.Manager.Comment("reaching state \'S3397\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2530, "trustHandle of OpenTrustedDomainByName, state S3397");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2531, "return of OpenTrustedDomainByName, state S3397");
            this.Manager.Comment("reaching state \'S3829\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2532;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp2532 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4261\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2532, "return of SetTrustedDomainInfoByName, state S4261");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S748
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S748() {
            this.Manager.BeginTest("TestScenarioS15S748");
            this.Manager.Comment("reaching state \'S748\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S749\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1238\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2533;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2534;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2534 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2533);
            this.Manager.Comment("reaching state \'S1670\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2533, "policyHandle of OpenPolicy2, state S1670");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2534, "return of OpenPolicy2, state S1670");
            this.Manager.Comment("reaching state \'S2102\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2535;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2536;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2536 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2535);
            this.Manager.Comment("reaching state \'S2534\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2535, "trustHandle of CreateTrustedDomain, state S2534");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2536, "return of CreateTrustedDomain, state S2534");
            this.Manager.Comment("reaching state \'S2966\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2537;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2538;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2538 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2537);
            this.Manager.Comment("reaching state \'S3398\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2537, "trustHandle of OpenTrustedDomainByName, state S3398");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2538, "return of OpenTrustedDomainByName, state S3398");
            this.Manager.Comment("reaching state \'S3830\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2539;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp2539 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4262\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2539, "return of SetTrustedDomainInfoByName, state S4262");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S750
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S750() {
            this.Manager.BeginTest("TestScenarioS15S750");
            this.Manager.Comment("reaching state \'S750\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S751\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1239\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2540;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2541;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2541 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2540);
            this.Manager.Comment("reaching state \'S1671\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2540, "policyHandle of OpenPolicy2, state S1671");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2541, "return of OpenPolicy2, state S1671");
            this.Manager.Comment("reaching state \'S2103\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2542;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2543;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2543 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2542);
            this.Manager.Comment("reaching state \'S2535\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2542, "trustHandle of CreateTrustedDomain, state S2535");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2543, "return of CreateTrustedDomain, state S2535");
            this.Manager.Comment("reaching state \'S2967\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2544;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2545;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2545 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2544);
            this.Manager.Comment("reaching state \'S3399\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2544, "trustHandle of OpenTrustedDomainByName, state S3399");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2545, "return of OpenTrustedDomainByName, state S3399");
            this.Manager.Comment("reaching state \'S3831\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2546;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp2546 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4263\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2546, "return of SetTrustedDomainInfoByName, state S4263");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S752
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S752() {
            this.Manager.BeginTest("TestScenarioS15S752");
            this.Manager.Comment("reaching state \'S752\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S753\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1240\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2547;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2548;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2548 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2547);
            this.Manager.Comment("reaching state \'S1672\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2547, "policyHandle of OpenPolicy2, state S1672");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2548, "return of OpenPolicy2, state S1672");
            this.Manager.Comment("reaching state \'S2104\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2549;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2550;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2550 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2549);
            this.Manager.Comment("reaching state \'S2536\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2549, "trustHandle of CreateTrustedDomain, state S2536");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2550, "return of CreateTrustedDomain, state S2536");
            this.Manager.Comment("reaching state \'S2968\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2551;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2552;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2552 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2551);
            this.Manager.Comment("reaching state \'S3400\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2551, "trustHandle of OpenTrustedDomainByName, state S3400");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2552, "return of OpenTrustedDomainByName, state S3400");
            this.Manager.Comment("reaching state \'S3832\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2553;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2553 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4264\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2553, "return of SetTrustedDomainInfoByName, state S4264");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S754
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S754() {
            this.Manager.BeginTest("TestScenarioS15S754");
            this.Manager.Comment("reaching state \'S754\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S755\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1241\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2554;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2555;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2555 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2554);
            this.Manager.Comment("reaching state \'S1673\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2554, "policyHandle of OpenPolicy2, state S1673");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2555, "return of OpenPolicy2, state S1673");
            this.Manager.Comment("reaching state \'S2105\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2556;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2557;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2557 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2556);
            this.Manager.Comment("reaching state \'S2537\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2556, "trustHandle of CreateTrustedDomain, state S2537");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2557, "return of CreateTrustedDomain, state S2537");
            this.Manager.Comment("reaching state \'S2969\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2558;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2559;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2559 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2558);
            this.Manager.Comment("reaching state \'S3401\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2558, "trustHandle of OpenTrustedDomainByName, state S3401");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2559, "return of OpenTrustedDomainByName, state S3401");
            this.Manager.Comment("reaching state \'S3833\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2560;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2560 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4265\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2560, "return of SetTrustedDomainInfoByName, state S4265");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S756
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S756() {
            this.Manager.BeginTest("TestScenarioS15S756");
            this.Manager.Comment("reaching state \'S756\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S757\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1242\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2561;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2562;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2562 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2561);
            this.Manager.Comment("reaching state \'S1674\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2561, "policyHandle of OpenPolicy2, state S1674");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2562, "return of OpenPolicy2, state S1674");
            this.Manager.Comment("reaching state \'S2106\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2563;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2564;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2564 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2563);
            this.Manager.Comment("reaching state \'S2538\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2563, "trustHandle of CreateTrustedDomain, state S2538");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2564, "return of CreateTrustedDomain, state S2538");
            this.Manager.Comment("reaching state \'S2970\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2565;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2566;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2566 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2565);
            this.Manager.Comment("reaching state \'S3402\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2565, "trustHandle of OpenTrustedDomainByName, state S3402");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2566, "return of OpenTrustedDomainByName, state S3402");
            this.Manager.Comment("reaching state \'S3834\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2567;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2567 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4266\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2567, "return of SetTrustedDomainInfoByName, state S4266");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S758
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S758() {
            this.Manager.BeginTest("TestScenarioS15S758");
            this.Manager.Comment("reaching state \'S758\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S759\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1243\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2568;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2569;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2569 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2568);
            this.Manager.Comment("reaching state \'S1675\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2568, "policyHandle of OpenPolicy2, state S1675");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2569, "return of OpenPolicy2, state S1675");
            this.Manager.Comment("reaching state \'S2107\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2570;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2571;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2571 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2570);
            this.Manager.Comment("reaching state \'S2539\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2570, "trustHandle of CreateTrustedDomain, state S2539");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2571, "return of CreateTrustedDomain, state S2539");
            this.Manager.Comment("reaching state \'S2971\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2572;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2573;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2573 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2572);
            this.Manager.Comment("reaching state \'S3403\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2572, "trustHandle of OpenTrustedDomainByName, state S3403");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2573, "return of OpenTrustedDomainByName, state S3403");
            this.Manager.Comment("reaching state \'S3835\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2574;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp2574 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4267\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2574, "return of SetTrustedDomainInfoByName, state S4267");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S76
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S76() {
            this.Manager.BeginTest("TestScenarioS15S76");
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S902\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2575;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2576;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2576 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2575);
            this.Manager.Comment("reaching state \'S1334\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2575, "policyHandle of OpenPolicy2, state S1334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2576, "return of OpenPolicy2, state S1334");
            this.Manager.Comment("reaching state \'S1766\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2577;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2578;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2578 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2577);
            this.Manager.Comment("reaching state \'S2198\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2577, "trustHandle of CreateTrustedDomain, state S2198");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2578, "return of CreateTrustedDomain, state S2198");
            this.Manager.Comment("reaching state \'S2630\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2579;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2580;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2580 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2579);
            this.Manager.Comment("reaching state \'S3062\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2579, "trustHandle of OpenTrustedDomainByName, state S3062");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2580, "return of OpenTrustedDomainByName, state S3062");
            this.Manager.Comment("reaching state \'S3494\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2581;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2581 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3926\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2581, "return of SetTrustedDomainInfoByName, state S3926");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S760
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S760() {
            this.Manager.BeginTest("TestScenarioS15S760");
            this.Manager.Comment("reaching state \'S760\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S761\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1244\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2582;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2583;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2583 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2582);
            this.Manager.Comment("reaching state \'S1676\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2582, "policyHandle of OpenPolicy2, state S1676");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2583, "return of OpenPolicy2, state S1676");
            this.Manager.Comment("reaching state \'S2108\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2584;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2585;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2585 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2584);
            this.Manager.Comment("reaching state \'S2540\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2584, "trustHandle of CreateTrustedDomain, state S2540");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2585, "return of CreateTrustedDomain, state S2540");
            this.Manager.Comment("reaching state \'S2972\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2586;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2587;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2587 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2586);
            this.Manager.Comment("reaching state \'S3404\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2586, "trustHandle of OpenTrustedDomainByName, state S3404");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2587, "return of OpenTrustedDomainByName, state S3404");
            this.Manager.Comment("reaching state \'S3836\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2588;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2588 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4268\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2588, "return of SetTrustedDomainInfoByName, state S4268");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S762
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S762() {
            this.Manager.BeginTest("TestScenarioS15S762");
            this.Manager.Comment("reaching state \'S762\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S763\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1245\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2589;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2590;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2590 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2589);
            this.Manager.Comment("reaching state \'S1677\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2589, "policyHandle of OpenPolicy2, state S1677");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2590, "return of OpenPolicy2, state S1677");
            this.Manager.Comment("reaching state \'S2109\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2591;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2592;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2592 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2591);
            this.Manager.Comment("reaching state \'S2541\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2591, "trustHandle of CreateTrustedDomain, state S2541");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2592, "return of CreateTrustedDomain, state S2541");
            this.Manager.Comment("reaching state \'S2973\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2593;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2594;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2594 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2593);
            this.Manager.Comment("reaching state \'S3405\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2593, "trustHandle of OpenTrustedDomainByName, state S3405");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2594, "return of OpenTrustedDomainByName, state S3405");
            this.Manager.Comment("reaching state \'S3837\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2595;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2595 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4269\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2595, "return of SetTrustedDomainInfoByName, state S4269");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S764
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S764() {
            this.Manager.BeginTest("TestScenarioS15S764");
            this.Manager.Comment("reaching state \'S764\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S765\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1246\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2596;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2597;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2597 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2596);
            this.Manager.Comment("reaching state \'S1678\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2596, "policyHandle of OpenPolicy2, state S1678");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2597, "return of OpenPolicy2, state S1678");
            this.Manager.Comment("reaching state \'S2110\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2598;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2599;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2599 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2598);
            this.Manager.Comment("reaching state \'S2542\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2598, "trustHandle of CreateTrustedDomain, state S2542");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2599, "return of CreateTrustedDomain, state S2542");
            this.Manager.Comment("reaching state \'S2974\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2600;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2601;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2601 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2600);
            this.Manager.Comment("reaching state \'S3406\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2600, "trustHandle of OpenTrustedDomainByName, state S3406");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2601, "return of OpenTrustedDomainByName, state S3406");
            this.Manager.Comment("reaching state \'S3838\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2602;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,Invali" +
                    "d,True)\'");
            temp2602 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4270\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2602, "return of SetTrustedDomainInfoByName, state S4270");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S766
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S766() {
            this.Manager.BeginTest("TestScenarioS15S766");
            this.Manager.Comment("reaching state \'S766\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S767\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1247\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2603;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2604;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2604 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2603);
            this.Manager.Comment("reaching state \'S1679\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2603, "policyHandle of OpenPolicy2, state S1679");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2604, "return of OpenPolicy2, state S1679");
            this.Manager.Comment("reaching state \'S2111\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2605;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2606;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2606 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2605);
            this.Manager.Comment("reaching state \'S2543\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2605, "trustHandle of CreateTrustedDomain, state S2543");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2606, "return of CreateTrustedDomain, state S2543");
            this.Manager.Comment("reaching state \'S2975\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2607;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2608;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2608 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2607);
            this.Manager.Comment("reaching state \'S3407\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2607, "trustHandle of OpenTrustedDomainByName, state S3407");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2608, "return of OpenTrustedDomainByName, state S3407");
            this.Manager.Comment("reaching state \'S3839\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2609;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,Invali" +
                    "d,True)\'");
            temp2609 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4271\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2609, "return of SetTrustedDomainInfoByName, state S4271");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S768
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S768() {
            this.Manager.BeginTest("TestScenarioS15S768");
            this.Manager.Comment("reaching state \'S768\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S769\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1248\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2610;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2611;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2611 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2610);
            this.Manager.Comment("reaching state \'S1680\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2610, "policyHandle of OpenPolicy2, state S1680");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2611, "return of OpenPolicy2, state S1680");
            this.Manager.Comment("reaching state \'S2112\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2612;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2613;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2613 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2612);
            this.Manager.Comment("reaching state \'S2544\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2612, "trustHandle of CreateTrustedDomain, state S2544");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2613, "return of CreateTrustedDomain, state S2544");
            this.Manager.Comment("reaching state \'S2976\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2614;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2615;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2615 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2614);
            this.Manager.Comment("reaching state \'S3408\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2614, "trustHandle of OpenTrustedDomainByName, state S3408");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2615, "return of OpenTrustedDomainByName, state S3408");
            this.Manager.Comment("reaching state \'S3840\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2616;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2616 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4272\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2616, "return of SetTrustedDomainInfoByName, state S4272");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S770
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S770() {
            this.Manager.BeginTest("TestScenarioS15S770");
            this.Manager.Comment("reaching state \'S770\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S771\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1249\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2617;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2618;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2618 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2617);
            this.Manager.Comment("reaching state \'S1681\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2617, "policyHandle of OpenPolicy2, state S1681");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2618, "return of OpenPolicy2, state S1681");
            this.Manager.Comment("reaching state \'S2113\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2619;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2620;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2620 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2619);
            this.Manager.Comment("reaching state \'S2545\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2619, "trustHandle of CreateTrustedDomain, state S2545");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2620, "return of CreateTrustedDomain, state S2545");
            this.Manager.Comment("reaching state \'S2977\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2621;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2622;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2622 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2621);
            this.Manager.Comment("reaching state \'S3409\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2621, "trustHandle of OpenTrustedDomainByName, state S3409");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2622, "return of OpenTrustedDomainByName, state S3409");
            this.Manager.Comment("reaching state \'S3841\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2623;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp2623 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4273\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2623, "return of SetTrustedDomainInfoByName, state S4273");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S772
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S772() {
            this.Manager.BeginTest("TestScenarioS15S772");
            this.Manager.Comment("reaching state \'S772\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S773\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1250\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2624;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2625;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2625 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2624);
            this.Manager.Comment("reaching state \'S1682\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2624, "policyHandle of OpenPolicy2, state S1682");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2625, "return of OpenPolicy2, state S1682");
            this.Manager.Comment("reaching state \'S2114\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2626;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2627;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2627 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2626);
            this.Manager.Comment("reaching state \'S2546\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2626, "trustHandle of CreateTrustedDomain, state S2546");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2627, "return of CreateTrustedDomain, state S2546");
            this.Manager.Comment("reaching state \'S2978\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2628;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2629;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2629 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2628);
            this.Manager.Comment("reaching state \'S3410\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2628, "trustHandle of OpenTrustedDomainByName, state S3410");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2629, "return of OpenTrustedDomainByName, state S3410");
            this.Manager.Comment("reaching state \'S3842\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2630;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2630 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4274\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2630, "return of SetTrustedDomainInfoByName, state S4274");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S774
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S774() {
            this.Manager.BeginTest("TestScenarioS15S774");
            this.Manager.Comment("reaching state \'S774\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S775\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1251\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2631;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2632;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2632 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2631);
            this.Manager.Comment("reaching state \'S1683\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2631, "policyHandle of OpenPolicy2, state S1683");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2632, "return of OpenPolicy2, state S1683");
            this.Manager.Comment("reaching state \'S2115\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2633;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2634;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2634 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2633);
            this.Manager.Comment("reaching state \'S2547\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2633, "trustHandle of CreateTrustedDomain, state S2547");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2634, "return of CreateTrustedDomain, state S2547");
            this.Manager.Comment("reaching state \'S2979\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2635;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2636;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2636 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2635);
            this.Manager.Comment("reaching state \'S3411\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2635, "trustHandle of OpenTrustedDomainByName, state S3411");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2636, "return of OpenTrustedDomainByName, state S3411");
            this.Manager.Comment("reaching state \'S3843\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2637;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2637 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4275\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2637, "return of SetTrustedDomainInfoByName, state S4275");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S776
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S776() {
            this.Manager.BeginTest("TestScenarioS15S776");
            this.Manager.Comment("reaching state \'S776\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S777\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1252\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2638;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2639;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2639 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2638);
            this.Manager.Comment("reaching state \'S1684\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2638, "policyHandle of OpenPolicy2, state S1684");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2639, "return of OpenPolicy2, state S1684");
            this.Manager.Comment("reaching state \'S2116\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2640;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2641;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2641 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2640);
            this.Manager.Comment("reaching state \'S2548\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2640, "trustHandle of CreateTrustedDomain, state S2548");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2641, "return of CreateTrustedDomain, state S2548");
            this.Manager.Comment("reaching state \'S2980\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2642;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2643;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2643 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2642);
            this.Manager.Comment("reaching state \'S3412\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2642, "trustHandle of OpenTrustedDomainByName, state S3412");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2643, "return of OpenTrustedDomainByName, state S3412");
            this.Manager.Comment("reaching state \'S3844\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2644;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2644 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4276\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2644, "return of SetTrustedDomainInfoByName, state S4276");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S778
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S778() {
            this.Manager.BeginTest("TestScenarioS15S778");
            this.Manager.Comment("reaching state \'S778\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S779\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1253\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2645;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2646;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2646 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2645);
            this.Manager.Comment("reaching state \'S1685\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2645, "policyHandle of OpenPolicy2, state S1685");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2646, "return of OpenPolicy2, state S1685");
            this.Manager.Comment("reaching state \'S2117\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2647;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2648;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2648 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2647);
            this.Manager.Comment("reaching state \'S2549\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2647, "trustHandle of CreateTrustedDomain, state S2549");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2648, "return of CreateTrustedDomain, state S2549");
            this.Manager.Comment("reaching state \'S2981\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2649;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2650;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2650 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2649);
            this.Manager.Comment("reaching state \'S3413\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2649, "trustHandle of OpenTrustedDomainByName, state S3413");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2650, "return of OpenTrustedDomainByName, state S3413");
            this.Manager.Comment("reaching state \'S3845\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2651;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp2651 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4277\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2651, "return of SetTrustedDomainInfoByName, state S4277");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S78
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S78() {
            this.Manager.BeginTest("TestScenarioS15S78");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S903\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2652;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2653;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2653 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2652);
            this.Manager.Comment("reaching state \'S1335\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2652, "policyHandle of OpenPolicy2, state S1335");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2653, "return of OpenPolicy2, state S1335");
            this.Manager.Comment("reaching state \'S1767\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2654;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2655;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2655 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2654);
            this.Manager.Comment("reaching state \'S2199\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2654, "trustHandle of CreateTrustedDomain, state S2199");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2655, "return of CreateTrustedDomain, state S2199");
            this.Manager.Comment("reaching state \'S2631\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2656;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2657;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2657 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2656);
            this.Manager.Comment("reaching state \'S3063\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2656, "trustHandle of OpenTrustedDomainByName, state S3063");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2657, "return of OpenTrustedDomainByName, state S3063");
            this.Manager.Comment("reaching state \'S3495\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2658;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2658 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3927\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2658, "return of SetTrustedDomainInfoByName, state S3927");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S780
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S780() {
            this.Manager.BeginTest("TestScenarioS15S780");
            this.Manager.Comment("reaching state \'S780\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S781\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1254\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2659;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2660;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2660 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2659);
            this.Manager.Comment("reaching state \'S1686\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2659, "policyHandle of OpenPolicy2, state S1686");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2660, "return of OpenPolicy2, state S1686");
            this.Manager.Comment("reaching state \'S2118\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2661;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2662;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2662 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2661);
            this.Manager.Comment("reaching state \'S2550\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2661, "trustHandle of CreateTrustedDomain, state S2550");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2662, "return of CreateTrustedDomain, state S2550");
            this.Manager.Comment("reaching state \'S2982\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2663;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2664;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2664 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2663);
            this.Manager.Comment("reaching state \'S3414\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2663, "trustHandle of OpenTrustedDomainByName, state S3414");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2664, "return of OpenTrustedDomainByName, state S3414");
            this.Manager.Comment("reaching state \'S3846\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2665;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp2665 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4278\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2665, "return of SetTrustedDomainInfoByName, state S4278");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S782
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S782() {
            this.Manager.BeginTest("TestScenarioS15S782");
            this.Manager.Comment("reaching state \'S782\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S783\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1255\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2666;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2667;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2667 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2666);
            this.Manager.Comment("reaching state \'S1687\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2666, "policyHandle of OpenPolicy2, state S1687");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2667, "return of OpenPolicy2, state S1687");
            this.Manager.Comment("reaching state \'S2119\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2668;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2669;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2669 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2668);
            this.Manager.Comment("reaching state \'S2551\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2668, "trustHandle of CreateTrustedDomain, state S2551");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2669, "return of CreateTrustedDomain, state S2551");
            this.Manager.Comment("reaching state \'S2983\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2670;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2671;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2671 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2670);
            this.Manager.Comment("reaching state \'S3415\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2670, "trustHandle of OpenTrustedDomainByName, state S3415");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2671, "return of OpenTrustedDomainByName, state S3415");
            this.Manager.Comment("reaching state \'S3847\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2672;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp2672 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4279\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2672, "return of SetTrustedDomainInfoByName, state S4279");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S784
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S784() {
            this.Manager.BeginTest("TestScenarioS15S784");
            this.Manager.Comment("reaching state \'S784\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S785\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1256\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2673;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2674;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2674 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2673);
            this.Manager.Comment("reaching state \'S1688\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2673, "policyHandle of OpenPolicy2, state S1688");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2674, "return of OpenPolicy2, state S1688");
            this.Manager.Comment("reaching state \'S2120\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2675;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2676;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2676 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2675);
            this.Manager.Comment("reaching state \'S2552\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2675, "trustHandle of CreateTrustedDomain, state S2552");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2676, "return of CreateTrustedDomain, state S2552");
            this.Manager.Comment("reaching state \'S2984\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2677;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2678;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2678 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2677);
            this.Manager.Comment("reaching state \'S3416\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2677, "trustHandle of OpenTrustedDomainByName, state S3416");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2678, "return of OpenTrustedDomainByName, state S3416");
            this.Manager.Comment("reaching state \'S3848\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2679;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2679 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4280\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2679, "return of SetTrustedDomainInfoByName, state S4280");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S786
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S786() {
            this.Manager.BeginTest("TestScenarioS15S786");
            this.Manager.Comment("reaching state \'S786\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S787\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1257\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2680;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2681;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2681 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2680);
            this.Manager.Comment("reaching state \'S1689\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2680, "policyHandle of OpenPolicy2, state S1689");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2681, "return of OpenPolicy2, state S1689");
            this.Manager.Comment("reaching state \'S2121\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2682;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2683;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2683 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2682);
            this.Manager.Comment("reaching state \'S2553\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2682, "trustHandle of CreateTrustedDomain, state S2553");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2683, "return of CreateTrustedDomain, state S2553");
            this.Manager.Comment("reaching state \'S2985\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2684;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2685;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2685 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2684);
            this.Manager.Comment("reaching state \'S3417\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2684, "trustHandle of OpenTrustedDomainByName, state S3417");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2685, "return of OpenTrustedDomainByName, state S3417");
            this.Manager.Comment("reaching state \'S3849\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2686;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp2686 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4281\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2686, "return of SetTrustedDomainInfoByName, state S4281");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S788
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S788() {
            this.Manager.BeginTest("TestScenarioS15S788");
            this.Manager.Comment("reaching state \'S788\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S789\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1258\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2687;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2688;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2688 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2687);
            this.Manager.Comment("reaching state \'S1690\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2687, "policyHandle of OpenPolicy2, state S1690");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2688, "return of OpenPolicy2, state S1690");
            this.Manager.Comment("reaching state \'S2122\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2689;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2690;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2690 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2689);
            this.Manager.Comment("reaching state \'S2554\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2689, "trustHandle of CreateTrustedDomain, state S2554");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2690, "return of CreateTrustedDomain, state S2554");
            this.Manager.Comment("reaching state \'S2986\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2691;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2692;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2692 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2691);
            this.Manager.Comment("reaching state \'S3418\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2691, "trustHandle of OpenTrustedDomainByName, state S3418");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2692, "return of OpenTrustedDomainByName, state S3418");
            this.Manager.Comment("reaching state \'S3850\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2693;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2693 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4282\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2693, "return of SetTrustedDomainInfoByName, state S4282");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S790
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S790() {
            this.Manager.BeginTest("TestScenarioS15S790");
            this.Manager.Comment("reaching state \'S790\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S791\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1259\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2694;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2695;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2695 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2694);
            this.Manager.Comment("reaching state \'S1691\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2694, "policyHandle of OpenPolicy2, state S1691");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2695, "return of OpenPolicy2, state S1691");
            this.Manager.Comment("reaching state \'S2123\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2696;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2697;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2697 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2696);
            this.Manager.Comment("reaching state \'S2555\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2696, "trustHandle of CreateTrustedDomain, state S2555");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2697, "return of CreateTrustedDomain, state S2555");
            this.Manager.Comment("reaching state \'S2987\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2698;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2699;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2699 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2698);
            this.Manager.Comment("reaching state \'S3419\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2698, "trustHandle of OpenTrustedDomainByName, state S3419");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2699, "return of OpenTrustedDomainByName, state S3419");
            this.Manager.Comment("reaching state \'S3851\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2700;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2700 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4283\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2700, "return of SetTrustedDomainInfoByName, state S4283");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S792
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S792() {
            this.Manager.BeginTest("TestScenarioS15S792");
            this.Manager.Comment("reaching state \'S792\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S793\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1260\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2701;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2702;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2702 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2701);
            this.Manager.Comment("reaching state \'S1692\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2701, "policyHandle of OpenPolicy2, state S1692");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2702, "return of OpenPolicy2, state S1692");
            this.Manager.Comment("reaching state \'S2124\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2703;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2704;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2704 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2703);
            this.Manager.Comment("reaching state \'S2556\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2703, "trustHandle of CreateTrustedDomain, state S2556");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2704, "return of CreateTrustedDomain, state S2556");
            this.Manager.Comment("reaching state \'S2988\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2705;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2706;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2706 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2705);
            this.Manager.Comment("reaching state \'S3420\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2705, "trustHandle of OpenTrustedDomainByName, state S3420");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2706, "return of OpenTrustedDomainByName, state S3420");
            this.Manager.Comment("reaching state \'S3852\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2707;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,Inval" +
                    "id,True)\'");
            temp2707 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4284\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2707, "return of SetTrustedDomainInfoByName, state S4284");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S794
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S794() {
            this.Manager.BeginTest("TestScenarioS15S794");
            this.Manager.Comment("reaching state \'S794\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S795\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1261\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2708;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2709;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2709 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2708);
            this.Manager.Comment("reaching state \'S1693\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2708, "policyHandle of OpenPolicy2, state S1693");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2709, "return of OpenPolicy2, state S1693");
            this.Manager.Comment("reaching state \'S2125\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2710;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2711;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2711 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2710);
            this.Manager.Comment("reaching state \'S2557\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2710, "trustHandle of CreateTrustedDomain, state S2557");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2711, "return of CreateTrustedDomain, state S2557");
            this.Manager.Comment("reaching state \'S2989\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2712;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2713;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2713 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2712);
            this.Manager.Comment("reaching state \'S3421\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2712, "trustHandle of OpenTrustedDomainByName, state S3421");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2713, "return of OpenTrustedDomainByName, state S3421");
            this.Manager.Comment("reaching state \'S3853\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2714;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp2714 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4285\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2714, "return of SetTrustedDomainInfoByName, state S4285");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S796
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S796() {
            this.Manager.BeginTest("TestScenarioS15S796");
            this.Manager.Comment("reaching state \'S796\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S797\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1262\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2715;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2716;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2716 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2715);
            this.Manager.Comment("reaching state \'S1694\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2715, "policyHandle of OpenPolicy2, state S1694");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2716, "return of OpenPolicy2, state S1694");
            this.Manager.Comment("reaching state \'S2126\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2717;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2718;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2718 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2717);
            this.Manager.Comment("reaching state \'S2558\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2717, "trustHandle of CreateTrustedDomain, state S2558");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2718, "return of CreateTrustedDomain, state S2558");
            this.Manager.Comment("reaching state \'S2990\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2719;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2720;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2720 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2719);
            this.Manager.Comment("reaching state \'S3422\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2719, "trustHandle of OpenTrustedDomainByName, state S3422");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2720, "return of OpenTrustedDomainByName, state S3422");
            this.Manager.Comment("reaching state \'S3854\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2721;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2721 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4286\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2721, "return of SetTrustedDomainInfoByName, state S4286");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S798
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S798() {
            this.Manager.BeginTest("TestScenarioS15S798");
            this.Manager.Comment("reaching state \'S798\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S799\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1263\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2722;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2723;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2723 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2722);
            this.Manager.Comment("reaching state \'S1695\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2722, "policyHandle of OpenPolicy2, state S1695");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2723, "return of OpenPolicy2, state S1695");
            this.Manager.Comment("reaching state \'S2127\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2724;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2725;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2725 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2724);
            this.Manager.Comment("reaching state \'S2559\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2724, "trustHandle of CreateTrustedDomain, state S2559");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2725, "return of CreateTrustedDomain, state S2559");
            this.Manager.Comment("reaching state \'S2991\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2726;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2727;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2727 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2726);
            this.Manager.Comment("reaching state \'S3423\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2726, "trustHandle of OpenTrustedDomainByName, state S3423");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2727, "return of OpenTrustedDomainByName, state S3423");
            this.Manager.Comment("reaching state \'S3855\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2728;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2728 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4287\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2728, "return of SetTrustedDomainInfoByName, state S4287");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S8() {
            this.Manager.BeginTest("TestScenarioS15S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S868\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2729;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2730;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2730 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2729);
            this.Manager.Comment("reaching state \'S1300\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2729, "policyHandle of OpenPolicy2, state S1300");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2730, "return of OpenPolicy2, state S1300");
            this.Manager.Comment("reaching state \'S1732\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2731;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2732;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2732 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2731);
            this.Manager.Comment("reaching state \'S2164\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2731, "trustHandle of CreateTrustedDomain, state S2164");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2732, "return of CreateTrustedDomain, state S2164");
            this.Manager.Comment("reaching state \'S2596\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2733;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2734;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2734 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2733);
            this.Manager.Comment("reaching state \'S3028\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2733, "trustHandle of OpenTrustedDomainByName, state S3028");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2734, "return of OpenTrustedDomainByName, state S3028");
            this.Manager.Comment("reaching state \'S3460\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2735;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp2735 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3892\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2735, "return of SetTrustedDomainInfoByName, state S3892");
            TestScenarioS15S4323();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S80
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S80() {
            this.Manager.BeginTest("TestScenarioS15S80");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S904\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2736;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2737;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2737 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2736);
            this.Manager.Comment("reaching state \'S1336\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2736, "policyHandle of OpenPolicy2, state S1336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2737, "return of OpenPolicy2, state S1336");
            this.Manager.Comment("reaching state \'S1768\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2738;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2739;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2739 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2738);
            this.Manager.Comment("reaching state \'S2200\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2738, "trustHandle of CreateTrustedDomain, state S2200");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2739, "return of CreateTrustedDomain, state S2200");
            this.Manager.Comment("reaching state \'S2632\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2740;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2741;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2741 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2740);
            this.Manager.Comment("reaching state \'S3064\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2740, "trustHandle of OpenTrustedDomainByName, state S3064");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2741, "return of OpenTrustedDomainByName, state S3064");
            this.Manager.Comment("reaching state \'S3496\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2742;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2742 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3928\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2742, "return of SetTrustedDomainInfoByName, state S3928");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S800
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S800() {
            this.Manager.BeginTest("TestScenarioS15S800");
            this.Manager.Comment("reaching state \'S800\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S801\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1264\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2743;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2744;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2744 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2743);
            this.Manager.Comment("reaching state \'S1696\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2743, "policyHandle of OpenPolicy2, state S1696");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2744, "return of OpenPolicy2, state S1696");
            this.Manager.Comment("reaching state \'S2128\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2745;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2746;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2746 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2745);
            this.Manager.Comment("reaching state \'S2560\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2745, "trustHandle of CreateTrustedDomain, state S2560");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2746, "return of CreateTrustedDomain, state S2560");
            this.Manager.Comment("reaching state \'S2992\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2747;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2748;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2748 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2747);
            this.Manager.Comment("reaching state \'S3424\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2747, "trustHandle of OpenTrustedDomainByName, state S3424");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2748, "return of OpenTrustedDomainByName, state S3424");
            this.Manager.Comment("reaching state \'S3856\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2749;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp2749 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4288\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2749, "return of SetTrustedDomainInfoByName, state S4288");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S802
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S802() {
            this.Manager.BeginTest("TestScenarioS15S802");
            this.Manager.Comment("reaching state \'S802\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S803\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1265\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2750;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2751;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2751 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2750);
            this.Manager.Comment("reaching state \'S1697\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2750, "policyHandle of OpenPolicy2, state S1697");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2751, "return of OpenPolicy2, state S1697");
            this.Manager.Comment("reaching state \'S2129\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2752;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2753;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2753 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2752);
            this.Manager.Comment("reaching state \'S2561\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2752, "trustHandle of CreateTrustedDomain, state S2561");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2753, "return of CreateTrustedDomain, state S2561");
            this.Manager.Comment("reaching state \'S2993\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2754;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2755;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2755 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2754);
            this.Manager.Comment("reaching state \'S3425\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2754, "trustHandle of OpenTrustedDomainByName, state S3425");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2755, "return of OpenTrustedDomainByName, state S3425");
            this.Manager.Comment("reaching state \'S3857\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2756;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2756 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4289\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2756, "return of SetTrustedDomainInfoByName, state S4289");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S804
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S804() {
            this.Manager.BeginTest("TestScenarioS15S804");
            this.Manager.Comment("reaching state \'S804\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S805\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1266\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2757;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2758;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2758 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2757);
            this.Manager.Comment("reaching state \'S1698\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2757, "policyHandle of OpenPolicy2, state S1698");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2758, "return of OpenPolicy2, state S1698");
            this.Manager.Comment("reaching state \'S2130\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2759;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2760;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2760 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2759);
            this.Manager.Comment("reaching state \'S2562\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2759, "trustHandle of CreateTrustedDomain, state S2562");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2760, "return of CreateTrustedDomain, state S2562");
            this.Manager.Comment("reaching state \'S2994\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2761;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2762;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2762 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2761);
            this.Manager.Comment("reaching state \'S3426\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2761, "trustHandle of OpenTrustedDomainByName, state S3426");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2762, "return of OpenTrustedDomainByName, state S3426");
            this.Manager.Comment("reaching state \'S3858\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2763;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2763 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4290\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2763, "return of SetTrustedDomainInfoByName, state S4290");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S806
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S806() {
            this.Manager.BeginTest("TestScenarioS15S806");
            this.Manager.Comment("reaching state \'S806\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S807\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1267\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2764;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2765;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2765 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2764);
            this.Manager.Comment("reaching state \'S1699\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2764, "policyHandle of OpenPolicy2, state S1699");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2765, "return of OpenPolicy2, state S1699");
            this.Manager.Comment("reaching state \'S2131\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2766;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2767;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2767 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2766);
            this.Manager.Comment("reaching state \'S2563\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2766, "trustHandle of CreateTrustedDomain, state S2563");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2767, "return of CreateTrustedDomain, state S2563");
            this.Manager.Comment("reaching state \'S2995\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2768;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2769;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2769 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2768);
            this.Manager.Comment("reaching state \'S3427\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2768, "trustHandle of OpenTrustedDomainByName, state S3427");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2769, "return of OpenTrustedDomainByName, state S3427");
            this.Manager.Comment("reaching state \'S3859\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2770;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2770 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4291\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2770, "return of SetTrustedDomainInfoByName, state S4291");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S808
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S808() {
            this.Manager.BeginTest("TestScenarioS15S808");
            this.Manager.Comment("reaching state \'S808\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S809\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1268\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2771;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2772;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2772 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2771);
            this.Manager.Comment("reaching state \'S1700\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2771, "policyHandle of OpenPolicy2, state S1700");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2772, "return of OpenPolicy2, state S1700");
            this.Manager.Comment("reaching state \'S2132\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2773;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2774;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2774 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2773);
            this.Manager.Comment("reaching state \'S2564\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2773, "trustHandle of CreateTrustedDomain, state S2564");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2774, "return of CreateTrustedDomain, state S2564");
            this.Manager.Comment("reaching state \'S2996\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2775;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2776;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2776 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2775);
            this.Manager.Comment("reaching state \'S3428\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2775, "trustHandle of OpenTrustedDomainByName, state S3428");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2776, "return of OpenTrustedDomainByName, state S3428");
            this.Manager.Comment("reaching state \'S3860\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2777;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2777 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S4292\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2777, "return of SetTrustedDomainInfoByName, state S4292");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S810
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S810() {
            this.Manager.BeginTest("TestScenarioS15S810");
            this.Manager.Comment("reaching state \'S810\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S811\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1269\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2778;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2779;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2779 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2778);
            this.Manager.Comment("reaching state \'S1701\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2778, "policyHandle of OpenPolicy2, state S1701");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2779, "return of OpenPolicy2, state S1701");
            this.Manager.Comment("reaching state \'S2133\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2780;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2781;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2781 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2780);
            this.Manager.Comment("reaching state \'S2565\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2780, "trustHandle of CreateTrustedDomain, state S2565");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2781, "return of CreateTrustedDomain, state S2565");
            this.Manager.Comment("reaching state \'S2997\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2782;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2783;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2783 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2782);
            this.Manager.Comment("reaching state \'S3429\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2782, "trustHandle of OpenTrustedDomainByName, state S3429");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2783, "return of OpenTrustedDomainByName, state S3429");
            this.Manager.Comment("reaching state \'S3861\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2784;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2784 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4293\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2784, "return of SetTrustedDomainInfoByName, state S4293");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S812
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S812() {
            this.Manager.BeginTest("TestScenarioS15S812");
            this.Manager.Comment("reaching state \'S812\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S813\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1270\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2785;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2786;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2786 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2785);
            this.Manager.Comment("reaching state \'S1702\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2785, "policyHandle of OpenPolicy2, state S1702");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2786, "return of OpenPolicy2, state S1702");
            this.Manager.Comment("reaching state \'S2134\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2787;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2788;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2788 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2787);
            this.Manager.Comment("reaching state \'S2566\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2787, "trustHandle of CreateTrustedDomain, state S2566");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2788, "return of CreateTrustedDomain, state S2566");
            this.Manager.Comment("reaching state \'S2998\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2789;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2790;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2790 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2789);
            this.Manager.Comment("reaching state \'S3430\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2789, "trustHandle of OpenTrustedDomainByName, state S3430");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2790, "return of OpenTrustedDomainByName, state S3430");
            this.Manager.Comment("reaching state \'S3862\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2791;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2791 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4294\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2791, "return of SetTrustedDomainInfoByName, state S4294");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S814
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S814() {
            this.Manager.BeginTest("TestScenarioS15S814");
            this.Manager.Comment("reaching state \'S814\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S815\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1271\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2792;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2793;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2793 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2792);
            this.Manager.Comment("reaching state \'S1703\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2792, "policyHandle of OpenPolicy2, state S1703");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2793, "return of OpenPolicy2, state S1703");
            this.Manager.Comment("reaching state \'S2135\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2794;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2795;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2795 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2794);
            this.Manager.Comment("reaching state \'S2567\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2794, "trustHandle of CreateTrustedDomain, state S2567");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2795, "return of CreateTrustedDomain, state S2567");
            this.Manager.Comment("reaching state \'S2999\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2796;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2797;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2797 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2796);
            this.Manager.Comment("reaching state \'S3431\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2796, "trustHandle of OpenTrustedDomainByName, state S3431");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2797, "return of OpenTrustedDomainByName, state S3431");
            this.Manager.Comment("reaching state \'S3863\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2798;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2798 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4295\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2798, "return of SetTrustedDomainInfoByName, state S4295");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S816
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S816() {
            this.Manager.BeginTest("TestScenarioS15S816");
            this.Manager.Comment("reaching state \'S816\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S817\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1272\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2799;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2800;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2800 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2799);
            this.Manager.Comment("reaching state \'S1704\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2799, "policyHandle of OpenPolicy2, state S1704");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2800, "return of OpenPolicy2, state S1704");
            this.Manager.Comment("reaching state \'S2136\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2801;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2802;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2802 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2801);
            this.Manager.Comment("reaching state \'S2568\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2801, "trustHandle of CreateTrustedDomain, state S2568");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2802, "return of CreateTrustedDomain, state S2568");
            this.Manager.Comment("reaching state \'S3000\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2803;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2804;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2804 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2803);
            this.Manager.Comment("reaching state \'S3432\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2803, "trustHandle of OpenTrustedDomainByName, state S3432");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2804, "return of OpenTrustedDomainByName, state S3432");
            this.Manager.Comment("reaching state \'S3864\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2805;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp2805 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4296\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2805, "return of SetTrustedDomainInfoByName, state S4296");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S818
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S818() {
            this.Manager.BeginTest("TestScenarioS15S818");
            this.Manager.Comment("reaching state \'S818\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S819\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1273\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2806;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2807;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2807 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2806);
            this.Manager.Comment("reaching state \'S1705\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2806, "policyHandle of OpenPolicy2, state S1705");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2807, "return of OpenPolicy2, state S1705");
            this.Manager.Comment("reaching state \'S2137\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2808;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2809;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2809 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2808);
            this.Manager.Comment("reaching state \'S2569\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2808, "trustHandle of CreateTrustedDomain, state S2569");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2809, "return of CreateTrustedDomain, state S2569");
            this.Manager.Comment("reaching state \'S3001\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2810;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2811;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2811 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2810);
            this.Manager.Comment("reaching state \'S3433\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2810, "trustHandle of OpenTrustedDomainByName, state S3433");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2811, "return of OpenTrustedDomainByName, state S3433");
            this.Manager.Comment("reaching state \'S3865\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2812;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2812 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4297\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2812, "return of SetTrustedDomainInfoByName, state S4297");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S82
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S82() {
            this.Manager.BeginTest("TestScenarioS15S82");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S905\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2813;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2814;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2814 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2813);
            this.Manager.Comment("reaching state \'S1337\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2813, "policyHandle of OpenPolicy2, state S1337");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2814, "return of OpenPolicy2, state S1337");
            this.Manager.Comment("reaching state \'S1769\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2815;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2816;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2816 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2815);
            this.Manager.Comment("reaching state \'S2201\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2815, "trustHandle of CreateTrustedDomain, state S2201");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2816, "return of CreateTrustedDomain, state S2201");
            this.Manager.Comment("reaching state \'S2633\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2817;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2818;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2818 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2817);
            this.Manager.Comment("reaching state \'S3065\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2817, "trustHandle of OpenTrustedDomainByName, state S3065");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2818, "return of OpenTrustedDomainByName, state S3065");
            this.Manager.Comment("reaching state \'S3497\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2819;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx2Internal,True)'");
            temp2819 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, true);
            this.Manager.Comment("reaching state \'S3929\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2819, "return of SetTrustedDomainInfoByName, state S3929");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S820
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S820() {
            this.Manager.BeginTest("TestScenarioS15S820");
            this.Manager.Comment("reaching state \'S820\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S821\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1274\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2820;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2821;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2821 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2820);
            this.Manager.Comment("reaching state \'S1706\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2820, "policyHandle of OpenPolicy2, state S1706");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2821, "return of OpenPolicy2, state S1706");
            this.Manager.Comment("reaching state \'S2138\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2822;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2823;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2823 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2822);
            this.Manager.Comment("reaching state \'S2570\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2822, "trustHandle of CreateTrustedDomain, state S2570");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2823, "return of CreateTrustedDomain, state S2570");
            this.Manager.Comment("reaching state \'S3002\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2824;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2825;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2825 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2824);
            this.Manager.Comment("reaching state \'S3434\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2824, "trustHandle of OpenTrustedDomainByName, state S3434");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2825, "return of OpenTrustedDomainByName, state S3434");
            this.Manager.Comment("reaching state \'S3866\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2826;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2826 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4298\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2826, "return of SetTrustedDomainInfoByName, state S4298");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S822
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S822() {
            this.Manager.BeginTest("TestScenarioS15S822");
            this.Manager.Comment("reaching state \'S822\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S823\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1275\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2827;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2828;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2828 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2827);
            this.Manager.Comment("reaching state \'S1707\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2827, "policyHandle of OpenPolicy2, state S1707");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2828, "return of OpenPolicy2, state S1707");
            this.Manager.Comment("reaching state \'S2139\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2829;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2830;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2830 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2829);
            this.Manager.Comment("reaching state \'S2571\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2829, "trustHandle of CreateTrustedDomain, state S2571");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2830, "return of CreateTrustedDomain, state S2571");
            this.Manager.Comment("reaching state \'S3003\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2831;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2832;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2832 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2831);
            this.Manager.Comment("reaching state \'S3435\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2831, "trustHandle of OpenTrustedDomainByName, state S3435");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2832, "return of OpenTrustedDomainByName, state S3435");
            this.Manager.Comment("reaching state \'S3867\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2833;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,Inval" +
                    "id,True)\'");
            temp2833 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4299\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2833, "return of SetTrustedDomainInfoByName, state S4299");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S824
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S824() {
            this.Manager.BeginTest("TestScenarioS15S824");
            this.Manager.Comment("reaching state \'S824\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S825\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1276\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2834;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2835;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2835 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2834);
            this.Manager.Comment("reaching state \'S1708\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2834, "policyHandle of OpenPolicy2, state S1708");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2835, "return of OpenPolicy2, state S1708");
            this.Manager.Comment("reaching state \'S2140\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2836;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2837;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2837 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2836);
            this.Manager.Comment("reaching state \'S2572\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2836, "trustHandle of CreateTrustedDomain, state S2572");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2837, "return of CreateTrustedDomain, state S2572");
            this.Manager.Comment("reaching state \'S3004\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2838;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2839;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2839 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2838);
            this.Manager.Comment("reaching state \'S3436\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2838, "trustHandle of OpenTrustedDomainByName, state S3436");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2839, "return of OpenTrustedDomainByName, state S3436");
            this.Manager.Comment("reaching state \'S3868\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2840;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation2Internal,True)'");
            temp2840 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, true);
            this.Manager.Comment("reaching state \'S4300\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2840, "return of SetTrustedDomainInfoByName, state S4300");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S826
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S826() {
            this.Manager.BeginTest("TestScenarioS15S826");
            this.Manager.Comment("reaching state \'S826\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S827\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1277\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2841;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2842;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2842 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2841);
            this.Manager.Comment("reaching state \'S1709\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2841, "policyHandle of OpenPolicy2, state S1709");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2842, "return of OpenPolicy2, state S1709");
            this.Manager.Comment("reaching state \'S2141\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2843;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2844;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2844 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2843);
            this.Manager.Comment("reaching state \'S2573\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2843, "trustHandle of CreateTrustedDomain, state S2573");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2844, "return of CreateTrustedDomain, state S2573");
            this.Manager.Comment("reaching state \'S3005\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2845;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2846;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2846 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2845);
            this.Manager.Comment("reaching state \'S3437\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2845, "trustHandle of OpenTrustedDomainByName, state S3437");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2846, "return of OpenTrustedDomainByName, state S3437");
            this.Manager.Comment("reaching state \'S3869\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2847;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedPasswordInformation,True)'");
            temp2847 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, true);
            this.Manager.Comment("reaching state \'S4301\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2847, "return of SetTrustedDomainInfoByName, state S4301");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S828
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S828() {
            this.Manager.BeginTest("TestScenarioS15S828");
            this.Manager.Comment("reaching state \'S828\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S829\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1278\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2848;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2849;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2849 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2848);
            this.Manager.Comment("reaching state \'S1710\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2848, "policyHandle of OpenPolicy2, state S1710");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2849, "return of OpenPolicy2, state S1710");
            this.Manager.Comment("reaching state \'S2142\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2850;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2851;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2851 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2850);
            this.Manager.Comment("reaching state \'S2574\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2850, "trustHandle of CreateTrustedDomain, state S2574");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2851, "return of CreateTrustedDomain, state S2574");
            this.Manager.Comment("reaching state \'S3006\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2852;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2853;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2853 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2852);
            this.Manager.Comment("reaching state \'S3438\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2852, "trustHandle of OpenTrustedDomainByName, state S3438");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2853, "return of OpenTrustedDomainByName, state S3438");
            this.Manager.Comment("reaching state \'S3870\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2854;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,Inval" +
                    "id,True)\'");
            temp2854 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4302\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2854, "return of SetTrustedDomainInfoByName, state S4302");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S830
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S830() {
            this.Manager.BeginTest("TestScenarioS15S830");
            this.Manager.Comment("reaching state \'S830\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S831\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1279\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2855;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2856;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2856 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2855);
            this.Manager.Comment("reaching state \'S1711\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2855, "policyHandle of OpenPolicy2, state S1711");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2856, "return of OpenPolicy2, state S1711");
            this.Manager.Comment("reaching state \'S2143\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2857;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2858;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2858 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2857);
            this.Manager.Comment("reaching state \'S2575\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2857, "trustHandle of CreateTrustedDomain, state S2575");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2858, "return of CreateTrustedDomain, state S2575");
            this.Manager.Comment("reaching state \'S3007\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2859;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2860;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2860 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2859);
            this.Manager.Comment("reaching state \'S3439\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2859, "trustHandle of OpenTrustedDomainByName, state S3439");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2860, "return of OpenTrustedDomainByName, state S3439");
            this.Manager.Comment("reaching state \'S3871\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2861;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainNameInformation,True)'");
            temp2861 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), true);
            this.Manager.Comment("reaching state \'S4303\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2861, "return of SetTrustedDomainInfoByName, state S4303");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S832
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S832() {
            this.Manager.BeginTest("TestScenarioS15S832");
            this.Manager.Comment("reaching state \'S832\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1280\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2862;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2863;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2863 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2862);
            this.Manager.Comment("reaching state \'S1712\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2862, "policyHandle of OpenPolicy2, state S1712");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2863, "return of OpenPolicy2, state S1712");
            this.Manager.Comment("reaching state \'S2144\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2864;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2865;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2865 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2864);
            this.Manager.Comment("reaching state \'S2576\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2864, "trustHandle of CreateTrustedDomain, state S2576");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2865, "return of CreateTrustedDomain, state S2576");
            this.Manager.Comment("reaching state \'S3008\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2866;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2867;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2867 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2866);
            this.Manager.Comment("reaching state \'S3440\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2866, "trustHandle of OpenTrustedDomainByName, state S3440");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2867, "return of OpenTrustedDomainByName, state S3440");
            this.Manager.Comment("reaching state \'S3872\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2868;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformation,True)'");
            temp2868 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, true);
            this.Manager.Comment("reaching state \'S4304\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2868, "return of SetTrustedDomainInfoByName, state S4304");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S834
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S834() {
            this.Manager.BeginTest("TestScenarioS15S834");
            this.Manager.Comment("reaching state \'S834\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S835\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1281\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2869;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2870;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2870 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2869);
            this.Manager.Comment("reaching state \'S1713\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2869, "policyHandle of OpenPolicy2, state S1713");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2870, "return of OpenPolicy2, state S1713");
            this.Manager.Comment("reaching state \'S2145\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2871;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2872;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2872 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2871);
            this.Manager.Comment("reaching state \'S2577\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2871, "trustHandle of CreateTrustedDomain, state S2577");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2872, "return of CreateTrustedDomain, state S2577");
            this.Manager.Comment("reaching state \'S3009\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2873;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2874;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2874 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2873);
            this.Manager.Comment("reaching state \'S3441\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2873, "trustHandle of OpenTrustedDomainByName, state S3441");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2874, "return of OpenTrustedDomainByName, state S3441");
            this.Manager.Comment("reaching state \'S3873\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2875;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp2875 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S4305\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2875, "return of SetTrustedDomainInfoByName, state S4305");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S836
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S836() {
            this.Manager.BeginTest("TestScenarioS15S836");
            this.Manager.Comment("reaching state \'S836\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S837\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1282\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2876;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2877;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2877 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2876);
            this.Manager.Comment("reaching state \'S1714\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2876, "policyHandle of OpenPolicy2, state S1714");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2877, "return of OpenPolicy2, state S1714");
            this.Manager.Comment("reaching state \'S2146\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2878;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2879;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2879 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2878);
            this.Manager.Comment("reaching state \'S2578\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2878, "trustHandle of CreateTrustedDomain, state S2578");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2879, "return of CreateTrustedDomain, state S2578");
            this.Manager.Comment("reaching state \'S3010\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2880;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2881;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2881 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2880);
            this.Manager.Comment("reaching state \'S3442\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2880, "trustHandle of OpenTrustedDomainByName, state S3442");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2881, "return of OpenTrustedDomainByName, state S3442");
            this.Manager.Comment("reaching state \'S3874\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2882;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp2882 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S4306\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2882, "return of SetTrustedDomainInfoByName, state S4306");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S838
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S838() {
            this.Manager.BeginTest("TestScenarioS15S838");
            this.Manager.Comment("reaching state \'S838\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S839\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1283\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2883;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2884;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2884 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2883);
            this.Manager.Comment("reaching state \'S1715\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2883, "policyHandle of OpenPolicy2, state S1715");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2884, "return of OpenPolicy2, state S1715");
            this.Manager.Comment("reaching state \'S2147\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2885;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2886;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2886 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2885);
            this.Manager.Comment("reaching state \'S2579\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2885, "trustHandle of CreateTrustedDomain, state S2579");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2886, "return of CreateTrustedDomain, state S2579");
            this.Manager.Comment("reaching state \'S3011\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2887;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2888;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2888 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2887);
            this.Manager.Comment("reaching state \'S3443\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2887, "trustHandle of OpenTrustedDomainByName, state S3443");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2888, "return of OpenTrustedDomainByName, state S3443");
            this.Manager.Comment("reaching state \'S3875\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2889;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2889 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4307\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2889, "return of SetTrustedDomainInfoByName, state S4307");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S84
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S84() {
            this.Manager.BeginTest("TestScenarioS15S84");
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S906\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2890;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2891;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2891 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2890);
            this.Manager.Comment("reaching state \'S1338\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2890, "policyHandle of OpenPolicy2, state S1338");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2891, "return of OpenPolicy2, state S1338");
            this.Manager.Comment("reaching state \'S1770\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2892;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2893;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2893 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2892);
            this.Manager.Comment("reaching state \'S2202\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2892, "trustHandle of CreateTrustedDomain, state S2202");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2893, "return of CreateTrustedDomain, state S2202");
            this.Manager.Comment("reaching state \'S2634\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2894;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2895;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2895 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2894);
            this.Manager.Comment("reaching state \'S3066\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2894, "trustHandle of OpenTrustedDomainByName, state S3066");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2895, "return of OpenTrustedDomainByName, state S3066");
            this.Manager.Comment("reaching state \'S3498\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2896;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,Inva" +
                    "lid,True)\'");
            temp2896 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S3930\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2896, "return of SetTrustedDomainInfoByName, state S3930");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S840
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S840() {
            this.Manager.BeginTest("TestScenarioS15S840");
            this.Manager.Comment("reaching state \'S840\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S841\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1284\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2897;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2898;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2898 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2897);
            this.Manager.Comment("reaching state \'S1716\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2897, "policyHandle of OpenPolicy2, state S1716");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2898, "return of OpenPolicy2, state S1716");
            this.Manager.Comment("reaching state \'S2148\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2899;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2900;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2900 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2899);
            this.Manager.Comment("reaching state \'S2580\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2899, "trustHandle of CreateTrustedDomain, state S2580");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2900, "return of CreateTrustedDomain, state S2580");
            this.Manager.Comment("reaching state \'S3012\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2901;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2902;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2902 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2901);
            this.Manager.Comment("reaching state \'S3444\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2901, "trustHandle of OpenTrustedDomainByName, state S3444");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2902, "return of OpenTrustedDomainByName, state S3444");
            this.Manager.Comment("reaching state \'S3876\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2903;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2903 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4308\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2903, "return of SetTrustedDomainInfoByName, state S4308");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S842
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S842() {
            this.Manager.BeginTest("TestScenarioS15S842");
            this.Manager.Comment("reaching state \'S842\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S843\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1285\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2904;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2905;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2905 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2904);
            this.Manager.Comment("reaching state \'S1717\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2904, "policyHandle of OpenPolicy2, state S1717");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2905, "return of OpenPolicy2, state S1717");
            this.Manager.Comment("reaching state \'S2149\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2906;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2907;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2907 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2906);
            this.Manager.Comment("reaching state \'S2581\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2906, "trustHandle of CreateTrustedDomain, state S2581");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2907, "return of CreateTrustedDomain, state S2581");
            this.Manager.Comment("reaching state \'S3013\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2908;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2909;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2909 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2908);
            this.Manager.Comment("reaching state \'S3445\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2908, "trustHandle of OpenTrustedDomainByName, state S3445");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2909, "return of OpenTrustedDomainByName, state S3445");
            this.Manager.Comment("reaching state \'S3877\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2910;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp2910 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S4309\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2910, "return of SetTrustedDomainInfoByName, state S4309");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S844
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S844() {
            this.Manager.BeginTest("TestScenarioS15S844");
            this.Manager.Comment("reaching state \'S844\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S845\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1286\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2911;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2912;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2912 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2911);
            this.Manager.Comment("reaching state \'S1718\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2911, "policyHandle of OpenPolicy2, state S1718");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2912, "return of OpenPolicy2, state S1718");
            this.Manager.Comment("reaching state \'S2150\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2913;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2914;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2914 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2913);
            this.Manager.Comment("reaching state \'S2582\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2913, "trustHandle of CreateTrustedDomain, state S2582");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2914, "return of CreateTrustedDomain, state S2582");
            this.Manager.Comment("reaching state \'S3014\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2915;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2916;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2916 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2915);
            this.Manager.Comment("reaching state \'S3446\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2915, "trustHandle of OpenTrustedDomainByName, state S3446");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2916, "return of OpenTrustedDomainByName, state S3446");
            this.Manager.Comment("reaching state \'S3878\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2917;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationBasic,True)'");
            temp2917 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, true);
            this.Manager.Comment("reaching state \'S4310\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2917, "return of SetTrustedDomainInfoByName, state S4310");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S846
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S846() {
            this.Manager.BeginTest("TestScenarioS15S846");
            this.Manager.Comment("reaching state \'S846\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S847\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1287\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2918;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2919;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2919 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2918);
            this.Manager.Comment("reaching state \'S1719\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2918, "policyHandle of OpenPolicy2, state S1719");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2919, "return of OpenPolicy2, state S1719");
            this.Manager.Comment("reaching state \'S2151\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2920;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2921;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2921 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2920);
            this.Manager.Comment("reaching state \'S2583\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2920, "trustHandle of CreateTrustedDomain, state S2583");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2921, "return of CreateTrustedDomain, state S2583");
            this.Manager.Comment("reaching state \'S3015\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2922;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2923;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2923 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2922);
            this.Manager.Comment("reaching state \'S3447\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2922, "trustHandle of OpenTrustedDomainByName, state S3447");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2923, "return of OpenTrustedDomainByName, state S3447");
            this.Manager.Comment("reaching state \'S3879\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2924;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,Inval" +
                    "id,True)\'");
            temp2924 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4311\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2924, "return of SetTrustedDomainInfoByName, state S4311");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S848
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S848() {
            this.Manager.BeginTest("TestScenarioS15S848");
            this.Manager.Comment("reaching state \'S848\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S849\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1288\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2925;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2926;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2926 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2925);
            this.Manager.Comment("reaching state \'S1720\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2925, "policyHandle of OpenPolicy2, state S1720");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2926, "return of OpenPolicy2, state S1720");
            this.Manager.Comment("reaching state \'S2152\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2927;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2928;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2928 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2927);
            this.Manager.Comment("reaching state \'S2584\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2927, "trustHandle of CreateTrustedDomain, state S2584");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2928, "return of CreateTrustedDomain, state S2584");
            this.Manager.Comment("reaching state \'S3016\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2929;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2930;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain10\",Valid,65663,out _)\'");
            temp2930 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2929);
            this.Manager.Comment("reaching state \'S3448\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2929, "trustHandle of OpenTrustedDomainByName, state S3448");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2930, "return of OpenTrustedDomainByName, state S3448");
            this.Manager.Comment("reaching state \'S3880\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2931;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=16),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2931 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            16u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4312\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2931, "return of SetTrustedDomainInfoByName, state S4312");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S850
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S850() {
            this.Manager.BeginTest("TestScenarioS15S850");
            this.Manager.Comment("reaching state \'S850\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S851\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1289\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2932;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2933;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2933 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2932);
            this.Manager.Comment("reaching state \'S1721\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2932, "policyHandle of OpenPolicy2, state S1721");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2933, "return of OpenPolicy2, state S1721");
            this.Manager.Comment("reaching state \'S2153\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2934;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2935;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2935 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2934);
            this.Manager.Comment("reaching state \'S2585\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2934, "trustHandle of CreateTrustedDomain, state S2585");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2935, "return of CreateTrustedDomain, state S2585");
            this.Manager.Comment("reaching state \'S3017\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2936;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2937;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Invalid,65663,out _)\'");
            temp2937 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 65663u, out temp2936);
            this.Manager.Comment("reaching state \'S3449\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2936, "trustHandle of OpenTrustedDomainByName, state S3449");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2937, "return of OpenTrustedDomainByName, state S3449");
            this.Manager.Comment("reaching state \'S3881\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2938;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2938 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4313\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2938, "return of SetTrustedDomainInfoByName, state S4313");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S852
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S852() {
            this.Manager.BeginTest("TestScenarioS15S852");
            this.Manager.Comment("reaching state \'S852\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S853\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1290\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2939;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2940;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2940 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2939);
            this.Manager.Comment("reaching state \'S1722\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2939, "policyHandle of OpenPolicy2, state S1722");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2940, "return of OpenPolicy2, state S1722");
            this.Manager.Comment("reaching state \'S2154\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2941;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2942;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2942 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2941);
            this.Manager.Comment("reaching state \'S2586\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2941, "trustHandle of CreateTrustedDomain, state S2586");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2942, "return of CreateTrustedDomain, state S2586");
            this.Manager.Comment("reaching state \'S3018\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2943;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2944;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(2,\"Domain\",Valid,65663,out _)\'");
            temp2944 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(2, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2943);
            this.Manager.Comment("reaching state \'S3450\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2943, "trustHandle of OpenTrustedDomainByName, state S3450");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2944, "return of OpenTrustedDomainByName, state S3450");
            this.Manager.Comment("reaching state \'S3882\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2945;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2945 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4314\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2945, "return of SetTrustedDomainInfoByName, state S4314");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S854
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S854() {
            this.Manager.BeginTest("TestScenarioS15S854");
            this.Manager.Comment("reaching state \'S854\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S855\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1291\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2946;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2947;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2947 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2946);
            this.Manager.Comment("reaching state \'S1723\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2946, "policyHandle of OpenPolicy2, state S1723");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2947, "return of OpenPolicy2, state S1723");
            this.Manager.Comment("reaching state \'S2155\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2948;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2949;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2949 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2948);
            this.Manager.Comment("reaching state \'S2587\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2948, "trustHandle of CreateTrustedDomain, state S2587");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2949, "return of CreateTrustedDomain, state S2587");
            this.Manager.Comment("reaching state \'S3019\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2950;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2951;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(2,\"Domain\",Invalid,65663,out _)\'");
            temp2951 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(2, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 65663u, out temp2950);
            this.Manager.Comment("reaching state \'S3451\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2950, "trustHandle of OpenTrustedDomainByName, state S3451");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2951, "return of OpenTrustedDomainByName, state S3451");
            this.Manager.Comment("reaching state \'S3883\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2952;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp2952 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S4315\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2952, "return of SetTrustedDomainInfoByName, state S4315");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S856
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S856() {
            this.Manager.BeginTest("TestScenarioS15S856");
            this.Manager.Comment("reaching state \'S856\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S857\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1292\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2953;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2954;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2954 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2953);
            this.Manager.Comment("reaching state \'S1724\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2953, "policyHandle of OpenPolicy2, state S1724");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2954, "return of OpenPolicy2, state S1724");
            this.Manager.Comment("reaching state \'S2156\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2955;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2956;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2956 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2955);
            this.Manager.Comment("reaching state \'S2588\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2955, "trustHandle of CreateTrustedDomain, state S2588");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2956, "return of CreateTrustedDomain, state S2588");
            this.Manager.Comment("reaching state \'S3020\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2957;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2958;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(2,\"Domain10\",Invalid,65663,out _)\'");
            temp2958 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(2, "Domain10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 65663u, out temp2957);
            this.Manager.Comment("reaching state \'S3452\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2957, "trustHandle of OpenTrustedDomainByName, state S3452");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2958, "return of OpenTrustedDomainByName, state S3452");
            this.Manager.Comment("reaching state \'S3884\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2959;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp2959 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S4316\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2959, "return of SetTrustedDomainInfoByName, state S4316");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S858
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S858() {
            this.Manager.BeginTest("TestScenarioS15S858");
            this.Manager.Comment("reaching state \'S858\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S859\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1293\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2960;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2961;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2961 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2960);
            this.Manager.Comment("reaching state \'S1725\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2960, "policyHandle of OpenPolicy2, state S1725");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2961, "return of OpenPolicy2, state S1725");
            this.Manager.Comment("reaching state \'S2157\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2962;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2963;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2963 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2962);
            this.Manager.Comment("reaching state \'S2589\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2962, "trustHandle of CreateTrustedDomain, state S2589");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2963, "return of CreateTrustedDomain, state S2589");
            this.Manager.Comment("reaching state \'S3021\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2964;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2965;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain10\",Invalid,65663,out _)\'");
            temp2965 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 65663u, out temp2964);
            this.Manager.Comment("reaching state \'S3453\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2964, "trustHandle of OpenTrustedDomainByName, state S3453");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2965, "return of OpenTrustedDomainByName, state S3453");
            this.Manager.Comment("reaching state \'S3885\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2966;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=8),Valid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2966 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            8u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S4317\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2966, "return of SetTrustedDomainInfoByName, state S4317");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S86
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S86() {
            this.Manager.BeginTest("TestScenarioS15S86");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S907\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2967;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2968;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2968 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2967);
            this.Manager.Comment("reaching state \'S1339\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2967, "policyHandle of OpenPolicy2, state S1339");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2968, "return of OpenPolicy2, state S1339");
            this.Manager.Comment("reaching state \'S1771\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2969;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2970;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2970 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2969);
            this.Manager.Comment("reaching state \'S2203\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2969, "trustHandle of CreateTrustedDomain, state S2203");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2970, "return of CreateTrustedDomain, state S2203");
            this.Manager.Comment("reaching state \'S2635\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2971;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2972;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2972 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2971);
            this.Manager.Comment("reaching state \'S3067\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2971, "trustHandle of OpenTrustedDomainByName, state S3067");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2972, "return of OpenTrustedDomainByName, state S3067");
            this.Manager.Comment("reaching state \'S3499\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2973;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=4),Valid,DS_BEHAVIOR_WIN2003,Invali" +
                    "d,True)\'");
            temp2973 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S3931\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2973, "return of SetTrustedDomainInfoByName, state S3931");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S860
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S860() {
            this.Manager.BeginTest("TestScenarioS15S860");
            this.Manager.Comment("reaching state \'S860\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S861\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1294\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2974;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2975;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2975 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2974);
            this.Manager.Comment("reaching state \'S1726\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2974, "policyHandle of OpenPolicy2, state S1726");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2975, "return of OpenPolicy2, state S1726");
            this.Manager.Comment("reaching state \'S2158\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2976;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2977;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2977 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2976);
            this.Manager.Comment("reaching state \'S2590\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2976, "trustHandle of CreateTrustedDomain, state S2590");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp2977, "return of CreateTrustedDomain, state S2590");
            this.Manager.Comment("reaching state \'S3022\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2978;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2979;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2979 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2978);
            this.Manager.Comment("reaching state \'S3454\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Invalid]:ObjectNameNotFound\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2978, "trustHandle of OpenTrustedDomainByName, state S3454");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ObjectNameNotFound, temp2979, "return of OpenTrustedDomainByName, state S3454");
            this.Manager.Comment("reaching state \'S3886\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2980;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=10),Valid,DS_BEHAVIOR_WIN2003,TrustedControllersInformation,True)'");
            temp2980 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            10u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, true);
            this.Manager.Comment("reaching state \'S4318\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2980, "return of SetTrustedDomainInfoByName, state S4318");
            TestScenarioS15S4320();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S862
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S862() {
            this.Manager.BeginTest("TestScenarioS15S862");
            this.Manager.Comment("reaching state \'S862\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S863\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S1295\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2981;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2982;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2982 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2981);
            this.Manager.Comment("reaching state \'S1727\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2981, "policyHandle of OpenPolicy2, state S1727");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2982, "return of OpenPolicy2, state S1727");
            this.Manager.Comment("reaching state \'S2159\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2983;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2984;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2984 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2983);
            this.Manager.Comment("reaching state \'S2591\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2983, "trustHandle of CreateTrustedDomain, state S2591");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2984, "return of CreateTrustedDomain, state S2591");
            this.Manager.Comment("reaching state \'S3023\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2985;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2986;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2986 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2985);
            this.Manager.Comment("reaching state \'S3455\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2985, "trustHandle of OpenTrustedDomainByName, state S3455");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2986, "return of OpenTrustedDomainByName, state S3455");
            this.Manager.Comment("reaching state \'S3887\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2987;
            this.Manager.Comment("executing step \'call SetTrustedDomainInfoByName(2,TRUSTED_DOMAIN_INFORMATION_EX(T" +
                    "rustDomainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"Dom" +
                    "ainNetBios\",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,Inva" +
                    "lid,True)\'");
            temp2987 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(2, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, true);
            this.Manager.Comment("reaching state \'S4319\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp2987, "return of SetTrustedDomainInfoByName, state S4319");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S88
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S88() {
            this.Manager.BeginTest("TestScenarioS15S88");
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S908\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2988;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2989;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2989 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2988);
            this.Manager.Comment("reaching state \'S1340\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2988, "policyHandle of OpenPolicy2, state S1340");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2989, "return of OpenPolicy2, state S1340");
            this.Manager.Comment("reaching state \'S1772\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2990;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2991;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2991 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2990);
            this.Manager.Comment("reaching state \'S2204\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2990, "trustHandle of CreateTrustedDomain, state S2204");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2991, "return of CreateTrustedDomain, state S2204");
            this.Manager.Comment("reaching state \'S2636\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2992;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2993;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp2993 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2992);
            this.Manager.Comment("reaching state \'S3068\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2992, "trustHandle of OpenTrustedDomainByName, state S3068");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2993, "return of OpenTrustedDomainByName, state S3068");
            this.Manager.Comment("reaching state \'S3500\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2994;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformation,True)'");
            temp2994 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, true);
            this.Manager.Comment("reaching state \'S3932\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp2994, "return of SetTrustedDomainInfoByName, state S3932");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S90
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S90() {
            this.Manager.BeginTest("TestScenarioS15S90");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S909\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2995;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2996;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp2996 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp2995);
            this.Manager.Comment("reaching state \'S1341\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2995, "policyHandle of OpenPolicy2, state S1341");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2996, "return of OpenPolicy2, state S1341");
            this.Manager.Comment("reaching state \'S1773\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2997;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp2998;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp2998 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2997);
            this.Manager.Comment("reaching state \'S2205\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2997, "trustHandle of CreateTrustedDomain, state S2205");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp2998, "return of CreateTrustedDomain, state S2205");
            this.Manager.Comment("reaching state \'S2637\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2999;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3000;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp3000 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp2999);
            this.Manager.Comment("reaching state \'S3069\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp2999, "trustHandle of OpenTrustedDomainByName, state S3069");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3000, "return of OpenTrustedDomainByName, state S3069");
            this.Manager.Comment("reaching state \'S3501\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3001;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedPosixOffsetInformation,True)'");
            temp3001 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, true);
            this.Manager.Comment("reaching state \'S3933\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp3001, "return of SetTrustedDomainInfoByName, state S3933");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S92
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S92() {
            this.Manager.BeginTest("TestScenarioS15S92");
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S910\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3002;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3003;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp3003 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp3002);
            this.Manager.Comment("reaching state \'S1342\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3002, "policyHandle of OpenPolicy2, state S1342");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3003, "return of OpenPolicy2, state S1342");
            this.Manager.Comment("reaching state \'S1774\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3004;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3005;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp3005 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp3004);
            this.Manager.Comment("reaching state \'S2206\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3004, "trustHandle of CreateTrustedDomain, state S2206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3005, "return of CreateTrustedDomain, state S2206");
            this.Manager.Comment("reaching state \'S2638\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3006;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3007;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp3007 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp3006);
            this.Manager.Comment("reaching state \'S3070\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3006, "trustHandle of OpenTrustedDomainByName, state S3070");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3007, "return of OpenTrustedDomainByName, state S3070");
            this.Manager.Comment("reaching state \'S3502\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3008;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainFullInformationInternal,True)'");
            temp3008 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, true);
            this.Manager.Comment("reaching state \'S3934\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp3008, "return of SetTrustedDomainInfoByName, state S3934");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S94
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S94() {
            this.Manager.BeginTest("TestScenarioS15S94");
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S911\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3009;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3010;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp3010 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp3009);
            this.Manager.Comment("reaching state \'S1343\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3009, "policyHandle of OpenPolicy2, state S1343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3010, "return of OpenPolicy2, state S1343");
            this.Manager.Comment("reaching state \'S1775\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3011;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3012;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp3012 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp3011);
            this.Manager.Comment("reaching state \'S2207\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3011, "trustHandle of CreateTrustedDomain, state S2207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3012, "return of CreateTrustedDomain, state S2207");
            this.Manager.Comment("reaching state \'S2639\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3013;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3014;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp3014 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp3013);
            this.Manager.Comment("reaching state \'S3071\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3013, "trustHandle of OpenTrustedDomainByName, state S3071");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3014, "return of OpenTrustedDomainByName, state S3071");
            this.Manager.Comment("reaching state \'S3503\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3015;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainSupportedEncryptionTypes,True)'");
            temp3015 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, true);
            this.Manager.Comment("reaching state \'S3935\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp3015, "return of SetTrustedDomainInfoByName, state S3935");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S96
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S96() {
            this.Manager.BeginTest("TestScenarioS15S96");
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S912\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3016;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3017;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp3017 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp3016);
            this.Manager.Comment("reaching state \'S1344\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3016, "policyHandle of OpenPolicy2, state S1344");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3017, "return of OpenPolicy2, state S1344");
            this.Manager.Comment("reaching state \'S1776\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3018;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3019;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp3019 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp3018);
            this.Manager.Comment("reaching state \'S2208\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3018, "trustHandle of CreateTrustedDomain, state S2208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3019, "return of CreateTrustedDomain, state S2208");
            this.Manager.Comment("reaching state \'S2640\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3020;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3021;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp3021 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp3020);
            this.Manager.Comment("reaching state \'S3072\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3020, "trustHandle of OpenTrustedDomainByName, state S3072");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3021, "return of OpenTrustedDomainByName, state S3072");
            this.Manager.Comment("reaching state \'S3504\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3022;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainAuthInformationInternal,True)'");
            temp3022 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, true);
            this.Manager.Comment("reaching state \'S3936\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp3022, "return of SetTrustedDomainInfoByName, state S3936");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S98
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS15S98() {
            this.Manager.BeginTest("TestScenarioS15S98");
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S913\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3023;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3024;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp3024 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp3023);
            this.Manager.Comment("reaching state \'S1345\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3023, "policyHandle of OpenPolicy2, state S1345");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3024, "return of OpenPolicy2, state S1345");
            this.Manager.Comment("reaching state \'S1777\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3025;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3026;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,65663,out _)\'");
            temp3026 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp3025);
            this.Manager.Comment("reaching state \'S2209\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3025, "trustHandle of CreateTrustedDomain, state S2209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3026, "return of CreateTrustedDomain, state S2209");
            this.Manager.Comment("reaching state \'S2641\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp3027;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3028;
            this.Manager.Comment("executing step \'call OpenTrustedDomainByName(1,\"Domain\",Valid,65663,out _)\'");
            temp3028 = this.ILsadManagedAdapterInstance.OpenTrustedDomainByName(1, "Domain", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 65663u, out temp3027);
            this.Manager.Comment("reaching state \'S3073\'");
            this.Manager.Comment("checking step \'return OpenTrustedDomainByName/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp3027, "trustHandle of OpenTrustedDomainByName, state S3073");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp3028, "return of OpenTrustedDomainByName, state S3073");
            this.Manager.Comment("reaching state \'S3505\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3029;
            this.Manager.Comment(@"executing step 'call SetTrustedDomainInfoByName(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""Domain"",TrustDomain_Sid=""DomainSid"",TrustDomain_NetBiosName=""DomainNetBios"",TrustType=2,TrustDir=1,TrustAttr=4),Invalid,DS_BEHAVIOR_WIN2003,TrustedDomainInformationEx,True)'");
            temp3029 = this.ILsadManagedAdapterInstance.SetTrustedDomainInfoByName(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            2u,
                            1u,
                            4u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, true);
            this.Manager.Comment("reaching state \'S3937\'");
            this.Manager.Comment("checking step \'return SetTrustedDomainInfoByName/InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp3029, "return of SetTrustedDomainInfoByName, state S3937");
            TestScenarioS15S4325();
            this.Manager.EndTest();
        }
        #endregion
    }
}
