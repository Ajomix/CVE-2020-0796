// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.Protocols.TestTools;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TestScenarioS14 : PtfTestClassBase {
        
        public TestScenarioS14() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "10000");
        }
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter ILsadManagedAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ILsadManagedAdapterInstance = ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter)(this.GetAdapter(typeof(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ILsadManagedAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S0() {
            this.Manager.BeginTest("TestScenarioS14S0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S446\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp0;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp0);
            this.Manager.Comment("reaching state \'S669\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp0, "policyHandle of OpenPolicy2, state S669");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1, "return of OpenPolicy2, state S669");
            this.Manager.Comment("reaching state \'S892\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp2;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp3;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Invalid,True,Invalid,4061069439,out _)\'" +
                    "");
            temp3 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp2);
            this.Manager.Comment("reaching state \'S1115\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp2, "trustHandle of CreateTrustedDomain, state S1115");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp3, "return of CreateTrustedDomain, state S1115");
            this.Manager.Comment("reaching state \'S1338\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp4;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp5;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp5 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp4);
            this.Manager.Comment("reaching state \'S1561\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp4, "trustDomainInfo of QueryTrustedDomainInfo, state S1561");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp5, "return of QueryTrustedDomainInfo, state S1561");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        
        private void TestScenarioS14S1784() {
            this.Manager.Comment("reaching state \'S1784\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp6;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp6 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S1786\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp6, "return of DeleteTrustedDomain, state S1786");
            this.Manager.Comment("reaching state \'S1788\'");
        }
        #endregion
        
        #region Test Starting in S10
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S10() {
            this.Manager.BeginTest("TestScenarioS14S10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S451\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp7;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp8;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp8 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp7);
            this.Manager.Comment("reaching state \'S674\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp7, "policyHandle of OpenPolicy2, state S674");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp8, "return of OpenPolicy2, state S674");
            this.Manager.Comment("reaching state \'S897\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp9;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp10;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp10 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp9);
            this.Manager.Comment("reaching state \'S1120\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp9, "trustHandle of CreateTrustedDomain, state S1120");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp10, "return of CreateTrustedDomain, state S1120");
            this.Manager.Comment("reaching state \'S1343\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp11;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp12;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainName" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp12 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp11);
            this.Manager.Comment("reaching state \'S1566\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(0)), temp11, "trustDomainInfo of QueryTrustedDomainInfo, state S1566");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp12, "return of QueryTrustedDomainInfo, state S1566");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        
        private void TestScenarioS14S1785() {
            this.Manager.Comment("reaching state \'S1785\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp13;
            this.Manager.Comment("executing step \'call DeleteTrustedDomain(1,\"DomainSid\",Valid)\'");
            temp13 = this.ILsadManagedAdapterInstance.DeleteTrustedDomain(1, "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)));
            this.Manager.Comment("reaching state \'S1787\'");
            this.Manager.Comment("checking step \'return DeleteTrustedDomain/Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp13, "return of DeleteTrustedDomain, state S1787");
            this.Manager.Comment("reaching state \'S1789\'");
        }
        #endregion
        
        #region Test Starting in S100
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S100() {
            this.Manager.BeginTest("TestScenarioS14S100");
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S496\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp14;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp15;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp15 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp14);
            this.Manager.Comment("reaching state \'S719\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp14, "policyHandle of OpenPolicy2, state S719");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp15, "return of OpenPolicy2, state S719");
            this.Manager.Comment("reaching state \'S942\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp16;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp17;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp17 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp16);
            this.Manager.Comment("reaching state \'S1165\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp16, "trustHandle of CreateTrustedDomain, state S1165");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp17, "return of CreateTrustedDomain, state S1165");
            this.Manager.Comment("reaching state \'S1388\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp18;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp19;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainAu" +
                    "thInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp19 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp18);
            this.Manager.Comment("reaching state \'S1611\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp18, "trustDomainInfo of QueryTrustedDomainInfo, state S1611");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp19, "return of QueryTrustedDomainInfo, state S1611");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S102
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S102() {
            this.Manager.BeginTest("TestScenarioS14S102");
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S103\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S497\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp20;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp21;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp21 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp20);
            this.Manager.Comment("reaching state \'S720\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp20, "policyHandle of OpenPolicy2, state S720");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp21, "return of OpenPolicy2, state S720");
            this.Manager.Comment("reaching state \'S943\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp22;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp23;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp23 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp22);
            this.Manager.Comment("reaching state \'S1166\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp22, "trustHandle of CreateTrustedDomain, state S1166");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp23, "return of CreateTrustedDomain, state S1166");
            this.Manager.Comment("reaching state \'S1389\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp24;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp25;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp25 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp24);
            this.Manager.Comment("reaching state \'S1612\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp24, "trustDomainInfo of QueryTrustedDomainInfo, state S1612");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp25, "return of QueryTrustedDomainInfo, state S1612");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S104
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S104() {
            this.Manager.BeginTest("TestScenarioS14S104");
            this.Manager.Comment("reaching state \'S104\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S498\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp26;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp27;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp27 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp26);
            this.Manager.Comment("reaching state \'S721\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp26, "policyHandle of OpenPolicy2, state S721");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp27, "return of OpenPolicy2, state S721");
            this.Manager.Comment("reaching state \'S944\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp28;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp29;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp29 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp28);
            this.Manager.Comment("reaching state \'S1167\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp28, "trustHandle of CreateTrustedDomain, state S1167");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp29, "return of CreateTrustedDomain, state S1167");
            this.Manager.Comment("reaching state \'S1390\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp30;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp31;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp31 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp30);
            this.Manager.Comment("reaching state \'S1613\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp30, "trustDomainInfo of QueryTrustedDomainInfo, state S1613");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp31, "return of QueryTrustedDomainInfo, state S1613");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S106
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S106() {
            this.Manager.BeginTest("TestScenarioS14S106");
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S499\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp32;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp33;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp33 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp32);
            this.Manager.Comment("reaching state \'S722\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp32, "policyHandle of OpenPolicy2, state S722");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp33, "return of OpenPolicy2, state S722");
            this.Manager.Comment("reaching state \'S945\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp34;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp35;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp35 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp34);
            this.Manager.Comment("reaching state \'S1168\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp34, "trustHandle of CreateTrustedDomain, state S1168");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp35, "return of CreateTrustedDomain, state S1168");
            this.Manager.Comment("reaching state \'S1391\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp36;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp37;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedPasswordIn" +
                    "formation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp37 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp36);
            this.Manager.Comment("reaching state \'S1614\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp36, "trustDomainInfo of QueryTrustedDomainInfo, state S1614");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp37, "return of QueryTrustedDomainInfo, state S1614");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S108
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S108() {
            this.Manager.BeginTest("TestScenarioS14S108");
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S500\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp38;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp39;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp39 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp38);
            this.Manager.Comment("reaching state \'S723\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp38, "policyHandle of OpenPolicy2, state S723");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp39, "return of OpenPolicy2, state S723");
            this.Manager.Comment("reaching state \'S946\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp40;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp41;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp41 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp40);
            this.Manager.Comment("reaching state \'S1169\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp40, "trustHandle of CreateTrustedDomain, state S1169");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp41, "return of CreateTrustedDomain, state S1169");
            this.Manager.Comment("reaching state \'S1392\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp42;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp43;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedContro" +
                    "llersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp43 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp42);
            this.Manager.Comment("reaching state \'S1615\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp42, "trustDomainInfo of QueryTrustedDomainInfo, state S1615");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp43, "return of QueryTrustedDomainInfo, state S1615");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S110
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S110() {
            this.Manager.BeginTest("TestScenarioS14S110");
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S501\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp44;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp45;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp45 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp44);
            this.Manager.Comment("reaching state \'S724\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp44, "policyHandle of OpenPolicy2, state S724");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp45, "return of OpenPolicy2, state S724");
            this.Manager.Comment("reaching state \'S947\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp46;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp47;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp47 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp46);
            this.Manager.Comment("reaching state \'S1170\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp46, "trustHandle of CreateTrustedDomain, state S1170");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp47, "return of CreateTrustedDomain, state S1170");
            this.Manager.Comment("reaching state \'S1393\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp48;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp49;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",Invalid,DS_BEHA" +
                    "VIOR_WIN2003,out _)\'");
            temp49 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp48);
            this.Manager.Comment("reaching state \'S1616\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp48, "trustDomainInfo of QueryTrustedDomainInfo, state S1616");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp49, "return of QueryTrustedDomainInfo, state S1616");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S112
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S112() {
            this.Manager.BeginTest("TestScenarioS14S112");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S502\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp50;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp51;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp51 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp50);
            this.Manager.Comment("reaching state \'S725\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp50, "policyHandle of OpenPolicy2, state S725");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp51, "return of OpenPolicy2, state S725");
            this.Manager.Comment("reaching state \'S948\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp52;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp53;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp53 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp52);
            this.Manager.Comment("reaching state \'S1171\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp52, "trustHandle of CreateTrustedDomain, state S1171");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp53, "return of CreateTrustedDomain, state S1171");
            this.Manager.Comment("reaching state \'S1394\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp54;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp55;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",Invalid,DS_BE" +
                    "HAVIOR_WIN2003,out _)\'");
            temp55 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp54);
            this.Manager.Comment("reaching state \'S1617\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp54, "trustDomainInfo of QueryTrustedDomainInfo, state S1617");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp55, "return of QueryTrustedDomainInfo, state S1617");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S114
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S114() {
            this.Manager.BeginTest("TestScenarioS14S114");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S503\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp56;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp57;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp57 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp56);
            this.Manager.Comment("reaching state \'S726\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp56, "policyHandle of OpenPolicy2, state S726");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp57, "return of OpenPolicy2, state S726");
            this.Manager.Comment("reaching state \'S949\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp58;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp59;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp59 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp58);
            this.Manager.Comment("reaching state \'S1172\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp58, "trustHandle of CreateTrustedDomain, state S1172");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp59, "return of CreateTrustedDomain, state S1172");
            this.Manager.Comment("reaching state \'S1395\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp60;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp61;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp61 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp60);
            this.Manager.Comment("reaching state \'S1618\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp60, "trustDomainInfo of QueryTrustedDomainInfo, state S1618");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp61, "return of QueryTrustedDomainInfo, state S1618");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S116
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S116() {
            this.Manager.BeginTest("TestScenarioS14S116");
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S504\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp62;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp63;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp63 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp62);
            this.Manager.Comment("reaching state \'S727\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp62, "policyHandle of OpenPolicy2, state S727");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp63, "return of OpenPolicy2, state S727");
            this.Manager.Comment("reaching state \'S950\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp64;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp65;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp65 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp64);
            this.Manager.Comment("reaching state \'S1173\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp64, "trustHandle of CreateTrustedDomain, state S1173");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp65, "return of CreateTrustedDomain, state S1173");
            this.Manager.Comment("reaching state \'S1396\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp66;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp67;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedPasswo" +
                    "rdInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp67 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp66);
            this.Manager.Comment("reaching state \'S1619\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp66, "trustDomainInfo of QueryTrustedDomainInfo, state S1619");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp67, "return of QueryTrustedDomainInfo, state S1619");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S118
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S118() {
            this.Manager.BeginTest("TestScenarioS14S118");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S505\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp68;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp69;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp69 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp68);
            this.Manager.Comment("reaching state \'S728\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp68, "policyHandle of OpenPolicy2, state S728");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp69, "return of OpenPolicy2, state S728");
            this.Manager.Comment("reaching state \'S951\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp70;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp71;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp71 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp70);
            this.Manager.Comment("reaching state \'S1174\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp70, "trustHandle of CreateTrustedDomain, state S1174");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp71, "return of CreateTrustedDomain, state S1174");
            this.Manager.Comment("reaching state \'S1397\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp72;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp73;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "AuthInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp73 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp72);
            this.Manager.Comment("reaching state \'S1620\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp72, "trustDomainInfo of QueryTrustedDomainInfo, state S1620");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp73, "return of QueryTrustedDomainInfo, state S1620");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S12() {
            this.Manager.BeginTest("TestScenarioS14S12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S452\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp74;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp75;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp75 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp74);
            this.Manager.Comment("reaching state \'S675\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp74, "policyHandle of OpenPolicy2, state S675");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp75, "return of OpenPolicy2, state S675");
            this.Manager.Comment("reaching state \'S898\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp76;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp77;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp77 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp76);
            this.Manager.Comment("reaching state \'S1121\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp76, "trustHandle of CreateTrustedDomain, state S1121");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp77, "return of CreateTrustedDomain, state S1121");
            this.Manager.Comment("reaching state \'S1344\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp78;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp79;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainFull" +
                    "Information2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp79 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp78);
            this.Manager.Comment("reaching state \'S1567\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(0)), temp78, "trustDomainInfo of QueryTrustedDomainInfo, state S1567");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp79, "return of QueryTrustedDomainInfo, state S1567");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S120
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S120() {
            this.Manager.BeginTest("TestScenarioS14S120");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S506\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp80;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp81;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp81 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp80);
            this.Manager.Comment("reaching state \'S729\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp80, "policyHandle of OpenPolicy2, state S729");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp81, "return of OpenPolicy2, state S729");
            this.Manager.Comment("reaching state \'S952\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp82;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp83;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp83 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp82);
            this.Manager.Comment("reaching state \'S1175\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp82, "trustHandle of CreateTrustedDomain, state S1175");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp83, "return of CreateTrustedDomain, state S1175");
            this.Manager.Comment("reaching state \'S1398\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp84;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp85;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp85 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp84);
            this.Manager.Comment("reaching state \'S1621\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp84, "trustDomainInfo of QueryTrustedDomainInfo, state S1621");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp85, "return of QueryTrustedDomainInfo, state S1621");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S122
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S122() {
            this.Manager.BeginTest("TestScenarioS14S122");
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S507\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp86;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp87;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp87 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp86);
            this.Manager.Comment("reaching state \'S730\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp86, "policyHandle of OpenPolicy2, state S730");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp87, "return of OpenPolicy2, state S730");
            this.Manager.Comment("reaching state \'S953\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp88;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp89;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp89 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp88);
            this.Manager.Comment("reaching state \'S1176\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp88, "trustHandle of CreateTrustedDomain, state S1176");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp89, "return of CreateTrustedDomain, state S1176");
            this.Manager.Comment("reaching state \'S1399\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp90;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp91;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp91 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp90);
            this.Manager.Comment("reaching state \'S1622\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp90, "trustDomainInfo of QueryTrustedDomainInfo, state S1622");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp91, "return of QueryTrustedDomainInfo, state S1622");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S124
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S124() {
            this.Manager.BeginTest("TestScenarioS14S124");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S508\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp92;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp93;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp93 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp92);
            this.Manager.Comment("reaching state \'S731\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp92, "policyHandle of OpenPolicy2, state S731");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp93, "return of OpenPolicy2, state S731");
            this.Manager.Comment("reaching state \'S954\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp94;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp95;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp95 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp94);
            this.Manager.Comment("reaching state \'S1177\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp94, "trustHandle of CreateTrustedDomain, state S1177");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp95, "return of CreateTrustedDomain, state S1177");
            this.Manager.Comment("reaching state \'S1400\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp96;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp97;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "AuthInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp97 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp96);
            this.Manager.Comment("reaching state \'S1623\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp96, "trustDomainInfo of QueryTrustedDomainInfo, state S1623");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp97, "return of QueryTrustedDomainInfo, state S1623");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S126
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S126() {
            this.Manager.BeginTest("TestScenarioS14S126");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S509\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp98;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp99;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp99 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp98);
            this.Manager.Comment("reaching state \'S732\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp98, "policyHandle of OpenPolicy2, state S732");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp99, "return of OpenPolicy2, state S732");
            this.Manager.Comment("reaching state \'S955\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp100;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp101;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp101 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp100);
            this.Manager.Comment("reaching state \'S1178\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp100, "trustHandle of CreateTrustedDomain, state S1178");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp101, "return of CreateTrustedDomain, state S1178");
            this.Manager.Comment("reaching state \'S1401\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp102;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp103;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "AuthInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp103 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp102);
            this.Manager.Comment("reaching state \'S1624\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp102, "trustDomainInfo of QueryTrustedDomainInfo, state S1624");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp103, "return of QueryTrustedDomainInfo, state S1624");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S128
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S128() {
            this.Manager.BeginTest("TestScenarioS14S128");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S510\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp104;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp105;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp105 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp104);
            this.Manager.Comment("reaching state \'S733\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp104, "policyHandle of OpenPolicy2, state S733");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp105, "return of OpenPolicy2, state S733");
            this.Manager.Comment("reaching state \'S956\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp106;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp107;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp107 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp106);
            this.Manager.Comment("reaching state \'S1179\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp106, "trustHandle of CreateTrustedDomain, state S1179");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp107, "return of CreateTrustedDomain, state S1179");
            this.Manager.Comment("reaching state \'S1402\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp108;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp109;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "NameInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp109 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp108);
            this.Manager.Comment("reaching state \'S1625\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp108, "trustDomainInfo of QueryTrustedDomainInfo, state S1625");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp109, "return of QueryTrustedDomainInfo, state S1625");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S130
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S130() {
            this.Manager.BeginTest("TestScenarioS14S130");
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S511\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp110;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp111;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp111 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp110);
            this.Manager.Comment("reaching state \'S734\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp110, "policyHandle of OpenPolicy2, state S734");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp111, "return of OpenPolicy2, state S734");
            this.Manager.Comment("reaching state \'S957\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp112;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp113;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp113 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp112);
            this.Manager.Comment("reaching state \'S1180\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp112, "trustHandle of CreateTrustedDomain, state S1180");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp113, "return of CreateTrustedDomain, state S1180");
            this.Manager.Comment("reaching state \'S1403\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp114;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp115;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedPosixO" +
                    "ffsetInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp115 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp114);
            this.Manager.Comment("reaching state \'S1626\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp114, "trustDomainInfo of QueryTrustedDomainInfo, state S1626");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp115, "return of QueryTrustedDomainInfo, state S1626");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S132
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S132() {
            this.Manager.BeginTest("TestScenarioS14S132");
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S512\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp116;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp117;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp117 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp116);
            this.Manager.Comment("reaching state \'S735\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp116, "policyHandle of OpenPolicy2, state S735");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp117, "return of OpenPolicy2, state S735");
            this.Manager.Comment("reaching state \'S958\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp118;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp119;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp119 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp118);
            this.Manager.Comment("reaching state \'S1181\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp118, "trustHandle of CreateTrustedDomain, state S1181");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp119, "return of CreateTrustedDomain, state S1181");
            this.Manager.Comment("reaching state \'S1404\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp120;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp121;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "SupportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp121 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp120);
            this.Manager.Comment("reaching state \'S1627\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp120, "trustDomainInfo of QueryTrustedDomainInfo, state S1627");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp121, "return of QueryTrustedDomainInfo, state S1627");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S134
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S134() {
            this.Manager.BeginTest("TestScenarioS14S134");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S513\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp122;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp123;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp123 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp122);
            this.Manager.Comment("reaching state \'S736\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp122, "policyHandle of OpenPolicy2, state S736");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp123, "return of OpenPolicy2, state S736");
            this.Manager.Comment("reaching state \'S959\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp124;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp125;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp125 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp124);
            this.Manager.Comment("reaching state \'S1182\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp124, "trustHandle of CreateTrustedDomain, state S1182");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp125, "return of CreateTrustedDomain, state S1182");
            this.Manager.Comment("reaching state \'S1405\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp126;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp127;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp127 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp126);
            this.Manager.Comment("reaching state \'S1628\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp126, "trustDomainInfo of QueryTrustedDomainInfo, state S1628");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp127, "return of QueryTrustedDomainInfo, state S1628");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S136
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S136() {
            this.Manager.BeginTest("TestScenarioS14S136");
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S514\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp128;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp129;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp129 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp128);
            this.Manager.Comment("reaching state \'S737\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp128, "policyHandle of OpenPolicy2, state S737");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp129, "return of OpenPolicy2, state S737");
            this.Manager.Comment("reaching state \'S960\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp130;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp131;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp131 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp130);
            this.Manager.Comment("reaching state \'S1183\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp130, "trustHandle of CreateTrustedDomain, state S1183");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp131, "return of CreateTrustedDomain, state S1183");
            this.Manager.Comment("reaching state \'S1406\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp132;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp133;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp133 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp132);
            this.Manager.Comment("reaching state \'S1629\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp132, "trustDomainInfo of QueryTrustedDomainInfo, state S1629");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp133, "return of QueryTrustedDomainInfo, state S1629");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S138
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S138() {
            this.Manager.BeginTest("TestScenarioS14S138");
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S515\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp134;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp135;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp135 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp134);
            this.Manager.Comment("reaching state \'S738\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp134, "policyHandle of OpenPolicy2, state S738");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp135, "return of OpenPolicy2, state S738");
            this.Manager.Comment("reaching state \'S961\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp136;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp137;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp137 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp136);
            this.Manager.Comment("reaching state \'S1184\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp136, "trustHandle of CreateTrustedDomain, state S1184");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp137, "return of CreateTrustedDomain, state S1184");
            this.Manager.Comment("reaching state \'S1407\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp138;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp139;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp139 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp138);
            this.Manager.Comment("reaching state \'S1630\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp138, "trustDomainInfo of QueryTrustedDomainInfo, state S1630");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp139, "return of QueryTrustedDomainInfo, state S1630");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S14() {
            this.Manager.BeginTest("TestScenarioS14S14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S453\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp140;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp141;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp141 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp140);
            this.Manager.Comment("reaching state \'S676\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp140, "policyHandle of OpenPolicy2, state S676");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp141, "return of OpenPolicy2, state S676");
            this.Manager.Comment("reaching state \'S899\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp142;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp143;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp143 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp142);
            this.Manager.Comment("reaching state \'S1122\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp142, "trustHandle of CreateTrustedDomain, state S1122");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp143, "return of CreateTrustedDomain, state S1122");
            this.Manager.Comment("reaching state \'S1345\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp144;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp145;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",Invalid,DS_BEHAVI" +
                    "OR_WIN2003,out _)\'");
            temp145 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp144);
            this.Manager.Comment("reaching state \'S1568\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp144, "trustDomainInfo of QueryTrustedDomainInfo, state S1568");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp145, "return of QueryTrustedDomainInfo, state S1568");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S140
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S140() {
            this.Manager.BeginTest("TestScenarioS14S140");
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S516\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp146;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp147;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp147 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp146);
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp146, "policyHandle of OpenPolicy2, state S739");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp147, "return of OpenPolicy2, state S739");
            this.Manager.Comment("reaching state \'S962\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp148;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp149;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp149 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp148);
            this.Manager.Comment("reaching state \'S1185\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp148, "trustHandle of CreateTrustedDomain, state S1185");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp149, "return of CreateTrustedDomain, state S1185");
            this.Manager.Comment("reaching state \'S1408\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp150;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp151;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp151 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp150);
            this.Manager.Comment("reaching state \'S1631\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp150, "trustDomainInfo of QueryTrustedDomainInfo, state S1631");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp151, "return of QueryTrustedDomainInfo, state S1631");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S142
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S142() {
            this.Manager.BeginTest("TestScenarioS14S142");
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S517\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp152;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp153;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp153 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp152);
            this.Manager.Comment("reaching state \'S740\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp152, "policyHandle of OpenPolicy2, state S740");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp153, "return of OpenPolicy2, state S740");
            this.Manager.Comment("reaching state \'S963\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp154;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp155;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp155 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp154);
            this.Manager.Comment("reaching state \'S1186\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp154, "trustHandle of CreateTrustedDomain, state S1186");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp155, "return of CreateTrustedDomain, state S1186");
            this.Manager.Comment("reaching state \'S1409\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp156;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp157;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp157 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp156);
            this.Manager.Comment("reaching state \'S1632\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp156, "trustDomainInfo of QueryTrustedDomainInfo, state S1632");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp157, "return of QueryTrustedDomainInfo, state S1632");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S144
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S144() {
            this.Manager.BeginTest("TestScenarioS14S144");
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S518\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp158;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp159;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp159 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp158);
            this.Manager.Comment("reaching state \'S741\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp158, "policyHandle of OpenPolicy2, state S741");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp159, "return of OpenPolicy2, state S741");
            this.Manager.Comment("reaching state \'S964\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp160;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp161;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp161 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp160);
            this.Manager.Comment("reaching state \'S1187\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp160, "trustHandle of CreateTrustedDomain, state S1187");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp161, "return of CreateTrustedDomain, state S1187");
            this.Manager.Comment("reaching state \'S1410\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp162;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp163;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp163 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp162);
            this.Manager.Comment("reaching state \'S1633\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp162, "trustDomainInfo of QueryTrustedDomainInfo, state S1633");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp163, "return of QueryTrustedDomainInfo, state S1633");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S146
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S146() {
            this.Manager.BeginTest("TestScenarioS14S146");
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S519\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp164;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp165;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp165 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp164);
            this.Manager.Comment("reaching state \'S742\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp164, "policyHandle of OpenPolicy2, state S742");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp165, "return of OpenPolicy2, state S742");
            this.Manager.Comment("reaching state \'S965\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp166;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp167;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp167 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp166);
            this.Manager.Comment("reaching state \'S1188\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp166, "trustHandle of CreateTrustedDomain, state S1188");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp167, "return of CreateTrustedDomain, state S1188");
            this.Manager.Comment("reaching state \'S1411\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp168;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp169;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp169 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp168);
            this.Manager.Comment("reaching state \'S1634\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp168, "trustDomainInfo of QueryTrustedDomainInfo, state S1634");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp169, "return of QueryTrustedDomainInfo, state S1634");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S148
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S148() {
            this.Manager.BeginTest("TestScenarioS14S148");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S520\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp170;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp171;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp171 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp170);
            this.Manager.Comment("reaching state \'S743\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp170, "policyHandle of OpenPolicy2, state S743");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp171, "return of OpenPolicy2, state S743");
            this.Manager.Comment("reaching state \'S966\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp172;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp173;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp173 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp172);
            this.Manager.Comment("reaching state \'S1189\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp172, "trustHandle of CreateTrustedDomain, state S1189");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp173, "return of CreateTrustedDomain, state S1189");
            this.Manager.Comment("reaching state \'S1412\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp174;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp175;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp175 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp174);
            this.Manager.Comment("reaching state \'S1635\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp174, "trustDomainInfo of QueryTrustedDomainInfo, state S1635");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp175, "return of QueryTrustedDomainInfo, state S1635");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S150
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S150() {
            this.Manager.BeginTest("TestScenarioS14S150");
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S521\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp176;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp177;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp177 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp176);
            this.Manager.Comment("reaching state \'S744\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp176, "policyHandle of OpenPolicy2, state S744");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp177, "return of OpenPolicy2, state S744");
            this.Manager.Comment("reaching state \'S967\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp178;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp179;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp179 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp178);
            this.Manager.Comment("reaching state \'S1190\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp178, "trustHandle of CreateTrustedDomain, state S1190");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp179, "return of CreateTrustedDomain, state S1190");
            this.Manager.Comment("reaching state \'S1413\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp180;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp181;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedControll" +
                    "ersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp181 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp180);
            this.Manager.Comment("reaching state \'S1636\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp180, "trustDomainInfo of QueryTrustedDomainInfo, state S1636");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp181, "return of QueryTrustedDomainInfo, state S1636");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S152
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S152() {
            this.Manager.BeginTest("TestScenarioS14S152");
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S522\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp182;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp183;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp183 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp182);
            this.Manager.Comment("reaching state \'S745\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp182, "policyHandle of OpenPolicy2, state S745");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp183, "return of OpenPolicy2, state S745");
            this.Manager.Comment("reaching state \'S968\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp184;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp185;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp185 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp184);
            this.Manager.Comment("reaching state \'S1191\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp184, "trustHandle of CreateTrustedDomain, state S1191");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp185, "return of CreateTrustedDomain, state S1191");
            this.Manager.Comment("reaching state \'S1414\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp186;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp187;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainAu" +
                    "thInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp187 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp186);
            this.Manager.Comment("reaching state \'S1637\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp186, "trustDomainInfo of QueryTrustedDomainInfo, state S1637");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp187, "return of QueryTrustedDomainInfo, state S1637");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S154
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S154() {
            this.Manager.BeginTest("TestScenarioS14S154");
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S523\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp188;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp189;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp189 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp188);
            this.Manager.Comment("reaching state \'S746\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp188, "policyHandle of OpenPolicy2, state S746");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp189, "return of OpenPolicy2, state S746");
            this.Manager.Comment("reaching state \'S969\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp190;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp191;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp191 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp190);
            this.Manager.Comment("reaching state \'S1192\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp190, "trustHandle of CreateTrustedDomain, state S1192");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp191, "return of CreateTrustedDomain, state S1192");
            this.Manager.Comment("reaching state \'S1415\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp192;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp193;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainAu" +
                    "thInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp193 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp192);
            this.Manager.Comment("reaching state \'S1638\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp192, "trustDomainInfo of QueryTrustedDomainInfo, state S1638");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp193, "return of QueryTrustedDomainInfo, state S1638");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S156
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S156() {
            this.Manager.BeginTest("TestScenarioS14S156");
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S524\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp194;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp195;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp195 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp194);
            this.Manager.Comment("reaching state \'S747\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp194, "policyHandle of OpenPolicy2, state S747");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp195, "return of OpenPolicy2, state S747");
            this.Manager.Comment("reaching state \'S970\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp196;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp197;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp197 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp196);
            this.Manager.Comment("reaching state \'S1193\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp196, "trustHandle of CreateTrustedDomain, state S1193");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp197, "return of CreateTrustedDomain, state S1193");
            this.Manager.Comment("reaching state \'S1416\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp198;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp199;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp199 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp198);
            this.Manager.Comment("reaching state \'S1639\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp198, "trustDomainInfo of QueryTrustedDomainInfo, state S1639");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp199, "return of QueryTrustedDomainInfo, state S1639");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S158
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S158() {
            this.Manager.BeginTest("TestScenarioS14S158");
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S525\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp200;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp201;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp201 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp200);
            this.Manager.Comment("reaching state \'S748\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp200, "policyHandle of OpenPolicy2, state S748");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp201, "return of OpenPolicy2, state S748");
            this.Manager.Comment("reaching state \'S971\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp202;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp203;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp203 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp202);
            this.Manager.Comment("reaching state \'S1194\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp202, "trustHandle of CreateTrustedDomain, state S1194");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp203, "return of CreateTrustedDomain, state S1194");
            this.Manager.Comment("reaching state \'S1417\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp204;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp205;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedPassword" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp205 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp204);
            this.Manager.Comment("reaching state \'S1640\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp204, "trustDomainInfo of QueryTrustedDomainInfo, state S1640");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp205, "return of QueryTrustedDomainInfo, state S1640");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S16() {
            this.Manager.BeginTest("TestScenarioS14S16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S454\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp206;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp207;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp207 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp206);
            this.Manager.Comment("reaching state \'S677\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp206, "policyHandle of OpenPolicy2, state S677");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp207, "return of OpenPolicy2, state S677");
            this.Manager.Comment("reaching state \'S900\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp208;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp209;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp209 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp208);
            this.Manager.Comment("reaching state \'S1123\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp208, "trustHandle of CreateTrustedDomain, state S1123");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp209, "return of CreateTrustedDomain, state S1123");
            this.Manager.Comment("reaching state \'S1346\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp210;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp211;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",Invalid,DS_BEHA" +
                    "VIOR_WIN2003,out _)\'");
            temp211 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp210);
            this.Manager.Comment("reaching state \'S1569\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp210, "trustDomainInfo of QueryTrustedDomainInfo, state S1569");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp211, "return of QueryTrustedDomainInfo, state S1569");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S160
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S160() {
            this.Manager.BeginTest("TestScenarioS14S160");
            this.Manager.Comment("reaching state \'S160\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S526\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp212;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp213;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp213 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp212);
            this.Manager.Comment("reaching state \'S749\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp212, "policyHandle of OpenPolicy2, state S749");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp213, "return of OpenPolicy2, state S749");
            this.Manager.Comment("reaching state \'S972\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp214;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp215;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp215 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp214);
            this.Manager.Comment("reaching state \'S1195\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp214, "trustHandle of CreateTrustedDomain, state S1195");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp215, "return of CreateTrustedDomain, state S1195");
            this.Manager.Comment("reaching state \'S1418\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp216;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp217;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp217 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp216);
            this.Manager.Comment("reaching state \'S1641\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp216, "trustDomainInfo of QueryTrustedDomainInfo, state S1641");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp217, "return of QueryTrustedDomainInfo, state S1641");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S162
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S162() {
            this.Manager.BeginTest("TestScenarioS14S162");
            this.Manager.Comment("reaching state \'S162\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S527\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp218;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp219;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp219 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp218);
            this.Manager.Comment("reaching state \'S750\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp218, "policyHandle of OpenPolicy2, state S750");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp219, "return of OpenPolicy2, state S750");
            this.Manager.Comment("reaching state \'S973\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp220;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp221;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp221 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp220);
            this.Manager.Comment("reaching state \'S1196\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp220, "trustHandle of CreateTrustedDomain, state S1196");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp221, "return of CreateTrustedDomain, state S1196");
            this.Manager.Comment("reaching state \'S1419\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp222;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp223;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp223 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp222);
            this.Manager.Comment("reaching state \'S1642\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp222, "trustDomainInfo of QueryTrustedDomainInfo, state S1642");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp223, "return of QueryTrustedDomainInfo, state S1642");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S164
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S164() {
            this.Manager.BeginTest("TestScenarioS14S164");
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S165\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S528\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp224;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp225;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp225 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp224);
            this.Manager.Comment("reaching state \'S751\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp224, "policyHandle of OpenPolicy2, state S751");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp225, "return of OpenPolicy2, state S751");
            this.Manager.Comment("reaching state \'S974\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp226;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp227;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp227 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp226);
            this.Manager.Comment("reaching state \'S1197\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp226, "trustHandle of CreateTrustedDomain, state S1197");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp227, "return of CreateTrustedDomain, state S1197");
            this.Manager.Comment("reaching state \'S1420\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp228;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp229;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainSu" +
                    "pportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp229 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp228);
            this.Manager.Comment("reaching state \'S1643\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp228, "trustDomainInfo of QueryTrustedDomainInfo, state S1643");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp229, "return of QueryTrustedDomainInfo, state S1643");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S166
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S166() {
            this.Manager.BeginTest("TestScenarioS14S166");
            this.Manager.Comment("reaching state \'S166\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S167\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S529\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp230;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp231;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp231 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp230);
            this.Manager.Comment("reaching state \'S752\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp230, "policyHandle of OpenPolicy2, state S752");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp231, "return of OpenPolicy2, state S752");
            this.Manager.Comment("reaching state \'S975\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp232;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp233;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp233 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp232);
            this.Manager.Comment("reaching state \'S1198\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp232, "trustHandle of CreateTrustedDomain, state S1198");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp233, "return of CreateTrustedDomain, state S1198");
            this.Manager.Comment("reaching state \'S1421\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp234;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp235;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainNa" +
                    "meInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp235 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp234);
            this.Manager.Comment("reaching state \'S1644\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp234, "trustDomainInfo of QueryTrustedDomainInfo, state S1644");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp235, "return of QueryTrustedDomainInfo, state S1644");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S168
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S168() {
            this.Manager.BeginTest("TestScenarioS14S168");
            this.Manager.Comment("reaching state \'S168\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S169\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S530\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp236;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp237;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp237 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp236);
            this.Manager.Comment("reaching state \'S753\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp236, "policyHandle of OpenPolicy2, state S753");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp237, "return of OpenPolicy2, state S753");
            this.Manager.Comment("reaching state \'S976\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp238;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp239;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp239 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp238);
            this.Manager.Comment("reaching state \'S1199\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp238, "trustHandle of CreateTrustedDomain, state S1199");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp239, "return of CreateTrustedDomain, state S1199");
            this.Manager.Comment("reaching state \'S1422\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp240;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp241;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp241 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp240);
            this.Manager.Comment("reaching state \'S1645\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp240, "trustDomainInfo of QueryTrustedDomainInfo, state S1645");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp241, "return of QueryTrustedDomainInfo, state S1645");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S170
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S170() {
            this.Manager.BeginTest("TestScenarioS14S170");
            this.Manager.Comment("reaching state \'S170\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S531\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp242;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp243;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp243 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp242);
            this.Manager.Comment("reaching state \'S754\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp242, "policyHandle of OpenPolicy2, state S754");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp243, "return of OpenPolicy2, state S754");
            this.Manager.Comment("reaching state \'S977\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp244;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp245;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp245 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp244);
            this.Manager.Comment("reaching state \'S1200\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp244, "trustHandle of CreateTrustedDomain, state S1200");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp245, "return of CreateTrustedDomain, state S1200");
            this.Manager.Comment("reaching state \'S1423\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp246;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp247;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedPassword" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp247 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp246);
            this.Manager.Comment("reaching state \'S1646\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp246, "trustDomainInfo of QueryTrustedDomainInfo, state S1646");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp247, "return of QueryTrustedDomainInfo, state S1646");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S172
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S172() {
            this.Manager.BeginTest("TestScenarioS14S172");
            this.Manager.Comment("reaching state \'S172\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S173\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S532\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp248;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp249;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp249 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp248);
            this.Manager.Comment("reaching state \'S755\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp248, "policyHandle of OpenPolicy2, state S755");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp249, "return of OpenPolicy2, state S755");
            this.Manager.Comment("reaching state \'S978\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp250;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp251;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp251 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp250);
            this.Manager.Comment("reaching state \'S1201\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp250, "trustHandle of CreateTrustedDomain, state S1201");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp251, "return of CreateTrustedDomain, state S1201");
            this.Manager.Comment("reaching state \'S1424\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp252;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp253;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainAu" +
                    "thInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp253 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp252);
            this.Manager.Comment("reaching state \'S1647\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp252, "trustDomainInfo of QueryTrustedDomainInfo, state S1647");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp253, "return of QueryTrustedDomainInfo, state S1647");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S174
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S174() {
            this.Manager.BeginTest("TestScenarioS14S174");
            this.Manager.Comment("reaching state \'S174\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S533\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp254;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp255;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp255 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp254);
            this.Manager.Comment("reaching state \'S756\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp254, "policyHandle of OpenPolicy2, state S756");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp255, "return of OpenPolicy2, state S756");
            this.Manager.Comment("reaching state \'S979\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp256;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp257;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp257 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp256);
            this.Manager.Comment("reaching state \'S1202\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp256, "trustHandle of CreateTrustedDomain, state S1202");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp257, "return of CreateTrustedDomain, state S1202");
            this.Manager.Comment("reaching state \'S1425\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp258;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp259;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainAu" +
                    "thInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp259 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp258);
            this.Manager.Comment("reaching state \'S1648\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp258, "trustDomainInfo of QueryTrustedDomainInfo, state S1648");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp259, "return of QueryTrustedDomainInfo, state S1648");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S176
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S176() {
            this.Manager.BeginTest("TestScenarioS14S176");
            this.Manager.Comment("reaching state \'S176\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S177\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S534\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp260;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp261;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp261 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp260);
            this.Manager.Comment("reaching state \'S757\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp260, "policyHandle of OpenPolicy2, state S757");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp261, "return of OpenPolicy2, state S757");
            this.Manager.Comment("reaching state \'S980\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp262;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp263;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp263 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp262);
            this.Manager.Comment("reaching state \'S1203\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp262, "trustHandle of CreateTrustedDomain, state S1203");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp263, "return of CreateTrustedDomain, state S1203");
            this.Manager.Comment("reaching state \'S1426\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp264;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp265;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp265 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp264);
            this.Manager.Comment("reaching state \'S1649\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp264, "trustDomainInfo of QueryTrustedDomainInfo, state S1649");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp265, "return of QueryTrustedDomainInfo, state S1649");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S178
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S178() {
            this.Manager.BeginTest("TestScenarioS14S178");
            this.Manager.Comment("reaching state \'S178\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S535\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp266;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp267;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp267 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp266);
            this.Manager.Comment("reaching state \'S758\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp266, "policyHandle of OpenPolicy2, state S758");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp267, "return of OpenPolicy2, state S758");
            this.Manager.Comment("reaching state \'S981\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp268;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp269;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp269 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp268);
            this.Manager.Comment("reaching state \'S1204\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp268, "trustHandle of CreateTrustedDomain, state S1204");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp269, "return of CreateTrustedDomain, state S1204");
            this.Manager.Comment("reaching state \'S1427\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp270;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp271;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedPosixOff" +
                    "setInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp271 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp270);
            this.Manager.Comment("reaching state \'S1650\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp270, "trustDomainInfo of QueryTrustedDomainInfo, state S1650");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp271, "return of QueryTrustedDomainInfo, state S1650");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S18() {
            this.Manager.BeginTest("TestScenarioS14S18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S455\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp272;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp273;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp273 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp272);
            this.Manager.Comment("reaching state \'S678\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp272, "policyHandle of OpenPolicy2, state S678");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp273, "return of OpenPolicy2, state S678");
            this.Manager.Comment("reaching state \'S901\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp274;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp275;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp275 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp274);
            this.Manager.Comment("reaching state \'S1124\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp274, "trustHandle of CreateTrustedDomain, state S1124");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp275, "return of CreateTrustedDomain, state S1124");
            this.Manager.Comment("reaching state \'S1347\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp276;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp277;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainSu" +
                    "pportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp277 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp276);
            this.Manager.Comment("reaching state \'S1570\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp276, "trustDomainInfo of QueryTrustedDomainInfo, state S1570");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp277, "return of QueryTrustedDomainInfo, state S1570");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S180
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S180() {
            this.Manager.BeginTest("TestScenarioS14S180");
            this.Manager.Comment("reaching state \'S180\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S536\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp278;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp279;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp279 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp278);
            this.Manager.Comment("reaching state \'S759\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp278, "policyHandle of OpenPolicy2, state S759");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp279, "return of OpenPolicy2, state S759");
            this.Manager.Comment("reaching state \'S982\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp280;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp281;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp281 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp280);
            this.Manager.Comment("reaching state \'S1205\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp280, "trustHandle of CreateTrustedDomain, state S1205");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp281, "return of CreateTrustedDomain, state S1205");
            this.Manager.Comment("reaching state \'S1428\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp282;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp283;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "AuthInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp283 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp282);
            this.Manager.Comment("reaching state \'S1651\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp282, "trustDomainInfo of QueryTrustedDomainInfo, state S1651");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp283, "return of QueryTrustedDomainInfo, state S1651");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S182
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S182() {
            this.Manager.BeginTest("TestScenarioS14S182");
            this.Manager.Comment("reaching state \'S182\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S537\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp284;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp285;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp285 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp284);
            this.Manager.Comment("reaching state \'S760\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp284, "policyHandle of OpenPolicy2, state S760");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp285, "return of OpenPolicy2, state S760");
            this.Manager.Comment("reaching state \'S983\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp286;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp287;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp287 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp286);
            this.Manager.Comment("reaching state \'S1206\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp286, "trustHandle of CreateTrustedDomain, state S1206");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp287, "return of CreateTrustedDomain, state S1206");
            this.Manager.Comment("reaching state \'S1429\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp288;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp289;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp289 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp288);
            this.Manager.Comment("reaching state \'S1652\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp288, "trustDomainInfo of QueryTrustedDomainInfo, state S1652");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp289, "return of QueryTrustedDomainInfo, state S1652");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S184
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S184() {
            this.Manager.BeginTest("TestScenarioS14S184");
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S538\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp290;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp291;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp291 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp290);
            this.Manager.Comment("reaching state \'S761\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp290, "policyHandle of OpenPolicy2, state S761");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp291, "return of OpenPolicy2, state S761");
            this.Manager.Comment("reaching state \'S984\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp292;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp293;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp293 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp292);
            this.Manager.Comment("reaching state \'S1207\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp292, "trustHandle of CreateTrustedDomain, state S1207");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp293, "return of CreateTrustedDomain, state S1207");
            this.Manager.Comment("reaching state \'S1430\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp294;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp295;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedContro" +
                    "llersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp295 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp294);
            this.Manager.Comment("reaching state \'S1653\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp294, "trustDomainInfo of QueryTrustedDomainInfo, state S1653");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp295, "return of QueryTrustedDomainInfo, state S1653");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S186
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S186() {
            this.Manager.BeginTest("TestScenarioS14S186");
            this.Manager.Comment("reaching state \'S186\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S539\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp296;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp297;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp297 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp296);
            this.Manager.Comment("reaching state \'S762\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp296, "policyHandle of OpenPolicy2, state S762");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp297, "return of OpenPolicy2, state S762");
            this.Manager.Comment("reaching state \'S985\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp298;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp299;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp299 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp298);
            this.Manager.Comment("reaching state \'S1208\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp298, "trustHandle of CreateTrustedDomain, state S1208");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp299, "return of CreateTrustedDomain, state S1208");
            this.Manager.Comment("reaching state \'S1431\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp300;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp301;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",Invalid,DS_BE" +
                    "HAVIOR_WIN2003,out _)\'");
            temp301 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp300);
            this.Manager.Comment("reaching state \'S1654\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp300, "trustDomainInfo of QueryTrustedDomainInfo, state S1654");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp301, "return of QueryTrustedDomainInfo, state S1654");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S188
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S188() {
            this.Manager.BeginTest("TestScenarioS14S188");
            this.Manager.Comment("reaching state \'S188\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S540\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp302;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp303;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp303 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp302);
            this.Manager.Comment("reaching state \'S763\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp302, "policyHandle of OpenPolicy2, state S763");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp303, "return of OpenPolicy2, state S763");
            this.Manager.Comment("reaching state \'S986\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp304;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp305;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp305 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp304);
            this.Manager.Comment("reaching state \'S1209\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp304, "trustHandle of CreateTrustedDomain, state S1209");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp305, "return of CreateTrustedDomain, state S1209");
            this.Manager.Comment("reaching state \'S1432\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp306;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp307;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedControll" +
                    "ersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp307 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp306);
            this.Manager.Comment("reaching state \'S1655\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp306, "trustDomainInfo of QueryTrustedDomainInfo, state S1655");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp307, "return of QueryTrustedDomainInfo, state S1655");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S190
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S190() {
            this.Manager.BeginTest("TestScenarioS14S190");
            this.Manager.Comment("reaching state \'S190\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S541\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp308;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp309;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp309 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp308);
            this.Manager.Comment("reaching state \'S764\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp308, "policyHandle of OpenPolicy2, state S764");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp309, "return of OpenPolicy2, state S764");
            this.Manager.Comment("reaching state \'S987\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp310;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp311;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp311 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp310);
            this.Manager.Comment("reaching state \'S1210\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp310, "trustHandle of CreateTrustedDomain, state S1210");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp311, "return of CreateTrustedDomain, state S1210");
            this.Manager.Comment("reaching state \'S1433\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp312;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp313;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp313 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp312);
            this.Manager.Comment("reaching state \'S1656\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp312, "trustDomainInfo of QueryTrustedDomainInfo, state S1656");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp313, "return of QueryTrustedDomainInfo, state S1656");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S192
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S192() {
            this.Manager.BeginTest("TestScenarioS14S192");
            this.Manager.Comment("reaching state \'S192\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S193\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S542\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp314;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp315;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp315 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp314);
            this.Manager.Comment("reaching state \'S765\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp314, "policyHandle of OpenPolicy2, state S765");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp315, "return of OpenPolicy2, state S765");
            this.Manager.Comment("reaching state \'S988\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp316;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp317;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp317 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp316);
            this.Manager.Comment("reaching state \'S1211\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp316, "trustHandle of CreateTrustedDomain, state S1211");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp317, "return of CreateTrustedDomain, state S1211");
            this.Manager.Comment("reaching state \'S1434\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp318;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp319;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "NameInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp319 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp318);
            this.Manager.Comment("reaching state \'S1657\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp318, "trustDomainInfo of QueryTrustedDomainInfo, state S1657");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp319, "return of QueryTrustedDomainInfo, state S1657");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S194
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S194() {
            this.Manager.BeginTest("TestScenarioS14S194");
            this.Manager.Comment("reaching state \'S194\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S543\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp320;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp321;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp321 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp320);
            this.Manager.Comment("reaching state \'S766\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp320, "policyHandle of OpenPolicy2, state S766");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp321, "return of OpenPolicy2, state S766");
            this.Manager.Comment("reaching state \'S989\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp322;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp323;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp323 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp322);
            this.Manager.Comment("reaching state \'S1212\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp322, "trustHandle of CreateTrustedDomain, state S1212");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp323, "return of CreateTrustedDomain, state S1212");
            this.Manager.Comment("reaching state \'S1435\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp324;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp325;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp325 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp324);
            this.Manager.Comment("reaching state \'S1658\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp324, "trustDomainInfo of QueryTrustedDomainInfo, state S1658");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp325, "return of QueryTrustedDomainInfo, state S1658");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S196
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S196() {
            this.Manager.BeginTest("TestScenarioS14S196");
            this.Manager.Comment("reaching state \'S196\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S544\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp326;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp327;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp327 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp326);
            this.Manager.Comment("reaching state \'S767\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp326, "policyHandle of OpenPolicy2, state S767");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp327, "return of OpenPolicy2, state S767");
            this.Manager.Comment("reaching state \'S990\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp328;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp329;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp329 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp328);
            this.Manager.Comment("reaching state \'S1213\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp328, "trustHandle of CreateTrustedDomain, state S1213");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp329, "return of CreateTrustedDomain, state S1213");
            this.Manager.Comment("reaching state \'S1436\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp330;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp331;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp331 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp330);
            this.Manager.Comment("reaching state \'S1659\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp330, "trustDomainInfo of QueryTrustedDomainInfo, state S1659");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp331, "return of QueryTrustedDomainInfo, state S1659");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S198
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S198() {
            this.Manager.BeginTest("TestScenarioS14S198");
            this.Manager.Comment("reaching state \'S198\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S199\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S545\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp332;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp333;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp333 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp332);
            this.Manager.Comment("reaching state \'S768\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp332, "policyHandle of OpenPolicy2, state S768");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp333, "return of OpenPolicy2, state S768");
            this.Manager.Comment("reaching state \'S991\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp334;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp335;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp335 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp334);
            this.Manager.Comment("reaching state \'S1214\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp334, "trustHandle of CreateTrustedDomain, state S1214");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp335, "return of CreateTrustedDomain, state S1214");
            this.Manager.Comment("reaching state \'S1437\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp336;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp337;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedPasswo" +
                    "rdInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp337 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp336);
            this.Manager.Comment("reaching state \'S1660\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp336, "trustDomainInfo of QueryTrustedDomainInfo, state S1660");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp337, "return of QueryTrustedDomainInfo, state S1660");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S2() {
            this.Manager.BeginTest("TestScenarioS14S2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S447\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp338;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp339;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp339 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp338);
            this.Manager.Comment("reaching state \'S670\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp338, "policyHandle of OpenPolicy2, state S670");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp339, "return of OpenPolicy2, state S670");
            this.Manager.Comment("reaching state \'S893\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp340;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp341;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp341 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp340);
            this.Manager.Comment("reaching state \'S1116\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp340, "trustHandle of CreateTrustedDomain, state S1116");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp341, "return of CreateTrustedDomain, state S1116");
            this.Manager.Comment("reaching state \'S1339\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp342;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp343;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainSupp" +
                    "ortedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp343 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp342);
            this.Manager.Comment("reaching state \'S1562\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(0)), temp342, "trustDomainInfo of QueryTrustedDomainInfo, state S1562");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp343, "return of QueryTrustedDomainInfo, state S1562");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S20() {
            this.Manager.BeginTest("TestScenarioS14S20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S456\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp344;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp345;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp345 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp344);
            this.Manager.Comment("reaching state \'S679\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp344, "policyHandle of OpenPolicy2, state S679");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp345, "return of OpenPolicy2, state S679");
            this.Manager.Comment("reaching state \'S902\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp346;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp347;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp347 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp346);
            this.Manager.Comment("reaching state \'S1125\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp346, "trustHandle of CreateTrustedDomain, state S1125");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp347, "return of CreateTrustedDomain, state S1125");
            this.Manager.Comment("reaching state \'S1348\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp348;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp349;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainNa" +
                    "meInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp349 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp348);
            this.Manager.Comment("reaching state \'S1571\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp348, "trustDomainInfo of QueryTrustedDomainInfo, state S1571");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp349, "return of QueryTrustedDomainInfo, state S1571");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S200
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S200() {
            this.Manager.BeginTest("TestScenarioS14S200");
            this.Manager.Comment("reaching state \'S200\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S546\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp350;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp351;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp351 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp350);
            this.Manager.Comment("reaching state \'S769\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp350, "policyHandle of OpenPolicy2, state S769");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp351, "return of OpenPolicy2, state S769");
            this.Manager.Comment("reaching state \'S992\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp352;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp353;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp353 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp352);
            this.Manager.Comment("reaching state \'S1215\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp352, "trustHandle of CreateTrustedDomain, state S1215");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp353, "return of CreateTrustedDomain, state S1215");
            this.Manager.Comment("reaching state \'S1438\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp354;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp355;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp355 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp354);
            this.Manager.Comment("reaching state \'S1661\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp354, "trustDomainInfo of QueryTrustedDomainInfo, state S1661");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp355, "return of QueryTrustedDomainInfo, state S1661");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S202
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S202() {
            this.Manager.BeginTest("TestScenarioS14S202");
            this.Manager.Comment("reaching state \'S202\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S547\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp356;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp357;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp357 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp356);
            this.Manager.Comment("reaching state \'S770\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp356, "policyHandle of OpenPolicy2, state S770");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp357, "return of OpenPolicy2, state S770");
            this.Manager.Comment("reaching state \'S993\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp358;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp359;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp359 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp358);
            this.Manager.Comment("reaching state \'S1216\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp358, "trustHandle of CreateTrustedDomain, state S1216");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp359, "return of CreateTrustedDomain, state S1216");
            this.Manager.Comment("reaching state \'S1439\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp360;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp361;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "SupportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp361 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp360);
            this.Manager.Comment("reaching state \'S1662\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp360, "trustDomainInfo of QueryTrustedDomainInfo, state S1662");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp361, "return of QueryTrustedDomainInfo, state S1662");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S204
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S204() {
            this.Manager.BeginTest("TestScenarioS14S204");
            this.Manager.Comment("reaching state \'S204\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S205\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S548\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp362;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp363;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp363 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp362);
            this.Manager.Comment("reaching state \'S771\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp362, "policyHandle of OpenPolicy2, state S771");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp363, "return of OpenPolicy2, state S771");
            this.Manager.Comment("reaching state \'S994\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp364;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp365;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp365 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp364);
            this.Manager.Comment("reaching state \'S1217\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp364, "trustHandle of CreateTrustedDomain, state S1217");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp365, "return of CreateTrustedDomain, state S1217");
            this.Manager.Comment("reaching state \'S1440\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp366;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp367;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp367 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp366);
            this.Manager.Comment("reaching state \'S1663\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp366, "trustDomainInfo of QueryTrustedDomainInfo, state S1663");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp367, "return of QueryTrustedDomainInfo, state S1663");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S206
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S206() {
            this.Manager.BeginTest("TestScenarioS14S206");
            this.Manager.Comment("reaching state \'S206\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S207\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S549\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp368;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp369;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp369 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp368);
            this.Manager.Comment("reaching state \'S772\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp368, "policyHandle of OpenPolicy2, state S772");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp369, "return of OpenPolicy2, state S772");
            this.Manager.Comment("reaching state \'S995\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp370;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp371;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp371 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp370);
            this.Manager.Comment("reaching state \'S1218\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp370, "trustHandle of CreateTrustedDomain, state S1218");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp371, "return of CreateTrustedDomain, state S1218");
            this.Manager.Comment("reaching state \'S1441\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp372;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp373;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",Invalid,DS_BEHA" +
                    "VIOR_WIN2003,out _)\'");
            temp373 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp372);
            this.Manager.Comment("reaching state \'S1664\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp372, "trustDomainInfo of QueryTrustedDomainInfo, state S1664");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp373, "return of QueryTrustedDomainInfo, state S1664");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S208
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S208() {
            this.Manager.BeginTest("TestScenarioS14S208");
            this.Manager.Comment("reaching state \'S208\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S209\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S550\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp374;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp375;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp375 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp374);
            this.Manager.Comment("reaching state \'S773\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp374, "policyHandle of OpenPolicy2, state S773");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp375, "return of OpenPolicy2, state S773");
            this.Manager.Comment("reaching state \'S996\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp376;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp377;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp377 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp376);
            this.Manager.Comment("reaching state \'S1219\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp376, "trustHandle of CreateTrustedDomain, state S1219");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp377, "return of CreateTrustedDomain, state S1219");
            this.Manager.Comment("reaching state \'S1442\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp378;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp379;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainAu" +
                    "thInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp379 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp378);
            this.Manager.Comment("reaching state \'S1665\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp378, "trustDomainInfo of QueryTrustedDomainInfo, state S1665");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp379, "return of QueryTrustedDomainInfo, state S1665");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S210
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S210() {
            this.Manager.BeginTest("TestScenarioS14S210");
            this.Manager.Comment("reaching state \'S210\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S211\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S551\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp380;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp381;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp381 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp380);
            this.Manager.Comment("reaching state \'S774\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp380, "policyHandle of OpenPolicy2, state S774");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp381, "return of OpenPolicy2, state S774");
            this.Manager.Comment("reaching state \'S997\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp382;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp383;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp383 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp382);
            this.Manager.Comment("reaching state \'S1220\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp382, "trustHandle of CreateTrustedDomain, state S1220");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp383, "return of CreateTrustedDomain, state S1220");
            this.Manager.Comment("reaching state \'S1443\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp384;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp385;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedPassword" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp385 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp384);
            this.Manager.Comment("reaching state \'S1666\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp384, "trustDomainInfo of QueryTrustedDomainInfo, state S1666");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp385, "return of QueryTrustedDomainInfo, state S1666");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S212
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S212() {
            this.Manager.BeginTest("TestScenarioS14S212");
            this.Manager.Comment("reaching state \'S212\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S213\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S552\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp386;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp387;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp387 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp386);
            this.Manager.Comment("reaching state \'S775\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp386, "policyHandle of OpenPolicy2, state S775");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp387, "return of OpenPolicy2, state S775");
            this.Manager.Comment("reaching state \'S998\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp388;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp389;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp389 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp388);
            this.Manager.Comment("reaching state \'S1221\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp388, "trustHandle of CreateTrustedDomain, state S1221");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp389, "return of CreateTrustedDomain, state S1221");
            this.Manager.Comment("reaching state \'S1444\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp390;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp391;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp391 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp390);
            this.Manager.Comment("reaching state \'S1667\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp390, "trustDomainInfo of QueryTrustedDomainInfo, state S1667");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp391, "return of QueryTrustedDomainInfo, state S1667");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S214
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S214() {
            this.Manager.BeginTest("TestScenarioS14S214");
            this.Manager.Comment("reaching state \'S214\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S215\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S553\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp392;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp393;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp393 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp392);
            this.Manager.Comment("reaching state \'S776\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp392, "policyHandle of OpenPolicy2, state S776");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp393, "return of OpenPolicy2, state S776");
            this.Manager.Comment("reaching state \'S999\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp394;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp395;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp395 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp394);
            this.Manager.Comment("reaching state \'S1222\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp394, "trustHandle of CreateTrustedDomain, state S1222");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp395, "return of CreateTrustedDomain, state S1222");
            this.Manager.Comment("reaching state \'S1445\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp396;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp397;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainNa" +
                    "meInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp397 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp396);
            this.Manager.Comment("reaching state \'S1668\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp396, "trustDomainInfo of QueryTrustedDomainInfo, state S1668");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp397, "return of QueryTrustedDomainInfo, state S1668");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S216
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S216() {
            this.Manager.BeginTest("TestScenarioS14S216");
            this.Manager.Comment("reaching state \'S216\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S217\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S554\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp398;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp399;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp399 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp398);
            this.Manager.Comment("reaching state \'S777\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp398, "policyHandle of OpenPolicy2, state S777");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp399, "return of OpenPolicy2, state S777");
            this.Manager.Comment("reaching state \'S1000\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp400;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp401;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp401 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp400);
            this.Manager.Comment("reaching state \'S1223\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp400, "trustHandle of CreateTrustedDomain, state S1223");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp401, "return of CreateTrustedDomain, state S1223");
            this.Manager.Comment("reaching state \'S1446\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp402;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp403;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp403 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp402);
            this.Manager.Comment("reaching state \'S1669\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp402, "trustDomainInfo of QueryTrustedDomainInfo, state S1669");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp403, "return of QueryTrustedDomainInfo, state S1669");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S218
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S218() {
            this.Manager.BeginTest("TestScenarioS14S218");
            this.Manager.Comment("reaching state \'S218\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S555\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp404;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp405;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp405 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp404);
            this.Manager.Comment("reaching state \'S778\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp404, "policyHandle of OpenPolicy2, state S778");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp405, "return of OpenPolicy2, state S778");
            this.Manager.Comment("reaching state \'S1001\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp406;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp407;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp407 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp406);
            this.Manager.Comment("reaching state \'S1224\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp406, "trustHandle of CreateTrustedDomain, state S1224");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp407, "return of CreateTrustedDomain, state S1224");
            this.Manager.Comment("reaching state \'S1447\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp408;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp409;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp409 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp408);
            this.Manager.Comment("reaching state \'S1670\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp408, "trustDomainInfo of QueryTrustedDomainInfo, state S1670");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp409, "return of QueryTrustedDomainInfo, state S1670");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S22() {
            this.Manager.BeginTest("TestScenarioS14S22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S457\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp410;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp411;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp411 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp410);
            this.Manager.Comment("reaching state \'S680\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp410, "policyHandle of OpenPolicy2, state S680");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp411, "return of OpenPolicy2, state S680");
            this.Manager.Comment("reaching state \'S903\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp412;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp413;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp413 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp412);
            this.Manager.Comment("reaching state \'S1126\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp412, "trustHandle of CreateTrustedDomain, state S1126");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp413, "return of CreateTrustedDomain, state S1126");
            this.Manager.Comment("reaching state \'S1349\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp414;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp415;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp415 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp414);
            this.Manager.Comment("reaching state \'S1572\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp414, "trustDomainInfo of QueryTrustedDomainInfo, state S1572");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp415, "return of QueryTrustedDomainInfo, state S1572");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S220
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S220() {
            this.Manager.BeginTest("TestScenarioS14S220");
            this.Manager.Comment("reaching state \'S220\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S221\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S556\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp416;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp417;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp417 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp416);
            this.Manager.Comment("reaching state \'S779\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp416, "policyHandle of OpenPolicy2, state S779");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp417, "return of OpenPolicy2, state S779");
            this.Manager.Comment("reaching state \'S1002\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp418;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp419;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp419 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp418);
            this.Manager.Comment("reaching state \'S1225\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp418, "trustHandle of CreateTrustedDomain, state S1225");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp419, "return of CreateTrustedDomain, state S1225");
            this.Manager.Comment("reaching state \'S1448\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp420;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp421;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedPosixOff" +
                    "setInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp421 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp420);
            this.Manager.Comment("reaching state \'S1671\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp420, "trustDomainInfo of QueryTrustedDomainInfo, state S1671");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp421, "return of QueryTrustedDomainInfo, state S1671");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S222
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S222() {
            this.Manager.BeginTest("TestScenarioS14S222");
            this.Manager.Comment("reaching state \'S222\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S557\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp422;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp423;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp423 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp422);
            this.Manager.Comment("reaching state \'S780\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp422, "policyHandle of OpenPolicy2, state S780");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp423, "return of OpenPolicy2, state S780");
            this.Manager.Comment("reaching state \'S1003\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp424;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp425;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp425 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp424);
            this.Manager.Comment("reaching state \'S1226\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp424, "trustHandle of CreateTrustedDomain, state S1226");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp425, "return of CreateTrustedDomain, state S1226");
            this.Manager.Comment("reaching state \'S1449\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp426;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp427;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainName" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp427 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp426);
            this.Manager.Comment("reaching state \'S1672\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp426, "trustDomainInfo of QueryTrustedDomainInfo, state S1672");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp427, "return of QueryTrustedDomainInfo, state S1672");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S224
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S224() {
            this.Manager.BeginTest("TestScenarioS14S224");
            this.Manager.Comment("reaching state \'S224\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S558\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp428;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp429;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp429 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp428);
            this.Manager.Comment("reaching state \'S781\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp428, "policyHandle of OpenPolicy2, state S781");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp429, "return of OpenPolicy2, state S781");
            this.Manager.Comment("reaching state \'S1004\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp430;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp431;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp431 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp430);
            this.Manager.Comment("reaching state \'S1227\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp430, "trustHandle of CreateTrustedDomain, state S1227");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp431, "return of CreateTrustedDomain, state S1227");
            this.Manager.Comment("reaching state \'S1450\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp432;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp433;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainNa" +
                    "meInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp433 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp432);
            this.Manager.Comment("reaching state \'S1673\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp432, "trustDomainInfo of QueryTrustedDomainInfo, state S1673");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp433, "return of QueryTrustedDomainInfo, state S1673");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S226
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S226() {
            this.Manager.BeginTest("TestScenarioS14S226");
            this.Manager.Comment("reaching state \'S226\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S559\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp434;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp435;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp435 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp434);
            this.Manager.Comment("reaching state \'S782\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp434, "policyHandle of OpenPolicy2, state S782");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp435, "return of OpenPolicy2, state S782");
            this.Manager.Comment("reaching state \'S1005\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp436;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp437;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp437 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp436);
            this.Manager.Comment("reaching state \'S1228\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp436, "trustHandle of CreateTrustedDomain, state S1228");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp437, "return of CreateTrustedDomain, state S1228");
            this.Manager.Comment("reaching state \'S1451\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp438;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp439;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedPosixOffse" +
                    "tInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp439 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp438);
            this.Manager.Comment("reaching state \'S1674\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp438, "trustDomainInfo of QueryTrustedDomainInfo, state S1674");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp439, "return of QueryTrustedDomainInfo, state S1674");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S228
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S228() {
            this.Manager.BeginTest("TestScenarioS14S228");
            this.Manager.Comment("reaching state \'S228\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S229\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S560\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp440;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp441;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp441 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp440);
            this.Manager.Comment("reaching state \'S783\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp440, "policyHandle of OpenPolicy2, state S783");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp441, "return of OpenPolicy2, state S783");
            this.Manager.Comment("reaching state \'S1006\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp442;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp443;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp443 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp442);
            this.Manager.Comment("reaching state \'S1229\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp442, "trustHandle of CreateTrustedDomain, state S1229");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp443, "return of CreateTrustedDomain, state S1229");
            this.Manager.Comment("reaching state \'S1452\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp444;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp445;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp445 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp444);
            this.Manager.Comment("reaching state \'S1675\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp444, "trustDomainInfo of QueryTrustedDomainInfo, state S1675");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp445, "return of QueryTrustedDomainInfo, state S1675");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S230
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S230() {
            this.Manager.BeginTest("TestScenarioS14S230");
            this.Manager.Comment("reaching state \'S230\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S561\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp446;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp447;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp447 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp446);
            this.Manager.Comment("reaching state \'S784\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp446, "policyHandle of OpenPolicy2, state S784");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp447, "return of OpenPolicy2, state S784");
            this.Manager.Comment("reaching state \'S1007\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp448;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp449;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp449 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp448);
            this.Manager.Comment("reaching state \'S1230\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp448, "trustHandle of CreateTrustedDomain, state S1230");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp449, "return of CreateTrustedDomain, state S1230");
            this.Manager.Comment("reaching state \'S1453\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp450;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp451;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp451 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp450);
            this.Manager.Comment("reaching state \'S1676\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp450, "trustDomainInfo of QueryTrustedDomainInfo, state S1676");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp451, "return of QueryTrustedDomainInfo, state S1676");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S232
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S232() {
            this.Manager.BeginTest("TestScenarioS14S232");
            this.Manager.Comment("reaching state \'S232\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S562\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp452;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp453;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp453 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp452);
            this.Manager.Comment("reaching state \'S785\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp452, "policyHandle of OpenPolicy2, state S785");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp453, "return of OpenPolicy2, state S785");
            this.Manager.Comment("reaching state \'S1008\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp454;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp455;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp455 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp454);
            this.Manager.Comment("reaching state \'S1231\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp454, "trustHandle of CreateTrustedDomain, state S1231");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp455, "return of CreateTrustedDomain, state S1231");
            this.Manager.Comment("reaching state \'S1454\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp456;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp457;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp457 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp456);
            this.Manager.Comment("reaching state \'S1677\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp456, "trustDomainInfo of QueryTrustedDomainInfo, state S1677");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp457, "return of QueryTrustedDomainInfo, state S1677");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S234
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S234() {
            this.Manager.BeginTest("TestScenarioS14S234");
            this.Manager.Comment("reaching state \'S234\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S235\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S563\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp458;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp459;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp459 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp458);
            this.Manager.Comment("reaching state \'S786\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp458, "policyHandle of OpenPolicy2, state S786");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp459, "return of OpenPolicy2, state S786");
            this.Manager.Comment("reaching state \'S1009\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp460;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp461;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp461 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp460);
            this.Manager.Comment("reaching state \'S1232\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp460, "trustHandle of CreateTrustedDomain, state S1232");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp461, "return of CreateTrustedDomain, state S1232");
            this.Manager.Comment("reaching state \'S1455\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp462;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp463;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainSu" +
                    "pportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp463 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp462);
            this.Manager.Comment("reaching state \'S1678\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp462, "trustDomainInfo of QueryTrustedDomainInfo, state S1678");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp463, "return of QueryTrustedDomainInfo, state S1678");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S236
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S236() {
            this.Manager.BeginTest("TestScenarioS14S236");
            this.Manager.Comment("reaching state \'S236\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S564\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp464;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp465;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp465 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp464);
            this.Manager.Comment("reaching state \'S787\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp464, "policyHandle of OpenPolicy2, state S787");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp465, "return of OpenPolicy2, state S787");
            this.Manager.Comment("reaching state \'S1010\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp466;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp467;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp467 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp466);
            this.Manager.Comment("reaching state \'S1233\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp466, "trustHandle of CreateTrustedDomain, state S1233");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp467, "return of CreateTrustedDomain, state S1233");
            this.Manager.Comment("reaching state \'S1456\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp468;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp469;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedPosixOff" +
                    "setInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp469 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp468);
            this.Manager.Comment("reaching state \'S1679\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp468, "trustDomainInfo of QueryTrustedDomainInfo, state S1679");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp469, "return of QueryTrustedDomainInfo, state S1679");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S238
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S238() {
            this.Manager.BeginTest("TestScenarioS14S238");
            this.Manager.Comment("reaching state \'S238\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S239\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S565\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp470;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp471;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp471 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp470);
            this.Manager.Comment("reaching state \'S788\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp470, "policyHandle of OpenPolicy2, state S788");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp471, "return of OpenPolicy2, state S788");
            this.Manager.Comment("reaching state \'S1011\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp472;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp473;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp473 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp472);
            this.Manager.Comment("reaching state \'S1234\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp472, "trustHandle of CreateTrustedDomain, state S1234");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp473, "return of CreateTrustedDomain, state S1234");
            this.Manager.Comment("reaching state \'S1457\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp474;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp475;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedPosixOff" +
                    "setInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp475 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp474);
            this.Manager.Comment("reaching state \'S1680\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp474, "trustDomainInfo of QueryTrustedDomainInfo, state S1680");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp475, "return of QueryTrustedDomainInfo, state S1680");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S24() {
            this.Manager.BeginTest("TestScenarioS14S24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S458\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp476;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp477;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp477 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp476);
            this.Manager.Comment("reaching state \'S681\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp476, "policyHandle of OpenPolicy2, state S681");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp477, "return of OpenPolicy2, state S681");
            this.Manager.Comment("reaching state \'S904\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp478;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp479;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp479 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp478);
            this.Manager.Comment("reaching state \'S1127\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp478, "trustHandle of CreateTrustedDomain, state S1127");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp479, "return of CreateTrustedDomain, state S1127");
            this.Manager.Comment("reaching state \'S1350\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp480;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp481;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp481 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp480);
            this.Manager.Comment("reaching state \'S1573\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp480, "trustDomainInfo of QueryTrustedDomainInfo, state S1573");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp481, "return of QueryTrustedDomainInfo, state S1573");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S240
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S240() {
            this.Manager.BeginTest("TestScenarioS14S240");
            this.Manager.Comment("reaching state \'S240\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S566\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp482;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp483;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp483 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp482);
            this.Manager.Comment("reaching state \'S789\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp482, "policyHandle of OpenPolicy2, state S789");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp483, "return of OpenPolicy2, state S789");
            this.Manager.Comment("reaching state \'S1012\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp484;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp485;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp485 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp484);
            this.Manager.Comment("reaching state \'S1235\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp484, "trustHandle of CreateTrustedDomain, state S1235");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp485, "return of CreateTrustedDomain, state S1235");
            this.Manager.Comment("reaching state \'S1458\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp486;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp487;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedPosixO" +
                    "ffsetInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp487 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp486);
            this.Manager.Comment("reaching state \'S1681\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp486, "trustDomainInfo of QueryTrustedDomainInfo, state S1681");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp487, "return of QueryTrustedDomainInfo, state S1681");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S242
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S242() {
            this.Manager.BeginTest("TestScenarioS14S242");
            this.Manager.Comment("reaching state \'S242\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S567\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp488;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp489;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp489 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp488);
            this.Manager.Comment("reaching state \'S790\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp488, "policyHandle of OpenPolicy2, state S790");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp489, "return of OpenPolicy2, state S790");
            this.Manager.Comment("reaching state \'S1013\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp490;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp491;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp491 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp490);
            this.Manager.Comment("reaching state \'S1236\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp490, "trustHandle of CreateTrustedDomain, state S1236");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp491, "return of CreateTrustedDomain, state S1236");
            this.Manager.Comment("reaching state \'S1459\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp492;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp493;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",Invalid,DS_BEHA" +
                    "VIOR_WIN2003,out _)\'");
            temp493 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp492);
            this.Manager.Comment("reaching state \'S1682\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp492, "trustDomainInfo of QueryTrustedDomainInfo, state S1682");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp493, "return of QueryTrustedDomainInfo, state S1682");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S244
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S244() {
            this.Manager.BeginTest("TestScenarioS14S244");
            this.Manager.Comment("reaching state \'S244\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S245\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S568\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp494;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp495;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp495 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp494);
            this.Manager.Comment("reaching state \'S791\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp494, "policyHandle of OpenPolicy2, state S791");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp495, "return of OpenPolicy2, state S791");
            this.Manager.Comment("reaching state \'S1014\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp496;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp497;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp497 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp496);
            this.Manager.Comment("reaching state \'S1237\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp496, "trustHandle of CreateTrustedDomain, state S1237");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp497, "return of CreateTrustedDomain, state S1237");
            this.Manager.Comment("reaching state \'S1460\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp498;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp499;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainAu" +
                    "thInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp499 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp498);
            this.Manager.Comment("reaching state \'S1683\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp498, "trustDomainInfo of QueryTrustedDomainInfo, state S1683");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp499, "return of QueryTrustedDomainInfo, state S1683");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S246
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S246() {
            this.Manager.BeginTest("TestScenarioS14S246");
            this.Manager.Comment("reaching state \'S246\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S247\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S569\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp500;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp501;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp501 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp500);
            this.Manager.Comment("reaching state \'S792\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp500, "policyHandle of OpenPolicy2, state S792");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp501, "return of OpenPolicy2, state S792");
            this.Manager.Comment("reaching state \'S1015\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp502;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp503;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp503 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp502);
            this.Manager.Comment("reaching state \'S1238\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp502, "trustHandle of CreateTrustedDomain, state S1238");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp503, "return of CreateTrustedDomain, state S1238");
            this.Manager.Comment("reaching state \'S1461\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp504;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp505;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedController" +
                    "sInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp505 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp504);
            this.Manager.Comment("reaching state \'S1684\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp504, "trustDomainInfo of QueryTrustedDomainInfo, state S1684");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp505, "return of QueryTrustedDomainInfo, state S1684");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S248
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S248() {
            this.Manager.BeginTest("TestScenarioS14S248");
            this.Manager.Comment("reaching state \'S248\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S570\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp506;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp507;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp507 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp506);
            this.Manager.Comment("reaching state \'S793\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp506, "policyHandle of OpenPolicy2, state S793");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp507, "return of OpenPolicy2, state S793");
            this.Manager.Comment("reaching state \'S1016\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp508;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp509;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp509 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp508);
            this.Manager.Comment("reaching state \'S1239\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp508, "trustHandle of CreateTrustedDomain, state S1239");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp509, "return of CreateTrustedDomain, state S1239");
            this.Manager.Comment("reaching state \'S1462\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp510;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp511;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp511 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp510);
            this.Manager.Comment("reaching state \'S1685\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp510, "trustDomainInfo of QueryTrustedDomainInfo, state S1685");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp511, "return of QueryTrustedDomainInfo, state S1685");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S250
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S250() {
            this.Manager.BeginTest("TestScenarioS14S250");
            this.Manager.Comment("reaching state \'S250\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S251\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S571\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp512;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp513;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp513 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp512);
            this.Manager.Comment("reaching state \'S794\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp512, "policyHandle of OpenPolicy2, state S794");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp513, "return of OpenPolicy2, state S794");
            this.Manager.Comment("reaching state \'S1017\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp514;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp515;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp515 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp514);
            this.Manager.Comment("reaching state \'S1240\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp514, "trustHandle of CreateTrustedDomain, state S1240");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp515, "return of CreateTrustedDomain, state S1240");
            this.Manager.Comment("reaching state \'S1463\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp516;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp517;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp517 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp516);
            this.Manager.Comment("reaching state \'S1686\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp516, "trustDomainInfo of QueryTrustedDomainInfo, state S1686");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp517, "return of QueryTrustedDomainInfo, state S1686");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S252
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S252() {
            this.Manager.BeginTest("TestScenarioS14S252");
            this.Manager.Comment("reaching state \'S252\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S253\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S572\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp518;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp519;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp519 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp518);
            this.Manager.Comment("reaching state \'S795\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp518, "policyHandle of OpenPolicy2, state S795");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp519, "return of OpenPolicy2, state S795");
            this.Manager.Comment("reaching state \'S1018\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp520;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp521;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp521 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp520);
            this.Manager.Comment("reaching state \'S1241\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp520, "trustHandle of CreateTrustedDomain, state S1241");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp521, "return of CreateTrustedDomain, state S1241");
            this.Manager.Comment("reaching state \'S1464\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp522;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp523;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp523 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp522);
            this.Manager.Comment("reaching state \'S1687\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp522, "trustDomainInfo of QueryTrustedDomainInfo, state S1687");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp523, "return of QueryTrustedDomainInfo, state S1687");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S254
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S254() {
            this.Manager.BeginTest("TestScenarioS14S254");
            this.Manager.Comment("reaching state \'S254\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S255\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S573\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp524;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp525;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp525 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp524);
            this.Manager.Comment("reaching state \'S796\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp524, "policyHandle of OpenPolicy2, state S796");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp525, "return of OpenPolicy2, state S796");
            this.Manager.Comment("reaching state \'S1019\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp526;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp527;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp527 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp526);
            this.Manager.Comment("reaching state \'S1242\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp526, "trustHandle of CreateTrustedDomain, state S1242");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp527, "return of CreateTrustedDomain, state S1242");
            this.Manager.Comment("reaching state \'S1465\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp528;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp529;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainAuth" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp529 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp528);
            this.Manager.Comment("reaching state \'S1688\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp528, "trustDomainInfo of QueryTrustedDomainInfo, state S1688");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp529, "return of QueryTrustedDomainInfo, state S1688");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S256
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S256() {
            this.Manager.BeginTest("TestScenarioS14S256");
            this.Manager.Comment("reaching state \'S256\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S257\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S574\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp530;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp531;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp531 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp530);
            this.Manager.Comment("reaching state \'S797\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp530, "policyHandle of OpenPolicy2, state S797");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp531, "return of OpenPolicy2, state S797");
            this.Manager.Comment("reaching state \'S1020\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp532;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp533;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp533 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp532);
            this.Manager.Comment("reaching state \'S1243\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp532, "trustHandle of CreateTrustedDomain, state S1243");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp533, "return of CreateTrustedDomain, state S1243");
            this.Manager.Comment("reaching state \'S1466\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp534;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp535;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedPassword" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp535 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp534);
            this.Manager.Comment("reaching state \'S1689\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp534, "trustDomainInfo of QueryTrustedDomainInfo, state S1689");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp535, "return of QueryTrustedDomainInfo, state S1689");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S258
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S258() {
            this.Manager.BeginTest("TestScenarioS14S258");
            this.Manager.Comment("reaching state \'S258\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S259\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S575\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp536;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp537;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp537 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp536);
            this.Manager.Comment("reaching state \'S798\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp536, "policyHandle of OpenPolicy2, state S798");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp537, "return of OpenPolicy2, state S798");
            this.Manager.Comment("reaching state \'S1021\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp538;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp539;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp539 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp538);
            this.Manager.Comment("reaching state \'S1244\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp538, "trustHandle of CreateTrustedDomain, state S1244");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp539, "return of CreateTrustedDomain, state S1244");
            this.Manager.Comment("reaching state \'S1467\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp540;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp541;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainAu" +
                    "thInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp541 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp540);
            this.Manager.Comment("reaching state \'S1690\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp540, "trustDomainInfo of QueryTrustedDomainInfo, state S1690");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp541, "return of QueryTrustedDomainInfo, state S1690");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S26() {
            this.Manager.BeginTest("TestScenarioS14S26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S459\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp542;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp543;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp543 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp542);
            this.Manager.Comment("reaching state \'S682\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp542, "policyHandle of OpenPolicy2, state S682");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp543, "return of OpenPolicy2, state S682");
            this.Manager.Comment("reaching state \'S905\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp544;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp545;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp545 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp544);
            this.Manager.Comment("reaching state \'S1128\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp544, "trustHandle of CreateTrustedDomain, state S1128");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp545, "return of CreateTrustedDomain, state S1128");
            this.Manager.Comment("reaching state \'S1351\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp546;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp547;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedPosixOff" +
                    "setInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp547 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp546);
            this.Manager.Comment("reaching state \'S1574\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp546, "trustDomainInfo of QueryTrustedDomainInfo, state S1574");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp547, "return of QueryTrustedDomainInfo, state S1574");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S260
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S260() {
            this.Manager.BeginTest("TestScenarioS14S260");
            this.Manager.Comment("reaching state \'S260\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S576\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp548;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp549;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp549 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp548);
            this.Manager.Comment("reaching state \'S799\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp548, "policyHandle of OpenPolicy2, state S799");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp549, "return of OpenPolicy2, state S799");
            this.Manager.Comment("reaching state \'S1022\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp550;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp551;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp551 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp550);
            this.Manager.Comment("reaching state \'S1245\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp550, "trustHandle of CreateTrustedDomain, state S1245");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp551, "return of CreateTrustedDomain, state S1245");
            this.Manager.Comment("reaching state \'S1468\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp552;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp553;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainAuth" +
                    "InformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp553 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp552);
            this.Manager.Comment("reaching state \'S1691\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp552, "trustDomainInfo of QueryTrustedDomainInfo, state S1691");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp553, "return of QueryTrustedDomainInfo, state S1691");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S262
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S262() {
            this.Manager.BeginTest("TestScenarioS14S262");
            this.Manager.Comment("reaching state \'S262\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S577\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp554;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp555;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp555 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp554);
            this.Manager.Comment("reaching state \'S800\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp554, "policyHandle of OpenPolicy2, state S800");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp555, "return of OpenPolicy2, state S800");
            this.Manager.Comment("reaching state \'S1023\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp556;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp557;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp557 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp556);
            this.Manager.Comment("reaching state \'S1246\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp556, "trustHandle of CreateTrustedDomain, state S1246");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp557, "return of CreateTrustedDomain, state S1246");
            this.Manager.Comment("reaching state \'S1469\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp558;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp559;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedPasswordIn" +
                    "formation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp559 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp558);
            this.Manager.Comment("reaching state \'S1692\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp558, "trustDomainInfo of QueryTrustedDomainInfo, state S1692");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp559, "return of QueryTrustedDomainInfo, state S1692");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S264
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S264() {
            this.Manager.BeginTest("TestScenarioS14S264");
            this.Manager.Comment("reaching state \'S264\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S265\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S578\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp560;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp561;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp561 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp560);
            this.Manager.Comment("reaching state \'S801\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp560, "policyHandle of OpenPolicy2, state S801");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp561, "return of OpenPolicy2, state S801");
            this.Manager.Comment("reaching state \'S1024\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp562;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp563;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp563 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp562);
            this.Manager.Comment("reaching state \'S1247\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp562, "trustHandle of CreateTrustedDomain, state S1247");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp563, "return of CreateTrustedDomain, state S1247");
            this.Manager.Comment("reaching state \'S1470\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp564;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp565;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainFull" +
                    "InformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp565 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp564);
            this.Manager.Comment("reaching state \'S1693\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp564, "trustDomainInfo of QueryTrustedDomainInfo, state S1693");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp565, "return of QueryTrustedDomainInfo, state S1693");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S266
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S266() {
            this.Manager.BeginTest("TestScenarioS14S266");
            this.Manager.Comment("reaching state \'S266\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S267\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S579\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp566;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp567;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp567 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp566);
            this.Manager.Comment("reaching state \'S802\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp566, "policyHandle of OpenPolicy2, state S802");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp567, "return of OpenPolicy2, state S802");
            this.Manager.Comment("reaching state \'S1025\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp568;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp569;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp569 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp568);
            this.Manager.Comment("reaching state \'S1248\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp568, "trustHandle of CreateTrustedDomain, state S1248");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp569, "return of CreateTrustedDomain, state S1248");
            this.Manager.Comment("reaching state \'S1471\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp570;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp571;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp571 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp570);
            this.Manager.Comment("reaching state \'S1694\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp570, "trustDomainInfo of QueryTrustedDomainInfo, state S1694");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp571, "return of QueryTrustedDomainInfo, state S1694");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S268
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S268() {
            this.Manager.BeginTest("TestScenarioS14S268");
            this.Manager.Comment("reaching state \'S268\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S269\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S580\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp572;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp573;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp573 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp572);
            this.Manager.Comment("reaching state \'S803\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp572, "policyHandle of OpenPolicy2, state S803");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp573, "return of OpenPolicy2, state S803");
            this.Manager.Comment("reaching state \'S1026\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp574;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp575;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp575 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp574);
            this.Manager.Comment("reaching state \'S1249\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp574, "trustHandle of CreateTrustedDomain, state S1249");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp575, "return of CreateTrustedDomain, state S1249");
            this.Manager.Comment("reaching state \'S1472\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp576;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp577;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainFull" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp577 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp576);
            this.Manager.Comment("reaching state \'S1695\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp576, "trustDomainInfo of QueryTrustedDomainInfo, state S1695");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp577, "return of QueryTrustedDomainInfo, state S1695");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S270
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S270() {
            this.Manager.BeginTest("TestScenarioS14S270");
            this.Manager.Comment("reaching state \'S270\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S271\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S581\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp578;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp579;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp579 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp578);
            this.Manager.Comment("reaching state \'S804\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp578, "policyHandle of OpenPolicy2, state S804");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp579, "return of OpenPolicy2, state S804");
            this.Manager.Comment("reaching state \'S1027\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp580;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp581;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp581 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp580);
            this.Manager.Comment("reaching state \'S1250\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp580, "trustHandle of CreateTrustedDomain, state S1250");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp581, "return of CreateTrustedDomain, state S1250");
            this.Manager.Comment("reaching state \'S1473\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp582;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp583;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp583 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp582);
            this.Manager.Comment("reaching state \'S1696\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp582, "trustDomainInfo of QueryTrustedDomainInfo, state S1696");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp583, "return of QueryTrustedDomainInfo, state S1696");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S272
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S272() {
            this.Manager.BeginTest("TestScenarioS14S272");
            this.Manager.Comment("reaching state \'S272\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S273\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S582\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp584;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp585;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp585 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp584);
            this.Manager.Comment("reaching state \'S805\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp584, "policyHandle of OpenPolicy2, state S805");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp585, "return of OpenPolicy2, state S805");
            this.Manager.Comment("reaching state \'S1028\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp586;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp587;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp587 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp586);
            this.Manager.Comment("reaching state \'S1251\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp586, "trustHandle of CreateTrustedDomain, state S1251");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp587, "return of CreateTrustedDomain, state S1251");
            this.Manager.Comment("reaching state \'S1474\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp588;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp589;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp589 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp588);
            this.Manager.Comment("reaching state \'S1697\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp588, "trustDomainInfo of QueryTrustedDomainInfo, state S1697");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp589, "return of QueryTrustedDomainInfo, state S1697");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S274
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S274() {
            this.Manager.BeginTest("TestScenarioS14S274");
            this.Manager.Comment("reaching state \'S274\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S275\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S583\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp590;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp591;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp591 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp590);
            this.Manager.Comment("reaching state \'S806\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp590, "policyHandle of OpenPolicy2, state S806");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp591, "return of OpenPolicy2, state S806");
            this.Manager.Comment("reaching state \'S1029\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp592;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp593;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp593 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp592);
            this.Manager.Comment("reaching state \'S1252\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp592, "trustHandle of CreateTrustedDomain, state S1252");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp593, "return of CreateTrustedDomain, state S1252");
            this.Manager.Comment("reaching state \'S1475\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp594;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp595;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedControll" +
                    "ersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp595 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp594);
            this.Manager.Comment("reaching state \'S1698\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp594, "trustDomainInfo of QueryTrustedDomainInfo, state S1698");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp595, "return of QueryTrustedDomainInfo, state S1698");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S276
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S276() {
            this.Manager.BeginTest("TestScenarioS14S276");
            this.Manager.Comment("reaching state \'S276\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S277\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S584\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp596;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp597;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp597 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp596);
            this.Manager.Comment("reaching state \'S807\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp596, "policyHandle of OpenPolicy2, state S807");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp597, "return of OpenPolicy2, state S807");
            this.Manager.Comment("reaching state \'S1030\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp598;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp599;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp599 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp598);
            this.Manager.Comment("reaching state \'S1253\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp598, "trustHandle of CreateTrustedDomain, state S1253");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp599, "return of CreateTrustedDomain, state S1253");
            this.Manager.Comment("reaching state \'S1476\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp600;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp601;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedPosixO" +
                    "ffsetInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp601 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp600);
            this.Manager.Comment("reaching state \'S1699\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp600, "trustDomainInfo of QueryTrustedDomainInfo, state S1699");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp601, "return of QueryTrustedDomainInfo, state S1699");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S278
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S278() {
            this.Manager.BeginTest("TestScenarioS14S278");
            this.Manager.Comment("reaching state \'S278\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S279\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S585\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp602;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp603;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp603 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp602);
            this.Manager.Comment("reaching state \'S808\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp602, "policyHandle of OpenPolicy2, state S808");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp603, "return of OpenPolicy2, state S808");
            this.Manager.Comment("reaching state \'S1031\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp604;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp605;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp605 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp604);
            this.Manager.Comment("reaching state \'S1254\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp604, "trustHandle of CreateTrustedDomain, state S1254");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp605, "return of CreateTrustedDomain, state S1254");
            this.Manager.Comment("reaching state \'S1477\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp606;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp607;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedControll" +
                    "ersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp607 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp606);
            this.Manager.Comment("reaching state \'S1700\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp606, "trustDomainInfo of QueryTrustedDomainInfo, state S1700");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp607, "return of QueryTrustedDomainInfo, state S1700");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S28() {
            this.Manager.BeginTest("TestScenarioS14S28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S460\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp608;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp609;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp609 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp608);
            this.Manager.Comment("reaching state \'S683\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp608, "policyHandle of OpenPolicy2, state S683");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp609, "return of OpenPolicy2, state S683");
            this.Manager.Comment("reaching state \'S906\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp610;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp611;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp611 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp610);
            this.Manager.Comment("reaching state \'S1129\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp610, "trustHandle of CreateTrustedDomain, state S1129");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp611, "return of CreateTrustedDomain, state S1129");
            this.Manager.Comment("reaching state \'S1352\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp612;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp613;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp613 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp612);
            this.Manager.Comment("reaching state \'S1575\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp612, "trustDomainInfo of QueryTrustedDomainInfo, state S1575");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp613, "return of QueryTrustedDomainInfo, state S1575");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S280
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S280() {
            this.Manager.BeginTest("TestScenarioS14S280");
            this.Manager.Comment("reaching state \'S280\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S281\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S586\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp614;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp615;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp615 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp614);
            this.Manager.Comment("reaching state \'S809\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp614, "policyHandle of OpenPolicy2, state S809");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp615, "return of OpenPolicy2, state S809");
            this.Manager.Comment("reaching state \'S1032\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp616;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp617;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp617 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp616);
            this.Manager.Comment("reaching state \'S1255\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp616, "trustHandle of CreateTrustedDomain, state S1255");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp617, "return of CreateTrustedDomain, state S1255");
            this.Manager.Comment("reaching state \'S1478\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp618;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp619;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedContro" +
                    "llersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp619 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp618);
            this.Manager.Comment("reaching state \'S1701\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp618, "trustDomainInfo of QueryTrustedDomainInfo, state S1701");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp619, "return of QueryTrustedDomainInfo, state S1701");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S282
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S282() {
            this.Manager.BeginTest("TestScenarioS14S282");
            this.Manager.Comment("reaching state \'S282\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S587\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp620;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp621;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp621 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp620);
            this.Manager.Comment("reaching state \'S810\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp620, "policyHandle of OpenPolicy2, state S810");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp621, "return of OpenPolicy2, state S810");
            this.Manager.Comment("reaching state \'S1033\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp622;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp623;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp623 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp622);
            this.Manager.Comment("reaching state \'S1256\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp622, "trustHandle of CreateTrustedDomain, state S1256");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp623, "return of CreateTrustedDomain, state S1256");
            this.Manager.Comment("reaching state \'S1479\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp624;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp625;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainSu" +
                    "pportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp625 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp624);
            this.Manager.Comment("reaching state \'S1702\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp624, "trustDomainInfo of QueryTrustedDomainInfo, state S1702");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp625, "return of QueryTrustedDomainInfo, state S1702");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S284
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S284() {
            this.Manager.BeginTest("TestScenarioS14S284");
            this.Manager.Comment("reaching state \'S284\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S285\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S588\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp626;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp627;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp627 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp626);
            this.Manager.Comment("reaching state \'S811\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp626, "policyHandle of OpenPolicy2, state S811");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp627, "return of OpenPolicy2, state S811");
            this.Manager.Comment("reaching state \'S1034\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp628;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp629;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp629 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp628);
            this.Manager.Comment("reaching state \'S1257\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp628, "trustHandle of CreateTrustedDomain, state S1257");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp629, "return of CreateTrustedDomain, state S1257");
            this.Manager.Comment("reaching state \'S1480\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp630;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp631;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "SupportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp631 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp630);
            this.Manager.Comment("reaching state \'S1703\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp630, "trustDomainInfo of QueryTrustedDomainInfo, state S1703");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp631, "return of QueryTrustedDomainInfo, state S1703");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S286
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S286() {
            this.Manager.BeginTest("TestScenarioS14S286");
            this.Manager.Comment("reaching state \'S286\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S287\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S589\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp632;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp633;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp633 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp632);
            this.Manager.Comment("reaching state \'S812\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp632, "policyHandle of OpenPolicy2, state S812");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp633, "return of OpenPolicy2, state S812");
            this.Manager.Comment("reaching state \'S1035\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp634;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp635;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp635 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp634);
            this.Manager.Comment("reaching state \'S1258\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp634, "trustHandle of CreateTrustedDomain, state S1258");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp635, "return of CreateTrustedDomain, state S1258");
            this.Manager.Comment("reaching state \'S1481\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp636;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp637;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "SupportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp637 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp636);
            this.Manager.Comment("reaching state \'S1704\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp636, "trustDomainInfo of QueryTrustedDomainInfo, state S1704");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp637, "return of QueryTrustedDomainInfo, state S1704");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S288
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S288() {
            this.Manager.BeginTest("TestScenarioS14S288");
            this.Manager.Comment("reaching state \'S288\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S289\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S590\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp638;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp639;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp639 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp638);
            this.Manager.Comment("reaching state \'S813\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp638, "policyHandle of OpenPolicy2, state S813");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp639, "return of OpenPolicy2, state S813");
            this.Manager.Comment("reaching state \'S1036\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp640;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp641;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp641 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp640);
            this.Manager.Comment("reaching state \'S1259\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp640, "trustHandle of CreateTrustedDomain, state S1259");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp641, "return of CreateTrustedDomain, state S1259");
            this.Manager.Comment("reaching state \'S1482\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp642;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp643;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp643 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp642);
            this.Manager.Comment("reaching state \'S1705\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp642, "trustDomainInfo of QueryTrustedDomainInfo, state S1705");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp643, "return of QueryTrustedDomainInfo, state S1705");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S290
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S290() {
            this.Manager.BeginTest("TestScenarioS14S290");
            this.Manager.Comment("reaching state \'S290\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S291\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S591\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp644;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp645;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp645 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp644);
            this.Manager.Comment("reaching state \'S814\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp644, "policyHandle of OpenPolicy2, state S814");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp645, "return of OpenPolicy2, state S814");
            this.Manager.Comment("reaching state \'S1037\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp646;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp647;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp647 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp646);
            this.Manager.Comment("reaching state \'S1260\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp646, "trustHandle of CreateTrustedDomain, state S1260");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp647, "return of CreateTrustedDomain, state S1260");
            this.Manager.Comment("reaching state \'S1483\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp648;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp649;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedControll" +
                    "ersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp649 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp648);
            this.Manager.Comment("reaching state \'S1706\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp648, "trustDomainInfo of QueryTrustedDomainInfo, state S1706");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp649, "return of QueryTrustedDomainInfo, state S1706");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S292
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S292() {
            this.Manager.BeginTest("TestScenarioS14S292");
            this.Manager.Comment("reaching state \'S292\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S293\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S592\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp650;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp651;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp651 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp650);
            this.Manager.Comment("reaching state \'S815\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp650, "policyHandle of OpenPolicy2, state S815");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp651, "return of OpenPolicy2, state S815");
            this.Manager.Comment("reaching state \'S1038\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp652;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp653;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp653 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp652);
            this.Manager.Comment("reaching state \'S1261\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp652, "trustHandle of CreateTrustedDomain, state S1261");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp653, "return of CreateTrustedDomain, state S1261");
            this.Manager.Comment("reaching state \'S1484\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp654;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp655;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp655 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp654);
            this.Manager.Comment("reaching state \'S1707\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp654, "trustDomainInfo of QueryTrustedDomainInfo, state S1707");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp655, "return of QueryTrustedDomainInfo, state S1707");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S294
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S294() {
            this.Manager.BeginTest("TestScenarioS14S294");
            this.Manager.Comment("reaching state \'S294\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S295\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S593\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp656;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp657;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp657 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp656);
            this.Manager.Comment("reaching state \'S816\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp656, "policyHandle of OpenPolicy2, state S816");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp657, "return of OpenPolicy2, state S816");
            this.Manager.Comment("reaching state \'S1039\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp658;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp659;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp659 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp658);
            this.Manager.Comment("reaching state \'S1262\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp658, "trustHandle of CreateTrustedDomain, state S1262");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp659, "return of CreateTrustedDomain, state S1262");
            this.Manager.Comment("reaching state \'S1485\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp660;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp661;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainAu" +
                    "thInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp661 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp660);
            this.Manager.Comment("reaching state \'S1708\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp660, "trustDomainInfo of QueryTrustedDomainInfo, state S1708");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp661, "return of QueryTrustedDomainInfo, state S1708");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S296
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S296() {
            this.Manager.BeginTest("TestScenarioS14S296");
            this.Manager.Comment("reaching state \'S296\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S297\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S594\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp662;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp663;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp663 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp662);
            this.Manager.Comment("reaching state \'S817\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp662, "policyHandle of OpenPolicy2, state S817");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp663, "return of OpenPolicy2, state S817");
            this.Manager.Comment("reaching state \'S1040\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp664;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp665;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp665 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp664);
            this.Manager.Comment("reaching state \'S1263\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp664, "trustHandle of CreateTrustedDomain, state S1263");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp665, "return of CreateTrustedDomain, state S1263");
            this.Manager.Comment("reaching state \'S1486\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp666;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp667;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp667 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp666);
            this.Manager.Comment("reaching state \'S1709\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp666, "trustDomainInfo of QueryTrustedDomainInfo, state S1709");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp667, "return of QueryTrustedDomainInfo, state S1709");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S298
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S298() {
            this.Manager.BeginTest("TestScenarioS14S298");
            this.Manager.Comment("reaching state \'S298\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S299\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S595\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp668;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp669;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp669 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp668);
            this.Manager.Comment("reaching state \'S818\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp668, "policyHandle of OpenPolicy2, state S818");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp669, "return of OpenPolicy2, state S818");
            this.Manager.Comment("reaching state \'S1041\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp670;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp671;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp671 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp670);
            this.Manager.Comment("reaching state \'S1264\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp670, "trustHandle of CreateTrustedDomain, state S1264");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp671, "return of CreateTrustedDomain, state S1264");
            this.Manager.Comment("reaching state \'S1487\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp672;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp673;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainAu" +
                    "thInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp673 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp672);
            this.Manager.Comment("reaching state \'S1710\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp672, "trustDomainInfo of QueryTrustedDomainInfo, state S1710");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp673, "return of QueryTrustedDomainInfo, state S1710");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S30() {
            this.Manager.BeginTest("TestScenarioS14S30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S461\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp674;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp675;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp675 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp674);
            this.Manager.Comment("reaching state \'S684\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp674, "policyHandle of OpenPolicy2, state S684");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp675, "return of OpenPolicy2, state S684");
            this.Manager.Comment("reaching state \'S907\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp676;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp677;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp677 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp676);
            this.Manager.Comment("reaching state \'S1130\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp676, "trustHandle of CreateTrustedDomain, state S1130");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp677, "return of CreateTrustedDomain, state S1130");
            this.Manager.Comment("reaching state \'S1353\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp678;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp679;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainFull" +
                    "InformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp679 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp678);
            this.Manager.Comment("reaching state \'S1576\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ImplementationSpecific" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp678, "trustDomainInfo of QueryTrustedDomainInfo, state S1576");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ImplementationSpecific, temp679, "return of QueryTrustedDomainInfo, state S1576");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S300
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S300() {
            this.Manager.BeginTest("TestScenarioS14S300");
            this.Manager.Comment("reaching state \'S300\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S301\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S596\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp680;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp681;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp681 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp680);
            this.Manager.Comment("reaching state \'S819\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp680, "policyHandle of OpenPolicy2, state S819");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp681, "return of OpenPolicy2, state S819");
            this.Manager.Comment("reaching state \'S1042\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp682;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp683;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp683 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp682);
            this.Manager.Comment("reaching state \'S1265\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp682, "trustHandle of CreateTrustedDomain, state S1265");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp683, "return of CreateTrustedDomain, state S1265");
            this.Manager.Comment("reaching state \'S1488\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp684;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp685;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp685 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp684);
            this.Manager.Comment("reaching state \'S1711\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp684, "trustDomainInfo of QueryTrustedDomainInfo, state S1711");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp685, "return of QueryTrustedDomainInfo, state S1711");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S302
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S302() {
            this.Manager.BeginTest("TestScenarioS14S302");
            this.Manager.Comment("reaching state \'S302\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S303\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S597\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp686;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp687;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp687 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp686);
            this.Manager.Comment("reaching state \'S820\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp686, "policyHandle of OpenPolicy2, state S820");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp687, "return of OpenPolicy2, state S820");
            this.Manager.Comment("reaching state \'S1043\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp688;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp689;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp689 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp688);
            this.Manager.Comment("reaching state \'S1266\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp688, "trustHandle of CreateTrustedDomain, state S1266");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp689, "return of CreateTrustedDomain, state S1266");
            this.Manager.Comment("reaching state \'S1489\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp690;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp691;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedPassword" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp691 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp690);
            this.Manager.Comment("reaching state \'S1712\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp690, "trustDomainInfo of QueryTrustedDomainInfo, state S1712");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp691, "return of QueryTrustedDomainInfo, state S1712");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S304
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S304() {
            this.Manager.BeginTest("TestScenarioS14S304");
            this.Manager.Comment("reaching state \'S304\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S305\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S598\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp692;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp693;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp693 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp692);
            this.Manager.Comment("reaching state \'S821\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp692, "policyHandle of OpenPolicy2, state S821");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp693, "return of OpenPolicy2, state S821");
            this.Manager.Comment("reaching state \'S1044\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp694;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp695;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp695 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp694);
            this.Manager.Comment("reaching state \'S1267\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp694, "trustHandle of CreateTrustedDomain, state S1267");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp695, "return of CreateTrustedDomain, state S1267");
            this.Manager.Comment("reaching state \'S1490\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp696;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp697;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp697 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp696);
            this.Manager.Comment("reaching state \'S1713\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp696, "trustDomainInfo of QueryTrustedDomainInfo, state S1713");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp697, "return of QueryTrustedDomainInfo, state S1713");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S306
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S306() {
            this.Manager.BeginTest("TestScenarioS14S306");
            this.Manager.Comment("reaching state \'S306\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S599\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp698;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp699;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp699 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp698);
            this.Manager.Comment("reaching state \'S822\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp698, "policyHandle of OpenPolicy2, state S822");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp699, "return of OpenPolicy2, state S822");
            this.Manager.Comment("reaching state \'S1045\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp700;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp701;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp701 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp700);
            this.Manager.Comment("reaching state \'S1268\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp700, "trustHandle of CreateTrustedDomain, state S1268");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp701, "return of CreateTrustedDomain, state S1268");
            this.Manager.Comment("reaching state \'S1491\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp702;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp703;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainNa" +
                    "meInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp703 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp702);
            this.Manager.Comment("reaching state \'S1714\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp702, "trustDomainInfo of QueryTrustedDomainInfo, state S1714");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp703, "return of QueryTrustedDomainInfo, state S1714");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S308
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S308() {
            this.Manager.BeginTest("TestScenarioS14S308");
            this.Manager.Comment("reaching state \'S308\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S309\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S600\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp704;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp705;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp705 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp704);
            this.Manager.Comment("reaching state \'S823\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp704, "policyHandle of OpenPolicy2, state S823");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp705, "return of OpenPolicy2, state S823");
            this.Manager.Comment("reaching state \'S1046\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp706;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp707;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp707 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp706);
            this.Manager.Comment("reaching state \'S1269\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp706, "trustHandle of CreateTrustedDomain, state S1269");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp707, "return of CreateTrustedDomain, state S1269");
            this.Manager.Comment("reaching state \'S1492\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp708;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp709;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp709 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp708);
            this.Manager.Comment("reaching state \'S1715\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp708, "trustDomainInfo of QueryTrustedDomainInfo, state S1715");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp709, "return of QueryTrustedDomainInfo, state S1715");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S310
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S310() {
            this.Manager.BeginTest("TestScenarioS14S310");
            this.Manager.Comment("reaching state \'S310\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S311\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S601\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp710;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp711;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp711 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp710);
            this.Manager.Comment("reaching state \'S824\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp710, "policyHandle of OpenPolicy2, state S824");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp711, "return of OpenPolicy2, state S824");
            this.Manager.Comment("reaching state \'S1047\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp712;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp713;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp713 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp712);
            this.Manager.Comment("reaching state \'S1270\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp712, "trustHandle of CreateTrustedDomain, state S1270");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp713, "return of CreateTrustedDomain, state S1270");
            this.Manager.Comment("reaching state \'S1493\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp714;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp715;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "AuthInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp715 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp714);
            this.Manager.Comment("reaching state \'S1716\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp714, "trustDomainInfo of QueryTrustedDomainInfo, state S1716");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp715, "return of QueryTrustedDomainInfo, state S1716");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S312
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S312() {
            this.Manager.BeginTest("TestScenarioS14S312");
            this.Manager.Comment("reaching state \'S312\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S313\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S602\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp716;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp717;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp717 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp716);
            this.Manager.Comment("reaching state \'S825\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp716, "policyHandle of OpenPolicy2, state S825");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp717, "return of OpenPolicy2, state S825");
            this.Manager.Comment("reaching state \'S1048\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp718;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp719;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp719 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp718);
            this.Manager.Comment("reaching state \'S1271\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp718, "trustHandle of CreateTrustedDomain, state S1271");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp719, "return of CreateTrustedDomain, state S1271");
            this.Manager.Comment("reaching state \'S1494\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp720;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp721;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp721 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp720);
            this.Manager.Comment("reaching state \'S1717\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp720, "trustDomainInfo of QueryTrustedDomainInfo, state S1717");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp721, "return of QueryTrustedDomainInfo, state S1717");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S314
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S314() {
            this.Manager.BeginTest("TestScenarioS14S314");
            this.Manager.Comment("reaching state \'S314\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S315\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S603\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp722;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp723;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp723 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp722);
            this.Manager.Comment("reaching state \'S826\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp722, "policyHandle of OpenPolicy2, state S826");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp723, "return of OpenPolicy2, state S826");
            this.Manager.Comment("reaching state \'S1049\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp724;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp725;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp725 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp724);
            this.Manager.Comment("reaching state \'S1272\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp724, "trustHandle of CreateTrustedDomain, state S1272");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp725, "return of CreateTrustedDomain, state S1272");
            this.Manager.Comment("reaching state \'S1495\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp726;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp727;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp727 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp726);
            this.Manager.Comment("reaching state \'S1718\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp726, "trustDomainInfo of QueryTrustedDomainInfo, state S1718");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp727, "return of QueryTrustedDomainInfo, state S1718");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S316
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S316() {
            this.Manager.BeginTest("TestScenarioS14S316");
            this.Manager.Comment("reaching state \'S316\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S317\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S604\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp728;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp729;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp729 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp728);
            this.Manager.Comment("reaching state \'S827\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp728, "policyHandle of OpenPolicy2, state S827");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp729, "return of OpenPolicy2, state S827");
            this.Manager.Comment("reaching state \'S1050\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp730;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp731;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp731 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp730);
            this.Manager.Comment("reaching state \'S1273\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp730, "trustHandle of CreateTrustedDomain, state S1273");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp731, "return of CreateTrustedDomain, state S1273");
            this.Manager.Comment("reaching state \'S1496\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp732;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp733;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainSupp" +
                    "ortedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp733 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp732);
            this.Manager.Comment("reaching state \'S1719\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp732, "trustDomainInfo of QueryTrustedDomainInfo, state S1719");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp733, "return of QueryTrustedDomainInfo, state S1719");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S318
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S318() {
            this.Manager.BeginTest("TestScenarioS14S318");
            this.Manager.Comment("reaching state \'S318\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S319\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S605\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp734;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp735;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp735 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp734);
            this.Manager.Comment("reaching state \'S828\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp734, "policyHandle of OpenPolicy2, state S828");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp735, "return of OpenPolicy2, state S828");
            this.Manager.Comment("reaching state \'S1051\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp736;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp737;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp737 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp736);
            this.Manager.Comment("reaching state \'S1274\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp736, "trustHandle of CreateTrustedDomain, state S1274");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp737, "return of CreateTrustedDomain, state S1274");
            this.Manager.Comment("reaching state \'S1497\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp738;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp739;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainSu" +
                    "pportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp739 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp738);
            this.Manager.Comment("reaching state \'S1720\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp738, "trustDomainInfo of QueryTrustedDomainInfo, state S1720");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp739, "return of QueryTrustedDomainInfo, state S1720");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S32() {
            this.Manager.BeginTest("TestScenarioS14S32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S462\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp740;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp741;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp741 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp740);
            this.Manager.Comment("reaching state \'S685\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp740, "policyHandle of OpenPolicy2, state S685");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp741, "return of OpenPolicy2, state S685");
            this.Manager.Comment("reaching state \'S908\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp742;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp743;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp743 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp742);
            this.Manager.Comment("reaching state \'S1131\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp742, "trustHandle of CreateTrustedDomain, state S1131");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp743, "return of CreateTrustedDomain, state S1131");
            this.Manager.Comment("reaching state \'S1354\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp744;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp745;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedPasswordIn" +
                    "formation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp745 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp744);
            this.Manager.Comment("reaching state \'S1577\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ImplementationSpecific" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp744, "trustDomainInfo of QueryTrustedDomainInfo, state S1577");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ImplementationSpecific, temp745, "return of QueryTrustedDomainInfo, state S1577");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S320
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S320() {
            this.Manager.BeginTest("TestScenarioS14S320");
            this.Manager.Comment("reaching state \'S320\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S321\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S606\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp746;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp747;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp747 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp746);
            this.Manager.Comment("reaching state \'S829\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp746, "policyHandle of OpenPolicy2, state S829");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp747, "return of OpenPolicy2, state S829");
            this.Manager.Comment("reaching state \'S1052\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp748;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp749;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp749 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp748);
            this.Manager.Comment("reaching state \'S1275\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp748, "trustHandle of CreateTrustedDomain, state S1275");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp749, "return of CreateTrustedDomain, state S1275");
            this.Manager.Comment("reaching state \'S1498\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp750;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp751;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainAuth" +
                    "InformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp751 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp750);
            this.Manager.Comment("reaching state \'S1721\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp750, "trustDomainInfo of QueryTrustedDomainInfo, state S1721");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp751, "return of QueryTrustedDomainInfo, state S1721");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S322
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S322() {
            this.Manager.BeginTest("TestScenarioS14S322");
            this.Manager.Comment("reaching state \'S322\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S607\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp752;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp753;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp753 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp752);
            this.Manager.Comment("reaching state \'S830\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp752, "policyHandle of OpenPolicy2, state S830");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp753, "return of OpenPolicy2, state S830");
            this.Manager.Comment("reaching state \'S1053\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp754;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp755;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp755 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp754);
            this.Manager.Comment("reaching state \'S1276\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp754, "trustHandle of CreateTrustedDomain, state S1276");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp755, "return of CreateTrustedDomain, state S1276");
            this.Manager.Comment("reaching state \'S1499\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp756;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp757;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedControll" +
                    "ersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp757 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp756);
            this.Manager.Comment("reaching state \'S1722\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp756, "trustDomainInfo of QueryTrustedDomainInfo, state S1722");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp757, "return of QueryTrustedDomainInfo, state S1722");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S324
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S324() {
            this.Manager.BeginTest("TestScenarioS14S324");
            this.Manager.Comment("reaching state \'S324\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S325\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S608\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp758;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp759;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp759 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp758);
            this.Manager.Comment("reaching state \'S831\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp758, "policyHandle of OpenPolicy2, state S831");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp759, "return of OpenPolicy2, state S831");
            this.Manager.Comment("reaching state \'S1054\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp760;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp761;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp761 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp760);
            this.Manager.Comment("reaching state \'S1277\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp760, "trustHandle of CreateTrustedDomain, state S1277");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp761, "return of CreateTrustedDomain, state S1277");
            this.Manager.Comment("reaching state \'S1500\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp762;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp763;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainAu" +
                    "thInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp763 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp762);
            this.Manager.Comment("reaching state \'S1723\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp762, "trustDomainInfo of QueryTrustedDomainInfo, state S1723");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp763, "return of QueryTrustedDomainInfo, state S1723");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S326
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S326() {
            this.Manager.BeginTest("TestScenarioS14S326");
            this.Manager.Comment("reaching state \'S326\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S327\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S609\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp764;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp765;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp765 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp764);
            this.Manager.Comment("reaching state \'S832\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp764, "policyHandle of OpenPolicy2, state S832");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp765, "return of OpenPolicy2, state S832");
            this.Manager.Comment("reaching state \'S1055\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp766;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp767;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp767 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp766);
            this.Manager.Comment("reaching state \'S1278\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp766, "trustHandle of CreateTrustedDomain, state S1278");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp767, "return of CreateTrustedDomain, state S1278");
            this.Manager.Comment("reaching state \'S1501\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp768;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp769;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp769 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp768);
            this.Manager.Comment("reaching state \'S1724\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp768, "trustDomainInfo of QueryTrustedDomainInfo, state S1724");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp769, "return of QueryTrustedDomainInfo, state S1724");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S328
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S328() {
            this.Manager.BeginTest("TestScenarioS14S328");
            this.Manager.Comment("reaching state \'S328\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S329\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S610\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp770;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp771;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp771 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp770);
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp770, "policyHandle of OpenPolicy2, state S833");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp771, "return of OpenPolicy2, state S833");
            this.Manager.Comment("reaching state \'S1056\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp772;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp773;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp773 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp772);
            this.Manager.Comment("reaching state \'S1279\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp772, "trustHandle of CreateTrustedDomain, state S1279");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp773, "return of CreateTrustedDomain, state S1279");
            this.Manager.Comment("reaching state \'S1502\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp774;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp775;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp775 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp774);
            this.Manager.Comment("reaching state \'S1725\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp774, "trustDomainInfo of QueryTrustedDomainInfo, state S1725");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp775, "return of QueryTrustedDomainInfo, state S1725");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S330
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S330() {
            this.Manager.BeginTest("TestScenarioS14S330");
            this.Manager.Comment("reaching state \'S330\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S331\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S611\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp776;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp777;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp777 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp776);
            this.Manager.Comment("reaching state \'S834\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp776, "policyHandle of OpenPolicy2, state S834");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp777, "return of OpenPolicy2, state S834");
            this.Manager.Comment("reaching state \'S1057\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp778;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp779;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp779 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp778);
            this.Manager.Comment("reaching state \'S1280\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp778, "trustHandle of CreateTrustedDomain, state S1280");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp779, "return of CreateTrustedDomain, state S1280");
            this.Manager.Comment("reaching state \'S1503\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp780;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp781;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp781 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp780);
            this.Manager.Comment("reaching state \'S1726\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp780, "trustDomainInfo of QueryTrustedDomainInfo, state S1726");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp781, "return of QueryTrustedDomainInfo, state S1726");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S332
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S332() {
            this.Manager.BeginTest("TestScenarioS14S332");
            this.Manager.Comment("reaching state \'S332\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S333\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S612\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp782;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp783;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp783 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp782);
            this.Manager.Comment("reaching state \'S835\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp782, "policyHandle of OpenPolicy2, state S835");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp783, "return of OpenPolicy2, state S835");
            this.Manager.Comment("reaching state \'S1058\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp784;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp785;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp785 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp784);
            this.Manager.Comment("reaching state \'S1281\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp784, "trustHandle of CreateTrustedDomain, state S1281");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp785, "return of CreateTrustedDomain, state S1281");
            this.Manager.Comment("reaching state \'S1504\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp786;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp787;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",Invalid,DS_BEHA" +
                    "VIOR_WIN2003,out _)\'");
            temp787 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp786);
            this.Manager.Comment("reaching state \'S1727\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp786, "trustDomainInfo of QueryTrustedDomainInfo, state S1727");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp787, "return of QueryTrustedDomainInfo, state S1727");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S334
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S334() {
            this.Manager.BeginTest("TestScenarioS14S334");
            this.Manager.Comment("reaching state \'S334\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S335\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S613\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp788;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp789;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp789 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp788);
            this.Manager.Comment("reaching state \'S836\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp788, "policyHandle of OpenPolicy2, state S836");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp789, "return of OpenPolicy2, state S836");
            this.Manager.Comment("reaching state \'S1059\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp790;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp791;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp791 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp790);
            this.Manager.Comment("reaching state \'S1282\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp790, "trustHandle of CreateTrustedDomain, state S1282");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp791, "return of CreateTrustedDomain, state S1282");
            this.Manager.Comment("reaching state \'S1505\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp792;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp793;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedPassword" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp793 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp792);
            this.Manager.Comment("reaching state \'S1728\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp792, "trustDomainInfo of QueryTrustedDomainInfo, state S1728");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp793, "return of QueryTrustedDomainInfo, state S1728");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S336
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S336() {
            this.Manager.BeginTest("TestScenarioS14S336");
            this.Manager.Comment("reaching state \'S336\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S337\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S614\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp794;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp795;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp795 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp794);
            this.Manager.Comment("reaching state \'S837\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp794, "policyHandle of OpenPolicy2, state S837");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp795, "return of OpenPolicy2, state S837");
            this.Manager.Comment("reaching state \'S1060\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp796;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp797;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp797 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp796);
            this.Manager.Comment("reaching state \'S1283\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp796, "trustHandle of CreateTrustedDomain, state S1283");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp797, "return of CreateTrustedDomain, state S1283");
            this.Manager.Comment("reaching state \'S1506\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp798;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp799;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "NameInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp799 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp798);
            this.Manager.Comment("reaching state \'S1729\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp798, "trustDomainInfo of QueryTrustedDomainInfo, state S1729");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp799, "return of QueryTrustedDomainInfo, state S1729");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S338
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S338() {
            this.Manager.BeginTest("TestScenarioS14S338");
            this.Manager.Comment("reaching state \'S338\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S339\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S615\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp800;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp801;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp801 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp800);
            this.Manager.Comment("reaching state \'S838\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp800, "policyHandle of OpenPolicy2, state S838");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp801, "return of OpenPolicy2, state S838");
            this.Manager.Comment("reaching state \'S1061\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp802;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp803;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp803 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp802);
            this.Manager.Comment("reaching state \'S1284\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp802, "trustHandle of CreateTrustedDomain, state S1284");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp803, "return of CreateTrustedDomain, state S1284");
            this.Manager.Comment("reaching state \'S1507\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp804;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp805;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainNa" +
                    "meInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp805 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp804);
            this.Manager.Comment("reaching state \'S1730\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp804, "trustDomainInfo of QueryTrustedDomainInfo, state S1730");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp805, "return of QueryTrustedDomainInfo, state S1730");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S34
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S34() {
            this.Manager.BeginTest("TestScenarioS14S34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S463\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp806;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp807;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp807 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp806);
            this.Manager.Comment("reaching state \'S686\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp806, "policyHandle of OpenPolicy2, state S686");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp807, "return of OpenPolicy2, state S686");
            this.Manager.Comment("reaching state \'S909\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp808;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp809;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp809 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp808);
            this.Manager.Comment("reaching state \'S1132\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp808, "trustHandle of CreateTrustedDomain, state S1132");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp809, "return of CreateTrustedDomain, state S1132");
            this.Manager.Comment("reaching state \'S1355\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp810;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp811;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp811 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp810);
            this.Manager.Comment("reaching state \'S1578\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ImplementationSpecific" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp810, "trustDomainInfo of QueryTrustedDomainInfo, state S1578");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ImplementationSpecific, temp811, "return of QueryTrustedDomainInfo, state S1578");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S340
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S340() {
            this.Manager.BeginTest("TestScenarioS14S340");
            this.Manager.Comment("reaching state \'S340\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S341\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S616\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp812;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp813;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp813 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp812);
            this.Manager.Comment("reaching state \'S839\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp812, "policyHandle of OpenPolicy2, state S839");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp813, "return of OpenPolicy2, state S839");
            this.Manager.Comment("reaching state \'S1062\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp814;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp815;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp815 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp814);
            this.Manager.Comment("reaching state \'S1285\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp814, "trustHandle of CreateTrustedDomain, state S1285");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp815, "return of CreateTrustedDomain, state S1285");
            this.Manager.Comment("reaching state \'S1508\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp816;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp817;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainAu" +
                    "thInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp817 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp816);
            this.Manager.Comment("reaching state \'S1731\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp816, "trustDomainInfo of QueryTrustedDomainInfo, state S1731");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp817, "return of QueryTrustedDomainInfo, state S1731");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S342
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S342() {
            this.Manager.BeginTest("TestScenarioS14S342");
            this.Manager.Comment("reaching state \'S342\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S343\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S617\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp818;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp819;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp819 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp818);
            this.Manager.Comment("reaching state \'S840\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp818, "policyHandle of OpenPolicy2, state S840");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp819, "return of OpenPolicy2, state S840");
            this.Manager.Comment("reaching state \'S1063\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp820;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp821;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp821 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp820);
            this.Manager.Comment("reaching state \'S1286\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp820, "trustHandle of CreateTrustedDomain, state S1286");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp821, "return of CreateTrustedDomain, state S1286");
            this.Manager.Comment("reaching state \'S1509\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp822;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp823;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp823 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp822);
            this.Manager.Comment("reaching state \'S1732\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp822, "trustDomainInfo of QueryTrustedDomainInfo, state S1732");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp823, "return of QueryTrustedDomainInfo, state S1732");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S344
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S344() {
            this.Manager.BeginTest("TestScenarioS14S344");
            this.Manager.Comment("reaching state \'S344\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S345\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S618\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp824;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp825;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp825 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp824);
            this.Manager.Comment("reaching state \'S841\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp824, "policyHandle of OpenPolicy2, state S841");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp825, "return of OpenPolicy2, state S841");
            this.Manager.Comment("reaching state \'S1064\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp826;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp827;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp827 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp826);
            this.Manager.Comment("reaching state \'S1287\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp826, "trustHandle of CreateTrustedDomain, state S1287");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp827, "return of CreateTrustedDomain, state S1287");
            this.Manager.Comment("reaching state \'S1510\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp828;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp829;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedPosixOff" +
                    "setInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp829 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp828);
            this.Manager.Comment("reaching state \'S1733\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp828, "trustDomainInfo of QueryTrustedDomainInfo, state S1733");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp829, "return of QueryTrustedDomainInfo, state S1733");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S346
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S346() {
            this.Manager.BeginTest("TestScenarioS14S346");
            this.Manager.Comment("reaching state \'S346\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S347\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S619\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp830;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp831;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp831 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp830);
            this.Manager.Comment("reaching state \'S842\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp830, "policyHandle of OpenPolicy2, state S842");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp831, "return of OpenPolicy2, state S842");
            this.Manager.Comment("reaching state \'S1065\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp832;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp833;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp833 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp832);
            this.Manager.Comment("reaching state \'S1288\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp832, "trustHandle of CreateTrustedDomain, state S1288");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp833, "return of CreateTrustedDomain, state S1288");
            this.Manager.Comment("reaching state \'S1511\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp834;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp835;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp835 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp834);
            this.Manager.Comment("reaching state \'S1734\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp834, "trustDomainInfo of QueryTrustedDomainInfo, state S1734");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp835, "return of QueryTrustedDomainInfo, state S1734");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S348
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S348() {
            this.Manager.BeginTest("TestScenarioS14S348");
            this.Manager.Comment("reaching state \'S348\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S349\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S620\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp836;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp837;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp837 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp836);
            this.Manager.Comment("reaching state \'S843\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp836, "policyHandle of OpenPolicy2, state S843");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp837, "return of OpenPolicy2, state S843");
            this.Manager.Comment("reaching state \'S1066\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp838;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp839;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp839 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp838);
            this.Manager.Comment("reaching state \'S1289\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp838, "trustHandle of CreateTrustedDomain, state S1289");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp839, "return of CreateTrustedDomain, state S1289");
            this.Manager.Comment("reaching state \'S1512\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp840;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp841;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp841 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp840);
            this.Manager.Comment("reaching state \'S1735\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp840, "trustDomainInfo of QueryTrustedDomainInfo, state S1735");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp841, "return of QueryTrustedDomainInfo, state S1735");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S350
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S350() {
            this.Manager.BeginTest("TestScenarioS14S350");
            this.Manager.Comment("reaching state \'S350\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S351\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S621\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp842;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp843;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp843 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp842);
            this.Manager.Comment("reaching state \'S844\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp842, "policyHandle of OpenPolicy2, state S844");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp843, "return of OpenPolicy2, state S844");
            this.Manager.Comment("reaching state \'S1067\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp844;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp845;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp845 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp844);
            this.Manager.Comment("reaching state \'S1290\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp844, "trustHandle of CreateTrustedDomain, state S1290");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp845, "return of CreateTrustedDomain, state S1290");
            this.Manager.Comment("reaching state \'S1513\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp846;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp847;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp847 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp846);
            this.Manager.Comment("reaching state \'S1736\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp846, "trustDomainInfo of QueryTrustedDomainInfo, state S1736");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp847, "return of QueryTrustedDomainInfo, state S1736");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S352
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S352() {
            this.Manager.BeginTest("TestScenarioS14S352");
            this.Manager.Comment("reaching state \'S352\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S353\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S622\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp848;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp849;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp849 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp848);
            this.Manager.Comment("reaching state \'S845\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp848, "policyHandle of OpenPolicy2, state S845");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp849, "return of OpenPolicy2, state S845");
            this.Manager.Comment("reaching state \'S1068\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp850;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp851;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp851 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp850);
            this.Manager.Comment("reaching state \'S1291\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp850, "trustHandle of CreateTrustedDomain, state S1291");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp851, "return of CreateTrustedDomain, state S1291");
            this.Manager.Comment("reaching state \'S1514\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp852;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp853;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "AuthInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp853 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp852);
            this.Manager.Comment("reaching state \'S1737\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp852, "trustDomainInfo of QueryTrustedDomainInfo, state S1737");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp853, "return of QueryTrustedDomainInfo, state S1737");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S354
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S354() {
            this.Manager.BeginTest("TestScenarioS14S354");
            this.Manager.Comment("reaching state \'S354\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S355\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S623\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp854;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp855;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp855 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp854);
            this.Manager.Comment("reaching state \'S846\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp854, "policyHandle of OpenPolicy2, state S846");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp855, "return of OpenPolicy2, state S846");
            this.Manager.Comment("reaching state \'S1069\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp856;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp857;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp857 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp856);
            this.Manager.Comment("reaching state \'S1292\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp856, "trustHandle of CreateTrustedDomain, state S1292");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp857, "return of CreateTrustedDomain, state S1292");
            this.Manager.Comment("reaching state \'S1515\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp858;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp859;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "AuthInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp859 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp858);
            this.Manager.Comment("reaching state \'S1738\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp858, "trustDomainInfo of QueryTrustedDomainInfo, state S1738");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp859, "return of QueryTrustedDomainInfo, state S1738");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S356
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S356() {
            this.Manager.BeginTest("TestScenarioS14S356");
            this.Manager.Comment("reaching state \'S356\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S357\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S624\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp860;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp861;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp861 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp860);
            this.Manager.Comment("reaching state \'S847\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp860, "policyHandle of OpenPolicy2, state S847");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp861, "return of OpenPolicy2, state S847");
            this.Manager.Comment("reaching state \'S1070\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp862;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp863;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp863 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp862);
            this.Manager.Comment("reaching state \'S1293\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp862, "trustHandle of CreateTrustedDomain, state S1293");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp863, "return of CreateTrustedDomain, state S1293");
            this.Manager.Comment("reaching state \'S1516\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp864;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp865;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedController" +
                    "sInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp865 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp864);
            this.Manager.Comment("reaching state \'S1739\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp864, "trustDomainInfo of QueryTrustedDomainInfo, state S1739");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp865, "return of QueryTrustedDomainInfo, state S1739");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S358
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S358() {
            this.Manager.BeginTest("TestScenarioS14S358");
            this.Manager.Comment("reaching state \'S358\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S625\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp866;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp867;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp867 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp866);
            this.Manager.Comment("reaching state \'S848\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp866, "policyHandle of OpenPolicy2, state S848");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp867, "return of OpenPolicy2, state S848");
            this.Manager.Comment("reaching state \'S1071\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp868;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp869;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp869 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp868);
            this.Manager.Comment("reaching state \'S1294\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp868, "trustHandle of CreateTrustedDomain, state S1294");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp869, "return of CreateTrustedDomain, state S1294");
            this.Manager.Comment("reaching state \'S1517\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp870;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp871;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainAuth" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp871 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp870);
            this.Manager.Comment("reaching state \'S1740\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp870, "trustDomainInfo of QueryTrustedDomainInfo, state S1740");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp871, "return of QueryTrustedDomainInfo, state S1740");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S36
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S36() {
            this.Manager.BeginTest("TestScenarioS14S36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S464\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp872;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp873;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp873 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp872);
            this.Manager.Comment("reaching state \'S687\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp872, "policyHandle of OpenPolicy2, state S687");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp873, "return of OpenPolicy2, state S687");
            this.Manager.Comment("reaching state \'S910\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp874;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp875;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp875 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp874);
            this.Manager.Comment("reaching state \'S1133\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp874, "trustHandle of CreateTrustedDomain, state S1133");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp875, "return of CreateTrustedDomain, state S1133");
            this.Manager.Comment("reaching state \'S1356\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp876;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp877;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainAuth" +
                    "InformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp877 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp876);
            this.Manager.Comment("reaching state \'S1579\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ImplementationSpecific" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp876, "trustDomainInfo of QueryTrustedDomainInfo, state S1579");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ImplementationSpecific, temp877, "return of QueryTrustedDomainInfo, state S1579");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S360
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S360() {
            this.Manager.BeginTest("TestScenarioS14S360");
            this.Manager.Comment("reaching state \'S360\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S361\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S626\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp878;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp879;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp879 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp878);
            this.Manager.Comment("reaching state \'S849\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp878, "policyHandle of OpenPolicy2, state S849");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp879, "return of OpenPolicy2, state S849");
            this.Manager.Comment("reaching state \'S1072\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp880;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp881;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp881 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp880);
            this.Manager.Comment("reaching state \'S1295\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp880, "trustHandle of CreateTrustedDomain, state S1295");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp881, "return of CreateTrustedDomain, state S1295");
            this.Manager.Comment("reaching state \'S1518\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp882;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp883;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp883 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp882);
            this.Manager.Comment("reaching state \'S1741\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp882, "trustDomainInfo of QueryTrustedDomainInfo, state S1741");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp883, "return of QueryTrustedDomainInfo, state S1741");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S362
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S362() {
            this.Manager.BeginTest("TestScenarioS14S362");
            this.Manager.Comment("reaching state \'S362\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S363\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S627\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp884;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp885;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp885 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp884);
            this.Manager.Comment("reaching state \'S850\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp884, "policyHandle of OpenPolicy2, state S850");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp885, "return of OpenPolicy2, state S850");
            this.Manager.Comment("reaching state \'S1073\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp886;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp887;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp887 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp886);
            this.Manager.Comment("reaching state \'S1296\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp886, "trustHandle of CreateTrustedDomain, state S1296");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp887, "return of CreateTrustedDomain, state S1296");
            this.Manager.Comment("reaching state \'S1519\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp888;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp889;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainFull" +
                    "InformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp889 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp888);
            this.Manager.Comment("reaching state \'S1742\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp888, "trustDomainInfo of QueryTrustedDomainInfo, state S1742");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp889, "return of QueryTrustedDomainInfo, state S1742");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S364
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S364() {
            this.Manager.BeginTest("TestScenarioS14S364");
            this.Manager.Comment("reaching state \'S364\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S365\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S628\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp890;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp891;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp891 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp890);
            this.Manager.Comment("reaching state \'S851\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp890, "policyHandle of OpenPolicy2, state S851");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp891, "return of OpenPolicy2, state S851");
            this.Manager.Comment("reaching state \'S1074\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp892;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp893;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp893 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp892);
            this.Manager.Comment("reaching state \'S1297\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp892, "trustHandle of CreateTrustedDomain, state S1297");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp893, "return of CreateTrustedDomain, state S1297");
            this.Manager.Comment("reaching state \'S1520\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp894;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp895;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedPasswordIn" +
                    "formation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp895 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp894);
            this.Manager.Comment("reaching state \'S1743\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp894, "trustDomainInfo of QueryTrustedDomainInfo, state S1743");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp895, "return of QueryTrustedDomainInfo, state S1743");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S366
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S366() {
            this.Manager.BeginTest("TestScenarioS14S366");
            this.Manager.Comment("reaching state \'S366\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S367\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S629\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp896;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp897;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp897 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp896);
            this.Manager.Comment("reaching state \'S852\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp896, "policyHandle of OpenPolicy2, state S852");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp897, "return of OpenPolicy2, state S852");
            this.Manager.Comment("reaching state \'S1075\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp898;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp899;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp899 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp898);
            this.Manager.Comment("reaching state \'S1298\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp898, "trustHandle of CreateTrustedDomain, state S1298");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp899, "return of CreateTrustedDomain, state S1298");
            this.Manager.Comment("reaching state \'S1521\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp900;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp901;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp901 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp900);
            this.Manager.Comment("reaching state \'S1744\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp900, "trustDomainInfo of QueryTrustedDomainInfo, state S1744");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp901, "return of QueryTrustedDomainInfo, state S1744");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S368
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S368() {
            this.Manager.BeginTest("TestScenarioS14S368");
            this.Manager.Comment("reaching state \'S368\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S369\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S630\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp902;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp903;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp903 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp902);
            this.Manager.Comment("reaching state \'S853\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp902, "policyHandle of OpenPolicy2, state S853");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp903, "return of OpenPolicy2, state S853");
            this.Manager.Comment("reaching state \'S1076\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp904;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp905;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp905 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp904);
            this.Manager.Comment("reaching state \'S1299\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp904, "trustHandle of CreateTrustedDomain, state S1299");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp905, "return of CreateTrustedDomain, state S1299");
            this.Manager.Comment("reaching state \'S1522\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp906;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp907;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp907 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp906);
            this.Manager.Comment("reaching state \'S1745\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp906, "trustDomainInfo of QueryTrustedDomainInfo, state S1745");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp907, "return of QueryTrustedDomainInfo, state S1745");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S370
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S370() {
            this.Manager.BeginTest("TestScenarioS14S370");
            this.Manager.Comment("reaching state \'S370\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S371\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S631\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp908;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp909;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp909 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp908);
            this.Manager.Comment("reaching state \'S854\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp908, "policyHandle of OpenPolicy2, state S854");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp909, "return of OpenPolicy2, state S854");
            this.Manager.Comment("reaching state \'S1077\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp910;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp911;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp911 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp910);
            this.Manager.Comment("reaching state \'S1300\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp910, "trustHandle of CreateTrustedDomain, state S1300");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp911, "return of CreateTrustedDomain, state S1300");
            this.Manager.Comment("reaching state \'S1523\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp912;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp913;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedPassword" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp913 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp912);
            this.Manager.Comment("reaching state \'S1746\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp912, "trustDomainInfo of QueryTrustedDomainInfo, state S1746");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp913, "return of QueryTrustedDomainInfo, state S1746");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S372
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S372() {
            this.Manager.BeginTest("TestScenarioS14S372");
            this.Manager.Comment("reaching state \'S372\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S373\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S632\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp914;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp915;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp915 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp914);
            this.Manager.Comment("reaching state \'S855\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp914, "policyHandle of OpenPolicy2, state S855");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp915, "return of OpenPolicy2, state S855");
            this.Manager.Comment("reaching state \'S1078\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp916;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp917;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp917 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp916);
            this.Manager.Comment("reaching state \'S1301\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp916, "trustHandle of CreateTrustedDomain, state S1301");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp917, "return of CreateTrustedDomain, state S1301");
            this.Manager.Comment("reaching state \'S1524\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp918;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp919;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainAu" +
                    "thInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp919 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp918);
            this.Manager.Comment("reaching state \'S1747\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp918, "trustDomainInfo of QueryTrustedDomainInfo, state S1747");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp919, "return of QueryTrustedDomainInfo, state S1747");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S374
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S374() {
            this.Manager.BeginTest("TestScenarioS14S374");
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S375\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S633\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp920;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp921;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp921 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp920);
            this.Manager.Comment("reaching state \'S856\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp920, "policyHandle of OpenPolicy2, state S856");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp921, "return of OpenPolicy2, state S856");
            this.Manager.Comment("reaching state \'S1079\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp922;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp923;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp923 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp922);
            this.Manager.Comment("reaching state \'S1302\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp922, "trustHandle of CreateTrustedDomain, state S1302");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp923, "return of CreateTrustedDomain, state S1302");
            this.Manager.Comment("reaching state \'S1525\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp924;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp925;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainAu" +
                    "thInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp925 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp924);
            this.Manager.Comment("reaching state \'S1748\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp924, "trustDomainInfo of QueryTrustedDomainInfo, state S1748");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp925, "return of QueryTrustedDomainInfo, state S1748");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S376
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S376() {
            this.Manager.BeginTest("TestScenarioS14S376");
            this.Manager.Comment("reaching state \'S376\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S377\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S634\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp926;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp927;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp927 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp926);
            this.Manager.Comment("reaching state \'S857\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp926, "policyHandle of OpenPolicy2, state S857");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp927, "return of OpenPolicy2, state S857");
            this.Manager.Comment("reaching state \'S1080\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp928;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp929;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp929 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp928);
            this.Manager.Comment("reaching state \'S1303\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp928, "trustHandle of CreateTrustedDomain, state S1303");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp929, "return of CreateTrustedDomain, state S1303");
            this.Manager.Comment("reaching state \'S1526\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp930;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp931;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp931 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp930);
            this.Manager.Comment("reaching state \'S1749\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp930, "trustDomainInfo of QueryTrustedDomainInfo, state S1749");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp931, "return of QueryTrustedDomainInfo, state S1749");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S378
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S378() {
            this.Manager.BeginTest("TestScenarioS14S378");
            this.Manager.Comment("reaching state \'S378\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S379\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S635\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp932;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp933;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp933 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp932);
            this.Manager.Comment("reaching state \'S858\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp932, "policyHandle of OpenPolicy2, state S858");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp933, "return of OpenPolicy2, state S858");
            this.Manager.Comment("reaching state \'S1081\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp934;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp935;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp935 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp934);
            this.Manager.Comment("reaching state \'S1304\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp934, "trustHandle of CreateTrustedDomain, state S1304");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp935, "return of CreateTrustedDomain, state S1304");
            this.Manager.Comment("reaching state \'S1527\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp936;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp937;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp937 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp936);
            this.Manager.Comment("reaching state \'S1750\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp936, "trustDomainInfo of QueryTrustedDomainInfo, state S1750");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp937, "return of QueryTrustedDomainInfo, state S1750");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S38() {
            this.Manager.BeginTest("TestScenarioS14S38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S465\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp938;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp939;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp939 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp938);
            this.Manager.Comment("reaching state \'S688\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp938, "policyHandle of OpenPolicy2, state S688");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp939, "return of OpenPolicy2, state S688");
            this.Manager.Comment("reaching state \'S911\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp940;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp941;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp941 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp940);
            this.Manager.Comment("reaching state \'S1134\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp940, "trustHandle of CreateTrustedDomain, state S1134");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp941, "return of CreateTrustedDomain, state S1134");
            this.Manager.Comment("reaching state \'S1357\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp942;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp943;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp943 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp942);
            this.Manager.Comment("reaching state \'S1580\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ImplementationSpecific" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp942, "trustDomainInfo of QueryTrustedDomainInfo, state S1580");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ImplementationSpecific, temp943, "return of QueryTrustedDomainInfo, state S1580");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S380
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S380() {
            this.Manager.BeginTest("TestScenarioS14S380");
            this.Manager.Comment("reaching state \'S380\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S381\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S636\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp944;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp945;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp945 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp944);
            this.Manager.Comment("reaching state \'S859\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp944, "policyHandle of OpenPolicy2, state S859");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp945, "return of OpenPolicy2, state S859");
            this.Manager.Comment("reaching state \'S1082\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp946;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp947;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp947 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp946);
            this.Manager.Comment("reaching state \'S1305\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp946, "trustHandle of CreateTrustedDomain, state S1305");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp947, "return of CreateTrustedDomain, state S1305");
            this.Manager.Comment("reaching state \'S1528\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp948;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp949;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",Invalid,DS_BEHA" +
                    "VIOR_WIN2003,out _)\'");
            temp949 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp948);
            this.Manager.Comment("reaching state \'S1751\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp948, "trustDomainInfo of QueryTrustedDomainInfo, state S1751");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp949, "return of QueryTrustedDomainInfo, state S1751");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S382
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S382() {
            this.Manager.BeginTest("TestScenarioS14S382");
            this.Manager.Comment("reaching state \'S382\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S383\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S637\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp950;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp951;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp951 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp950);
            this.Manager.Comment("reaching state \'S860\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp950, "policyHandle of OpenPolicy2, state S860");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp951, "return of OpenPolicy2, state S860");
            this.Manager.Comment("reaching state \'S1083\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp952;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp953;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp953 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp952);
            this.Manager.Comment("reaching state \'S1306\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp952, "trustHandle of CreateTrustedDomain, state S1306");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp953, "return of CreateTrustedDomain, state S1306");
            this.Manager.Comment("reaching state \'S1529\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp954;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp955;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainIn" +
                    "formationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp955 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp954);
            this.Manager.Comment("reaching state \'S1752\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp954, "trustDomainInfo of QueryTrustedDomainInfo, state S1752");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp955, "return of QueryTrustedDomainInfo, state S1752");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S384
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S384() {
            this.Manager.BeginTest("TestScenarioS14S384");
            this.Manager.Comment("reaching state \'S384\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S385\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S638\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp956;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp957;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp957 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp956);
            this.Manager.Comment("reaching state \'S861\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp956, "policyHandle of OpenPolicy2, state S861");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp957, "return of OpenPolicy2, state S861");
            this.Manager.Comment("reaching state \'S1084\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp958;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp959;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp959 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp958);
            this.Manager.Comment("reaching state \'S1307\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp958, "trustHandle of CreateTrustedDomain, state S1307");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp959, "return of CreateTrustedDomain, state S1307");
            this.Manager.Comment("reaching state \'S1530\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp960;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp961;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp961 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp960);
            this.Manager.Comment("reaching state \'S1753\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp960, "trustDomainInfo of QueryTrustedDomainInfo, state S1753");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp961, "return of QueryTrustedDomainInfo, state S1753");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S386
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S386() {
            this.Manager.BeginTest("TestScenarioS14S386");
            this.Manager.Comment("reaching state \'S386\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S387\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S639\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp962;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp963;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp963 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp962);
            this.Manager.Comment("reaching state \'S862\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp962, "policyHandle of OpenPolicy2, state S862");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp963, "return of OpenPolicy2, state S862");
            this.Manager.Comment("reaching state \'S1085\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp964;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp965;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp965 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp964);
            this.Manager.Comment("reaching state \'S1308\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp964, "trustHandle of CreateTrustedDomain, state S1308");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp965, "return of CreateTrustedDomain, state S1308");
            this.Manager.Comment("reaching state \'S1531\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp966;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp967;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainFu" +
                    "llInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp967 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp966);
            this.Manager.Comment("reaching state \'S1754\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp966, "trustDomainInfo of QueryTrustedDomainInfo, state S1754");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp967, "return of QueryTrustedDomainInfo, state S1754");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S388
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S388() {
            this.Manager.BeginTest("TestScenarioS14S388");
            this.Manager.Comment("reaching state \'S388\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S389\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S640\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp968;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp969;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp969 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp968);
            this.Manager.Comment("reaching state \'S863\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp968, "policyHandle of OpenPolicy2, state S863");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp969, "return of OpenPolicy2, state S863");
            this.Manager.Comment("reaching state \'S1086\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp970;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp971;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp971 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp970);
            this.Manager.Comment("reaching state \'S1309\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp970, "trustHandle of CreateTrustedDomain, state S1309");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp971, "return of CreateTrustedDomain, state S1309");
            this.Manager.Comment("reaching state \'S1532\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp972;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp973;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid\",TrustedDomainNa" +
                    "meInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp973 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp972);
            this.Manager.Comment("reaching state \'S1755\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp972, "trustDomainInfo of QueryTrustedDomainInfo, state S1755");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp973, "return of QueryTrustedDomainInfo, state S1755");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S390
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S390() {
            this.Manager.BeginTest("TestScenarioS14S390");
            this.Manager.Comment("reaching state \'S390\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S391\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S641\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp974;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp975;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp975 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp974);
            this.Manager.Comment("reaching state \'S864\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp974, "policyHandle of OpenPolicy2, state S864");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp975, "return of OpenPolicy2, state S864");
            this.Manager.Comment("reaching state \'S1087\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp976;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp977;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp977 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp976);
            this.Manager.Comment("reaching state \'S1310\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp976, "trustHandle of CreateTrustedDomain, state S1310");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp977, "return of CreateTrustedDomain, state S1310");
            this.Manager.Comment("reaching state \'S1533\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp978;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp979;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",TrustedDomainSu" +
                    "pportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp979 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp978);
            this.Manager.Comment("reaching state \'S1756\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp978, "trustDomainInfo of QueryTrustedDomainInfo, state S1756");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp979, "return of QueryTrustedDomainInfo, state S1756");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S392
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S392() {
            this.Manager.BeginTest("TestScenarioS14S392");
            this.Manager.Comment("reaching state \'S392\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S393\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S642\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp980;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp981;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp981 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp980);
            this.Manager.Comment("reaching state \'S865\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp980, "policyHandle of OpenPolicy2, state S865");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp981, "return of OpenPolicy2, state S865");
            this.Manager.Comment("reaching state \'S1088\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp982;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp983;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp983 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp982);
            this.Manager.Comment("reaching state \'S1311\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp982, "trustHandle of CreateTrustedDomain, state S1311");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp983, "return of CreateTrustedDomain, state S1311");
            this.Manager.Comment("reaching state \'S1534\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp984;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp985;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid\",Invalid,DS_BEHA" +
                    "VIOR_WIN2003,out _)\'");
            temp985 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp984);
            this.Manager.Comment("reaching state \'S1757\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp984, "trustDomainInfo of QueryTrustedDomainInfo, state S1757");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp985, "return of QueryTrustedDomainInfo, state S1757");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S394
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S394() {
            this.Manager.BeginTest("TestScenarioS14S394");
            this.Manager.Comment("reaching state \'S394\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S643\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp986;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp987;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp987 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp986);
            this.Manager.Comment("reaching state \'S866\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp986, "policyHandle of OpenPolicy2, state S866");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp987, "return of OpenPolicy2, state S866");
            this.Manager.Comment("reaching state \'S1089\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp988;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp989;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp989 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp988);
            this.Manager.Comment("reaching state \'S1312\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp988, "trustHandle of CreateTrustedDomain, state S1312");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp989, "return of CreateTrustedDomain, state S1312");
            this.Manager.Comment("reaching state \'S1535\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp990;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp991;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp991 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp990);
            this.Manager.Comment("reaching state \'S1758\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp990, "trustDomainInfo of QueryTrustedDomainInfo, state S1758");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp991, "return of QueryTrustedDomainInfo, state S1758");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S396
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S396() {
            this.Manager.BeginTest("TestScenarioS14S396");
            this.Manager.Comment("reaching state \'S396\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S397\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S644\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp992;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp993;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp993 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp992);
            this.Manager.Comment("reaching state \'S867\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp992, "policyHandle of OpenPolicy2, state S867");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp993, "return of OpenPolicy2, state S867");
            this.Manager.Comment("reaching state \'S1090\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp994;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp995;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp995 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp994);
            this.Manager.Comment("reaching state \'S1313\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp994, "trustHandle of CreateTrustedDomain, state S1313");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp995, "return of CreateTrustedDomain, state S1313");
            this.Manager.Comment("reaching state \'S1536\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp996;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp997;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",Invalid,DS_BEHAVI" +
                    "OR_WIN2003,out _)\'");
            temp997 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp996);
            this.Manager.Comment("reaching state \'S1759\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp996, "trustDomainInfo of QueryTrustedDomainInfo, state S1759");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp997, "return of QueryTrustedDomainInfo, state S1759");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S398
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S398() {
            this.Manager.BeginTest("TestScenarioS14S398");
            this.Manager.Comment("reaching state \'S398\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S399\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S645\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp998;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp999;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp999 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp998);
            this.Manager.Comment("reaching state \'S868\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp998, "policyHandle of OpenPolicy2, state S868");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp999, "return of OpenPolicy2, state S868");
            this.Manager.Comment("reaching state \'S1091\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1000;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1001;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1001 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1000);
            this.Manager.Comment("reaching state \'S1314\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1000, "trustHandle of CreateTrustedDomain, state S1314");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1001, "return of CreateTrustedDomain, state S1314");
            this.Manager.Comment("reaching state \'S1537\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1002;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1003;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedPosixOffse" +
                    "tInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1003 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1002);
            this.Manager.Comment("reaching state \'S1760\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1002, "trustDomainInfo of QueryTrustedDomainInfo, state S1760");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1003, "return of QueryTrustedDomainInfo, state S1760");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S4() {
            this.Manager.BeginTest("TestScenarioS14S4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S448\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1004;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1005;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1005 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1004);
            this.Manager.Comment("reaching state \'S671\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1004, "policyHandle of OpenPolicy2, state S671");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1005, "return of OpenPolicy2, state S671");
            this.Manager.Comment("reaching state \'S894\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1006;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1007;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1007 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1006);
            this.Manager.Comment("reaching state \'S1117\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1006, "trustHandle of CreateTrustedDomain, state S1117");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1007, "return of CreateTrustedDomain, state S1117");
            this.Manager.Comment("reaching state \'S1340\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1008;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1009;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainFull" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1009 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1008);
            this.Manager.Comment("reaching state \'S1563\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(0)), temp1008, "trustDomainInfo of QueryTrustedDomainInfo, state S1563");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1009, "return of QueryTrustedDomainInfo, state S1563");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S40
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S40() {
            this.Manager.BeginTest("TestScenarioS14S40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S466\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1010;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1011;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1011 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1010);
            this.Manager.Comment("reaching state \'S689\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1010, "policyHandle of OpenPolicy2, state S689");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1011, "return of OpenPolicy2, state S689");
            this.Manager.Comment("reaching state \'S912\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1012;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1013;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1013 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1012);
            this.Manager.Comment("reaching state \'S1135\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1012, "trustHandle of CreateTrustedDomain, state S1135");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1013, "return of CreateTrustedDomain, state S1135");
            this.Manager.Comment("reaching state \'S1358\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1014;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1015;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainAuth" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1015 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1014);
            this.Manager.Comment("reaching state \'S1581\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ImplementationSpecific" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1014, "trustDomainInfo of QueryTrustedDomainInfo, state S1581");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ImplementationSpecific, temp1015, "return of QueryTrustedDomainInfo, state S1581");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S400
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S400() {
            this.Manager.BeginTest("TestScenarioS14S400");
            this.Manager.Comment("reaching state \'S400\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S401\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S646\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1016;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1017;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1017 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1016);
            this.Manager.Comment("reaching state \'S869\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1016, "policyHandle of OpenPolicy2, state S869");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1017, "return of OpenPolicy2, state S869");
            this.Manager.Comment("reaching state \'S1092\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1018;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1019;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1019 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1018);
            this.Manager.Comment("reaching state \'S1315\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1018, "trustHandle of CreateTrustedDomain, state S1315");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1019, "return of CreateTrustedDomain, state S1315");
            this.Manager.Comment("reaching state \'S1538\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1020;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1021;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainName" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1021 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1020);
            this.Manager.Comment("reaching state \'S1761\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1020, "trustDomainInfo of QueryTrustedDomainInfo, state S1761");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1021, "return of QueryTrustedDomainInfo, state S1761");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S402
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S402() {
            this.Manager.BeginTest("TestScenarioS14S402");
            this.Manager.Comment("reaching state \'S402\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S403\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S647\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1022;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1023;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1023 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1022);
            this.Manager.Comment("reaching state \'S870\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1022, "policyHandle of OpenPolicy2, state S870");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1023, "return of OpenPolicy2, state S870");
            this.Manager.Comment("reaching state \'S1093\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1024;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1025;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1025 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1024);
            this.Manager.Comment("reaching state \'S1316\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1024, "trustHandle of CreateTrustedDomain, state S1316");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1025, "return of CreateTrustedDomain, state S1316");
            this.Manager.Comment("reaching state \'S1539\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1026;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1027;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainFull" +
                    "Information2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1027 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1026);
            this.Manager.Comment("reaching state \'S1762\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1026, "trustDomainInfo of QueryTrustedDomainInfo, state S1762");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1027, "return of QueryTrustedDomainInfo, state S1762");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S404
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S404() {
            this.Manager.BeginTest("TestScenarioS14S404");
            this.Manager.Comment("reaching state \'S404\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S405\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S648\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1028;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1029;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1029 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1028);
            this.Manager.Comment("reaching state \'S871\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1028, "policyHandle of OpenPolicy2, state S871");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1029, "return of OpenPolicy2, state S871");
            this.Manager.Comment("reaching state \'S1094\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1030;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1031;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1031 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1030);
            this.Manager.Comment("reaching state \'S1317\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1030, "trustHandle of CreateTrustedDomain, state S1317");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1031, "return of CreateTrustedDomain, state S1317");
            this.Manager.Comment("reaching state \'S1540\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1032;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1033;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1033 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1032);
            this.Manager.Comment("reaching state \'S1763\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1032, "trustDomainInfo of QueryTrustedDomainInfo, state S1763");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1033, "return of QueryTrustedDomainInfo, state S1763");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S406
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S406() {
            this.Manager.BeginTest("TestScenarioS14S406");
            this.Manager.Comment("reaching state \'S406\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S407\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S649\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1034;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1035;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1035 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1034);
            this.Manager.Comment("reaching state \'S872\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1034, "policyHandle of OpenPolicy2, state S872");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1035, "return of OpenPolicy2, state S872");
            this.Manager.Comment("reaching state \'S1095\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1036;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1037;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1037 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1036);
            this.Manager.Comment("reaching state \'S1318\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1036, "trustHandle of CreateTrustedDomain, state S1318");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1037, "return of CreateTrustedDomain, state S1318");
            this.Manager.Comment("reaching state \'S1541\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1038;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1039;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1039 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1038);
            this.Manager.Comment("reaching state \'S1764\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1038, "trustDomainInfo of QueryTrustedDomainInfo, state S1764");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1039, "return of QueryTrustedDomainInfo, state S1764");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S408
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S408() {
            this.Manager.BeginTest("TestScenarioS14S408");
            this.Manager.Comment("reaching state \'S408\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S409\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S650\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1040;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1041;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1041 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1040);
            this.Manager.Comment("reaching state \'S873\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1040, "policyHandle of OpenPolicy2, state S873");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1041, "return of OpenPolicy2, state S873");
            this.Manager.Comment("reaching state \'S1096\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1042;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1043;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1043 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1042);
            this.Manager.Comment("reaching state \'S1319\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1042, "trustHandle of CreateTrustedDomain, state S1319");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1043, "return of CreateTrustedDomain, state S1319");
            this.Manager.Comment("reaching state \'S1542\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1044;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1045;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedContro" +
                    "llersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1045 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1044);
            this.Manager.Comment("reaching state \'S1765\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1044, "trustDomainInfo of QueryTrustedDomainInfo, state S1765");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1045, "return of QueryTrustedDomainInfo, state S1765");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S410
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S410() {
            this.Manager.BeginTest("TestScenarioS14S410");
            this.Manager.Comment("reaching state \'S410\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S411\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S651\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1046;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1047;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1047 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1046);
            this.Manager.Comment("reaching state \'S874\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1046, "policyHandle of OpenPolicy2, state S874");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1047, "return of OpenPolicy2, state S874");
            this.Manager.Comment("reaching state \'S1097\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1048;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1049;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1049 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1048);
            this.Manager.Comment("reaching state \'S1320\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1048, "trustHandle of CreateTrustedDomain, state S1320");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1049, "return of CreateTrustedDomain, state S1320");
            this.Manager.Comment("reaching state \'S1543\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1050;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1051;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "AuthInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1051 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1050);
            this.Manager.Comment("reaching state \'S1766\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1050, "trustDomainInfo of QueryTrustedDomainInfo, state S1766");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1051, "return of QueryTrustedDomainInfo, state S1766");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S412
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S412() {
            this.Manager.BeginTest("TestScenarioS14S412");
            this.Manager.Comment("reaching state \'S412\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S413\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S652\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1052;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1053;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1053 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1052);
            this.Manager.Comment("reaching state \'S875\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1052, "policyHandle of OpenPolicy2, state S875");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1053, "return of OpenPolicy2, state S875");
            this.Manager.Comment("reaching state \'S1098\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1054;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1055;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1055 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1054);
            this.Manager.Comment("reaching state \'S1321\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1054, "trustHandle of CreateTrustedDomain, state S1321");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1055, "return of CreateTrustedDomain, state S1321");
            this.Manager.Comment("reaching state \'S1544\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1056;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1057;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1057 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1056);
            this.Manager.Comment("reaching state \'S1767\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1056, "trustDomainInfo of QueryTrustedDomainInfo, state S1767");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1057, "return of QueryTrustedDomainInfo, state S1767");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S414
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S414() {
            this.Manager.BeginTest("TestScenarioS14S414");
            this.Manager.Comment("reaching state \'S414\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S653\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1058;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1059;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1059 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1058);
            this.Manager.Comment("reaching state \'S876\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1058, "policyHandle of OpenPolicy2, state S876");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1059, "return of OpenPolicy2, state S876");
            this.Manager.Comment("reaching state \'S1099\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1060;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1061;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1061 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1060);
            this.Manager.Comment("reaching state \'S1322\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1060, "trustHandle of CreateTrustedDomain, state S1322");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1061, "return of CreateTrustedDomain, state S1322");
            this.Manager.Comment("reaching state \'S1545\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1062;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1063;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedPasswo" +
                    "rdInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1063 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1062);
            this.Manager.Comment("reaching state \'S1768\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1062, "trustDomainInfo of QueryTrustedDomainInfo, state S1768");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1063, "return of QueryTrustedDomainInfo, state S1768");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S416
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S416() {
            this.Manager.BeginTest("TestScenarioS14S416");
            this.Manager.Comment("reaching state \'S416\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S417\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S654\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1064;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1065;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1065 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1064);
            this.Manager.Comment("reaching state \'S877\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1064, "policyHandle of OpenPolicy2, state S877");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1065, "return of OpenPolicy2, state S877");
            this.Manager.Comment("reaching state \'S1100\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1066;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1067;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1067 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1066);
            this.Manager.Comment("reaching state \'S1323\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1066, "trustHandle of CreateTrustedDomain, state S1323");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1067, "return of CreateTrustedDomain, state S1323");
            this.Manager.Comment("reaching state \'S1546\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1068;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1069;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",Invalid,DS_BE" +
                    "HAVIOR_WIN2003,out _)\'");
            temp1069 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1068);
            this.Manager.Comment("reaching state \'S1769\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1068, "trustDomainInfo of QueryTrustedDomainInfo, state S1769");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1069, "return of QueryTrustedDomainInfo, state S1769");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S418
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S418() {
            this.Manager.BeginTest("TestScenarioS14S418");
            this.Manager.Comment("reaching state \'S418\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S419\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S655\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1070;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1071;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1071 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1070);
            this.Manager.Comment("reaching state \'S878\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1070, "policyHandle of OpenPolicy2, state S878");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1071, "return of OpenPolicy2, state S878");
            this.Manager.Comment("reaching state \'S1101\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1072;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1073;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1073 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1072);
            this.Manager.Comment("reaching state \'S1324\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1072, "trustHandle of CreateTrustedDomain, state S1324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1073, "return of CreateTrustedDomain, state S1324");
            this.Manager.Comment("reaching state \'S1547\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1074;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1075;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "NameInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1075 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1074);
            this.Manager.Comment("reaching state \'S1770\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1074, "trustDomainInfo of QueryTrustedDomainInfo, state S1770");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1075, "return of QueryTrustedDomainInfo, state S1770");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S42
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S42() {
            this.Manager.BeginTest("TestScenarioS14S42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S467\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1076;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1077;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1077 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1076);
            this.Manager.Comment("reaching state \'S690\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1076, "policyHandle of OpenPolicy2, state S690");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1077, "return of OpenPolicy2, state S690");
            this.Manager.Comment("reaching state \'S913\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1078;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1079;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1079 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1078);
            this.Manager.Comment("reaching state \'S1136\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1078, "trustHandle of CreateTrustedDomain, state S1136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1079, "return of CreateTrustedDomain, state S1136");
            this.Manager.Comment("reaching state \'S1359\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1080;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1081;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainNa" +
                    "meInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1081 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1080);
            this.Manager.Comment("reaching state \'S1582\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1080, "trustDomainInfo of QueryTrustedDomainInfo, state S1582");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1081, "return of QueryTrustedDomainInfo, state S1582");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S420
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S420() {
            this.Manager.BeginTest("TestScenarioS14S420");
            this.Manager.Comment("reaching state \'S420\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S421\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S656\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1082;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1083;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1083 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1082);
            this.Manager.Comment("reaching state \'S879\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1082, "policyHandle of OpenPolicy2, state S879");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1083, "return of OpenPolicy2, state S879");
            this.Manager.Comment("reaching state \'S1102\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1084;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1085;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1085 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1084);
            this.Manager.Comment("reaching state \'S1325\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1084, "trustHandle of CreateTrustedDomain, state S1325");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1085, "return of CreateTrustedDomain, state S1325");
            this.Manager.Comment("reaching state \'S1548\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1086;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1087;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1087 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1086);
            this.Manager.Comment("reaching state \'S1771\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1086, "trustDomainInfo of QueryTrustedDomainInfo, state S1771");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1087, "return of QueryTrustedDomainInfo, state S1771");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S422
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S422() {
            this.Manager.BeginTest("TestScenarioS14S422");
            this.Manager.Comment("reaching state \'S422\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S423\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S657\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1088;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1089;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1089 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1088);
            this.Manager.Comment("reaching state \'S880\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1088, "policyHandle of OpenPolicy2, state S880");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1089, "return of OpenPolicy2, state S880");
            this.Manager.Comment("reaching state \'S1103\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1090;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1091;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1091 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1090);
            this.Manager.Comment("reaching state \'S1326\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1090, "trustHandle of CreateTrustedDomain, state S1326");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1091, "return of CreateTrustedDomain, state S1326");
            this.Manager.Comment("reaching state \'S1549\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1092;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1093;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1093 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1092);
            this.Manager.Comment("reaching state \'S1772\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1092, "trustDomainInfo of QueryTrustedDomainInfo, state S1772");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1093, "return of QueryTrustedDomainInfo, state S1772");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S424
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S424() {
            this.Manager.BeginTest("TestScenarioS14S424");
            this.Manager.Comment("reaching state \'S424\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S425\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S658\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1094;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1095;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1095 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1094);
            this.Manager.Comment("reaching state \'S881\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1094, "policyHandle of OpenPolicy2, state S881");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1095, "return of OpenPolicy2, state S881");
            this.Manager.Comment("reaching state \'S1104\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1096;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1097;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1097 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1096);
            this.Manager.Comment("reaching state \'S1327\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1096, "trustHandle of CreateTrustedDomain, state S1327");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1097, "return of CreateTrustedDomain, state S1327");
            this.Manager.Comment("reaching state \'S1550\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1098;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1099;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",Invalid,DS_BEHAVI" +
                    "OR_WIN2003,out _)\'");
            temp1099 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1098);
            this.Manager.Comment("reaching state \'S1773\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1098, "trustDomainInfo of QueryTrustedDomainInfo, state S1773");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1099, "return of QueryTrustedDomainInfo, state S1773");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S426
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S426() {
            this.Manager.BeginTest("TestScenarioS14S426");
            this.Manager.Comment("reaching state \'S426\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S427\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S659\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1100;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1101;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1101 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1100);
            this.Manager.Comment("reaching state \'S882\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1100, "policyHandle of OpenPolicy2, state S882");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1101, "return of OpenPolicy2, state S882");
            this.Manager.Comment("reaching state \'S1105\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1102;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1103;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1103 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1102);
            this.Manager.Comment("reaching state \'S1328\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1102, "trustHandle of CreateTrustedDomain, state S1328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1103, "return of CreateTrustedDomain, state S1328");
            this.Manager.Comment("reaching state \'S1551\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1104;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1105;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "InformationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1105 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1104);
            this.Manager.Comment("reaching state \'S1774\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1104, "trustDomainInfo of QueryTrustedDomainInfo, state S1774");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1105, "return of QueryTrustedDomainInfo, state S1774");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S428
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S428() {
            this.Manager.BeginTest("TestScenarioS14S428");
            this.Manager.Comment("reaching state \'S428\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S429\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S660\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1106;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1107;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1107 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1106);
            this.Manager.Comment("reaching state \'S883\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1106, "policyHandle of OpenPolicy2, state S883");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1107, "return of OpenPolicy2, state S883");
            this.Manager.Comment("reaching state \'S1106\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1108;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1109;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1109 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1108);
            this.Manager.Comment("reaching state \'S1329\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1108, "trustHandle of CreateTrustedDomain, state S1329");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1109, "return of CreateTrustedDomain, state S1329");
            this.Manager.Comment("reaching state \'S1552\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1110;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1111;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",Invalid,DS_BE" +
                    "HAVIOR_WIN2003,out _)\'");
            temp1111 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1110);
            this.Manager.Comment("reaching state \'S1775\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1110, "trustDomainInfo of QueryTrustedDomainInfo, state S1775");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1111, "return of QueryTrustedDomainInfo, state S1775");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S430
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S430() {
            this.Manager.BeginTest("TestScenarioS14S430");
            this.Manager.Comment("reaching state \'S430\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S431\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S661\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1112;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1113;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1113 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1112);
            this.Manager.Comment("reaching state \'S884\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1112, "policyHandle of OpenPolicy2, state S884");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1113, "return of OpenPolicy2, state S884");
            this.Manager.Comment("reaching state \'S1107\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1114;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1115;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1115 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1114);
            this.Manager.Comment("reaching state \'S1330\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1114, "trustHandle of CreateTrustedDomain, state S1330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1115, "return of CreateTrustedDomain, state S1330");
            this.Manager.Comment("reaching state \'S1553\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1116;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1117;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedDomain" +
                    "FullInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1117 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1116);
            this.Manager.Comment("reaching state \'S1776\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1116, "trustDomainInfo of QueryTrustedDomainInfo, state S1776");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1117, "return of QueryTrustedDomainInfo, state S1776");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S432
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S432() {
            this.Manager.BeginTest("TestScenarioS14S432");
            this.Manager.Comment("reaching state \'S432\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S433\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S662\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1118;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1119;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1119 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1118);
            this.Manager.Comment("reaching state \'S885\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1118, "policyHandle of OpenPolicy2, state S885");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1119, "return of OpenPolicy2, state S885");
            this.Manager.Comment("reaching state \'S1108\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1120;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1121;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Invalid,True,Valid,4061069439,out _)\'");
            temp1121 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1120);
            this.Manager.Comment("reaching state \'S1331\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidSid\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1120, "trustHandle of CreateTrustedDomain, state S1331");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidSid, temp1121, "return of CreateTrustedDomain, state S1331");
            this.Manager.Comment("reaching state \'S1554\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1122;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1123;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1123 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1122);
            this.Manager.Comment("reaching state \'S1777\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1122, "trustDomainInfo of QueryTrustedDomainInfo, state S1777");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1123, "return of QueryTrustedDomainInfo, state S1777");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S434
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S434() {
            this.Manager.BeginTest("TestScenarioS14S434");
            this.Manager.Comment("reaching state \'S434\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S435\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S663\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1124;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1125;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1125 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1124);
            this.Manager.Comment("reaching state \'S886\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1124, "policyHandle of OpenPolicy2, state S886");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1125, "return of OpenPolicy2, state S886");
            this.Manager.Comment("reaching state \'S1109\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1126;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1127;
            this.Manager.Comment(@"executing step 'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""CurrentDomain"",TrustDomain_Sid=""CurrentDomainSid"",TrustDomain_NetBiosName=""CurrentDomainNetBios"",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)'");
            temp1127 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "CurrentDomain",
                            "CurrentDomainSid",
                            "CurrentDomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1126);
            this.Manager.Comment("reaching state \'S1332\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:CurrentDomainNotAllowed\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1126, "trustHandle of CreateTrustedDomain, state S1332");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.CurrentDomainNotAllowed, temp1127, "return of CreateTrustedDomain, state S1332");
            this.Manager.Comment("reaching state \'S1555\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1128;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1129;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainFull" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1129 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1128);
            this.Manager.Comment("reaching state \'S1778\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1128, "trustDomainInfo of QueryTrustedDomainInfo, state S1778");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1129, "return of QueryTrustedDomainInfo, state S1778");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S436
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S436() {
            this.Manager.BeginTest("TestScenarioS14S436");
            this.Manager.Comment("reaching state \'S436\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S437\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S664\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1130;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1131;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1131 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1130);
            this.Manager.Comment("reaching state \'S887\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1130, "policyHandle of OpenPolicy2, state S887");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1131, "return of OpenPolicy2, state S887");
            this.Manager.Comment("reaching state \'S1110\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1132;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1133;
            this.Manager.Comment(@"executing step 'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""CurrentDomain"",TrustDomain_Sid=""CurrentDomainSid"",TrustDomain_NetBiosName=""CurrentDomainNetBios"",TrustType=0,TrustDir=0,TrustAttr=0),Invalid,True,Valid,4061069439,out _)'");
            temp1133 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "CurrentDomain",
                            "CurrentDomainSid",
                            "CurrentDomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1132);
            this.Manager.Comment("reaching state \'S1333\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1132, "trustHandle of CreateTrustedDomain, state S1333");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1133, "return of CreateTrustedDomain, state S1333");
            this.Manager.Comment("reaching state \'S1556\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1134;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1135;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainFull" +
                    "Information2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1135 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1134);
            this.Manager.Comment("reaching state \'S1779\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1134, "trustDomainInfo of QueryTrustedDomainInfo, state S1779");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1135, "return of QueryTrustedDomainInfo, state S1779");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S438
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S438() {
            this.Manager.BeginTest("TestScenarioS14S438");
            this.Manager.Comment("reaching state \'S438\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S439\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S665\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1136;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1137;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1137 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1136);
            this.Manager.Comment("reaching state \'S888\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1136, "policyHandle of OpenPolicy2, state S888");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1137, "return of OpenPolicy2, state S888");
            this.Manager.Comment("reaching state \'S1111\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1138;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1139;
            this.Manager.Comment(@"executing step 'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""CurrentDomain"",TrustDomain_Sid=""CurrentDomainSid"",TrustDomain_NetBiosName=""CurrentDomainNetBios"",TrustType=0,TrustDir=0,TrustAttr=0),Invalid,True,Invalid,4061069439,out _)'");
            temp1139 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "CurrentDomain",
                            "CurrentDomainSid",
                            "CurrentDomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1138);
            this.Manager.Comment("reaching state \'S1334\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1138, "trustHandle of CreateTrustedDomain, state S1334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1139, "return of CreateTrustedDomain, state S1334");
            this.Manager.Comment("reaching state \'S1557\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1140;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1141;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainSupp" +
                    "ortedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1141 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1140);
            this.Manager.Comment("reaching state \'S1780\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1140, "trustDomainInfo of QueryTrustedDomainInfo, state S1780");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1141, "return of QueryTrustedDomainInfo, state S1780");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S44
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S44() {
            this.Manager.BeginTest("TestScenarioS14S44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S468\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1142;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1143;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1143 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1142);
            this.Manager.Comment("reaching state \'S691\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1142, "policyHandle of OpenPolicy2, state S691");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1143, "return of OpenPolicy2, state S691");
            this.Manager.Comment("reaching state \'S914\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1144;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1145;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1145 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1144);
            this.Manager.Comment("reaching state \'S1137\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1144, "trustHandle of CreateTrustedDomain, state S1137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1145, "return of CreateTrustedDomain, state S1137");
            this.Manager.Comment("reaching state \'S1360\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1146;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1147;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedPosixOff" +
                    "setInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1147 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1146);
            this.Manager.Comment("reaching state \'S1583\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1146, "trustDomainInfo of QueryTrustedDomainInfo, state S1583");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1147, "return of QueryTrustedDomainInfo, state S1583");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S440
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S440() {
            this.Manager.BeginTest("TestScenarioS14S440");
            this.Manager.Comment("reaching state \'S440\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S441\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S666\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1148;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1149;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1149 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1148);
            this.Manager.Comment("reaching state \'S889\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1148, "policyHandle of OpenPolicy2, state S889");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1149, "return of OpenPolicy2, state S889");
            this.Manager.Comment("reaching state \'S1112\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1150;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1151;
            this.Manager.Comment(@"executing step 'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDomainName=""CurrentDomain"",TrustDomain_Sid=""CurrentDomainSid"",TrustDomain_NetBiosName=""CurrentDomainNetBios"",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)'");
            temp1151 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "CurrentDomain",
                            "CurrentDomainSid",
                            "CurrentDomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1150);
            this.Manager.Comment("reaching state \'S1335\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1150, "trustHandle of CreateTrustedDomain, state S1335");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1151, "return of CreateTrustedDomain, state S1335");
            this.Manager.Comment("reaching state \'S1558\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1152;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1153;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedPosixOff" +
                    "setInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1153 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1152);
            this.Manager.Comment("reaching state \'S1781\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1152, "trustDomainInfo of QueryTrustedDomainInfo, state S1781");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1153, "return of QueryTrustedDomainInfo, state S1781");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S442
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S442() {
            this.Manager.BeginTest("TestScenarioS14S442");
            this.Manager.Comment("reaching state \'S442\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S443\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S667\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1154;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1155;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1155 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1154);
            this.Manager.Comment("reaching state \'S890\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1154, "policyHandle of OpenPolicy2, state S890");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1155, "return of OpenPolicy2, state S890");
            this.Manager.Comment("reaching state \'S1113\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1156;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1157;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1157 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1156);
            this.Manager.Comment("reaching state \'S1336\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1156, "trustHandle of CreateTrustedDomain, state S1336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1157, "return of CreateTrustedDomain, state S1336");
            this.Manager.Comment("reaching state \'S1559\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1158;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1159;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainSu" +
                    "pportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1159 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1158);
            this.Manager.Comment("reaching state \'S1782\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1158, "trustDomainInfo of QueryTrustedDomainInfo, state S1782");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1159, "return of QueryTrustedDomainInfo, state S1782");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S444
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S444() {
            this.Manager.BeginTest("TestScenarioS14S444");
            this.Manager.Comment("reaching state \'S444\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S445\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S668\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1160;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1161;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1161 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1160);
            this.Manager.Comment("reaching state \'S891\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1160, "policyHandle of OpenPolicy2, state S891");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1161, "return of OpenPolicy2, state S891");
            this.Manager.Comment("reaching state \'S1114\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1162;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1163;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Invalid,4061069439,out _)\'");
            temp1163 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(1)), 4061069439u, out temp1162);
            this.Manager.Comment("reaching state \'S1337\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Invalid]:InvalidParameter\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(1)), temp1162, "trustHandle of CreateTrustedDomain, state S1337");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidParameter, temp1163, "return of CreateTrustedDomain, state S1337");
            this.Manager.Comment("reaching state \'S1560\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1164;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1165;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Invalid,\"DomainSid10\",TrustedPasswo" +
                    "rdInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1165 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1164);
            this.Manager.Comment("reaching state \'S1783\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1164, "trustDomainInfo of QueryTrustedDomainInfo, state S1783");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1165, "return of QueryTrustedDomainInfo, state S1783");
            TestScenarioS14S1784();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S46
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S46() {
            this.Manager.BeginTest("TestScenarioS14S46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S469\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1166;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1167;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1167 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1166);
            this.Manager.Comment("reaching state \'S692\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1166, "policyHandle of OpenPolicy2, state S692");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1167, "return of OpenPolicy2, state S692");
            this.Manager.Comment("reaching state \'S915\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1168;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1169;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1169 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1168);
            this.Manager.Comment("reaching state \'S1138\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1168, "trustHandle of CreateTrustedDomain, state S1138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1169, "return of CreateTrustedDomain, state S1138");
            this.Manager.Comment("reaching state \'S1361\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1170;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1171;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1171 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1170);
            this.Manager.Comment("reaching state \'S1584\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1170, "trustDomainInfo of QueryTrustedDomainInfo, state S1584");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1171, "return of QueryTrustedDomainInfo, state S1584");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S48
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S48() {
            this.Manager.BeginTest("TestScenarioS14S48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S470\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1172;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1173;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1173 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1172);
            this.Manager.Comment("reaching state \'S693\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1172, "policyHandle of OpenPolicy2, state S693");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1173, "return of OpenPolicy2, state S693");
            this.Manager.Comment("reaching state \'S916\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1174;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1175;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1175 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1174);
            this.Manager.Comment("reaching state \'S1139\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1174, "trustHandle of CreateTrustedDomain, state S1139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1175, "return of CreateTrustedDomain, state S1139");
            this.Manager.Comment("reaching state \'S1362\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1176;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1177;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1177 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1176);
            this.Manager.Comment("reaching state \'S1585\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1176, "trustDomainInfo of QueryTrustedDomainInfo, state S1585");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1177, "return of QueryTrustedDomainInfo, state S1585");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S50
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S50() {
            this.Manager.BeginTest("TestScenarioS14S50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S471\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1178;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1179;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1179 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1178);
            this.Manager.Comment("reaching state \'S694\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1178, "policyHandle of OpenPolicy2, state S694");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1179, "return of OpenPolicy2, state S694");
            this.Manager.Comment("reaching state \'S917\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1180;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1181;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1181 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1180);
            this.Manager.Comment("reaching state \'S1140\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1180, "trustHandle of CreateTrustedDomain, state S1140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1181, "return of CreateTrustedDomain, state S1140");
            this.Manager.Comment("reaching state \'S1363\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1182;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1183;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformation2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1183 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1182);
            this.Manager.Comment("reaching state \'S1586\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1182, "trustDomainInfo of QueryTrustedDomainInfo, state S1586");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1183, "return of QueryTrustedDomainInfo, state S1586");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S52
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S52() {
            this.Manager.BeginTest("TestScenarioS14S52");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S472\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1184;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1185;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1185 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1184);
            this.Manager.Comment("reaching state \'S695\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1184, "policyHandle of OpenPolicy2, state S695");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1185, "return of OpenPolicy2, state S695");
            this.Manager.Comment("reaching state \'S918\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1186;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1187;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1187 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1186);
            this.Manager.Comment("reaching state \'S1141\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1186, "trustHandle of CreateTrustedDomain, state S1141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1187, "return of CreateTrustedDomain, state S1141");
            this.Manager.Comment("reaching state \'S1364\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1188;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1189;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainSu" +
                    "pportedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1189 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1188);
            this.Manager.Comment("reaching state \'S1587\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:NoSuchDomain\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1188, "trustDomainInfo of QueryTrustedDomainInfo, state S1587");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.NoSuchDomain, temp1189, "return of QueryTrustedDomainInfo, state S1587");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S54
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S54() {
            this.Manager.BeginTest("TestScenarioS14S54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S473\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1190;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1191;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1191 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1190);
            this.Manager.Comment("reaching state \'S696\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1190, "policyHandle of OpenPolicy2, state S696");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1191, "return of OpenPolicy2, state S696");
            this.Manager.Comment("reaching state \'S919\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1192;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1193;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1193 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1192);
            this.Manager.Comment("reaching state \'S1142\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1192, "trustHandle of CreateTrustedDomain, state S1142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1193, "return of CreateTrustedDomain, state S1142");
            this.Manager.Comment("reaching state \'S1365\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1194;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1195;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainSupp" +
                    "ortedEncryptionTypes,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1195 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainSupportedEncryptionTypes, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1194);
            this.Manager.Comment("reaching state \'S1588\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1194, "trustDomainInfo of QueryTrustedDomainInfo, state S1588");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1195, "return of QueryTrustedDomainInfo, state S1588");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S56
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S56() {
            this.Manager.BeginTest("TestScenarioS14S56");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S474\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1196;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1197;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1197 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1196);
            this.Manager.Comment("reaching state \'S697\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1196, "policyHandle of OpenPolicy2, state S697");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1197, "return of OpenPolicy2, state S697");
            this.Manager.Comment("reaching state \'S920\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1198;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1199;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1199 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1198);
            this.Manager.Comment("reaching state \'S1143\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1198, "trustHandle of CreateTrustedDomain, state S1143");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1199, "return of CreateTrustedDomain, state S1143");
            this.Manager.Comment("reaching state \'S1366\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1200;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1201;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainFull" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1201 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1200);
            this.Manager.Comment("reaching state \'S1589\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1200, "trustDomainInfo of QueryTrustedDomainInfo, state S1589");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1201, "return of QueryTrustedDomainInfo, state S1589");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S58
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S58() {
            this.Manager.BeginTest("TestScenarioS14S58");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S475\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1202;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1203;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1203 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1202);
            this.Manager.Comment("reaching state \'S698\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1202, "policyHandle of OpenPolicy2, state S698");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1203, "return of OpenPolicy2, state S698");
            this.Manager.Comment("reaching state \'S921\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1204;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1205;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1205 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1204);
            this.Manager.Comment("reaching state \'S1144\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1204, "trustHandle of CreateTrustedDomain, state S1144");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1205, "return of CreateTrustedDomain, state S1144");
            this.Manager.Comment("reaching state \'S1367\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1206;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1207;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1207 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1206);
            this.Manager.Comment("reaching state \'S1590\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1206, "trustDomainInfo of QueryTrustedDomainInfo, state S1590");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1207, "return of QueryTrustedDomainInfo, state S1590");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S6
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S6() {
            this.Manager.BeginTest("TestScenarioS14S6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S449\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1208;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1209;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1209 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1208);
            this.Manager.Comment("reaching state \'S672\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1208, "policyHandle of OpenPolicy2, state S672");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1209, "return of OpenPolicy2, state S672");
            this.Manager.Comment("reaching state \'S895\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1210;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1211;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1211 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1210);
            this.Manager.Comment("reaching state \'S1118\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1210, "trustHandle of CreateTrustedDomain, state S1118");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1211, "return of CreateTrustedDomain, state S1118");
            this.Manager.Comment("reaching state \'S1341\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1212;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1213;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1213 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1212);
            this.Manager.Comment("reaching state \'S1564\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(0)), temp1212, "trustDomainInfo of QueryTrustedDomainInfo, state S1564");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1213, "return of QueryTrustedDomainInfo, state S1564");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S60
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S60() {
            this.Manager.BeginTest("TestScenarioS14S60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S476\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1214;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1215;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1215 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1214);
            this.Manager.Comment("reaching state \'S699\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1214, "policyHandle of OpenPolicy2, state S699");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1215, "return of OpenPolicy2, state S699");
            this.Manager.Comment("reaching state \'S922\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1216;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1217;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1217 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1216);
            this.Manager.Comment("reaching state \'S1145\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1216, "trustHandle of CreateTrustedDomain, state S1145");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1217, "return of CreateTrustedDomain, state S1145");
            this.Manager.Comment("reaching state \'S1368\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1218;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1219;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedPosixOffse" +
                    "tInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1219 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1218);
            this.Manager.Comment("reaching state \'S1591\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1218, "trustDomainInfo of QueryTrustedDomainInfo, state S1591");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1219, "return of QueryTrustedDomainInfo, state S1591");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S62
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S62() {
            this.Manager.BeginTest("TestScenarioS14S62");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S477\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1220;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1221;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1221 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1220);
            this.Manager.Comment("reaching state \'S700\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1220, "policyHandle of OpenPolicy2, state S700");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1221, "return of OpenPolicy2, state S700");
            this.Manager.Comment("reaching state \'S923\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1222;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1223;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1223 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1222);
            this.Manager.Comment("reaching state \'S1146\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1222, "trustHandle of CreateTrustedDomain, state S1146");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1223, "return of CreateTrustedDomain, state S1146");
            this.Manager.Comment("reaching state \'S1369\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1224;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1225;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainName" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1225 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass)(1)), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1224);
            this.Manager.Comment("reaching state \'S1592\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1224, "trustDomainInfo of QueryTrustedDomainInfo, state S1592");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1225, "return of QueryTrustedDomainInfo, state S1592");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S64
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S64() {
            this.Manager.BeginTest("TestScenarioS14S64");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S478\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1226;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1227;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1227 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1226);
            this.Manager.Comment("reaching state \'S701\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1226, "policyHandle of OpenPolicy2, state S701");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1227, "return of OpenPolicy2, state S701");
            this.Manager.Comment("reaching state \'S924\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1228;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1229;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1229 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1228);
            this.Manager.Comment("reaching state \'S1147\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1228, "trustHandle of CreateTrustedDomain, state S1147");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1229, "return of CreateTrustedDomain, state S1147");
            this.Manager.Comment("reaching state \'S1370\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1230;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1231;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainFull" +
                    "Information2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1231 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformation2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1230);
            this.Manager.Comment("reaching state \'S1593\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:InvalidHandle\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1230, "trustDomainInfo of QueryTrustedDomainInfo, state S1593");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.InvalidHandle, temp1231, "return of QueryTrustedDomainInfo, state S1593");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S66
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S66() {
            this.Manager.BeginTest("TestScenarioS14S66");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S479\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1232;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1233;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1233 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1232);
            this.Manager.Comment("reaching state \'S702\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1232, "policyHandle of OpenPolicy2, state S702");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1233, "return of OpenPolicy2, state S702");
            this.Manager.Comment("reaching state \'S925\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1234;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1235;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1235 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1234);
            this.Manager.Comment("reaching state \'S1148\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1234, "trustHandle of CreateTrustedDomain, state S1148");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1235, "return of CreateTrustedDomain, state S1148");
            this.Manager.Comment("reaching state \'S1371\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1236;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1237;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Invalid,\"DomainSid10\",TrustedPosixO" +
                    "ffsetInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1237 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(1)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1236);
            this.Manager.Comment("reaching state \'S1594\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1236, "trustDomainInfo of QueryTrustedDomainInfo, state S1594");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1237, "return of QueryTrustedDomainInfo, state S1594");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S68
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S68() {
            this.Manager.BeginTest("TestScenarioS14S68");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S480\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1238;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1239;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1239 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1238);
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1238, "policyHandle of OpenPolicy2, state S703");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1239, "return of OpenPolicy2, state S703");
            this.Manager.Comment("reaching state \'S926\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1240;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1241;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1241 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1240);
            this.Manager.Comment("reaching state \'S1149\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1240, "trustHandle of CreateTrustedDomain, state S1149");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1241, "return of CreateTrustedDomain, state S1149");
            this.Manager.Comment("reaching state \'S1372\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1242;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1243;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",Invalid,DS_BEHAVI" +
                    "OR_WIN2003,out _)\'");
            temp1243 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1242);
            this.Manager.Comment("reaching state \'S1595\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1242, "trustDomainInfo of QueryTrustedDomainInfo, state S1595");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1243, "return of QueryTrustedDomainInfo, state S1595");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S70
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S70() {
            this.Manager.BeginTest("TestScenarioS14S70");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S481\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1244;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1245;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1245 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1244);
            this.Manager.Comment("reaching state \'S704\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1244, "policyHandle of OpenPolicy2, state S704");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1245, "return of OpenPolicy2, state S704");
            this.Manager.Comment("reaching state \'S927\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1246;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1247;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1247 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1246);
            this.Manager.Comment("reaching state \'S1150\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1246, "trustHandle of CreateTrustedDomain, state S1150");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1247, "return of CreateTrustedDomain, state S1150");
            this.Manager.Comment("reaching state \'S1373\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1248;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1249;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainAuth" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1249 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1248);
            this.Manager.Comment("reaching state \'S1596\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1248, "trustDomainInfo of QueryTrustedDomainInfo, state S1596");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1249, "return of QueryTrustedDomainInfo, state S1596");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S72
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S72() {
            this.Manager.BeginTest("TestScenarioS14S72");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S482\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1250;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1251;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1251 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1250);
            this.Manager.Comment("reaching state \'S705\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1250, "policyHandle of OpenPolicy2, state S705");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1251, "return of OpenPolicy2, state S705");
            this.Manager.Comment("reaching state \'S928\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1252;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1253;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1253 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1252);
            this.Manager.Comment("reaching state \'S1151\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1252, "trustHandle of CreateTrustedDomain, state S1151");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1253, "return of CreateTrustedDomain, state S1151");
            this.Manager.Comment("reaching state \'S1374\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1254;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1255;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainAuth" +
                    "InformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1255 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1254);
            this.Manager.Comment("reaching state \'S1597\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1254, "trustDomainInfo of QueryTrustedDomainInfo, state S1597");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1255, "return of QueryTrustedDomainInfo, state S1597");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S74
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S74() {
            this.Manager.BeginTest("TestScenarioS14S74");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S483\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1256;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1257;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1257 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1256);
            this.Manager.Comment("reaching state \'S706\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1256, "policyHandle of OpenPolicy2, state S706");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1257, "return of OpenPolicy2, state S706");
            this.Manager.Comment("reaching state \'S929\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1258;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1259;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1259 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1258);
            this.Manager.Comment("reaching state \'S1152\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1258, "trustHandle of CreateTrustedDomain, state S1152");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1259, "return of CreateTrustedDomain, state S1152");
            this.Manager.Comment("reaching state \'S1375\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1260;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1261;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationEx2Internal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1261 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx2Internal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1260);
            this.Manager.Comment("reaching state \'S1598\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1260, "trustDomainInfo of QueryTrustedDomainInfo, state S1598");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1261, "return of QueryTrustedDomainInfo, state S1598");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S76
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S76() {
            this.Manager.BeginTest("TestScenarioS14S76");
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S484\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1262;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1263;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1263 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1262);
            this.Manager.Comment("reaching state \'S707\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1262, "policyHandle of OpenPolicy2, state S707");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1263, "return of OpenPolicy2, state S707");
            this.Manager.Comment("reaching state \'S930\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1264;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1265;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1265 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1264);
            this.Manager.Comment("reaching state \'S1153\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1264, "trustHandle of CreateTrustedDomain, state S1153");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1265, "return of CreateTrustedDomain, state S1153");
            this.Manager.Comment("reaching state \'S1376\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1266;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1267;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedPassword" +
                    "Information,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1267 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPasswordInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1266);
            this.Manager.Comment("reaching state \'S1599\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1266, "trustDomainInfo of QueryTrustedDomainInfo, state S1599");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1267, "return of QueryTrustedDomainInfo, state S1599");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S78
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S78() {
            this.Manager.BeginTest("TestScenarioS14S78");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S485\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1268;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1269;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1269 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1268);
            this.Manager.Comment("reaching state \'S708\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1268, "policyHandle of OpenPolicy2, state S708");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1269, "return of OpenPolicy2, state S708");
            this.Manager.Comment("reaching state \'S931\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1270;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1271;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1271 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1270);
            this.Manager.Comment("reaching state \'S1154\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1270, "trustHandle of CreateTrustedDomain, state S1154");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1271, "return of CreateTrustedDomain, state S1154");
            this.Manager.Comment("reaching state \'S1377\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1272;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1273;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainFull" +
                    "InformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1273 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1272);
            this.Manager.Comment("reaching state \'S1600\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1272, "trustDomainInfo of QueryTrustedDomainInfo, state S1600");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1273, "return of QueryTrustedDomainInfo, state S1600");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S8() {
            this.Manager.BeginTest("TestScenarioS14S8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S450\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1274;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1275;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1275 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1274);
            this.Manager.Comment("reaching state \'S673\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1274, "policyHandle of OpenPolicy2, state S673");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1275, "return of OpenPolicy2, state S673");
            this.Manager.Comment("reaching state \'S896\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1276;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1277;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1277 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1276);
            this.Manager.Comment("reaching state \'S1119\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1276, "trustHandle of CreateTrustedDomain, state S1119");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1277, "return of CreateTrustedDomain, state S1119");
            this.Manager.Comment("reaching state \'S1342\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1278;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1279;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid\",TrustedPosixOffse" +
                    "tInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1279 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedPosixOffsetInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1278);
            this.Manager.Comment("reaching state \'S1565\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(0)), temp1278, "trustDomainInfo of QueryTrustedDomainInfo, state S1565");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1279, "return of QueryTrustedDomainInfo, state S1565");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S80
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S80() {
            this.Manager.BeginTest("TestScenarioS14S80");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S486\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1280;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1281;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1281 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1280);
            this.Manager.Comment("reaching state \'S709\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1280, "policyHandle of OpenPolicy2, state S709");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1281, "return of OpenPolicy2, state S709");
            this.Manager.Comment("reaching state \'S932\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1282;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1283;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1283 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1282);
            this.Manager.Comment("reaching state \'S1155\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1282, "trustHandle of CreateTrustedDomain, state S1155");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1283, "return of CreateTrustedDomain, state S1155");
            this.Manager.Comment("reaching state \'S1378\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1284;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1285;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1285 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1284);
            this.Manager.Comment("reaching state \'S1601\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1284, "trustDomainInfo of QueryTrustedDomainInfo, state S1601");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1285, "return of QueryTrustedDomainInfo, state S1601");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S82
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S82() {
            this.Manager.BeginTest("TestScenarioS14S82");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S487\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1286;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1287;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1287 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1286);
            this.Manager.Comment("reaching state \'S710\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1286, "policyHandle of OpenPolicy2, state S710");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1287, "return of OpenPolicy2, state S710");
            this.Manager.Comment("reaching state \'S933\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1288;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1289;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1289 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1288);
            this.Manager.Comment("reaching state \'S1156\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1288, "trustHandle of CreateTrustedDomain, state S1156");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1289, "return of CreateTrustedDomain, state S1156");
            this.Manager.Comment("reaching state \'S1379\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1290;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1291;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedDomainInfo" +
                    "rmationBasic,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1291 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationBasic, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1290);
            this.Manager.Comment("reaching state \'S1602\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1290, "trustDomainInfo of QueryTrustedDomainInfo, state S1602");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1291, "return of QueryTrustedDomainInfo, state S1602");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S84
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S84() {
            this.Manager.BeginTest("TestScenarioS14S84");
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S488\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1292;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1293;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1293 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1292);
            this.Manager.Comment("reaching state \'S711\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1292, "policyHandle of OpenPolicy2, state S711");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1293, "return of OpenPolicy2, state S711");
            this.Manager.Comment("reaching state \'S934\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1294;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1295;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1295 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1294);
            this.Manager.Comment("reaching state \'S1157\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1294, "trustHandle of CreateTrustedDomain, state S1157");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1295, "return of CreateTrustedDomain, state S1157");
            this.Manager.Comment("reaching state \'S1380\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1296;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1297;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid\",TrustedController" +
                    "sInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1297 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1296);
            this.Manager.Comment("reaching state \'S1603\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1296, "trustDomainInfo of QueryTrustedDomainInfo, state S1603");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1297, "return of QueryTrustedDomainInfo, state S1603");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S86
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S86() {
            this.Manager.BeginTest("TestScenarioS14S86");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S489\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1298;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1299;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1299 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1298);
            this.Manager.Comment("reaching state \'S712\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1298, "policyHandle of OpenPolicy2, state S712");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1299, "return of OpenPolicy2, state S712");
            this.Manager.Comment("reaching state \'S935\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1300;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1301;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1301 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1300);
            this.Manager.Comment("reaching state \'S1158\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1300, "trustHandle of CreateTrustedDomain, state S1158");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1301, "return of CreateTrustedDomain, state S1158");
            this.Manager.Comment("reaching state \'S1381\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1302;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1303;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedControll" +
                    "ersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1303 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1302);
            this.Manager.Comment("reaching state \'S1604\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1302, "trustDomainInfo of QueryTrustedDomainInfo, state S1604");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1303, "return of QueryTrustedDomainInfo, state S1604");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S88
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S88() {
            this.Manager.BeginTest("TestScenarioS14S88");
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S490\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1304;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1305;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1305 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1304);
            this.Manager.Comment("reaching state \'S713\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1304, "policyHandle of OpenPolicy2, state S713");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1305, "return of OpenPolicy2, state S713");
            this.Manager.Comment("reaching state \'S936\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1306;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1307;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1307 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1306);
            this.Manager.Comment("reaching state \'S1159\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1306, "trustHandle of CreateTrustedDomain, state S1159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1307, "return of CreateTrustedDomain, state S1159");
            this.Manager.Comment("reaching state \'S1382\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1308;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1309;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainFu" +
                    "llInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1309 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainFullInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1308);
            this.Manager.Comment("reaching state \'S1605\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1308, "trustDomainInfo of QueryTrustedDomainInfo, state S1605");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1309, "return of QueryTrustedDomainInfo, state S1605");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S90
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S90() {
            this.Manager.BeginTest("TestScenarioS14S90");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S491\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1310;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1311;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1311 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1310);
            this.Manager.Comment("reaching state \'S714\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1310, "policyHandle of OpenPolicy2, state S714");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1311, "return of OpenPolicy2, state S714");
            this.Manager.Comment("reaching state \'S937\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1312;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1313;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1313 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1312);
            this.Manager.Comment("reaching state \'S1160\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1312, "trustHandle of CreateTrustedDomain, state S1160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1313, "return of CreateTrustedDomain, state S1160");
            this.Manager.Comment("reaching state \'S1383\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1314;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1315;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainAu" +
                    "thInformationInternal,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1315 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformationInternal, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1314);
            this.Manager.Comment("reaching state \'S1606\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1314, "trustDomainInfo of QueryTrustedDomainInfo, state S1606");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1315, "return of QueryTrustedDomainInfo, state S1606");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S92
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S92() {
            this.Manager.BeginTest("TestScenarioS14S92");
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S492\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1316;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1317;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1317 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1316);
            this.Manager.Comment("reaching state \'S715\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1316, "policyHandle of OpenPolicy2, state S715");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1317, "return of OpenPolicy2, state S715");
            this.Manager.Comment("reaching state \'S938\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1318;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1319;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1319 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1318);
            this.Manager.Comment("reaching state \'S1161\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1318, "trustHandle of CreateTrustedDomain, state S1161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1319, "return of CreateTrustedDomain, state S1161");
            this.Manager.Comment("reaching state \'S1384\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1320;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1321;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedDomainAu" +
                    "thInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1321 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainAuthInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1320);
            this.Manager.Comment("reaching state \'S1607\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1320, "trustDomainInfo of QueryTrustedDomainInfo, state S1607");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1321, "return of QueryTrustedDomainInfo, state S1607");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S94
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S94() {
            this.Manager.BeginTest("TestScenarioS14S94");
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S493\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1322;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1323;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1323 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1322);
            this.Manager.Comment("reaching state \'S716\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1322, "policyHandle of OpenPolicy2, state S716");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1323, "return of OpenPolicy2, state S716");
            this.Manager.Comment("reaching state \'S939\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1324;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1325;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1325 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1324);
            this.Manager.Comment("reaching state \'S1162\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1324, "trustHandle of CreateTrustedDomain, state S1162");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1325, "return of CreateTrustedDomain, state S1162");
            this.Manager.Comment("reaching state \'S1385\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1326;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1327;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",TrustedControll" +
                    "ersInformation,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1327 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedControllersInformation, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1326);
            this.Manager.Comment("reaching state \'S1608\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1326, "trustDomainInfo of QueryTrustedDomainInfo, state S1608");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1327, "return of QueryTrustedDomainInfo, state S1608");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S96
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S96() {
            this.Manager.BeginTest("TestScenarioS14S96");
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S494\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1328;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1329;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1329 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1328);
            this.Manager.Comment("reaching state \'S717\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1328, "policyHandle of OpenPolicy2, state S717");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1329, "return of OpenPolicy2, state S717");
            this.Manager.Comment("reaching state \'S940\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1330;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1331;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1331 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1330);
            this.Manager.Comment("reaching state \'S1163\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1330, "trustHandle of CreateTrustedDomain, state S1163");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1331, "return of CreateTrustedDomain, state S1163");
            this.Manager.Comment("reaching state \'S1386\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1332;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1333;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(2,Valid,\"DomainSid10\",TrustedDomainIn" +
                    "formationEx,DS_BEHAVIOR_WIN2003,out _)\'");
            temp1333 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(2, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.TrustedDomainInformationEx, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1332);
            this.Manager.Comment("reaching state \'S1609\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1332, "trustDomainInfo of QueryTrustedDomainInfo, state S1609");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1333, "return of QueryTrustedDomainInfo, state S1609");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S98
        [TestCategory("PDC")]
        [TestCategory("DomainWin2008R2")]
        [TestCategory("ForestWin2008R2")]
        [TestCategory("MS-LSAD")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void LSAD_TestScenarioS14S98() {
            this.Manager.BeginTest("TestScenarioS14S98");
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("executing step \'call Initialize(PrimaryDomainController,Disable,Windows2k8,2,True" +
                    ")\'");
            this.ILsadManagedAdapterInstance.Initialize(Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ProtocolServerConfig.PrimaryDomainController, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.AnonymousAccess)(0)), Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Server.Windows2k8, 2, true);
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return Initialize\'");
            this.Manager.Comment("reaching state \'S495\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1334;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1335;
            this.Manager.Comment("executing step \'call OpenPolicy2(Null,3507,out _)\'");
            temp1335 = this.ILsadManagedAdapterInstance.OpenPolicy2(((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.RootDirectory)(0)), 3507u, out temp1334);
            this.Manager.Comment("reaching state \'S718\'");
            this.Manager.Comment("checking step \'return OpenPolicy2/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1334, "policyHandle of OpenPolicy2, state S718");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1335, "return of OpenPolicy2, state S718");
            this.Manager.Comment("reaching state \'S941\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle temp1336;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1337;
            this.Manager.Comment("executing step \'call CreateTrustedDomain(1,TRUSTED_DOMAIN_INFORMATION_EX(TrustDom" +
                    "ainName=\"Domain\",TrustDomain_Sid=\"DomainSid\",TrustDomain_NetBiosName=\"DomainNetB" +
                    "ios\",TrustType=0,TrustDir=0,TrustAttr=0),Valid,True,Valid,4061069439,out _)\'");
            temp1337 = this.ILsadManagedAdapterInstance.CreateTrustedDomain(1, this.Make<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TRUSTED_DOMAIN_INFORMATION_EX>(new string[] {
                            "TrustDomainName",
                            "TrustDomain_Sid",
                            "TrustDomain_NetBiosName",
                            "TrustType",
                            "TrustDir",
                            "TrustAttr"}, new object[] {
                            "Domain",
                            "DomainSid",
                            "DomainNetBios",
                            0u,
                            0u,
                            0u}), ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), true, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ValidString)(0)), 4061069439u, out temp1336);
            this.Manager.Comment("reaching state \'S1164\'");
            this.Manager.Comment("checking step \'return CreateTrustedDomain/[out Valid]:Success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.Handle)(0)), temp1336, "trustHandle of CreateTrustedDomain, state S1164");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus)(0)), temp1337, "return of CreateTrustedDomain, state S1164");
            this.Manager.Comment("reaching state \'S1387\'");
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation temp1338;
            Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus temp1339;
            this.Manager.Comment("executing step \'call QueryTrustedDomainInfo(1,Valid,\"DomainSid10\",Invalid,DS_BEHA" +
                    "VIOR_WIN2003,out _)\'");
            temp1339 = this.ILsadManagedAdapterInstance.QueryTrustedDomainInfo(1, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.DomainSid)(0)), "DomainSid10", Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedInformationClass.Invalid, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ForestFunctionalLevel)(1)), out temp1338);
            this.Manager.Comment("reaching state \'S1610\'");
            this.Manager.Comment("checking step \'return QueryTrustedDomainInfo/[out Invalid]:ErrorUnKnown\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation>(this.Manager, ((Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.TrustedDomainInformation)(1)), temp1338, "trustDomainInfo of QueryTrustedDomainInfo, state S1610");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus>(this.Manager, Microsoft.Protocols.TestSuites.ActiveDirectory.Lsad.ErrorStatus.ErrorUnKnown, temp1339, "return of QueryTrustedDomainInfo, state S1610");
            TestScenarioS14S1785();
            this.Manager.EndTest();
        }
        #endregion
    }
}
