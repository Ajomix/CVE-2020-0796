// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Security.Cryptography;

namespace Microsoft.Protocols.TestTools.StackSdk.FileAccessService
{
    /// <summary>
    /// the utility for file service. 
    /// </summary>
    public static class FileServiceUtils
    {
        #region Fields

        /// <summary>
        /// get a bytes array that contains the SSKeyHash.<para/>
        /// which is defined in TD: 2.2.2.5 Session Key Protection Hash<para/>
        /// The SSKeyHash is a well-known constant array.
        /// </summary>
        internal static byte[] SSKeyHash
        {
            get
            {
                return new byte[]{
                    0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
                    0x20, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
                    0x72, 0x65, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x55,
                    0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x79, 0x07,
                    0x6e, 0x28, 0x2e, 0x69, 0x88, 0x10, 0xb3, 0xdb,
                    0x01, 0x55, 0x72, 0xfb, 0x74, 0x14, 0xfb, 0xc4,
                    0xc5, 0xaf, 0x3b, 0x41, 0x65, 0x32, 0x17, 0xba,
                    0xa3, 0x29, 0x08, 0xc1, 0xde, 0x16, 0x61, 0x7e,
                    0x66, 0x98, 0xa4, 0x0b, 0xfe, 0x06, 0x83, 0x53,
                    0x4d, 0x05, 0xdf, 0x6d, 0xa7, 0x51, 0x10, 0x73,
                    0xc5, 0x50, 0xdc, 0x5e, 0xf8, 0x21, 0x46, 0xaa,
                    0x96, 0x14, 0x33, 0xd7, 0x52, 0xeb, 0xaf, 0x1f,
                    0xbf, 0x36, 0x6c, 0xfc, 0xb7, 0x1d, 0x21, 0x19,
                    0x81, 0xd0, 0x6b, 0xfa, 0x77, 0xad, 0xbe, 0x18,
                    0x78, 0xcf, 0x10, 0xbd, 0xd8, 0x78, 0xf7, 0xd3,
                    0xc6, 0xdf, 0x43, 0x32, 0x19, 0xd3, 0x9b, 0xa8,
                    0x4d, 0x9e, 0xaa, 0x41, 0xaf, 0xcb, 0xc6, 0xb9,
                    0x34, 0xe7, 0x48, 0x25, 0xd4, 0x88, 0xc4, 0x51,
                    0x60, 0x38, 0xd9, 0x62, 0xe8, 0x8d, 0x5b, 0x83,
                    0x92, 0x7f, 0xb5, 0x0e, 0x1c, 0x2d, 0x06, 0x91,
                    0xc3, 0x75, 0xb3, 0xcc, 0xf8, 0xf7, 0x92, 0x91,
                    0x0b, 0x3d, 0xa1, 0x10, 0x5b, 0xd5, 0x0f, 0xa8,
                    0x3f, 0x5d, 0x13, 0x83, 0x0a, 0x6b, 0x72, 0x93,
                    0x14, 0x59, 0xd5, 0xab, 0xde, 0x26, 0x15, 0x6d,
                    0x60, 0x67, 0x71, 0x06, 0x6e, 0x3d, 0x0d, 0xa7,
                    0xcb, 0x70, 0xe9, 0x08, 0x5c, 0x99, 0xfa, 0x0a,
                    0x5f, 0x3d, 0x44, 0xa3, 0x8b, 0xc0, 0x8d, 0xda,
                    0xe2, 0x68, 0xd0, 0x0d, 0xcd, 0x7f, 0x3d, 0xf8,
                    0x73, 0x7e, 0x35, 0x7f, 0x07, 0x02, 0x0a, 0xb5,
                    0xe9, 0xb7, 0x87, 0xfb, 0xa1, 0xbf, 0xcb, 0x32,
                    0x31, 0x66, 0x09, 0x48, 0x88, 0xcc, 0x18, 0xa3,
                    0xb2, 0x1f, 0x1f, 0x1b, 0x90, 0x4e, 0xd7, 0xe1
                };
            }
        }

        #endregion

        #region Utilities

        /// <summary>
        /// if SMB_COM_TREE_CONNECT_ANDX request/response required the Extended Signature.
        /// client/server must protect the session key by invoking this method.<para/>
        /// refer to Session Key Protection in TD: 3.3.5.5 Receiving an SMB_COM_NT_CREATE_ANDX Request and
        /// 3.2.5.4 Receiving an SMB_COM_TREE_CONNECT_ANDX Response
        /// </summary>
        /// <param name="userSessionKey">
        /// a bytes array that specifies the 16-byte user session key.
        /// </param>
        /// <returns>
        /// return the protected session key. if userSessionKey is null, return null.
        /// </returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security.Cryptography", "CA5350:MD5CannotBeUsed")]
        public static byte[] ProtectSessionKey(byte[] userSessionKey)
        {
            // Take the 16-byte user session key.
            byte[] sessionKey = userSessionKey;

            if (userSessionKey == null)
            {
                return null;
            }
            // If this is an LM authentication where the session key is only 8 bytes,
            // then zero extend it to 16 bytes.
            else if (userSessionKey.Length < 16)
            {
                sessionKey = ArrayUtility.ConcatenateArrays<byte>(
                    userSessionKey, new byte[16 - userSessionKey.Length]);
            }
            // If the session key is more than 16 bytes, then use only the first 16 bytes.
            else if (userSessionKey.Length > 16)
            {
                sessionKey = ArrayUtility.SubArray<byte>(
                    userSessionKey, userSessionKey.Length - 16);
            }

            // Calculate the one-way hash
            return new HMACMD5(sessionKey).ComputeHash(SSKeyHash);
        }

        #endregion
    }
}
