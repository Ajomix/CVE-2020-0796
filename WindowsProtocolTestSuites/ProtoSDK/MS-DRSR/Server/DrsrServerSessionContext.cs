// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;

using Microsoft.Protocols.TestTools.StackSdk.Networking.Rpce;

namespace Microsoft.Protocols.TestTools.StackSdk.ActiveDirectory.Drsr
{
    /// <summary>
    /// A class contains context information of a DRSR session
    /// </summary>
    public class DrsrServerSessionContext
    {
        #region Variables

        private DrsrRpcInterfaceType interfaceType;
        private DrsrRequestStub requestReceived;
        private RpceServerSessionContext underlyingSessionContext;
        private Collection<IntPtr> drsHandles;
        private byte[] password;

        #endregion

        #region Properties

        /// <summary>
        /// The interface type of the last received request.
        /// </summary>
        public DrsrRpcInterfaceType InterfaceType
        {
            get
            {
                return interfaceType;
            }
        }


        /// <summary>
        /// The corresponding RPCE layer session context
        /// </summary>
        [CLSCompliant(false)]
        public RpceServerSessionContext RpceLayerSessionContext
        {
            get
            {
                return underlyingSessionContext;
            }
            internal set
            {
                underlyingSessionContext = value;
            }
        }


        /// <summary>
        /// The collection of DrsHandle.
        /// </summary>
        public Collection<IntPtr> DrsHandles
        {
            get
            {
                return drsHandles;
            }
        }


        /// <summary>
        ///  Password generated by processing an DsaPrepareScript request.
        /// </summary>
        public byte[] Password
        {
            get
            {
                return password;
            }
        }

        #endregion

        /// <summary>
        /// Initialize a DRSR server session context class.
        /// </summary>
        internal DrsrServerSessionContext()
        {
            drsHandles = new Collection<IntPtr>();
            password = new byte[0];
        }


        /// <summary>
        ///  Update the session context after receiving a request from the client.
        /// </summary>
        /// <param name="currentInterfaceType">Rpc interface type.</param>     
        /// <param name="messageReceived">The DRSR request received</param>
        internal void UpdateSessionContextWithMessageReceived(
            DrsrRpcInterfaceType currentInterfaceType,
            DrsrRequestStub messageReceived)
        {
            requestReceived = messageReceived;
            interfaceType = currentInterfaceType;
        }


        /// <summary>
        ///  Update the session context before sending a response to the client.
        /// </summary>
        /// <param name="currentInterfaceType">Rpc interface type.</param> 
        /// <param name="messageToSend">The DRSR response to be sent</param> 
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        internal void UpdateSessionContextWithMessageSent(
            DrsrRpcInterfaceType currentInterfaceType,
            DrsrResponseStub messageToSend)
        {
            if (currentInterfaceType == DrsrRpcInterfaceType.DRSUAPI)
            {
                switch ((DrsuapiMethodOpnums)messageToSend.Opnum)
                {
                    case DrsuapiMethodOpnums.DrsBind:
                        DrsBindRequest bindRequest = requestReceived as DrsBindRequest;
                        DrsBindResponse bindResponse = messageToSend as DrsBindResponse;
                        if (bindRequest != null && bindResponse != null)
                        {
                            if (bindResponse.Status == 0)
                            {
                                drsHandles.Add(bindResponse.drsHandle);
                            }
                        }
                        break;

                    case DrsuapiMethodOpnums.DrsUnbind:
                        DrsUnbindRequest unbindRequest = requestReceived as DrsUnbindRequest;
                        DrsUnbindResponse unbindResponse = messageToSend as DrsUnbindResponse;
                        if (unbindRequest != null && unbindResponse != null)
                        {
                            if (unbindResponse.Status == 0 && drsHandles.Contains(unbindRequest.drsHandle.Value))
                            {
                                drsHandles.Remove(unbindRequest.drsHandle.Value);
                            }
                        }
                        break;

                    default:
                        break;
                }
            }
            else if (currentInterfaceType == DrsrRpcInterfaceType.DSAOP)
            {
                switch ((DsaopMethodOpnums)messageToSend.Opnum)
                {
                    case DsaopMethodOpnums.DsaPrepareScript:
                        DsaPrepareScriptRequest PrepareRequest = requestReceived as DsaPrepareScriptRequest;
                        DsaPrepareScriptResponse PrepareResponse = messageToSend as DsaPrepareScriptResponse;
                        if (PrepareRequest != null && PrepareResponse != null)
                        {
                            if (PrepareResponse.Status == 0)
                            {
                                password = PrepareResponse.outMessage.Value.V1.pbPassword;
                            }
                        }
                        break;

                    case DsaopMethodOpnums.DsaExecuteScript:
                        DsaExecuteScriptRequest executeRequest = requestReceived as DsaExecuteScriptRequest;
                        DsaExecuteScriptResponse executeResponse = messageToSend as DsaExecuteScriptResponse;
                        if (executeRequest != null && executeResponse != null)
                        {
                            if (executeResponse.Status == 0)
                            {
                                password = new byte[0];
                            }
                        }
                        break;
                }
            }
        }
    }
}
